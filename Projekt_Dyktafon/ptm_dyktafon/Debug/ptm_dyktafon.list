
ptm_dyktafon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e198  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080251f0  080251f0  0004001c  2**0
                  CONTENTS
  4 .ARM          00000008  080251f0  080251f0  000351f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080251f8  080251f8  0004001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080251f8  080251f8  000351f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080251fc  080251fc  000351fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08025200  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  20000020  0802521c  00040020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  0802521c  0004073c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed3d  00000000  00000000  0004004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fa6  00000000  00000000  0004ed89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  00050d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002182a  00000000  00000000  00051d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b7c7  00000000  00000000  00073532  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000cf1ea  00000000  00000000  0007ecf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014dee3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ec8  00000000  00000000  0014df60  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000043a0  00000000  00000000  0014ee28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007040 	.word	0x08007040

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08007040 	.word	0x08007040

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295
 8000974:	f04f 30ff 	movne.w	r0, #4294967295
 8000978:	f000 b972 	b.w	8000c60 <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9e08      	ldr	r6, [sp, #32]
 800099a:	4604      	mov	r4, r0
 800099c:	4688      	mov	r8, r1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14b      	bne.n	8000a3a <__udivmoddi4+0xa6>
 80009a2:	428a      	cmp	r2, r1
 80009a4:	4615      	mov	r5, r2
 80009a6:	d967      	bls.n	8000a78 <__udivmoddi4+0xe4>
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	b14a      	cbz	r2, 80009c2 <__udivmoddi4+0x2e>
 80009ae:	f1c2 0720 	rsb	r7, r2, #32
 80009b2:	fa01 f302 	lsl.w	r3, r1, r2
 80009b6:	fa20 f707 	lsr.w	r7, r0, r7
 80009ba:	4095      	lsls	r5, r2
 80009bc:	ea47 0803 	orr.w	r8, r7, r3
 80009c0:	4094      	lsls	r4, r2
 80009c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009c6:	0c23      	lsrs	r3, r4, #16
 80009c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80009cc:	fa1f fc85 	uxth.w	ip, r5
 80009d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80009d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d8:	fb07 f10c 	mul.w	r1, r7, ip
 80009dc:	4299      	cmp	r1, r3
 80009de:	d909      	bls.n	80009f4 <__udivmoddi4+0x60>
 80009e0:	18eb      	adds	r3, r5, r3
 80009e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80009e6:	f080 811b 	bcs.w	8000c20 <__udivmoddi4+0x28c>
 80009ea:	4299      	cmp	r1, r3
 80009ec:	f240 8118 	bls.w	8000c20 <__udivmoddi4+0x28c>
 80009f0:	3f02      	subs	r7, #2
 80009f2:	442b      	add	r3, r5
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80009fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a08:	45a4      	cmp	ip, r4
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x8c>
 8000a0c:	192c      	adds	r4, r5, r4
 8000a0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a12:	f080 8107 	bcs.w	8000c24 <__udivmoddi4+0x290>
 8000a16:	45a4      	cmp	ip, r4
 8000a18:	f240 8104 	bls.w	8000c24 <__udivmoddi4+0x290>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	442c      	add	r4, r5
 8000a20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a24:	eba4 040c 	sub.w	r4, r4, ip
 8000a28:	2700      	movs	r7, #0
 8000a2a:	b11e      	cbz	r6, 8000a34 <__udivmoddi4+0xa0>
 8000a2c:	40d4      	lsrs	r4, r2
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e9c6 4300 	strd	r4, r3, [r6]
 8000a34:	4639      	mov	r1, r7
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d909      	bls.n	8000a52 <__udivmoddi4+0xbe>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	f000 80eb 	beq.w	8000c1a <__udivmoddi4+0x286>
 8000a44:	2700      	movs	r7, #0
 8000a46:	e9c6 0100 	strd	r0, r1, [r6]
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	4639      	mov	r1, r7
 8000a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a52:	fab3 f783 	clz	r7, r3
 8000a56:	2f00      	cmp	r7, #0
 8000a58:	d147      	bne.n	8000aea <__udivmoddi4+0x156>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d302      	bcc.n	8000a64 <__udivmoddi4+0xd0>
 8000a5e:	4282      	cmp	r2, r0
 8000a60:	f200 80fa 	bhi.w	8000c58 <__udivmoddi4+0x2c4>
 8000a64:	1a84      	subs	r4, r0, r2
 8000a66:	eb61 0303 	sbc.w	r3, r1, r3
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d0e0      	beq.n	8000a34 <__udivmoddi4+0xa0>
 8000a72:	e9c6 4800 	strd	r4, r8, [r6]
 8000a76:	e7dd      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000a78:	b902      	cbnz	r2, 8000a7c <__udivmoddi4+0xe8>
 8000a7a:	deff      	udf	#255	; 0xff
 8000a7c:	fab2 f282 	clz	r2, r2
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	f040 808f 	bne.w	8000ba4 <__udivmoddi4+0x210>
 8000a86:	1b49      	subs	r1, r1, r5
 8000a88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8c:	fa1f f885 	uxth.w	r8, r5
 8000a90:	2701      	movs	r7, #1
 8000a92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000a96:	0c23      	lsrs	r3, r4, #16
 8000a98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000a9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa0:	fb08 f10c 	mul.w	r1, r8, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0x124>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0x122>
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	f200 80cd 	bhi.w	8000c50 <__udivmoddi4+0x2bc>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1a59      	subs	r1, r3, r1
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ac4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x14c>
 8000ad0:	192c      	adds	r4, r5, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x14a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80b6 	bhi.w	8000c4a <__udivmoddi4+0x2b6>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e79f      	b.n	8000a2a <__udivmoddi4+0x96>
 8000aea:	f1c7 0c20 	rsb	ip, r7, #32
 8000aee:	40bb      	lsls	r3, r7
 8000af0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000af4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000af8:	fa01 f407 	lsl.w	r4, r1, r7
 8000afc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b08:	4325      	orrs	r5, r4
 8000b0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b0e:	0c2c      	lsrs	r4, r5, #16
 8000b10:	fb08 3319 	mls	r3, r8, r9, r3
 8000b14:	fa1f fa8e 	uxth.w	sl, lr
 8000b18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b20:	429c      	cmp	r4, r3
 8000b22:	fa02 f207 	lsl.w	r2, r2, r7
 8000b26:	fa00 f107 	lsl.w	r1, r0, r7
 8000b2a:	d90b      	bls.n	8000b44 <__udivmoddi4+0x1b0>
 8000b2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b34:	f080 8087 	bcs.w	8000c46 <__udivmoddi4+0x2b2>
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	f240 8084 	bls.w	8000c46 <__udivmoddi4+0x2b2>
 8000b3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b42:	4473      	add	r3, lr
 8000b44:	1b1b      	subs	r3, r3, r4
 8000b46:	b2ad      	uxth	r5, r5
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b58:	45a2      	cmp	sl, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x1da>
 8000b5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b64:	d26b      	bcs.n	8000c3e <__udivmoddi4+0x2aa>
 8000b66:	45a2      	cmp	sl, r4
 8000b68:	d969      	bls.n	8000c3e <__udivmoddi4+0x2aa>
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	4474      	add	r4, lr
 8000b6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b72:	fba0 8902 	umull	r8, r9, r0, r2
 8000b76:	eba4 040a 	sub.w	r4, r4, sl
 8000b7a:	454c      	cmp	r4, r9
 8000b7c:	46c2      	mov	sl, r8
 8000b7e:	464b      	mov	r3, r9
 8000b80:	d354      	bcc.n	8000c2c <__udivmoddi4+0x298>
 8000b82:	d051      	beq.n	8000c28 <__udivmoddi4+0x294>
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d069      	beq.n	8000c5c <__udivmoddi4+0x2c8>
 8000b88:	ebb1 050a 	subs.w	r5, r1, sl
 8000b8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000b90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000b94:	40fd      	lsrs	r5, r7
 8000b96:	40fc      	lsrs	r4, r7
 8000b98:	ea4c 0505 	orr.w	r5, ip, r5
 8000b9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	e747      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000ba4:	f1c2 0320 	rsb	r3, r2, #32
 8000ba8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bac:	4095      	lsls	r5, r2
 8000bae:	fa01 f002 	lsl.w	r0, r1, r2
 8000bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	4338      	orrs	r0, r7
 8000bbc:	0c01      	lsrs	r1, r0, #16
 8000bbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000bc2:	fa1f f885 	uxth.w	r8, r5
 8000bc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000bca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bce:	fb07 f308 	mul.w	r3, r7, r8
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd8:	d907      	bls.n	8000bea <__udivmoddi4+0x256>
 8000bda:	1869      	adds	r1, r5, r1
 8000bdc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000be0:	d22f      	bcs.n	8000c42 <__udivmoddi4+0x2ae>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d92d      	bls.n	8000c42 <__udivmoddi4+0x2ae>
 8000be6:	3f02      	subs	r7, #2
 8000be8:	4429      	add	r1, r5
 8000bea:	1acb      	subs	r3, r1, r3
 8000bec:	b281      	uxth	r1, r0
 8000bee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfa:	fb00 f308 	mul.w	r3, r0, r8
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x27e>
 8000c02:	1869      	adds	r1, r5, r1
 8000c04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c08:	d217      	bcs.n	8000c3a <__udivmoddi4+0x2a6>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d915      	bls.n	8000c3a <__udivmoddi4+0x2a6>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	4429      	add	r1, r5
 8000c12:	1ac9      	subs	r1, r1, r3
 8000c14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c18:	e73b      	b.n	8000a92 <__udivmoddi4+0xfe>
 8000c1a:	4637      	mov	r7, r6
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e709      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000c20:	4607      	mov	r7, r0
 8000c22:	e6e7      	b.n	80009f4 <__udivmoddi4+0x60>
 8000c24:	4618      	mov	r0, r3
 8000c26:	e6fb      	b.n	8000a20 <__udivmoddi4+0x8c>
 8000c28:	4541      	cmp	r1, r8
 8000c2a:	d2ab      	bcs.n	8000b84 <__udivmoddi4+0x1f0>
 8000c2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c30:	eb69 020e 	sbc.w	r2, r9, lr
 8000c34:	3801      	subs	r0, #1
 8000c36:	4613      	mov	r3, r2
 8000c38:	e7a4      	b.n	8000b84 <__udivmoddi4+0x1f0>
 8000c3a:	4660      	mov	r0, ip
 8000c3c:	e7e9      	b.n	8000c12 <__udivmoddi4+0x27e>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	e795      	b.n	8000b6e <__udivmoddi4+0x1da>
 8000c42:	4667      	mov	r7, ip
 8000c44:	e7d1      	b.n	8000bea <__udivmoddi4+0x256>
 8000c46:	4681      	mov	r9, r0
 8000c48:	e77c      	b.n	8000b44 <__udivmoddi4+0x1b0>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	442c      	add	r4, r5
 8000c4e:	e747      	b.n	8000ae0 <__udivmoddi4+0x14c>
 8000c50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c54:	442b      	add	r3, r5
 8000c56:	e72f      	b.n	8000ab8 <__udivmoddi4+0x124>
 8000c58:	4638      	mov	r0, r7
 8000c5a:	e708      	b.n	8000a6e <__udivmoddi4+0xda>
 8000c5c:	4637      	mov	r7, r6
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0xa0>

08000c60 <__aeabi_idiv0>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DESELECT>:

static
inline void DESELECT(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c8a:	bf00      	nop
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <xmit_spi+0x30>)
 8000c8e:	f005 f9eb 	bl	8006068 <HAL_SPI_GetState>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d1f9      	bne.n	8000c8c <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8000c98:	1df9      	adds	r1, r7, #7
 8000c9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <xmit_spi+0x30>)
 8000ca2:	f004 ff0b 	bl	8005abc <HAL_SPI_Transmit>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000069c 	.word	0x2000069c

08000cb4 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000cba:	23ff      	movs	r3, #255	; 0xff
 8000cbc:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000cc2:	bf00      	nop
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <rcvr_spi+0x38>)
 8000cc6:	f005 f9cf 	bl	8006068 <HAL_SPI_GetState>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d1f9      	bne.n	8000cc4 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000cd0:	1dba      	adds	r2, r7, #6
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <rcvr_spi+0x38>)
 8000cde:	f005 f821 	bl	8005d24 <HAL_SPI_TransmitReceive>

	return Data;
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000069c 	.word	0x2000069c

08000cf0 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000cf8:	f7ff ffdc 	bl	8000cb4 <rcvr_spi>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	701a      	strb	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <wait_ready+0x34>)
 8000d14:	2232      	movs	r2, #50	; 0x32
 8000d16:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000d18:	f7ff ffcc 	bl	8000cb4 <rcvr_spi>
	do
		res = rcvr_spi();
 8000d1c:	f7ff ffca 	bl	8000cb4 <rcvr_spi>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d004      	beq.n	8000d34 <wait_ready+0x28>
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <wait_ready+0x34>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f3      	bne.n	8000d1c <wait_ready+0x10>

	return res;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000003d 	.word	0x2000003d

08000d44 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000d4a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d4e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000d50:	f7ff ff8f 	bl	8000c72 <DESELECT>

	for (i = 0; i < 10; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e005      	b.n	8000d66 <power_on+0x22>
		xmit_spi(0xFF);
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	f7ff ff90 	bl	8000c80 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3301      	adds	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	d9f6      	bls.n	8000d5a <power_on+0x16>

	SELECT();
 8000d6c:	f7ff ff7a 	bl	8000c64 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000d84:	2395      	movs	r3, #149	; 0x95
 8000d86:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e00b      	b.n	8000da6 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	f107 0210 	add.w	r2, r7, #16
 8000d94:	4413      	add	r3, r2
 8000d96:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff70 	bl	8000c80 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d9f0      	bls.n	8000d8e <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000dac:	e002      	b.n	8000db4 <power_on+0x70>
		Count--;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000db4:	f7ff ff7e 	bl	8000cb4 <rcvr_spi>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d002      	beq.n	8000dc4 <power_on+0x80>
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f4      	bne.n	8000dae <power_on+0x6a>

	DESELECT();
 8000dc4:	f7ff ff55 	bl	8000c72 <DESELECT>
	xmit_spi(0XFF);
 8000dc8:	20ff      	movs	r0, #255	; 0xff
 8000dca:	f7ff ff59 	bl	8000c80 <xmit_spi>

	PowerFlag = 1;
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <power_on+0x98>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000003f 	.word	0x2000003f

08000de0 <power_off>:

static
void power_off(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <power_off+0x14>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	2000003f 	.word	0x2000003f

08000df8 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <chk_power+0x14>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000003f 	.word	0x2000003f

08000e10 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <rcvr_datablock+0x68>)
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000e20:	f7ff ff48 	bl	8000cb4 <rcvr_spi>
 8000e24:	4603      	mov	r3, r0
 8000e26:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	2bff      	cmp	r3, #255	; 0xff
 8000e2c:	d104      	bne.n	8000e38 <rcvr_datablock+0x28>
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <rcvr_datablock+0x68>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f3      	bne.n	8000e20 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e3c:	d001      	beq.n	8000e42 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e016      	b.n	8000e70 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff51 	bl	8000cf0 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff4b 	bl	8000cf0 <rcvr_spi_m>
	} while (btr -= 2);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1ed      	bne.n	8000e42 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000e66:	f7ff ff25 	bl	8000cb4 <rcvr_spi>
	rcvr_spi();
 8000e6a:	f7ff ff23 	bl	8000cb4 <rcvr_spi>

	return TRUE; /* Return with success */
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000003c 	.word	0x2000003c

08000e7c <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000e8c:	f7ff ff3e 	bl	8000d0c <wait_ready>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d001      	beq.n	8000e9a <xmit_datablock+0x1e>
		return FALSE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e040      	b.n	8000f1c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff feef 	bl	8000c80 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2bfd      	cmp	r3, #253	; 0xfd
 8000ea6:	d031      	beq.n	8000f0c <xmit_datablock+0x90>
		wc = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fee3 	bl	8000c80 <xmit_spi>
			xmit_spi(*buff++);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fedc 	bl	8000c80 <xmit_spi>
		} while (--wc);
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	73bb      	strb	r3, [r7, #14]
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1eb      	bne.n	8000eac <xmit_datablock+0x30>

		rcvr_spi();
 8000ed4:	f7ff feee 	bl	8000cb4 <rcvr_spi>
		rcvr_spi();
 8000ed8:	f7ff feec 	bl	8000cb4 <rcvr_spi>

		while (i <= 64) {
 8000edc:	e00b      	b.n	8000ef6 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000ede:	f7ff fee9 	bl	8000cb4 <rcvr_spi>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d006      	beq.n	8000efe <xmit_datablock+0x82>
				break;
			i++;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b40      	cmp	r3, #64	; 0x40
 8000efa:	d9f0      	bls.n	8000ede <xmit_datablock+0x62>
 8000efc:	e000      	b.n	8000f00 <xmit_datablock+0x84>
				break;
 8000efe:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000f00:	bf00      	nop
 8000f02:	f7ff fed7 	bl	8000cb4 <rcvr_spi>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0fa      	beq.n	8000f02 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d101      	bne.n	8000f1a <xmit_datablock+0x9e>
		return TRUE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <xmit_datablock+0xa0>
	else
		return FALSE;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000f30:	f7ff feec 	bl	8000d0c <wait_ready>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d001      	beq.n	8000f3e <send_cmd+0x1a>
		return 0xFF;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	e040      	b.n	8000fc0 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe9d 	bl	8000c80 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	0e1b      	lsrs	r3, r3, #24
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe97 	bl	8000c80 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	0c1b      	lsrs	r3, r3, #16
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe91 	bl	8000c80 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe8b 	bl	8000c80 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fe86 	bl	8000c80 <xmit_spi>
	n = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b40      	cmp	r3, #64	; 0x40
 8000f7c:	d101      	bne.n	8000f82 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000f7e:	2395      	movs	r3, #149	; 0x95
 8000f80:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b48      	cmp	r3, #72	; 0x48
 8000f86:	d101      	bne.n	8000f8c <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000f88:	2387      	movs	r3, #135	; 0x87
 8000f8a:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe76 	bl	8000c80 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b4c      	cmp	r3, #76	; 0x4c
 8000f98:	d101      	bne.n	8000f9e <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000f9a:	f7ff fe8b 	bl	8000cb4 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000fa2:	f7ff fe87 	bl	8000cb4 <rcvr_spi>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da05      	bge.n	8000fbe <send_cmd+0x9a>
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f1      	bne.n	8000fa2 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0d5      	b.n	8001188 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <disk_initialize+0x1c8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8000fea:	4b69      	ldr	r3, [pc, #420]	; (8001190 <disk_initialize+0x1c8>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	e0ca      	b.n	8001188 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000ff2:	f7ff fea7 	bl	8000d44 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8000ff6:	f7ff fe35 	bl	8000c64 <SELECT>
	ty = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000ffe:	2100      	movs	r1, #0
 8001000:	2040      	movs	r0, #64	; 0x40
 8001002:	f7ff ff8f 	bl	8000f24 <send_cmd>
 8001006:	4603      	mov	r3, r0
 8001008:	2b01      	cmp	r3, #1
 800100a:	f040 80a5 	bne.w	8001158 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800100e:	4b61      	ldr	r3, [pc, #388]	; (8001194 <disk_initialize+0x1cc>)
 8001010:	2264      	movs	r2, #100	; 0x64
 8001012:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001014:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001018:	2048      	movs	r0, #72	; 0x48
 800101a:	f7ff ff83 	bl	8000f24 <send_cmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d158      	bne.n	80010d6 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e00c      	b.n	8001044 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800102a:	7bfc      	ldrb	r4, [r7, #15]
 800102c:	f7ff fe42 	bl	8000cb4 <rcvr_spi>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4423      	add	r3, r4
 800103a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	3301      	adds	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d9ef      	bls.n	800102a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 8083 	bne.w	8001158 <disk_initialize+0x190>
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	2baa      	cmp	r3, #170	; 0xaa
 8001056:	d17f      	bne.n	8001158 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001058:	2100      	movs	r1, #0
 800105a:	2077      	movs	r0, #119	; 0x77
 800105c:	f7ff ff62 	bl	8000f24 <send_cmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d807      	bhi.n	8001076 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800106a:	2069      	movs	r0, #105	; 0x69
 800106c:	f7ff ff5a 	bl	8000f24 <send_cmd>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <disk_initialize+0x1cc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1eb      	bne.n	8001058 <disk_initialize+0x90>
 8001080:	e000      	b.n	8001084 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001082:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <disk_initialize+0x1cc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d064      	beq.n	8001158 <disk_initialize+0x190>
 800108e:	2100      	movs	r1, #0
 8001090:	207a      	movs	r0, #122	; 0x7a
 8001092:	f7ff ff47 	bl	8000f24 <send_cmd>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d15d      	bne.n	8001158 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e00c      	b.n	80010bc <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80010a2:	7bfc      	ldrb	r4, [r7, #15]
 80010a4:	f7ff fe06 	bl	8000cb4 <rcvr_spi>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4423      	add	r3, r4
 80010b2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d9ef      	bls.n	80010a2 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80010c2:	7a3b      	ldrb	r3, [r7, #8]
 80010c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <disk_initialize+0x108>
 80010cc:	2306      	movs	r3, #6
 80010ce:	e000      	b.n	80010d2 <disk_initialize+0x10a>
 80010d0:	2302      	movs	r3, #2
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	e040      	b.n	8001158 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80010d6:	2100      	movs	r1, #0
 80010d8:	2077      	movs	r0, #119	; 0x77
 80010da:	f7ff ff23 	bl	8000f24 <send_cmd>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d808      	bhi.n	80010f6 <disk_initialize+0x12e>
 80010e4:	2100      	movs	r1, #0
 80010e6:	2069      	movs	r0, #105	; 0x69
 80010e8:	f7ff ff1c 	bl	8000f24 <send_cmd>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d801      	bhi.n	80010f6 <disk_initialize+0x12e>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e000      	b.n	80010f8 <disk_initialize+0x130>
 80010f6:	2301      	movs	r3, #1
 80010f8:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d10e      	bne.n	800111e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001100:	2100      	movs	r1, #0
 8001102:	2077      	movs	r0, #119	; 0x77
 8001104:	f7ff ff0e 	bl	8000f24 <send_cmd>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d80e      	bhi.n	800112c <disk_initialize+0x164>
 800110e:	2100      	movs	r1, #0
 8001110:	2069      	movs	r0, #105	; 0x69
 8001112:	f7ff ff07 	bl	8000f24 <send_cmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <disk_initialize+0x164>
						break; /* ACMD41 */
 800111c:	e00d      	b.n	800113a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800111e:	2100      	movs	r1, #0
 8001120:	2041      	movs	r0, #65	; 0x41
 8001122:	f7ff feff 	bl	8000f24 <send_cmd>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <disk_initialize+0x1cc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1e1      	bne.n	80010fa <disk_initialize+0x132>
 8001136:	e000      	b.n	800113a <disk_initialize+0x172>
						break; /* CMD1 */
 8001138:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <disk_initialize+0x1cc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <disk_initialize+0x18c>
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	2050      	movs	r0, #80	; 0x50
 800114a:	f7ff feeb 	bl	8000f24 <send_cmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <disk_initialize+0x190>
				ty = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <disk_initialize+0x1d0>)
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800115e:	f7ff fd88 	bl	8000c72 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001162:	f7ff fda7 	bl	8000cb4 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <disk_initialize+0x1c8>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <disk_initialize+0x1c8>)
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e001      	b.n	8001182 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800117e:	f7ff fe2f 	bl	8000de0 <power_off>

	return Stat;
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <disk_initialize+0x1c8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	2000003c 	.word	0x2000003c
 8001198:	2000003e 	.word	0x2000003e

0800119c <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011ac:	2301      	movs	r3, #1
 80011ae:	e002      	b.n	80011b6 <disk_status+0x1a>
	return Stat;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <disk_status+0x28>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000

080011c8 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <disk_read+0x1c>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <disk_read+0x20>
		return RES_PARERR;
 80011e4:	2304      	movs	r3, #4
 80011e6:	e051      	b.n	800128c <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <disk_read+0xcc>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <disk_read+0x32>
		return RES_NOTRDY;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e048      	b.n	800128c <disk_read+0xc4>

	if (!(CardType & 4))
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <disk_read+0xd0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800120c:	f7ff fd2a 	bl	8000c64 <SELECT>

	if (count == 1) { /* Single block read */
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d111      	bne.n	800123a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	2051      	movs	r0, #81	; 0x51
 800121a:	f7ff fe83 	bl	8000f24 <send_cmd>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d129      	bne.n	8001278 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff fdf1 	bl	8000e10 <rcvr_datablock>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d021      	beq.n	8001278 <disk_read+0xb0>
			count = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	e01e      	b.n	8001278 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	2052      	movs	r0, #82	; 0x52
 800123e:	f7ff fe71 	bl	8000f24 <send_cmd>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d117      	bne.n	8001278 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff fddf 	bl	8000e10 <rcvr_datablock>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00a      	beq.n	800126e <disk_read+0xa6>
					break;
				buff += 512;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800125e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ed      	bne.n	8001248 <disk_read+0x80>
 800126c:	e000      	b.n	8001270 <disk_read+0xa8>
					break;
 800126e:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8001270:	2100      	movs	r1, #0
 8001272:	204c      	movs	r0, #76	; 0x4c
 8001274:	f7ff fe56 	bl	8000f24 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8001278:	f7ff fcfb 	bl	8000c72 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800127c:	f7ff fd1a 	bl	8000cb4 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	2000003e 	.word	0x2000003e

0800129c <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <disk_write+0x1c>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <disk_write+0x20>
		return RES_PARERR;
 80012b8:	2304      	movs	r3, #4
 80012ba:	e06b      	b.n	8001394 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <disk_write+0x100>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <disk_write+0x32>
		return RES_NOTRDY;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e062      	b.n	8001394 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <disk_write+0x100>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <disk_write+0x44>
		return RES_WRPRT;
 80012dc:	2302      	movs	r3, #2
 80012de:	e059      	b.n	8001394 <disk_write+0xf8>

	if (!(CardType & 4))
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <disk_write+0x104>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	025b      	lsls	r3, r3, #9
 80012f0:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80012f2:	f7ff fcb7 	bl	8000c64 <SELECT>

	if (count == 1) { /* Single block write */
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d110      	bne.n	800131e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	2058      	movs	r0, #88	; 0x58
 8001300:	f7ff fe10 	bl	8000f24 <send_cmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d13a      	bne.n	8001380 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800130a:	21fe      	movs	r1, #254	; 0xfe
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f7ff fdb5 	bl	8000e7c <xmit_datablock>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d033      	beq.n	8001380 <disk_write+0xe4>
			count = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	e030      	b.n	8001380 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <disk_write+0x104>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800132a:	2100      	movs	r1, #0
 800132c:	2077      	movs	r0, #119	; 0x77
 800132e:	f7ff fdf9 	bl	8000f24 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	2057      	movs	r0, #87	; 0x57
 8001336:	f7ff fdf5 	bl	8000f24 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	2059      	movs	r0, #89	; 0x59
 800133e:	f7ff fdf1 	bl	8000f24 <send_cmd>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d11b      	bne.n	8001380 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001348:	21fc      	movs	r1, #252	; 0xfc
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f7ff fd96 	bl	8000e7c <xmit_datablock>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <disk_write+0xd0>
					break;
				buff += 512;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800135c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1ee      	bne.n	8001348 <disk_write+0xac>
 800136a:	e000      	b.n	800136e <disk_write+0xd2>
					break;
 800136c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800136e:	21fd      	movs	r1, #253	; 0xfd
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fd83 	bl	8000e7c <xmit_datablock>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <disk_write+0xe4>
				count = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8001380:	f7ff fc77 	bl	8000c72 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001384:	f7ff fc96 	bl	8000cb4 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	2000003e 	.word	0x2000003e

080013a4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	603a      	str	r2, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	460b      	mov	r3, r1
 80013b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <disk_ioctl+0x1e>
		return RES_PARERR;
 80013be:	2304      	movs	r3, #4
 80013c0:	e16a      	b.n	8001698 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	d127      	bne.n	800141e <disk_ioctl+0x7a>
		switch (*ptr) {
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d00e      	beq.n	80013f4 <disk_ioctl+0x50>
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d012      	beq.n	8001400 <disk_ioctl+0x5c>
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11b      	bne.n	8001416 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 80013de:	f7ff fd0b 	bl	8000df8 <chk_power>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <disk_ioctl+0x48>
				power_off(); /* Power off */
 80013e8:	f7ff fcfa 	bl	8000de0 <power_off>
			res = RES_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013f2:	e14f      	b.n	8001694 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80013f4:	f7ff fca6 	bl	8000d44 <power_on>
			res = RES_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013fe:	e149      	b.n	8001694 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001400:	f7ff fcfa 	bl	8000df8 <chk_power>
 8001404:	4602      	mov	r2, r0
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	3301      	adds	r3, #1
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001414:	e13e      	b.n	8001694 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001416:	2304      	movs	r3, #4
 8001418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800141c:	e13a      	b.n	8001694 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800141e:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <disk_ioctl+0x2fc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 800142c:	2303      	movs	r3, #3
 800142e:	e133      	b.n	8001698 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001430:	f7ff fc18 	bl	8000c64 <SELECT>

		switch (ctrl) {
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2b35      	cmp	r3, #53	; 0x35
 8001438:	f200 811d 	bhi.w	8001676 <disk_ioctl+0x2d2>
 800143c:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <disk_ioctl+0xa0>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	080015df 	.word	0x080015df
 8001448:	0800151d 	.word	0x0800151d
 800144c:	080015cf 	.word	0x080015cf
 8001450:	08001677 	.word	0x08001677
 8001454:	08001677 	.word	0x08001677
 8001458:	08001677 	.word	0x08001677
 800145c:	08001677 	.word	0x08001677
 8001460:	08001677 	.word	0x08001677
 8001464:	08001677 	.word	0x08001677
 8001468:	08001677 	.word	0x08001677
 800146c:	08001677 	.word	0x08001677
 8001470:	08001677 	.word	0x08001677
 8001474:	08001677 	.word	0x08001677
 8001478:	08001677 	.word	0x08001677
 800147c:	08001677 	.word	0x08001677
 8001480:	08001677 	.word	0x08001677
 8001484:	08001677 	.word	0x08001677
 8001488:	08001677 	.word	0x08001677
 800148c:	08001677 	.word	0x08001677
 8001490:	08001677 	.word	0x08001677
 8001494:	08001677 	.word	0x08001677
 8001498:	08001677 	.word	0x08001677
 800149c:	08001677 	.word	0x08001677
 80014a0:	08001677 	.word	0x08001677
 80014a4:	08001677 	.word	0x08001677
 80014a8:	08001677 	.word	0x08001677
 80014ac:	08001677 	.word	0x08001677
 80014b0:	08001677 	.word	0x08001677
 80014b4:	08001677 	.word	0x08001677
 80014b8:	08001677 	.word	0x08001677
 80014bc:	08001677 	.word	0x08001677
 80014c0:	08001677 	.word	0x08001677
 80014c4:	08001677 	.word	0x08001677
 80014c8:	08001677 	.word	0x08001677
 80014cc:	08001677 	.word	0x08001677
 80014d0:	08001677 	.word	0x08001677
 80014d4:	08001677 	.word	0x08001677
 80014d8:	08001677 	.word	0x08001677
 80014dc:	08001677 	.word	0x08001677
 80014e0:	08001677 	.word	0x08001677
 80014e4:	08001677 	.word	0x08001677
 80014e8:	08001677 	.word	0x08001677
 80014ec:	08001677 	.word	0x08001677
 80014f0:	08001677 	.word	0x08001677
 80014f4:	08001677 	.word	0x08001677
 80014f8:	08001677 	.word	0x08001677
 80014fc:	08001677 	.word	0x08001677
 8001500:	08001677 	.word	0x08001677
 8001504:	08001677 	.word	0x08001677
 8001508:	08001677 	.word	0x08001677
 800150c:	08001677 	.word	0x08001677
 8001510:	080015f1 	.word	0x080015f1
 8001514:	08001615 	.word	0x08001615
 8001518:	08001639 	.word	0x08001639
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800151c:	2100      	movs	r1, #0
 800151e:	2049      	movs	r0, #73	; 0x49
 8001520:	f7ff fd00 	bl	8000f24 <send_cmd>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80a9 	bne.w	800167e <disk_ioctl+0x2da>
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc6c 	bl	8000e10 <rcvr_datablock>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 809f 	beq.w	800167e <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001540:	7b3b      	ldrb	r3, [r7, #12]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10e      	bne.n	8001568 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	b29a      	uxth	r2, r3
 800154e:	7d3b      	ldrb	r3, [r7, #20]
 8001550:	b29b      	uxth	r3, r3
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	029a      	lsls	r2, r3, #10
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e02e      	b.n	80015c6 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001568:	7c7b      	ldrb	r3, [r7, #17]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	b2da      	uxtb	r2, r3
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	09db      	lsrs	r3, r3, #7
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0306 	and.w	r3, r3, #6
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 800158a:	3302      	adds	r3, #2
 800158c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001590:	7d3b      	ldrb	r3, [r7, #20]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b29a      	uxth	r2, r3
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	b29b      	uxth	r3, r3
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80015a4:	7cbb      	ldrb	r3, [r7, #18]
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80015b4:	3301      	adds	r3, #1
 80015b6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015b8:	8bfa      	ldrh	r2, [r7, #30]
 80015ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015be:	3b09      	subs	r3, #9
 80015c0:	409a      	lsls	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80015cc:	e057      	b.n	800167e <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015dc:	e056      	b.n	800168c <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 80015de:	f7ff fb95 	bl	8000d0c <wait_ready>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2bff      	cmp	r3, #255	; 0xff
 80015e6:	d14c      	bne.n	8001682 <disk_ioctl+0x2de>
				res = RES_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015ee:	e048      	b.n	8001682 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 80015f0:	2100      	movs	r1, #0
 80015f2:	2049      	movs	r0, #73	; 0x49
 80015f4:	f7ff fc96 	bl	8000f24 <send_cmd>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d143      	bne.n	8001686 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 80015fe:	2110      	movs	r1, #16
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f7ff fc05 	bl	8000e10 <rcvr_datablock>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03c      	beq.n	8001686 <disk_ioctl+0x2e2>
				res = RES_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001612:	e038      	b.n	8001686 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001614:	2100      	movs	r1, #0
 8001616:	204a      	movs	r0, #74	; 0x4a
 8001618:	f7ff fc84 	bl	8000f24 <send_cmd>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d133      	bne.n	800168a <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001622:	2110      	movs	r1, #16
 8001624:	6a38      	ldr	r0, [r7, #32]
 8001626:	f7ff fbf3 	bl	8000e10 <rcvr_datablock>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d02c      	beq.n	800168a <disk_ioctl+0x2e6>
				res = RES_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001636:	e028      	b.n	800168a <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001638:	2100      	movs	r1, #0
 800163a:	207a      	movs	r0, #122	; 0x7a
 800163c:	f7ff fc72 	bl	8000f24 <send_cmd>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d117      	bne.n	8001676 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800164c:	e00b      	b.n	8001666 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800164e:	6a3c      	ldr	r4, [r7, #32]
 8001650:	1c63      	adds	r3, r4, #1
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	f7ff fb2e 	bl	8000cb4 <rcvr_spi>
 8001658:	4603      	mov	r3, r0
 800165a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800165c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001660:	3301      	adds	r3, #1
 8001662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001666:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800166a:	2b03      	cmp	r3, #3
 800166c:	d9ef      	bls.n	800164e <disk_ioctl+0x2aa>
				res = RES_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001674:	e00a      	b.n	800168c <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8001676:	2304      	movs	r3, #4
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800167c:	e006      	b.n	800168c <disk_ioctl+0x2e8>
			break;
 800167e:	bf00      	nop
 8001680:	e004      	b.n	800168c <disk_ioctl+0x2e8>
			break;
 8001682:	bf00      	nop
 8001684:	e002      	b.n	800168c <disk_ioctl+0x2e8>
			break;
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <disk_ioctl+0x2e8>
			break;
 800168a:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 800168c:	f7ff faf1 	bl	8000c72 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8001690:	f7ff fb10 	bl	8000cb4 <rcvr_spi>
	}

	return res;
 8001694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001698:	4618      	mov	r0, r3
 800169a:	372c      	adds	r7, #44	; 0x2c
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20000000 	.word	0x20000000

080016a4 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <disk_timerproc+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
	if (n)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <disk_timerproc+0x1e>
		Timer1 = --n;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <disk_timerproc+0x44>)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <disk_timerproc+0x48>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <disk_timerproc+0x36>
		Timer2 = --n;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <disk_timerproc+0x48>)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	7013      	strb	r3, [r2, #0]

}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000003c 	.word	0x2000003c
 80016ec:	2000003d 	.word	0x2000003d

080016f0 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <sdcard_systick_timerproc+0x2c>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <sdcard_systick_timerproc+0x2c>)
 8001700:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <sdcard_systick_timerproc+0x2c>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	2b09      	cmp	r3, #9
 800170a:	d904      	bls.n	8001716 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <sdcard_systick_timerproc+0x2c>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001712:	f7ff ffc7 	bl	80016a4 <disk_timerproc>
	}
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000288 	.word	0x20000288

08001720 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	36c55cc0 	.word	0x36c55cc0

08001734 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21a      	sxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b21b      	sxth	r3, r3
 8001754:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001756:	89fb      	ldrh	r3, [r7, #14]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3303      	adds	r3, #3
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	3202      	adds	r2, #2
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	3201      	adds	r2, #1
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	4313      	orrs	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
	return rv;
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00d      	beq.n	800186e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	1c53      	adds	r3, r2, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	1c59      	adds	r1, r3, #1
 800185c:	6179      	str	r1, [r7, #20]
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3b01      	subs	r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f1      	bne.n	8001852 <mem_cpy+0x1a>
	}
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 800187a:	b480      	push	{r7}
 800187c:	b087      	sub	sp, #28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	617a      	str	r2, [r7, #20]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3b01      	subs	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f3      	bne.n	800188a <mem_set+0x10>
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80018ae:	b480      	push	{r7}
 80018b0:	b089      	sub	sp, #36	; 0x24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	61fa      	str	r2, [r7, #28]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4619      	mov	r1, r3
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	61ba      	str	r2, [r7, #24]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	1acb      	subs	r3, r1, r3
 80018da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <mem_cmp+0x40>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0eb      	beq.n	80018c6 <mem_cmp+0x18>

	return r;
 80018ee:	697b      	ldr	r3, [r7, #20]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3724      	adds	r7, #36	; 0x24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001906:	e002      	b.n	800190e <chk_chr+0x12>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3301      	adds	r3, #1
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <chk_chr+0x26>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4293      	cmp	r3, r2
 8001920:	d1f2      	bne.n	8001908 <chk_chr+0xc>
	return *str;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800193c:	2281      	movs	r2, #129	; 0x81
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4293      	cmp	r3, r2
 8001942:	d30f      	bcc.n	8001964 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001944:	229f      	movs	r2, #159	; 0x9f
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4293      	cmp	r3, r2
 800194a:	d801      	bhi.n	8001950 <dbc_1st+0x1e>
 800194c:	2301      	movs	r3, #1
 800194e:	e00a      	b.n	8001966 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001950:	22e0      	movs	r2, #224	; 0xe0
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4293      	cmp	r3, r2
 8001956:	d305      	bcc.n	8001964 <dbc_1st+0x32>
 8001958:	22fc      	movs	r2, #252	; 0xfc
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4293      	cmp	r3, r2
 800195e:	d801      	bhi.n	8001964 <dbc_1st+0x32>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800197c:	2240      	movs	r2, #64	; 0x40
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4293      	cmp	r3, r2
 8001982:	d319      	bcc.n	80019b8 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001984:	227e      	movs	r2, #126	; 0x7e
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4293      	cmp	r3, r2
 800198a:	d801      	bhi.n	8001990 <dbc_2nd+0x1e>
 800198c:	2301      	movs	r3, #1
 800198e:	e014      	b.n	80019ba <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4293      	cmp	r3, r2
 8001996:	d305      	bcc.n	80019a4 <dbc_2nd+0x32>
 8001998:	22fc      	movs	r2, #252	; 0xfc
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4293      	cmp	r3, r2
 800199e:	d801      	bhi.n	80019a4 <dbc_2nd+0x32>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e00a      	b.n	80019ba <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 80019a4:	2200      	movs	r2, #0
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d305      	bcc.n	80019b8 <dbc_2nd+0x46>
 80019ac:	2200      	movs	r2, #0
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d801      	bhi.n	80019b8 <dbc_2nd+0x46>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	78db      	ldrb	r3, [r3, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d02c      	beq.n	8001a34 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7858      	ldrb	r0, [r3, #1]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	2301      	movs	r3, #1
 80019ea:	f7ff fc57 	bl	800129c <disk_write>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d11d      	bne.n	8001a30 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d213      	bcs.n	8001a34 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d10f      	bne.n	8001a34 <sync_window+0x6e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7858      	ldrb	r0, [r3, #1]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	441a      	add	r2, r3
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f7ff fc37 	bl	800129c <disk_write>
 8001a2e:	e001      	b.n	8001a34 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d01b      	beq.n	8001a8e <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffb5 	bl	80019c6 <sync_window>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7858      	ldrb	r0, [r3, #1]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a70:	2301      	movs	r3, #1
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	f7ff fba8 	bl	80011c8 <disk_read>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff90 	bl	80019c6 <sync_window>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d158      	bne.n	8001b62 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d148      	bne.n	8001b4a <sync_fs+0xb2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d144      	bne.n	8001b4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3330      	adds	r3, #48	; 0x30
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fed5 	bl	800187a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3330      	adds	r3, #48	; 0x30
 8001ad4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001ad8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fe64 	bl	80017aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3330      	adds	r3, #48	; 0x30
 8001ae6:	4921      	ldr	r1, [pc, #132]	; (8001b6c <sync_fs+0xd4>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe79 	bl	80017e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3330      	adds	r3, #48	; 0x30
 8001af2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001af6:	491e      	ldr	r1, [pc, #120]	; (8001b70 <sync_fs+0xd8>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fe71 	bl	80017e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3330      	adds	r3, #48	; 0x30
 8001b02:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f7ff fe67 	bl	80017e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3330      	adds	r3, #48	; 0x30
 8001b16:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff fe5d 	bl	80017e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7858      	ldrb	r0, [r3, #1]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f7ff fbac 	bl	800129c <disk_write>
			fs->fsi_flag = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc26 	bl	80013a4 <disk_ioctl>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <sync_fs+0xca>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	41615252 	.word	0x41615252
 8001b70:	61417272 	.word	0x61417272

08001b74 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3b02      	subs	r3, #2
 8001b82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	3b02      	subs	r3, #2
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d301      	bcc.n	8001b94 <clst2sect+0x20>
 8001b90:	2300      	movs	r3, #0
 8001b92:	e008      	b.n	8001ba6 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	895b      	ldrh	r3, [r3, #10]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	fb03 f301 	mul.w	r3, r3, r1
 8001ba4:	4413      	add	r3, r2
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d904      	bls.n	8001bd2 <get_fat+0x20>
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d302      	bcc.n	8001bd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e08c      	b.n	8001cf2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d045      	beq.n	8001c72 <get_fat+0xc0>
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d05d      	beq.n	8001ca6 <get_fat+0xf4>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d177      	bne.n	8001cde <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	085b      	lsrs	r3, r3, #1
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	0a5b      	lsrs	r3, r3, #9
 8001c04:	4413      	add	r3, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	6938      	ldr	r0, [r7, #16]
 8001c0a:	f7ff ff18 	bl	8001a3e <move_window>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d167      	bne.n	8001ce4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60fa      	str	r2, [r7, #12]
 8001c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c26:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	0a5b      	lsrs	r3, r3, #9
 8001c30:	4413      	add	r3, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6938      	ldr	r0, [r7, #16]
 8001c36:	f7ff ff02 	bl	8001a3e <move_window>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d153      	bne.n	8001ce8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <get_fat+0xb6>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	e002      	b.n	8001c6e <get_fat+0xbc>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6e:	617b      	str	r3, [r7, #20]
			break;
 8001c70:	e03f      	b.n	8001cf2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6938      	ldr	r0, [r7, #16]
 8001c80:	f7ff fedd 	bl	8001a3e <move_window>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d130      	bne.n	8001cec <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001c98:	4413      	add	r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fd4a 	bl	8001734 <ld_word>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	617b      	str	r3, [r7, #20]
			break;
 8001ca4:	e025      	b.n	8001cf2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	09db      	lsrs	r3, r3, #7
 8001cae:	4413      	add	r3, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6938      	ldr	r0, [r7, #16]
 8001cb4:	f7ff fec3 	bl	8001a3e <move_window>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ccc:	4413      	add	r3, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fd48 	bl	8001764 <ld_dword>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001cda:	617b      	str	r3, [r7, #20]
			break;
 8001cdc:	e009      	b.n	8001cf2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e006      	b.n	8001cf2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001ce4:	bf00      	nop
 8001ce6:	e004      	b.n	8001cf2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001ce8:	bf00      	nop
 8001cea:	e002      	b.n	8001cf2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001cec:	bf00      	nop
 8001cee:	e000      	b.n	8001cf2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001cf0:	bf00      	nop
		}
	}

	return val;
 8001cf2:	697b      	ldr	r3, [r7, #20]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	f240 80d6 	bls.w	8001ec0 <put_fat+0x1c4>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	f080 80d0 	bcs.w	8001ec0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d073      	beq.n	8001e10 <put_fat+0x114>
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	f000 8091 	beq.w	8001e50 <put_fat+0x154>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	f040 80c6 	bne.w	8001ec0 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4413      	add	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	0a5b      	lsrs	r3, r3, #9
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7ff fe75 	bl	8001a3e <move_window>
 8001d54:	4603      	mov	r3, r0
 8001d56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001d58:	7ffb      	ldrb	r3, [r7, #31]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80a9 	bne.w	8001eb2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	61b9      	str	r1, [r7, #24]
 8001d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <put_fat+0x9e>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e001      	b.n	8001d9e <put_fat+0xa2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	4413      	add	r3, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff fe42 	bl	8001a3e <move_window>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001dbe:	7ffb      	ldrb	r3, [r7, #31]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d178      	bne.n	8001eb6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <put_fat+0xea>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e00e      	b.n	8001e04 <put_fat+0x108>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	f023 030f 	bic.w	r3, r3, #15
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	70da      	strb	r2, [r3, #3]
			break;
 8001e0e:	e057      	b.n	8001ec0 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	4413      	add	r3, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff fe0e 	bl	8001a3e <move_window>
 8001e22:	4603      	mov	r3, r0
 8001e24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d146      	bne.n	8001eba <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001e3a:	4413      	add	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fcb1 	bl	80017aa <st_word>
			fs->wflag = 1;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	70da      	strb	r2, [r3, #3]
			break;
 8001e4e:	e037      	b.n	8001ec0 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	09db      	lsrs	r3, r3, #7
 8001e58:	4413      	add	r3, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fdee 	bl	8001a3e <move_window>
 8001e62:	4603      	mov	r3, r0
 8001e64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d128      	bne.n	8001ebe <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001e80:	4413      	add	r3, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc6e 	bl	8001764 <ld_dword>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ea0:	4413      	add	r3, r2
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fc9b 	bl	80017e0 <st_dword>
			fs->wflag = 1;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	70da      	strb	r2, [r3, #3]
			break;
 8001eb0:	e006      	b.n	8001ec0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001eb2:	bf00      	nop
 8001eb4:	e004      	b.n	8001ec0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001eb6:	bf00      	nop
 8001eb8:	e002      	b.n	8001ec0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001ebe:	bf00      	nop
		}
	}
	return res;
 8001ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}

08001eca <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b088      	sub	sp, #32
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d904      	bls.n	8001ef0 <remove_chain+0x26>
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d301      	bcc.n	8001ef4 <remove_chain+0x2a>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e04b      	b.n	8001f8c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00c      	beq.n	8001f14 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	69b8      	ldr	r0, [r7, #24]
 8001f02:	f7ff fefb 	bl	8001cfc <put_fat>
 8001f06:	4603      	mov	r3, r0
 8001f08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001f0a:	7ffb      	ldrb	r3, [r7, #31]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <remove_chain+0x4a>
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	e03b      	b.n	8001f8c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff fe4b 	bl	8001bb2 <get_fat>
 8001f1c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d031      	beq.n	8001f88 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <remove_chain+0x64>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e02e      	b.n	8001f8c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d101      	bne.n	8001f3a <remove_chain+0x70>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e028      	b.n	8001f8c <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	69b8      	ldr	r0, [r7, #24]
 8001f40:	f7ff fedc 	bl	8001cfc <put_fat>
 8001f44:	4603      	mov	r3, r0
 8001f46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <remove_chain+0x88>
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	e01c      	b.n	8001f8c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	3b02      	subs	r3, #2
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d20b      	bcs.n	8001f78 <remove_chain+0xae>
			fs->free_clst++;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3c6      	bcc.n	8001f14 <remove_chain+0x4a>
 8001f86:	e000      	b.n	8001f8a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001f88:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <create_chain+0x2c>
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d31b      	bcc.n	8001ff8 <create_chain+0x64>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e018      	b.n	8001ff8 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fdf2 	bl	8001bb2 <get_fat>
 8001fce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d801      	bhi.n	8001fda <create_chain+0x46>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0a9      	b.n	800212e <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d101      	bne.n	8001fe6 <create_chain+0x52>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	e0a3      	b.n	800212e <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d201      	bcs.n	8001ff4 <create_chain+0x60>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	e09c      	b.n	800212e <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <create_chain+0x70>
 8002000:	2300      	movs	r3, #0
 8002002:	e094      	b.n	800212e <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d129      	bne.n	8002064 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	3301      	adds	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	d301      	bcc.n	8002024 <create_chain+0x90>
 8002020:	2302      	movs	r3, #2
 8002022:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002024:	69f9      	ldr	r1, [r7, #28]
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fdc3 	bl	8001bb2 <get_fat>
 800202c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d003      	beq.n	800203c <create_chain+0xa8>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d101      	bne.n	8002040 <create_chain+0xac>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	e076      	b.n	800212e <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00e      	beq.n	8002064 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d906      	bls.n	8002060 <create_chain+0xcc>
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d201      	bcs.n	8002060 <create_chain+0xcc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d129      	bne.n	80020be <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d307      	bcc.n	800208e <create_chain+0xfa>
					ncl = 2;
 800207e:	2302      	movs	r3, #2
 8002080:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	429a      	cmp	r2, r3
 8002088:	d901      	bls.n	800208e <create_chain+0xfa>
 800208a:	2300      	movs	r3, #0
 800208c:	e04f      	b.n	800212e <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800208e:	69f9      	ldr	r1, [r7, #28]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fd8e 	bl	8001bb2 <get_fat>
 8002096:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d003      	beq.n	80020ac <create_chain+0x118>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d101      	bne.n	80020b0 <create_chain+0x11c>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	e03e      	b.n	800212e <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1da      	bne.n	800206e <create_chain+0xda>
 80020b8:	2300      	movs	r3, #0
 80020ba:	e038      	b.n	800212e <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80020bc:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80020be:	f04f 32ff 	mov.w	r2, #4294967295
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	6938      	ldr	r0, [r7, #16]
 80020c6:	f7ff fe19 	bl	8001cfc <put_fat>
 80020ca:	4603      	mov	r3, r0
 80020cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <create_chain+0x154>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	6938      	ldr	r0, [r7, #16]
 80020e0:	f7ff fe0c 	bl	8001cfc <put_fat>
 80020e4:	4603      	mov	r3, r0
 80020e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <create_chain+0x188>
		fs->last_clst = ncl;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	3b02      	subs	r3, #2
 80020fe:	429a      	cmp	r2, r3
 8002100:	d804      	bhi.n	800210c <create_chain+0x178>
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	711a      	strb	r2, [r3, #4]
 800211a:	e007      	b.n	800212c <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <create_chain+0x194>
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e000      	b.n	800212a <create_chain+0x196>
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800212c:	69fb      	ldr	r3, [r7, #28]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fc40 	bl	80019c6 <sync_window>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <dir_clear+0x1a>
 800214c:	2301      	movs	r3, #1
 800214e:	e036      	b.n	80021be <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002150:	6839      	ldr	r1, [r7, #0]
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fd0e 	bl	8001b74 <clst2sect>
 8002158:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3330      	adds	r3, #48	; 0x30
 8002164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fb85 	bl	800187a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3330      	adds	r3, #48	; 0x30
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	2301      	movs	r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e003      	b.n	8002188 <dir_clear+0x52>
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	895b      	ldrh	r3, [r3, #10]
 800218c:	461a      	mov	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4293      	cmp	r3, r2
 8002192:	d20b      	bcs.n	80021ac <dir_clear+0x76>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7858      	ldrb	r0, [r3, #1]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	441a      	add	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	68f9      	ldr	r1, [r7, #12]
 80021a2:	f7ff f87b 	bl	800129c <disk_write>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0e9      	beq.n	8002180 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	895b      	ldrh	r3, [r3, #10]
 80021b0:	461a      	mov	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021dc:	d204      	bcs.n	80021e8 <dir_sdi+0x22>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <dir_sdi+0x26>
		return FR_INT_ERR;
 80021e8:	2302      	movs	r3, #2
 80021ea:	e063      	b.n	80022b4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <dir_sdi+0x46>
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d902      	bls.n	800220c <dir_sdi+0x46>
		clst = fs->dirbase;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	8912      	ldrh	r2, [r2, #8]
 800221a:	4293      	cmp	r3, r2
 800221c:	d301      	bcc.n	8002222 <dir_sdi+0x5c>
 800221e:	2302      	movs	r3, #2
 8002220:	e048      	b.n	80022b4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
 800222a:	e029      	b.n	8002280 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	895b      	ldrh	r3, [r3, #10]
 8002230:	025b      	lsls	r3, r3, #9
 8002232:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002234:	e019      	b.n	800226a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6979      	ldr	r1, [r7, #20]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fcb9 	bl	8001bb2 <get_fat>
 8002240:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d101      	bne.n	800224e <dir_sdi+0x88>
 800224a:	2301      	movs	r3, #1
 800224c:	e032      	b.n	80022b4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d904      	bls.n	800225e <dir_sdi+0x98>
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	429a      	cmp	r2, r3
 800225c:	d301      	bcc.n	8002262 <dir_sdi+0x9c>
 800225e:	2302      	movs	r3, #2
 8002260:	e028      	b.n	80022b4 <dir_sdi+0xee>
			ofs -= csz;
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	429a      	cmp	r2, r3
 8002270:	d2e1      	bcs.n	8002236 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8002272:	6979      	ldr	r1, [r7, #20]
 8002274:	6938      	ldr	r0, [r7, #16]
 8002276:	f7ff fc7d 	bl	8001b74 <clst2sect>
 800227a:	4602      	mov	r2, r0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <dir_sdi+0xcc>
 800228e:	2302      	movs	r3, #2
 8002290:	e010      	b.n	80022b4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	0a5b      	lsrs	r3, r3, #9
 800229a:	441a      	add	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ac:	441a      	add	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	3320      	adds	r3, #32
 80022d2:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022da:	d302      	bcc.n	80022e2 <dir_next+0x26>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <dir_next+0x32>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e078      	b.n	80023e0 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d166      	bne.n	80023c6 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	8912      	ldrh	r2, [r2, #8]
 8002312:	4293      	cmp	r3, r2
 8002314:	d357      	bcc.n	80023c6 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	2304      	movs	r3, #4
 800231e:	e05f      	b.n	80023e0 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	0a5b      	lsrs	r3, r3, #9
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	8952      	ldrh	r2, [r2, #10]
 8002328:	3a01      	subs	r2, #1
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d14a      	bne.n	80023c6 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f7ff fc3a 	bl	8001bb2 <get_fat>
 800233e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d801      	bhi.n	800234a <dir_next+0x8e>
 8002346:	2302      	movs	r3, #2
 8002348:	e04a      	b.n	80023e0 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d101      	bne.n	8002356 <dir_next+0x9a>
 8002352:	2301      	movs	r3, #1
 8002354:	e044      	b.n	80023e0 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	429a      	cmp	r2, r3
 800235e:	d328      	bcc.n	80023b2 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	2304      	movs	r3, #4
 800236e:	e037      	b.n	80023e0 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f7ff fe0b 	bl	8001f94 <create_chain>
 800237e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <dir_next+0xce>
 8002386:	2307      	movs	r3, #7
 8002388:	e02a      	b.n	80023e0 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <dir_next+0xd8>
 8002390:	2302      	movs	r3, #2
 8002392:	e025      	b.n	80023e0 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d101      	bne.n	80023a0 <dir_next+0xe4>
 800239c:	2301      	movs	r3, #1
 800239e:	e01f      	b.n	80023e0 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	6938      	ldr	r0, [r7, #16]
 80023a4:	f7ff fec7 	bl	8002136 <dir_clear>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <dir_next+0xf6>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e016      	b.n	80023e0 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80023b8:	6979      	ldr	r1, [r7, #20]
 80023ba:	6938      	ldr	r0, [r7, #16]
 80023bc:	f7ff fbda 	bl	8001b74 <clst2sect>
 80023c0:	4602      	mov	r2, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80023f8:	2100      	movs	r1, #0
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fee3 	bl	80021c6 <dir_sdi>
 8002400:	4603      	mov	r3, r0
 8002402:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d12b      	bne.n	8002462 <dir_alloc+0x7a>
		n = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4619      	mov	r1, r3
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff fb12 	bl	8001a3e <move_window>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11d      	bne.n	8002460 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2be5      	cmp	r3, #229	; 0xe5
 800242c:	d004      	beq.n	8002438 <dir_alloc+0x50>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	3301      	adds	r3, #1
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d102      	bne.n	800244c <dir_alloc+0x64>
 8002446:	e00c      	b.n	8002462 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800244c:	2101      	movs	r1, #1
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff34 	bl	80022bc <dir_next>
 8002454:	4603      	mov	r3, r0
 8002456:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0d7      	beq.n	800240e <dir_alloc+0x26>
 800245e:	e000      	b.n	8002462 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8002460:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d101      	bne.n	800246c <dir_alloc+0x84>
 8002468:	2307      	movs	r3, #7
 800246a:	75fb      	strb	r3, [r7, #23]
	return res;
 800246c:	7dfb      	ldrb	r3, [r7, #23]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	331a      	adds	r3, #26
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f955 	bl	8001734 <ld_word>
 800248a:	4603      	mov	r3, r0
 800248c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d109      	bne.n	80024aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f94a 	bl	8001734 <ld_word>
 80024a0:	4603      	mov	r3, r0
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	331a      	adds	r3, #26
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	b292      	uxth	r2, r2
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f96d 	bl	80017aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d109      	bne.n	80024ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f103 0214 	add.w	r2, r3, #20
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f7ff f95f 	bl	80017aa <st_word>
	}
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002502:	2100      	movs	r1, #0
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fe5e 	bl	80021c6 <dir_sdi>
 800250a:	4603      	mov	r3, r0
 800250c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <dir_find+0x24>
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	e03e      	b.n	8002596 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4619      	mov	r1, r3
 800251e:	6938      	ldr	r0, [r7, #16]
 8002520:	f7ff fa8d 	bl	8001a3e <move_window>
 8002524:	4603      	mov	r3, r0
 8002526:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12f      	bne.n	800258e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <dir_find+0x4e>
 800253c:	2304      	movs	r3, #4
 800253e:	75fb      	strb	r3, [r7, #23]
 8002540:	e028      	b.n	8002594 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	330b      	adds	r3, #11
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	330b      	adds	r3, #11
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <dir_find+0x86>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69d8      	ldr	r0, [r3, #28]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3320      	adds	r3, #32
 800256c:	220b      	movs	r2, #11
 800256e:	4619      	mov	r1, r3
 8002570:	f7ff f99d 	bl	80018ae <mem_cmp>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800257a:	2100      	movs	r1, #0
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fe9d 	bl	80022bc <dir_next>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0c5      	beq.n	8002518 <dir_find+0x24>
 800258c:	e002      	b.n	8002594 <dir_find+0xa0>
		if (res != FR_OK) break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002592:	bf00      	nop

	return res;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80025ac:	2101      	movs	r1, #1
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff1a 	bl	80023e8 <dir_alloc>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11c      	bne.n	80025f8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4619      	mov	r1, r3
 80025c4:	68b8      	ldr	r0, [r7, #8]
 80025c6:	f7ff fa3a 	bl	8001a3e <move_window>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2220      	movs	r2, #32
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f94c 	bl	800187a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69d8      	ldr	r0, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3320      	adds	r3, #32
 80025ea:	220b      	movs	r2, #11
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7ff f923 	bl	8001838 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2201      	movs	r2, #1
 80025f6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3320      	adds	r3, #32
 8002618:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800261a:	220b      	movs	r2, #11
 800261c:	2120      	movs	r1, #32
 800261e:	6938      	ldr	r0, [r7, #16]
 8002620:	f7ff f92b 	bl	800187a <mem_set>
	si = i = 0; ni = 8;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	2308      	movs	r3, #8
 800262e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	61fa      	str	r2, [r7, #28]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002644:	2b20      	cmp	r3, #32
 8002646:	d97c      	bls.n	8002742 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264c:	2b2f      	cmp	r3, #47	; 0x2f
 800264e:	d007      	beq.n	8002660 <create_name+0x5c>
 8002650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002654:	2b5c      	cmp	r3, #92	; 0x5c
 8002656:	d110      	bne.n	800267a <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002658:	e002      	b.n	8002660 <create_name+0x5c>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b2f      	cmp	r3, #47	; 0x2f
 800266a:	d0f6      	beq.n	800265a <create_name+0x56>
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b5c      	cmp	r3, #92	; 0x5c
 8002676:	d0f0      	beq.n	800265a <create_name+0x56>
			break;
 8002678:	e064      	b.n	8002744 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800267a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800267e:	2b2e      	cmp	r3, #46	; 0x2e
 8002680:	d003      	beq.n	800268a <create_name+0x86>
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	429a      	cmp	r2, r3
 8002688:	d30d      	bcc.n	80026a6 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b0b      	cmp	r3, #11
 800268e:	d003      	beq.n	8002698 <create_name+0x94>
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002694:	2b2e      	cmp	r3, #46	; 0x2e
 8002696:	d001      	beq.n	800269c <create_name+0x98>
 8002698:	2306      	movs	r3, #6
 800269a:	e06f      	b.n	800277c <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 800269c:	2308      	movs	r3, #8
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	230b      	movs	r3, #11
 80026a2:	623b      	str	r3, [r7, #32]
			continue;
 80026a4:	e04c      	b.n	8002740 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 80026a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f941 	bl	8001932 <dbc_1st>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d024      	beq.n	8002700 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	61fa      	str	r2, [r7, #28]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f953 	bl	8001972 <dbc_2nd>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <create_name+0xd8>
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d301      	bcc.n	80026e0 <create_name+0xdc>
 80026dc:	2306      	movs	r3, #6
 80026de:	e04d      	b.n	800277c <create_name+0x178>
			sfn[i++] = c;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	61ba      	str	r2, [r7, #24]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80026ee:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	61ba      	str	r2, [r7, #24]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e797      	b.n	8002630 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002704:	4619      	mov	r1, r3
 8002706:	481f      	ldr	r0, [pc, #124]	; (8002784 <create_name+0x180>)
 8002708:	f7ff f8f8 	bl	80018fc <chk_chr>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <create_name+0x112>
 8002712:	2306      	movs	r3, #6
 8002714:	e032      	b.n	800277c <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800271a:	2b60      	cmp	r3, #96	; 0x60
 800271c:	d908      	bls.n	8002730 <create_name+0x12c>
 800271e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002722:	2b7a      	cmp	r3, #122	; 0x7a
 8002724:	d804      	bhi.n	8002730 <create_name+0x12c>
 8002726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272a:	3b20      	subs	r3, #32
 800272c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	61ba      	str	r2, [r7, #24]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800273e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8002740:	e776      	b.n	8002630 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002742:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	441a      	add	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <create_name+0x154>
 8002754:	2306      	movs	r3, #6
 8002756:	e011      	b.n	800277c <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2be5      	cmp	r3, #229	; 0xe5
 800275e:	d102      	bne.n	8002766 <create_name+0x162>
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2205      	movs	r2, #5
 8002764:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276a:	2b20      	cmp	r3, #32
 800276c:	d801      	bhi.n	8002772 <create_name+0x16e>
 800276e:	2204      	movs	r2, #4
 8002770:	e000      	b.n	8002774 <create_name+0x170>
 8002772:	2200      	movs	r2, #0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	330b      	adds	r3, #11
 8002778:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800277a:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800277c:	4618      	mov	r0, r3
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	08007058 	.word	0x08007058

08002788 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002798:	e002      	b.n	80027a0 <follow_path+0x18>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b2f      	cmp	r3, #47	; 0x2f
 80027a6:	d0f8      	beq.n	800279a <follow_path+0x12>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b5c      	cmp	r3, #92	; 0x5c
 80027ae:	d0f4      	beq.n	800279a <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b1f      	cmp	r3, #31
 80027bc:	d80a      	bhi.n	80027d4 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80027c6:	2100      	movs	r1, #0
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fcfc 	bl	80021c6 <dir_sdi>
 80027ce:	4603      	mov	r3, r0
 80027d0:	75fb      	strb	r3, [r7, #23]
 80027d2:	e043      	b.n	800285c <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80027d4:	463b      	mov	r3, r7
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff13 	bl	8002604 <create_name>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d134      	bne.n	8002852 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff fe83 	bl	80024f4 <dir_find>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80027f8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d127      	bne.n	8002856 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d122      	bne.n	8002856 <follow_path+0xce>
 8002810:	2305      	movs	r3, #5
 8002812:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002814:	e01f      	b.n	8002856 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d11c      	bne.n	800285a <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	799b      	ldrb	r3, [r3, #6]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800282c:	2305      	movs	r3, #5
 800282e:	75fb      	strb	r3, [r7, #23]
 8002830:	e014      	b.n	800285c <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	4413      	add	r3, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6938      	ldr	r0, [r7, #16]
 8002846:	f7ff fe16 	bl	8002476 <ld_clust>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002850:	e7c0      	b.n	80027d4 <follow_path+0x4c>
			if (res != FR_OK) break;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <follow_path+0xd4>
				break;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800285a:	bf00      	nop
			}
		}
	}

	return res;
 800285c:	7dfb      	ldrb	r3, [r7, #23]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002866:	b480      	push	{r7}
 8002868:	b089      	sub	sp, #36	; 0x24
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <get_ldnumber+0x22>
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	e02d      	b.n	80028e4 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	61fa      	str	r2, [r7, #28]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b20      	cmp	r3, #32
 8002896:	d902      	bls.n	800289e <get_ldnumber+0x38>
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b3a      	cmp	r3, #58	; 0x3a
 800289c:	d1f4      	bne.n	8002888 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b3a      	cmp	r3, #58	; 0x3a
 80028a2:	d11c      	bne.n	80028de <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b2f      	cmp	r3, #47	; 0x2f
 80028ae:	d90c      	bls.n	80028ca <get_ldnumber+0x64>
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b39      	cmp	r3, #57	; 0x39
 80028b6:	d808      	bhi.n	80028ca <get_ldnumber+0x64>
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3302      	adds	r3, #2
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d103      	bne.n	80028ca <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3b30      	subs	r3, #48	; 0x30
 80028c8:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dc04      	bgt.n	80028da <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	e002      	b.n	80028e4 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 80028e2:	697b      	ldr	r3, [r7, #20]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	70da      	strb	r2, [r3, #3]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f04f 32ff 	mov.w	r2, #4294967295
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff f897 	bl	8001a3e <move_window>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <check_fs+0x2a>
 8002916:	2304      	movs	r3, #4
 8002918:	e038      	b.n	800298c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3330      	adds	r3, #48	; 0x30
 800291e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe ff06 	bl	8001734 <ld_word>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <check_fs+0x48>
 8002934:	2303      	movs	r3, #3
 8002936:	e029      	b.n	800298c <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800293e:	2be9      	cmp	r3, #233	; 0xe9
 8002940:	d009      	beq.n	8002956 <check_fs+0x66>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002948:	2beb      	cmp	r3, #235	; 0xeb
 800294a:	d004      	beq.n	8002956 <check_fs+0x66>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002952:	2be8      	cmp	r3, #232	; 0xe8
 8002954:	d119      	bne.n	800298a <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3330      	adds	r3, #48	; 0x30
 800295a:	3336      	adds	r3, #54	; 0x36
 800295c:	2203      	movs	r2, #3
 800295e:	490d      	ldr	r1, [pc, #52]	; (8002994 <check_fs+0xa4>)
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ffa4 	bl	80018ae <mem_cmp>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <check_fs+0x80>
 800296c:	2300      	movs	r3, #0
 800296e:	e00d      	b.n	800298c <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3330      	adds	r3, #48	; 0x30
 8002974:	3352      	adds	r3, #82	; 0x52
 8002976:	2205      	movs	r2, #5
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <check_fs+0xa8>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe ff97 	bl	80018ae <mem_cmp>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <check_fs+0x9a>
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 800298a:	2302      	movs	r3, #2
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	08007068 	.word	0x08007068
 8002998:	0800706c 	.word	0x0800706c

0800299c <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b096      	sub	sp, #88	; 0x58
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ff58 	bl	8002866 <get_ldnumber>
 80029b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	da01      	bge.n	80029c2 <find_volume+0x26>
 80029be:	230b      	movs	r3, #11
 80029c0:	e238      	b.n	8002e34 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80029c2:	4aa8      	ldr	r2, [pc, #672]	; (8002c64 <find_volume+0x2c8>)
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <find_volume+0x3a>
 80029d2:	230c      	movs	r3, #12
 80029d4:	e22e      	b.n	8002e34 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01a      	beq.n	8002a22 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fbd3 	bl	800119c <disk_status>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80029fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10c      	bne.n	8002a22 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <find_volume+0x82>
 8002a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	e20a      	b.n	8002e34 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e208      	b.n	8002e34 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fac7 	bl	8000fc8 <disk_initialize>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1f1      	b.n	8002e34 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <find_volume+0xca>
 8002a56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002a62:	230a      	movs	r3, #10
 8002a64:	e1e6      	b.n	8002e34 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a6e:	f7ff ff3f 	bl	80028f0 <check_fs>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d14b      	bne.n	8002b18 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002a80:	2300      	movs	r3, #0
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
 8002a84:	e01f      	b.n	8002ac6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002a94:	4413      	add	r3, r2
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <find_volume+0x114>
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fe5c 	bl	8001764 <ld_dword>
 8002aac:	4602      	mov	r2, r0
 8002aae:	e000      	b.n	8002ab2 <find_volume+0x116>
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002aba:	440b      	add	r3, r1
 8002abc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d9dc      	bls.n	8002a86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002acc:	2300      	movs	r3, #0
 8002ace:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <find_volume+0x140>
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <find_volume+0x162>
 8002af2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002af6:	f7ff fefb 	bl	80028f0 <check_fs>
 8002afa:	4603      	mov	r3, r0
 8002afc:	e000      	b.n	8002b00 <find_volume+0x164>
 8002afe:	2303      	movs	r3, #3
 8002b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d905      	bls.n	8002b18 <find_volume+0x17c>
 8002b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0e:	3301      	adds	r3, #1
 8002b10:	643b      	str	r3, [r7, #64]	; 0x40
 8002b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d9e1      	bls.n	8002adc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d101      	bne.n	8002b24 <find_volume+0x188>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e187      	b.n	8002e34 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d901      	bls.n	8002b30 <find_volume+0x194>
 8002b2c:	230d      	movs	r3, #13
 8002b2e:	e181      	b.n	8002e34 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	3330      	adds	r3, #48	; 0x30
 8002b34:	330b      	adds	r3, #11
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fdfc 	bl	8001734 <ld_word>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b42:	d001      	beq.n	8002b48 <find_volume+0x1ac>
 8002b44:	230d      	movs	r3, #13
 8002b46:	e175      	b.n	8002e34 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	3330      	adds	r3, #48	; 0x30
 8002b4c:	3316      	adds	r3, #22
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fdf0 	bl	8001734 <ld_word>
 8002b54:	4603      	mov	r3, r0
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <find_volume+0x1d0>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	3330      	adds	r3, #48	; 0x30
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fdfd 	bl	8001764 <ld_dword>
 8002b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b70:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	789b      	ldrb	r3, [r3, #2]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <find_volume+0x1f4>
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	789b      	ldrb	r3, [r3, #2]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d001      	beq.n	8002b90 <find_volume+0x1f4>
 8002b8c:	230d      	movs	r3, #13
 8002b8e:	e151      	b.n	8002e34 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	789b      	ldrb	r3, [r3, #2]
 8002b94:	461a      	mov	r2, r3
 8002b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	895b      	ldrh	r3, [r3, #10]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <find_volume+0x228>
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	895b      	ldrh	r3, [r3, #10]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	895b      	ldrh	r3, [r3, #10]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <find_volume+0x22c>
 8002bc4:	230d      	movs	r3, #13
 8002bc6:	e135      	b.n	8002e34 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	3330      	adds	r3, #48	; 0x30
 8002bcc:	3311      	adds	r3, #17
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fdb0 	bl	8001734 <ld_word>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	891b      	ldrh	r3, [r3, #8]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <find_volume+0x252>
 8002bea:	230d      	movs	r3, #13
 8002bec:	e122      	b.n	8002e34 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	3313      	adds	r3, #19
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fd9d 	bl	8001734 <ld_word>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <find_volume+0x276>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	3330      	adds	r3, #48	; 0x30
 8002c08:	3320      	adds	r3, #32
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fdaa 	bl	8001764 <ld_dword>
 8002c10:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	3330      	adds	r3, #48	; 0x30
 8002c16:	330e      	adds	r3, #14
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fd8b 	bl	8001734 <ld_word>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <find_volume+0x290>
 8002c28:	230d      	movs	r3, #13
 8002c2a:	e103      	b.n	8002e34 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002c2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c30:	4413      	add	r3, r2
 8002c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c34:	8912      	ldrh	r2, [r2, #8]
 8002c36:	0912      	lsrs	r2, r2, #4
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d201      	bcs.n	8002c4a <find_volume+0x2ae>
 8002c46:	230d      	movs	r3, #13
 8002c48:	e0f4      	b.n	8002e34 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c52:	8952      	ldrh	r2, [r2, #10]
 8002c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d103      	bne.n	8002c68 <find_volume+0x2cc>
 8002c60:	230d      	movs	r3, #13
 8002c62:	e0e7      	b.n	8002e34 <find_volume+0x498>
 8002c64:	20000040 	.word	0x20000040
		fmt = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	4a72      	ldr	r2, [pc, #456]	; (8002e3c <find_volume+0x4a0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <find_volume+0x2e0>
 8002c76:	2303      	movs	r3, #3
 8002c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d802      	bhi.n	8002c8c <find_volume+0x2f0>
 8002c86:	2302      	movs	r3, #2
 8002c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d802      	bhi.n	8002c9c <find_volume+0x300>
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <find_volume+0x30c>
 8002ca4:	230d      	movs	r3, #13
 8002ca6:	e0c5      	b.n	8002e34 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1c9a      	adds	r2, r3, #2
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cb4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002cb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	441a      	add	r2, r3
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	441a      	add	r2, r3
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d11e      	bne.n	8002d10 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	3330      	adds	r3, #48	; 0x30
 8002cd6:	332a      	adds	r3, #42	; 0x2a
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fd2b 	bl	8001734 <ld_word>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <find_volume+0x34c>
 8002ce4:	230d      	movs	r3, #13
 8002ce6:	e0a5      	b.n	8002e34 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	891b      	ldrh	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <find_volume+0x358>
 8002cf0:	230d      	movs	r3, #13
 8002cf2:	e09f      	b.n	8002e34 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	3330      	adds	r3, #48	; 0x30
 8002cf8:	332c      	adds	r3, #44	; 0x2c
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fd32 	bl	8001764 <ld_dword>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0e:	e01f      	b.n	8002d50 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	891b      	ldrh	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <find_volume+0x380>
 8002d18:	230d      	movs	r3, #13
 8002d1a:	e08b      	b.n	8002e34 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d22:	441a      	add	r2, r3
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d103      	bne.n	8002d38 <find_volume+0x39c>
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	e00a      	b.n	8002d4e <find_volume+0x3b2>
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	085a      	lsrs	r2, r3, #1
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d5a:	0a5b      	lsrs	r3, r3, #9
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d201      	bcs.n	8002d64 <find_volume+0x3c8>
 8002d60:	230d      	movs	r3, #13
 8002d62:	e067      	b.n	8002e34 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6a:	611a      	str	r2, [r3, #16]
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d149      	bne.n	8002e16 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	3330      	adds	r3, #48	; 0x30
 8002d86:	3330      	adds	r3, #48	; 0x30
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fcd3 	bl	8001734 <ld_word>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d140      	bne.n	8002e16 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	3301      	adds	r3, #1
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d9c:	f7fe fe4f 	bl	8001a3e <move_window>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d137      	bne.n	8002e16 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2200      	movs	r2, #0
 8002daa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	3330      	adds	r3, #48	; 0x30
 8002db0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe fcbd 	bl	8001734 <ld_word>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d127      	bne.n	8002e16 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	3330      	adds	r3, #48	; 0x30
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fcca 	bl	8001764 <ld_dword>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <find_volume+0x4a4>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d11e      	bne.n	8002e16 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	3330      	adds	r3, #48	; 0x30
 8002ddc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fcbf 	bl	8001764 <ld_dword>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <find_volume+0x4a8>)
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d113      	bne.n	8002e16 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	3330      	adds	r3, #48	; 0x30
 8002df2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fcb4 	bl	8001764 <ld_dword>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	3330      	adds	r3, #48	; 0x30
 8002e06:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fcaa 	bl	8001764 <ld_dword>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002e1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <find_volume+0x4ac>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <find_volume+0x4ac>)
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <find_volume+0x4ac>)
 8002e2c:	881a      	ldrh	r2, [r3, #0]
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3758      	adds	r7, #88	; 0x58
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0ffffff5 	.word	0x0ffffff5
 8002e40:	41615252 	.word	0x41615252
 8002e44:	61417272 	.word	0x61417272
 8002e48:	20000044 	.word	0x20000044

08002e4c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8002e56:	2309      	movs	r3, #9
 8002e58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01c      	beq.n	8002e9a <validate+0x4e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d018      	beq.n	8002e9a <validate+0x4e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <validate+0x4e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	889a      	ldrh	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	88db      	ldrh	r3, [r3, #6]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d10c      	bne.n	8002e9a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	785b      	ldrb	r3, [r3, #1]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe f988 	bl	800119c <disk_status>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <validate+0x4e>
			res = FR_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <validate+0x5a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	e000      	b.n	8002ea8 <validate+0x5c>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	6013      	str	r3, [r2, #0]
	return res;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fcc9 	bl	8002866 <get_ldnumber>
 8002ed4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da01      	bge.n	8002ee0 <f_mount+0x28>
 8002edc:	230b      	movs	r3, #11
 8002ede:	e025      	b.n	8002f2c <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <f_mount+0x7c>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	490b      	ldr	r1, [pc, #44]	; (8002f34 <f_mount+0x7c>)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <f_mount+0x5e>
 8002f12:	2300      	movs	r3, #0
 8002f14:	e00a      	b.n	8002f2c <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002f16:	f107 010c 	add.w	r1, r7, #12
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fd3b 	bl	800299c <find_volume>
 8002f26:	4603      	mov	r3, r0
 8002f28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000040 	.word	0x20000040

08002f38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b099      	sub	sp, #100	; 0x64
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <f_open+0x18>
 8002f4c:	2309      	movs	r3, #9
 8002f4e:	e172      	b.n	8003236 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	f107 0114 	add.w	r1, r7, #20
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd1a 	bl	800299c <find_volume>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8002f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8156 	bne.w	8003224 <f_open+0x2ec>
		dj.obj.fs = fs;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	f107 0318 	add.w	r3, r7, #24
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fbff 	bl	8002788 <follow_path>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8002f90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002f98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da02      	bge.n	8002fa8 <f_open+0x70>
				res = FR_INVALID_NAME;
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 031c 	and.w	r3, r3, #28
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d073      	beq.n	800309a <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8002fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d107      	bne.n	8002fd2 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8002fc2:	f107 0318 	add.w	r3, r7, #24
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fae9 	bl	800259e <dir_register>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f043 0308 	orr.w	r3, r3, #8
 8002fd8:	71fb      	strb	r3, [r7, #7]
 8002fda:	e010      	b.n	8002ffe <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002fdc:	7fbb      	ldrb	r3, [r7, #30]
 8002fde:	f003 0311 	and.w	r3, r3, #17
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <f_open+0xb6>
					res = FR_DENIED;
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fec:	e007      	b.n	8002ffe <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <f_open+0xc6>
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8002ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003002:	2b00      	cmp	r3, #0
 8003004:	d163      	bne.n	80030ce <f_open+0x196>
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05e      	beq.n	80030ce <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fa2d 	bl	8002476 <ld_clust>
 800301c:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	f103 040e 	add.w	r4, r3, #14
 8003024:	f7fe fb7c 	bl	8001720 <get_fattime>
 8003028:	4603      	mov	r3, r0
 800302a:	4619      	mov	r1, r3
 800302c:	4620      	mov	r0, r4
 800302e:	f7fe fbd7 	bl	80017e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	330b      	adds	r3, #11
 8003036:	2220      	movs	r2, #32
 8003038:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800303e:	2200      	movs	r2, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fa37 	bl	80024b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	331c      	adds	r3, #28
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fbc7 	bl	80017e0 <st_dword>
					fs->wflag = 1;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2201      	movs	r2, #1
 8003056:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d037      	beq.n	80030ce <f_open+0x196>
						dw = fs->winsect;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8003064:	f107 0318 	add.w	r3, r7, #24
 8003068:	2200      	movs	r2, #0
 800306a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe ff2c 	bl	8001eca <remove_chain>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800307c:	2b00      	cmp	r3, #0
 800307e:	d126      	bne.n	80030ce <f_open+0x196>
							res = move_window(fs, dw);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fcda 	bl	8001a3e <move_window>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003094:	3a01      	subs	r2, #1
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	e019      	b.n	80030ce <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800309a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80030a2:	7fbb      	ldrb	r3, [r7, #30]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <f_open+0x17c>
					res = FR_NO_FILE;
 80030ac:	2304      	movs	r3, #4
 80030ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030b2:	e00c      	b.n	80030ce <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <f_open+0x196>
 80030be:	7fbb      	ldrb	r3, [r7, #30]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <f_open+0x196>
						res = FR_DENIED;
 80030c8:	2307      	movs	r3, #7
 80030ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80030ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <f_open+0x1b0>
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80030f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80030f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8092 	bne.w	8003224 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f9b5 	bl	8002476 <ld_clust>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003114:	331c      	adds	r3, #28
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fb24 	bl	8001764 <ld_dword>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	88da      	ldrh	r2, [r3, #6]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	79fa      	ldrb	r2, [r7, #7]
 8003134:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3328      	adds	r3, #40	; 0x28
 800314c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fb91 	bl	800187a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d060      	beq.n	8003224 <f_open+0x2ec>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d05c      	beq.n	8003224 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	895b      	ldrh	r3, [r3, #10]
 8003176:	025b      	lsls	r3, r3, #9
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	657b      	str	r3, [r7, #84]	; 0x54
 8003186:	e016      	b.n	80031b6 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fd10 	bl	8001bb2 <get_fat>
 8003192:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003196:	2b01      	cmp	r3, #1
 8003198:	d802      	bhi.n	80031a0 <f_open+0x268>
 800319a:	2302      	movs	r3, #2
 800319c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80031a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d102      	bne.n	80031ae <f_open+0x276>
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80031ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	657b      	str	r3, [r7, #84]	; 0x54
 80031b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <f_open+0x28e>
 80031be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d8e0      	bhi.n	8003188 <f_open+0x250>
				}
				fp->clust = clst;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ca:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80031cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d127      	bne.n	8003224 <f_open+0x2ec>
 80031d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d022      	beq.n	8003224 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fcc6 	bl	8001b74 <clst2sect>
 80031e8:	6478      	str	r0, [r7, #68]	; 0x44
 80031ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <f_open+0x2c0>
						res = FR_INT_ERR;
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031f6:	e015      	b.n	8003224 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fa:	0a5a      	lsrs	r2, r3, #9
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	7858      	ldrb	r0, [r3, #1]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	2301      	movs	r3, #1
 8003214:	f7fd ffd8 	bl	80011c8 <disk_read>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <f_open+0x2ec>
 800321e:	2301      	movs	r3, #1
 8003220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <f_open+0x2fa>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003236:	4618      	mov	r0, r3
 8003238:	3764      	adds	r7, #100	; 0x64
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}

0800323e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08c      	sub	sp, #48	; 0x30
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f107 0210 	add.w	r2, r7, #16
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fdf4 	bl	8002e4c <validate>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800326a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <f_write+0x44>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	7c5b      	ldrb	r3, [r3, #17]
 8003276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800327a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <f_write+0x4a>
 8003282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003286:	e13f      	b.n	8003508 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	7c1b      	ldrb	r3, [r3, #16]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <f_write+0x5a>
 8003294:	2307      	movs	r3, #7
 8003296:	e137      	b.n	8003508 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	441a      	add	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f080 8121 	bcs.w	80034ec <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80032b2:	e11b      	b.n	80034ec <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 80d7 	bne.w	8003470 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	0a5b      	lsrs	r3, r3, #9
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	8952      	ldrh	r2, [r2, #10]
 80032cc:	3a01      	subs	r2, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d137      	bne.n	8003348 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10c      	bne.n	80032fa <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10e      	bne.n	800330a <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fe4f 	bl	8001f94 <create_chain>
 80032f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80032f8:	e007      	b.n	800330a <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7fe fe46 	bl	8001f94 <create_chain>
 8003308:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80f2 	beq.w	80034f6 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	2b01      	cmp	r3, #1
 8003316:	d104      	bne.n	8003322 <f_write+0xe4>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2202      	movs	r2, #2
 800331c:	745a      	strb	r2, [r3, #17]
 800331e:	2302      	movs	r3, #2
 8003320:	e0f2      	b.n	8003508 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d104      	bne.n	8003334 <f_write+0xf6>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	745a      	strb	r2, [r3, #17]
 8003330:	2301      	movs	r3, #1
 8003332:	e0e9      	b.n	8003508 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003338:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <f_write+0x10a>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003346:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	7c1b      	ldrb	r3, [r3, #16]
 800334c:	b25b      	sxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	da18      	bge.n	8003384 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	7858      	ldrb	r0, [r3, #1]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	2301      	movs	r3, #1
 8003362:	f7fd ff9b 	bl	800129c <disk_write>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <f_write+0x138>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	745a      	strb	r2, [r3, #17]
 8003372:	2301      	movs	r3, #1
 8003374:	e0c8      	b.n	8003508 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	7c1b      	ldrb	r3, [r3, #16]
 800337a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f7fe fbf1 	bl	8001b74 <clst2sect>
 8003392:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <f_write+0x166>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	745a      	strb	r2, [r3, #17]
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0b1      	b.n	8003508 <f_write+0x2ca>
			sect += csect;
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0a5b      	lsrs	r3, r3, #9
 80033b0:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d03c      	beq.n	8003432 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4413      	add	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	8952      	ldrh	r2, [r2, #10]
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d905      	bls.n	80033d2 <f_write+0x194>
					cc = fs->csize - csect;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	895b      	ldrh	r3, [r3, #10]
 80033ca:	461a      	mov	r2, r3
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	7858      	ldrb	r0, [r3, #1]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	f7fd ff5e 	bl	800129c <disk_write>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <f_write+0x1b2>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	745a      	strb	r2, [r3, #17]
 80033ec:	2301      	movs	r3, #1
 80033ee:	e08b      	b.n	8003508 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d915      	bls.n	800342a <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	025b      	lsls	r3, r3, #9
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003416:	4619      	mov	r1, r3
 8003418:	f7fe fa0e 	bl	8001838 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	7c1b      	ldrb	r3, [r3, #16]
 8003420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	025b      	lsls	r3, r3, #9
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8003430:	e03f      	b.n	80034b2 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	d016      	beq.n	800346a <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003444:	429a      	cmp	r2, r3
 8003446:	d210      	bcs.n	800346a <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	7858      	ldrb	r0, [r3, #1]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003452:	2301      	movs	r3, #1
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	f7fd feb7 	bl	80011c8 <disk_read>
 800345a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	d004      	beq.n	800346a <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	745a      	strb	r2, [r3, #17]
 8003466:	2301      	movs	r3, #1
 8003468:	e04e      	b.n	8003508 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003478:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d901      	bls.n	800348a <f_write+0x24c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	4413      	add	r3, r2
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	69f9      	ldr	r1, [r7, #28]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe f9ca 	bl	8001838 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	7c1b      	ldrb	r3, [r3, #16]
 80034a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	441a      	add	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	4413      	add	r3, r2
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	441a      	add	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	615a      	str	r2, [r3, #20]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	bf38      	it	cc
 80034e6:	461a      	movcc	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f aee0 	bne.w	80032b4 <f_write+0x76>
 80034f4:	e000      	b.n	80034f8 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80034f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	7c1b      	ldrb	r3, [r3, #16]
 80034fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3730      	adds	r7, #48	; 0x30
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f107 0208 	add.w	r2, r7, #8
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fc93 	bl	8002e4c <validate>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d168      	bne.n	8003602 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7c1b      	ldrb	r3, [r3, #16]
 8003534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d062      	beq.n	8003602 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7c1b      	ldrb	r3, [r3, #16]
 8003540:	b25b      	sxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	da15      	bge.n	8003572 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	7858      	ldrb	r0, [r3, #1]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	2301      	movs	r3, #1
 8003556:	f7fd fea1 	bl	800129c <disk_write>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <f_sync+0x54>
 8003560:	2301      	movs	r3, #1
 8003562:	e04f      	b.n	8003604 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7c1b      	ldrb	r3, [r3, #16]
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003572:	f7fe f8d5 	bl	8001720 <get_fattime>
 8003576:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f7fe fa5c 	bl	8001a3e <move_window>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d138      	bne.n	8003602 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	330b      	adds	r3, #11
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	330b      	adds	r3, #11
 80035a0:	f042 0220 	orr.w	r2, r2, #32
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	f7fe ff7e 	bl	80024b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f103 021c 	add.w	r2, r3, #28
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fe f90b 	bl	80017e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3316      	adds	r3, #22
 80035ce:	6939      	ldr	r1, [r7, #16]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe f905 	bl	80017e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3312      	adds	r3, #18
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe f8e4 	bl	80017aa <st_word>
					fs->wflag = 1;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2201      	movs	r2, #1
 80035e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fa54 	bl	8001a98 <sync_fs>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7c1b      	ldrb	r3, [r3, #16]
 80035f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003602:	7dfb      	ldrb	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff7b 	bl	8003510 <f_sync>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10e      	bne.n	8003642 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f107 0208 	add.w	r2, r7, #8
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fc0d 	bl	8002e4c <validate>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <writeSD>:

/* USER CODE BEGIN PFP */

/*---------------------Zapis na karte SD-----------------------*/
void writeSD()
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	481a      	ldr	r0, [pc, #104]	; (80036c0 <writeSD+0x74>)
 8003658:	f001 fd84 	bl	8005164 <HAL_GPIO_WritePin>
	fresult = f_mount(&FatFs, "", 0);
 800365c:	2200      	movs	r2, #0
 800365e:	4919      	ldr	r1, [pc, #100]	; (80036c4 <writeSD+0x78>)
 8003660:	4819      	ldr	r0, [pc, #100]	; (80036c8 <writeSD+0x7c>)
 8003662:	f7ff fc29 	bl	8002eb8 <f_mount>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <writeSD+0x80>)
 800366c:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&file, "write.txt", FA_OPEN_ALWAYS | FA_WRITE);
 800366e:	2212      	movs	r2, #18
 8003670:	4917      	ldr	r1, [pc, #92]	; (80036d0 <writeSD+0x84>)
 8003672:	4818      	ldr	r0, [pc, #96]	; (80036d4 <writeSD+0x88>)
 8003674:	f7ff fc60 	bl	8002f38 <f_open>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <writeSD+0x80>)
 800367e:	701a      	strb	r2, [r3, #0]
	int len = sprintf( buffer, "Hello PTM!\r\n");
 8003680:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <writeSD+0x8c>)
 8003682:	4b16      	ldr	r3, [pc, #88]	; (80036dc <writeSD+0x90>)
 8003684:	4614      	mov	r4, r2
 8003686:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003688:	6020      	str	r0, [r4, #0]
 800368a:	6061      	str	r1, [r4, #4]
 800368c:	60a2      	str	r2, [r4, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	7323      	strb	r3, [r4, #12]
 8003692:	230c      	movs	r3, #12
 8003694:	607b      	str	r3, [r7, #4]
	fresult = f_write(&file, buffer, len, &bytes_written);
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <writeSD+0x94>)
 800369a:	490f      	ldr	r1, [pc, #60]	; (80036d8 <writeSD+0x8c>)
 800369c:	480d      	ldr	r0, [pc, #52]	; (80036d4 <writeSD+0x88>)
 800369e:	f7ff fdce 	bl	800323e <f_write>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <writeSD+0x80>)
 80036a8:	701a      	strb	r2, [r3, #0]
	fresult = f_close (&file);
 80036aa:	480a      	ldr	r0, [pc, #40]	; (80036d4 <writeSD+0x88>)
 80036ac:	f7ff ffae 	bl	800360c <f_close>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <writeSD+0x80>)
 80036b6:	701a      	strb	r2, [r3, #0]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	08007074 	.word	0x08007074
 80036c8:	20000058 	.word	0x20000058
 80036cc:	20000698 	.word	0x20000698
 80036d0:	08007078 	.word	0x08007078
 80036d4:	20000310 	.word	0x20000310
 80036d8:	20000598 	.word	0x20000598
 80036dc:	08007084 	.word	0x08007084
 80036e0:	20000734 	.word	0x20000734

080036e4 <HAL_TIM_PeriodElapsedCallback>:
	}
}*/

/*--------------------Odwarzanie z glosniczka------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM5)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10d      	bne.n	8003712 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		//if(i!=123200-1)
		//{
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,rawAudio[i]);
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	4809      	ldr	r0, [pc, #36]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003704:	f001 fb6e 	bl	8004de4 <HAL_DAC_SetValue>
			i++;
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003710:	6013      	str	r3, [r2, #0]
		//}
		//else {i=0;}

	}
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40000c00 	.word	0x40000c00
 8003720:	20000048 	.word	0x20000048
 8003724:	080070a0 	.word	0x080070a0
 8003728:	20000584 	.word	0x20000584
 800372c:	00000000 	.word	0x00000000

08003730 <set_volume>:
/*--------------------Ustalanie glosnosci------------------*/
void set_volume()
{
 8003730:	b5b0      	push	{r4, r5, r7, lr}
 8003732:	af00      	add	r7, sp, #0

	V=2.95;
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <set_volume+0x78>)
 8003736:	a41a      	add	r4, pc, #104	; (adr r4, 80037a0 <set_volume+0x70>)
 8003738:	e9d4 3400 	ldrd	r3, r4, [r4]
 800373c:	e9c2 3400 	strd	r3, r4, [r2]
	  HAL_ADC_Start(&hadc1);
 8003740:	481a      	ldr	r0, [pc, #104]	; (80037ac <set_volume+0x7c>)
 8003742:	f000 fe59 	bl	80043f8 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8003746:	210a      	movs	r1, #10
 8003748:	4818      	ldr	r0, [pc, #96]	; (80037ac <set_volume+0x7c>)
 800374a:	f000 ff1b 	bl	8004584 <HAL_ADC_PollForConversion>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d122      	bne.n	800379a <set_volume+0x6a>
	  {
		  value = HAL_ADC_GetValue(&hadc1);
 8003754:	4815      	ldr	r0, [pc, #84]	; (80037ac <set_volume+0x7c>)
 8003756:	f000 ff99 	bl	800468c <HAL_ADC_GetValue>
 800375a:	4603      	mov	r3, r0
 800375c:	b29a      	uxth	r2, r3
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <set_volume+0x80>)
 8003760:	801a      	strh	r2, [r3, #0]
		  napiecie=(V/(double)4096)*value;
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <set_volume+0x78>)
 8003764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <set_volume+0x84>)
 800376e:	f7fd f811 	bl	8000794 <__aeabi_ddiv>
 8003772:	4603      	mov	r3, r0
 8003774:	460c      	mov	r4, r1
 8003776:	4625      	mov	r5, r4
 8003778:	461c      	mov	r4, r3
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <set_volume+0x80>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fc fe74 	bl	800046c <__aeabi_i2d>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4620      	mov	r0, r4
 800378a:	4629      	mov	r1, r5
 800378c:	f7fc fed8 	bl	8000540 <__aeabi_dmul>
 8003790:	4603      	mov	r3, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <set_volume+0x88>)
 8003796:	e9c2 3400 	strd	r3, r4, [r2]


	  }

}
 800379a:	bf00      	nop
 800379c:	bdb0      	pop	{r4, r5, r7, pc}
 800379e:	bf00      	nop
 80037a0:	9999999a 	.word	0x9999999a
 80037a4:	40079999 	.word	0x40079999
 80037a8:	20000008 	.word	0x20000008
 80037ac:	20000538 	.word	0x20000538
 80037b0:	20000736 	.word	0x20000736
 80037b4:	40b00000 	.word	0x40b00000
 80037b8:	20000050 	.word	0x20000050

080037bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037c0:	f000 fd64 	bl	800428c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037c4:	f000 f82c 	bl	8003820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037c8:	f000 fa5c 	bl	8003c84 <MX_GPIO_Init>
  MX_TIM2_Init();
 80037cc:	f000 f944 	bl	8003a58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80037d0:	f000 f99c 	bl	8003b0c <MX_TIM3_Init>
  MX_SPI1_Init();
 80037d4:	f000 f90a 	bl	80039ec <MX_SPI1_Init>
  MX_DAC_Init();
 80037d8:	f000 f8de 	bl	8003998 <MX_DAC_Init>
  MX_TIM5_Init();
 80037dc:	f000 fa06 	bl	8003bec <MX_TIM5_Init>
  MX_ADC1_Init();
 80037e0:	f000 f888 	bl	80038f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80037e4:	2100      	movs	r1, #0
 80037e6:	480b      	ldr	r0, [pc, #44]	; (8003814 <main+0x58>)
 80037e8:	f002 fd72 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80037ec:	2104      	movs	r1, #4
 80037ee:	4809      	ldr	r0, [pc, #36]	; (8003814 <main+0x58>)
 80037f0:	f002 fd6e 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80037f4:	2108      	movs	r1, #8
 80037f6:	4807      	ldr	r0, [pc, #28]	; (8003814 <main+0x58>)
 80037f8:	f002 fd6a 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80037fc:	2100      	movs	r1, #0
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <main+0x5c>)
 8003800:	f002 fd66 	bl	80062d0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8003804:	4805      	ldr	r0, [pc, #20]	; (800381c <main+0x60>)
 8003806:	f002 fd14 	bl	8006232 <HAL_TIM_Base_Start_IT>
  //HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
  //HAL_ADC_Start(&hadc1);
  //HAL_ADC_Start(&hadc2);

  writeSD();
 800380a:	f7ff ff1f 	bl	800364c <writeSD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 set_volume();
 800380e:	f7ff ff8f 	bl	8003730 <set_volume>
 8003812:	e7fc      	b.n	800380e <main+0x52>
 8003814:	200002cc 	.word	0x200002cc
 8003818:	200006f4 	.word	0x200006f4
 800381c:	2000028c 	.word	0x2000028c

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b094      	sub	sp, #80	; 0x50
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 0320 	add.w	r3, r7, #32
 800382a:	2230      	movs	r2, #48	; 0x30
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f003 fbfe 	bl	8007030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <SystemClock_Config+0xcc>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	4a27      	ldr	r2, [pc, #156]	; (80038ec <SystemClock_Config+0xcc>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	; 0x40
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <SystemClock_Config+0xcc>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003860:	2300      	movs	r3, #0
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <SystemClock_Config+0xd0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <SystemClock_Config+0xd0>)
 800386a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <SystemClock_Config+0xd0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800387c:	2301      	movs	r3, #1
 800387e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003886:	2302      	movs	r3, #2
 8003888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800388a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003890:	2304      	movs	r3, #4
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003894:	23a8      	movs	r3, #168	; 0xa8
 8003896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003898:	2302      	movs	r3, #2
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800389c:	2304      	movs	r3, #4
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a0:	f107 0320 	add.w	r3, r7, #32
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fc77 	bl	8005198 <HAL_RCC_OscConfig>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038b0:	f000 fa72 	bl	8003d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b4:	230f      	movs	r3, #15
 80038b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b8:	2302      	movs	r3, #2
 80038ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	2105      	movs	r1, #5
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fed0 	bl	8005678 <HAL_RCC_ClockConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038de:	f000 fa5b 	bl	8003d98 <Error_Handler>
  }
}
 80038e2:	bf00      	nop
 80038e4:	3750      	adds	r7, #80	; 0x50
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40007000 	.word	0x40007000

080038f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038fa:	463b      	mov	r3, r7
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003906:	4b21      	ldr	r3, [pc, #132]	; (800398c <MX_ADC1_Init+0x98>)
 8003908:	4a21      	ldr	r2, [pc, #132]	; (8003990 <MX_ADC1_Init+0x9c>)
 800390a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800390c:	4b1f      	ldr	r3, [pc, #124]	; (800398c <MX_ADC1_Init+0x98>)
 800390e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003914:	4b1d      	ldr	r3, [pc, #116]	; (800398c <MX_ADC1_Init+0x98>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <MX_ADC1_Init+0x98>)
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <MX_ADC1_Init+0x98>)
 8003922:	2200      	movs	r2, #0
 8003924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <MX_ADC1_Init+0x98>)
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <MX_ADC1_Init+0x98>)
 8003930:	2200      	movs	r2, #0
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <MX_ADC1_Init+0x98>)
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <MX_ADC1_Init+0xa0>)
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <MX_ADC1_Init+0x98>)
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <MX_ADC1_Init+0x98>)
 8003942:	2201      	movs	r2, #1
 8003944:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <MX_ADC1_Init+0x98>)
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <MX_ADC1_Init+0x98>)
 8003950:	2201      	movs	r2, #1
 8003952:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003954:	480d      	ldr	r0, [pc, #52]	; (800398c <MX_ADC1_Init+0x98>)
 8003956:	f000 fd0b 	bl	8004370 <HAL_ADC_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003960:	f000 fa1a 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003964:	230f      	movs	r3, #15
 8003966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003968:	2301      	movs	r3, #1
 800396a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003970:	463b      	mov	r3, r7
 8003972:	4619      	mov	r1, r3
 8003974:	4805      	ldr	r0, [pc, #20]	; (800398c <MX_ADC1_Init+0x98>)
 8003976:	f000 fe97 	bl	80046a8 <HAL_ADC_ConfigChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003980:	f000 fa0a 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000538 	.word	0x20000538
 8003990:	40012000 	.word	0x40012000
 8003994:	0f000001 	.word	0x0f000001

08003998 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800399e:	463b      	mov	r3, r7
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <MX_DAC_Init+0x4c>)
 80039a8:	4a0f      	ldr	r2, [pc, #60]	; (80039e8 <MX_DAC_Init+0x50>)
 80039aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <MX_DAC_Init+0x4c>)
 80039ae:	f001 f9aa 	bl	8004d06 <HAL_DAC_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80039b8:	f000 f9ee 	bl	8003d98 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80039bc:	2300      	movs	r3, #0
 80039be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80039c4:	463b      	mov	r3, r7
 80039c6:	2200      	movs	r2, #0
 80039c8:	4619      	mov	r1, r3
 80039ca:	4806      	ldr	r0, [pc, #24]	; (80039e4 <MX_DAC_Init+0x4c>)
 80039cc:	f001 f9bd 	bl	8004d4a <HAL_DAC_ConfigChannel>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80039d6:	f000 f9df 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000584 	.word	0x20000584
 80039e8:	40007400 	.word	0x40007400

080039ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <MX_SPI1_Init+0x64>)
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <MX_SPI1_Init+0x68>)
 80039f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <MX_SPI1_Init+0x64>)
 80039f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a20:	2218      	movs	r2, #24
 8003a22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a38:	220a      	movs	r2, #10
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a3c:	4804      	ldr	r0, [pc, #16]	; (8003a50 <MX_SPI1_Init+0x64>)
 8003a3e:	f001 ffd9 	bl	80059f4 <HAL_SPI_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a48:	f000 f9a6 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2000069c 	.word	0x2000069c
 8003a54:	40013000 	.word	0x40013000

08003a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5e:	f107 0320 	add.w	r3, r7, #32
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	611a      	str	r2, [r3, #16]
 8003a76:	615a      	str	r2, [r3, #20]
 8003a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 8003a82:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003a84:	f245 2207 	movw	r2, #20999	; 0x5207
 8003a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003a92:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003aa4:	4818      	ldr	r0, [pc, #96]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003aa6:	f002 fbe8 	bl	800627a <HAL_TIM_PWM_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003ab0:	f000 f972 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003abc:	f107 0320 	add.w	r3, r7, #32
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4811      	ldr	r0, [pc, #68]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003ac4:	f003 fa00 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003ace:	f000 f963 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad2:	2360      	movs	r3, #96	; 0x60
 8003ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4807      	ldr	r0, [pc, #28]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003aea:	f002 fd37 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003af4:	f000 f950 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003af8:	4803      	ldr	r0, [pc, #12]	; (8003b08 <MX_TIM2_Init+0xb0>)
 8003afa:	f000 fab9 	bl	8004070 <HAL_TIM_MspPostInit>

}
 8003afe:	bf00      	nop
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200006f4 	.word	0x200006f4

08003b0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b12:	f107 0320 	add.w	r3, r7, #32
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	611a      	str	r2, [r3, #16]
 8003b2a:	615a      	str	r2, [r3, #20]
 8003b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <MX_TIM3_Init+0xdc>)
 8003b32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b36:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3c:	4b29      	ldr	r3, [pc, #164]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b44:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b56:	4823      	ldr	r0, [pc, #140]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b58:	f002 fb8f 	bl	800627a <HAL_TIM_PWM_Init>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003b62:	f000 f919 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b6e:	f107 0320 	add.w	r3, r7, #32
 8003b72:	4619      	mov	r1, r3
 8003b74:	481b      	ldr	r0, [pc, #108]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b76:	f003 f9a7 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003b80:	f000 f90a 	bl	8003d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b84:	2360      	movs	r3, #96	; 0x60
 8003b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	2200      	movs	r2, #0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4812      	ldr	r0, [pc, #72]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003b9c:	f002 fcde 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003ba6:	f000 f8f7 	bl	8003d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	2204      	movs	r2, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	480c      	ldr	r0, [pc, #48]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003bb2:	f002 fcd3 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003bbc:	f000 f8ec 	bl	8003d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bc0:	1d3b      	adds	r3, r7, #4
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4807      	ldr	r0, [pc, #28]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003bc8:	f002 fcc8 	bl	800655c <HAL_TIM_PWM_ConfigChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8003bd2:	f000 f8e1 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003bd6:	4803      	ldr	r0, [pc, #12]	; (8003be4 <MX_TIM3_Init+0xd8>)
 8003bd8:	f000 fa4a 	bl	8004070 <HAL_TIM_MspPostInit>

}
 8003bdc:	bf00      	nop
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200002cc 	.word	0x200002cc
 8003be8:	40000400 	.word	0x40000400

08003bec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c00:	463b      	mov	r3, r7
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <MX_TIM5_Init+0x94>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49;
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c10:	2231      	movs	r2, #49	; 0x31
 8003c12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 104;
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c1c:	2268      	movs	r2, #104	; 0x68
 8003c1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c20:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003c2c:	4813      	ldr	r0, [pc, #76]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c2e:	f002 fad5 	bl	80061dc <HAL_TIM_Base_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003c38:	f000 f8ae 	bl	8003d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	4619      	mov	r1, r3
 8003c48:	480c      	ldr	r0, [pc, #48]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c4a:	f002 fd4d 	bl	80066e8 <HAL_TIM_ConfigClockSource>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003c54:	f000 f8a0 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c60:	463b      	mov	r3, r7
 8003c62:	4619      	mov	r1, r3
 8003c64:	4805      	ldr	r0, [pc, #20]	; (8003c7c <MX_TIM5_Init+0x90>)
 8003c66:	f003 f92f 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003c70:	f000 f892 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000028c 	.word	0x2000028c
 8003c80:	40000c00 	.word	0x40000c00

08003c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	; 0x30
 8003c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003ca4:	f043 0310 	orr.w	r3, r3, #16
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a33      	ldr	r2, [pc, #204]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d30:	f043 0308 	orr.w	r3, r3, #8
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <MX_GPIO_Init+0x108>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003d42:	2200      	movs	r2, #0
 8003d44:	f24f 0180 	movw	r1, #61568	; 0xf080
 8003d48:	4811      	ldr	r0, [pc, #68]	; (8003d90 <MX_GPIO_Init+0x10c>)
 8003d4a:	f001 fa0b 	bl	8005164 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003d4e:	23ff      	movs	r3, #255	; 0xff
 8003d50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d56:	2301      	movs	r3, #1
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d5a:	f107 031c 	add.w	r3, r7, #28
 8003d5e:	4619      	mov	r1, r3
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <MX_GPIO_Init+0x110>)
 8003d62:	f001 f865 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003d66:	f24f 0380 	movw	r3, #61568	; 0xf080
 8003d6a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d78:	f107 031c 	add.w	r3, r7, #28
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4804      	ldr	r0, [pc, #16]	; (8003d90 <MX_GPIO_Init+0x10c>)
 8003d80:	f001 f856 	bl	8004e30 <HAL_GPIO_Init>

}
 8003d84:	bf00      	nop
 8003d86:	3730      	adds	r7, #48	; 0x30
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40021000 	.word	0x40021000

08003d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_MspInit+0x4c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_MspInit+0x4c>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_MspInit+0x4c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_MspInit+0x4c>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_MspInit+0x4c>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_MspInit+0x4c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <HAL_ADC_MspInit+0x7c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d127      	bne.n	8003e6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_ADC_MspInit+0x80>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <HAL_ADC_MspInit+0x80>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2a:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <HAL_ADC_MspInit+0x80>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <HAL_ADC_MspInit+0x80>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <HAL_ADC_MspInit+0x80>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	6313      	str	r3, [r2, #48]	; 0x30
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_ADC_MspInit+0x80>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e52:	2320      	movs	r3, #32
 8003e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e56:	2303      	movs	r3, #3
 8003e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	4619      	mov	r1, r3
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <HAL_ADC_MspInit+0x84>)
 8003e66:	f000 ffe3 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	; 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40012000 	.word	0x40012000
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40020800 	.word	0x40020800

08003e80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <HAL_DAC_MspInit+0x7c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d127      	bne.n	8003ef2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_DAC_MspInit+0x80>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <HAL_DAC_MspInit+0x80>)
 8003eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_DAC_MspInit+0x80>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_DAC_MspInit+0x80>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_DAC_MspInit+0x80>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_DAC_MspInit+0x80>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003eda:	2310      	movs	r3, #16
 8003edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	4619      	mov	r1, r3
 8003eec:	4805      	ldr	r0, [pc, #20]	; (8003f04 <HAL_DAC_MspInit+0x84>)
 8003eee:	f000 ff9f 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003ef2:	bf00      	nop
 8003ef4:	3728      	adds	r7, #40	; 0x28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40007400 	.word	0x40007400
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40020000 	.word	0x40020000

08003f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_SPI_MspInit+0x84>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d12b      	bne.n	8003f82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f38:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003f62:	2338      	movs	r3, #56	; 0x38
 8003f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f72:	2305      	movs	r3, #5
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4805      	ldr	r0, [pc, #20]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f7e:	f000 ff57 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f82:	bf00      	nop
 8003f84:	3728      	adds	r7, #40	; 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40013000 	.word	0x40013000
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40020400 	.word	0x40020400

08003f98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d116      	bne.n	8003fd8 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_TIM_PWM_MspInit+0x80>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a19      	ldr	r2, [pc, #100]	; (8004018 <HAL_TIM_PWM_MspInit+0x80>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <HAL_TIM_PWM_MspInit+0x80>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	201c      	movs	r0, #28
 8003fcc:	f000 fe65 	bl	8004c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fd0:	201c      	movs	r0, #28
 8003fd2:	f000 fe7e 	bl	8004cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fd6:	e01a      	b.n	800400e <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0f      	ldr	r2, [pc, #60]	; (800401c <HAL_TIM_PWM_MspInit+0x84>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d115      	bne.n	800400e <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_TIM_PWM_MspInit+0x80>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_TIM_PWM_MspInit+0x80>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_TIM_PWM_MspInit+0x80>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	201d      	movs	r0, #29
 8004004:	f000 fe49 	bl	8004c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004008:	201d      	movs	r0, #29
 800400a:	f000 fe62 	bl	8004cd2 <HAL_NVIC_EnableIRQ>
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40000400 	.word	0x40000400

08004020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <HAL_TIM_Base_MspInit+0x48>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d115      	bne.n	800405e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <HAL_TIM_Base_MspInit+0x4c>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a0c      	ldr	r2, [pc, #48]	; (800406c <HAL_TIM_Base_MspInit+0x4c>)
 800403c:	f043 0308 	orr.w	r3, r3, #8
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
 8004042:	4b0a      	ldr	r3, [pc, #40]	; (800406c <HAL_TIM_Base_MspInit+0x4c>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	2032      	movs	r0, #50	; 0x32
 8004054:	f000 fe21 	bl	8004c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004058:	2032      	movs	r0, #50	; 0x32
 800405a:	f000 fe3a 	bl	8004cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40023800 	.word	0x40023800

08004070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d11f      	bne.n	80040d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4a30      	ldr	r2, [pc, #192]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6313      	str	r3, [r2, #48]	; 0x30
 80040a2:	4b2e      	ldr	r3, [pc, #184]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040c0:	2301      	movs	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	4619      	mov	r1, r3
 80040ca:	4825      	ldr	r0, [pc, #148]	; (8004160 <HAL_TIM_MspPostInit+0xf0>)
 80040cc:	f000 feb0 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80040d0:	e040      	b.n	8004154 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_TIM_MspPostInit+0xf4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d13b      	bne.n	8004154 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a1d      	ldr	r2, [pc, #116]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 80040e6:	f043 0302 	orr.w	r3, r3, #2
 80040ea:	6313      	str	r3, [r2, #48]	; 0x30
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f8:	2300      	movs	r3, #0
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	4b17      	ldr	r3, [pc, #92]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	6313      	str	r3, [r2, #48]	; 0x30
 8004108:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_TIM_MspPostInit+0xec>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004118:	2302      	movs	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004124:	2302      	movs	r3, #2
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	4619      	mov	r1, r3
 800412e:	480e      	ldr	r0, [pc, #56]	; (8004168 <HAL_TIM_MspPostInit+0xf8>)
 8004130:	f000 fe7e 	bl	8004e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004134:	23c0      	movs	r3, #192	; 0xc0
 8004136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004144:	2302      	movs	r3, #2
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4619      	mov	r1, r3
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <HAL_TIM_MspPostInit+0xfc>)
 8004150:	f000 fe6e 	bl	8004e30 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3728      	adds	r7, #40	; 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	40020000 	.word	0x40020000
 8004164:	40000400 	.word	0x40000400
 8004168:	40020400 	.word	0x40020400
 800416c:	40020800 	.word	0x40020800

08004170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004182:	e7fe      	b.n	8004182 <HardFault_Handler+0x4>

08004184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004188:	e7fe      	b.n	8004188 <MemManage_Handler+0x4>

0800418a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800418a:	b480      	push	{r7}
 800418c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800418e:	e7fe      	b.n	800418e <BusFault_Handler+0x4>

08004190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004194:	e7fe      	b.n	8004194 <UsageFault_Handler+0x4>

08004196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
sdcard_systick_timerproc();
 80041c4:	f7fd fa94 	bl	80016f0 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041c8:	f000 f8b2 	bl	8004330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <TIM2_IRQHandler+0x10>)
 80041d6:	f002 f8b9 	bl	800634c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200006f4 	.word	0x200006f4

080041e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041e8:	4802      	ldr	r0, [pc, #8]	; (80041f4 <TIM3_IRQHandler+0x10>)
 80041ea:	f002 f8af 	bl	800634c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200002cc 	.word	0x200002cc

080041f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <TIM5_IRQHandler+0x10>)
 80041fe:	f002 f8a5 	bl	800634c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	2000028c 	.word	0x2000028c

0800420c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <SystemInit+0x28>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <SystemInit+0x28>)
 8004218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800421c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <SystemInit+0x28>)
 8004222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004226:	609a      	str	r2, [r3, #8]
#endif
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800423c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800423e:	e003      	b.n	8004248 <LoopCopyDataInit>

08004240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004246:	3104      	adds	r1, #4

08004248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004248:	480b      	ldr	r0, [pc, #44]	; (8004278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800424c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800424e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004250:	d3f6      	bcc.n	8004240 <CopyDataInit>
  ldr  r2, =_sbss
 8004252:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004254:	e002      	b.n	800425c <LoopFillZerobss>

08004256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004258:	f842 3b04 	str.w	r3, [r2], #4

0800425c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800425e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004260:	d3f9      	bcc.n	8004256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004262:	f7ff ffd3 	bl	800420c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004266:	f002 febf 	bl	8006fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800426a:	f7ff faa7 	bl	80037bc <main>
  bx  lr    
 800426e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004270:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004274:	08025200 	.word	0x08025200
  ldr  r0, =_sdata
 8004278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800427c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8004280:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8004284:	2000073c 	.word	0x2000073c

08004288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004288:	e7fe      	b.n	8004288 <ADC_IRQHandler>
	...

0800428c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_Init+0x40>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <HAL_Init+0x40>)
 8004296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800429a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_Init+0x40>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <HAL_Init+0x40>)
 80042a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_Init+0x40>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a07      	ldr	r2, [pc, #28]	; (80042cc <HAL_Init+0x40>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b4:	2003      	movs	r0, #3
 80042b6:	f000 fce5 	bl	8004c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f000 f808 	bl	80042d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042c0:	f7ff fd72 	bl	8003da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023c00 	.word	0x40023c00

080042d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_InitTick+0x54>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_InitTick+0x58>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fcfd 	bl	8004cee <HAL_SYSTICK_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00e      	b.n	800431c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d80a      	bhi.n	800431a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004304:	2200      	movs	r2, #0
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	f000 fcc5 	bl	8004c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <HAL_InitTick+0x5c>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000010 	.word	0x20000010
 8004328:	20000018 	.word	0x20000018
 800432c:	20000014 	.word	0x20000014

08004330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_IncTick+0x20>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_IncTick+0x24>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_IncTick+0x24>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000018 	.word	0x20000018
 8004354:	20000738 	.word	0x20000738

08004358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return uwTick;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_GetTick+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000738 	.word	0x20000738

08004370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e033      	b.n	80043ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fd32 	bl	8003df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d118      	bne.n	80043e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043b6:	f023 0302 	bic.w	r3, r3, #2
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa92 	bl	80048ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	f043 0201 	orr.w	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
 80043de:	e001      	b.n	80043e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_ADC_Start+0x1a>
 800440e:	2302      	movs	r3, #2
 8004410:	e0a5      	b.n	800455e <HAL_ADC_Start+0x166>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d018      	beq.n	800445a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_ADC_Start+0x174>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a4c      	ldr	r2, [pc, #304]	; (8004570 <HAL_ADC_Start+0x178>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0c9a      	lsrs	r2, r3, #18
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800444c:	e002      	b.n	8004454 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3b01      	subs	r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f9      	bne.n	800444e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d179      	bne.n	800455c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d106      	bne.n	80044b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f023 0206 	bic.w	r2, r3, #6
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44
 80044b4:	e002      	b.n	80044bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_ADC_Start+0x17c>)
 80044c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d12a      	bne.n	8004534 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_ADC_Start+0x180>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d015      	beq.n	8004514 <HAL_ADC_Start+0x11c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <HAL_ADC_Start+0x184>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d105      	bne.n	80044fe <HAL_ADC_Start+0x106>
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <HAL_ADC_Start+0x17c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_ADC_Start+0x188>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d129      	bne.n	800455c <HAL_ADC_Start+0x164>
 8004508:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_ADC_Start+0x17c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d823      	bhi.n	800455c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11c      	bne.n	800455c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004530:	609a      	str	r2, [r3, #8]
 8004532:	e013      	b.n	800455c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <HAL_ADC_Start+0x180>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10e      	bne.n	800455c <HAL_ADC_Start+0x164>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800455a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000010 	.word	0x20000010
 8004570:	431bde83 	.word	0x431bde83
 8004574:	40012300 	.word	0x40012300
 8004578:	40012000 	.word	0x40012000
 800457c:	40012100 	.word	0x40012100
 8004580:	40012200 	.word	0x40012200

08004584 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d113      	bne.n	80045ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b0:	d10b      	bne.n	80045ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e05c      	b.n	8004684 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80045ca:	f7ff fec5 	bl	8004358 <HAL_GetTick>
 80045ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045d0:	e01a      	b.n	8004608 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d016      	beq.n	8004608 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_ADC_PollForConversion+0x6c>
 80045e0:	f7ff feba 	bl	8004358 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d20b      	bcs.n	8004608 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e03d      	b.n	8004684 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d1dd      	bne.n	80045d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0212 	mvn.w	r2, #18
 800461e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d123      	bne.n	8004682 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11f      	bne.n	8004682 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800465a:	2b00      	cmp	r3, #0
 800465c:	d111      	bne.n	8004682 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x1c>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e105      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x228>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d925      	bls.n	8004720 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68d9      	ldr	r1, [r3, #12]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	3b1e      	subs	r3, #30
 80046ea:	2207      	movs	r2, #7
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43da      	mvns	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	400a      	ands	r2, r1
 80046f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68d9      	ldr	r1, [r3, #12]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	4618      	mov	r0, r3
 800470c:	4603      	mov	r3, r0
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4403      	add	r3, r0
 8004712:	3b1e      	subs	r3, #30
 8004714:	409a      	lsls	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	e022      	b.n	8004766 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6919      	ldr	r1, [r3, #16]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	2207      	movs	r2, #7
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	400a      	ands	r2, r1
 8004742:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6919      	ldr	r1, [r3, #16]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4618      	mov	r0, r3
 8004756:	4603      	mov	r3, r0
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4403      	add	r3, r0
 800475c:	409a      	lsls	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d824      	bhi.n	80047b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	3b05      	subs	r3, #5
 8004780:	221f      	movs	r2, #31
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	400a      	ands	r2, r1
 800478e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	4618      	mov	r0, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	3b05      	subs	r3, #5
 80047aa:	fa00 f203 	lsl.w	r2, r0, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34
 80047b6:	e04c      	b.n	8004852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	d824      	bhi.n	800480a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	3b23      	subs	r3, #35	; 0x23
 80047d2:	221f      	movs	r2, #31
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43da      	mvns	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	400a      	ands	r2, r1
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4618      	mov	r0, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	3b23      	subs	r3, #35	; 0x23
 80047fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
 8004808:	e023      	b.n	8004852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	3b41      	subs	r3, #65	; 0x41
 800481c:	221f      	movs	r2, #31
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43da      	mvns	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	400a      	ands	r2, r1
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	4618      	mov	r0, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	3b41      	subs	r3, #65	; 0x41
 8004846:	fa00 f203 	lsl.w	r2, r0, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_ADC_ConfigChannel+0x234>)
 8004854:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_ADC_ConfigChannel+0x238>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d109      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x1cc>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b12      	cmp	r3, #18
 8004866:	d105      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <HAL_ADC_ConfigChannel+0x238>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d123      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x21e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b10      	cmp	r3, #16
 8004884:	d003      	beq.n	800488e <HAL_ADC_ConfigChannel+0x1e6>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b11      	cmp	r3, #17
 800488c:	d11b      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d111      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_ADC_ConfigChannel+0x23c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a10      	ldr	r2, [pc, #64]	; (80048e8 <HAL_ADC_ConfigChannel+0x240>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	0c9a      	lsrs	r2, r3, #18
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048b8:	e002      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f9      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40012300 	.word	0x40012300
 80048e0:	40012000 	.word	0x40012000
 80048e4:	20000010 	.word	0x20000010
 80048e8:	431bde83 	.word	0x431bde83

080048ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048f4:	4b79      	ldr	r3, [pc, #484]	; (8004adc <ADC_Init+0x1f0>)
 80048f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6899      	ldr	r1, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	4a58      	ldr	r2, [pc, #352]	; (8004ae0 <ADC_Init+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	e00f      	b.n	80049ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0202 	bic.w	r2, r2, #2
 80049f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7e1b      	ldrb	r3, [r3, #24]
 8004a04:	005a      	lsls	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01b      	beq.n	8004a50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	3b01      	subs	r3, #1
 8004a44:	035a      	lsls	r2, r3, #13
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	e007      	b.n	8004a60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	051a      	lsls	r2, r3, #20
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6899      	ldr	r1, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aa2:	025a      	lsls	r2, r3, #9
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6899      	ldr	r1, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	029a      	lsls	r2, r3, #10
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40012300 	.word	0x40012300
 8004ae0:	0f000001 	.word	0x0f000001

08004ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <__NVIC_SetPriorityGrouping+0x44>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b00:	4013      	ands	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b16:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <__NVIC_SetPriorityGrouping+0x44>)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	60d3      	str	r3, [r2, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <__NVIC_GetPriorityGrouping+0x18>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	f003 0307 	and.w	r3, r3, #7
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	db0b      	blt.n	8004b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 021f 	and.w	r2, r3, #31
 8004b60:	4907      	ldr	r1, [pc, #28]	; (8004b80 <__NVIC_EnableIRQ+0x38>)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2001      	movs	r0, #1
 8004b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e100 	.word	0xe000e100

08004b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db0a      	blt.n	8004bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	490c      	ldr	r1, [pc, #48]	; (8004bd0 <__NVIC_SetPriority+0x4c>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bac:	e00a      	b.n	8004bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <__NVIC_SetPriority+0x50>)
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	761a      	strb	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000e100 	.word	0xe000e100
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	; 0x24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f1c3 0307 	rsb	r3, r3, #7
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	bf28      	it	cs
 8004bf6:	2304      	movcs	r3, #4
 8004bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2b06      	cmp	r3, #6
 8004c00:	d902      	bls.n	8004c08 <NVIC_EncodePriority+0x30>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3b03      	subs	r3, #3
 8004c06:	e000      	b.n	8004c0a <NVIC_EncodePriority+0x32>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c20:	f04f 31ff 	mov.w	r1, #4294967295
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	43d9      	mvns	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c30:	4313      	orrs	r3, r2
         );
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3724      	adds	r7, #36	; 0x24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c50:	d301      	bcc.n	8004c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00f      	b.n	8004c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c56:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <SysTick_Config+0x40>)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c5e:	210f      	movs	r1, #15
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	f7ff ff8e 	bl	8004b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <SysTick_Config+0x40>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <SysTick_Config+0x40>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010

08004c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff29 	bl	8004ae4 <__NVIC_SetPriorityGrouping>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cac:	f7ff ff3e 	bl	8004b2c <__NVIC_GetPriorityGrouping>
 8004cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	6978      	ldr	r0, [r7, #20]
 8004cb8:	f7ff ff8e 	bl	8004bd8 <NVIC_EncodePriority>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff ff5d 	bl	8004b84 <__NVIC_SetPriority>
}
 8004cca:	bf00      	nop
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ff31 	bl	8004b48 <__NVIC_EnableIRQ>
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ffa2 	bl	8004c40 <SysTick_Config>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e014      	b.n	8004d42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	791b      	ldrb	r3, [r3, #4]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d105      	bne.n	8004d2e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff f8a9 	bl	8003e80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	795b      	ldrb	r3, [r3, #5]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_DAC_ConfigChannel+0x20>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e036      	b.n	8004dd8 <HAL_DAC_ConfigChannel+0x8e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2202      	movs	r2, #2
 8004d74:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004d7e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	22c0      	movs	r2, #192	; 0xc0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43da      	mvns	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	3308      	adds	r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e004      	b.n	8004e18 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	3314      	adds	r3, #20
 8004e16:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e16b      	b.n	8005124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	f040 815a 	bne.w	800511e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00b      	beq.n	8004e8a <HAL_GPIO_Init+0x5a>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d007      	beq.n	8004e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e7e:	2b11      	cmp	r3, #17
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b12      	cmp	r3, #18
 8004e88:	d130      	bne.n	8004eec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	2203      	movs	r2, #3
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 0201 	and.w	r2, r3, #1
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d003      	beq.n	8004f2c <HAL_GPIO_Init+0xfc>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b12      	cmp	r3, #18
 8004f2a:	d123      	bne.n	8004f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	08da      	lsrs	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3208      	adds	r2, #8
 8004f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	220f      	movs	r2, #15
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	08da      	lsrs	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3208      	adds	r2, #8
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0203 	and.w	r2, r3, #3
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80b4 	beq.w	800511e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b5f      	ldr	r3, [pc, #380]	; (8005138 <HAL_GPIO_Init+0x308>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4a5e      	ldr	r2, [pc, #376]	; (8005138 <HAL_GPIO_Init+0x308>)
 8004fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc6:	4b5c      	ldr	r3, [pc, #368]	; (8005138 <HAL_GPIO_Init+0x308>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd2:	4a5a      	ldr	r2, [pc, #360]	; (800513c <HAL_GPIO_Init+0x30c>)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a51      	ldr	r2, [pc, #324]	; (8005140 <HAL_GPIO_Init+0x310>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <HAL_GPIO_Init+0x226>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a50      	ldr	r2, [pc, #320]	; (8005144 <HAL_GPIO_Init+0x314>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d025      	beq.n	8005052 <HAL_GPIO_Init+0x222>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a4f      	ldr	r2, [pc, #316]	; (8005148 <HAL_GPIO_Init+0x318>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01f      	beq.n	800504e <HAL_GPIO_Init+0x21e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a4e      	ldr	r2, [pc, #312]	; (800514c <HAL_GPIO_Init+0x31c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d019      	beq.n	800504a <HAL_GPIO_Init+0x21a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4d      	ldr	r2, [pc, #308]	; (8005150 <HAL_GPIO_Init+0x320>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_GPIO_Init+0x216>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a4c      	ldr	r2, [pc, #304]	; (8005154 <HAL_GPIO_Init+0x324>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00d      	beq.n	8005042 <HAL_GPIO_Init+0x212>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a4b      	ldr	r2, [pc, #300]	; (8005158 <HAL_GPIO_Init+0x328>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <HAL_GPIO_Init+0x20e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a4a      	ldr	r2, [pc, #296]	; (800515c <HAL_GPIO_Init+0x32c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_GPIO_Init+0x20a>
 8005036:	2307      	movs	r3, #7
 8005038:	e00e      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800503a:	2308      	movs	r3, #8
 800503c:	e00c      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800503e:	2306      	movs	r3, #6
 8005040:	e00a      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005042:	2305      	movs	r3, #5
 8005044:	e008      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005046:	2304      	movs	r3, #4
 8005048:	e006      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800504a:	2303      	movs	r3, #3
 800504c:	e004      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800504e:	2302      	movs	r3, #2
 8005050:	e002      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005056:	2300      	movs	r3, #0
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	f002 0203 	and.w	r2, r2, #3
 800505e:	0092      	lsls	r2, r2, #2
 8005060:	4093      	lsls	r3, r2
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005068:	4934      	ldr	r1, [pc, #208]	; (800513c <HAL_GPIO_Init+0x30c>)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	3302      	adds	r3, #2
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005076:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <HAL_GPIO_Init+0x330>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800509a:	4a31      	ldr	r2, [pc, #196]	; (8005160 <HAL_GPIO_Init+0x330>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_GPIO_Init+0x330>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050c4:	4a26      	ldr	r2, [pc, #152]	; (8005160 <HAL_GPIO_Init+0x330>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050ca:	4b25      	ldr	r3, [pc, #148]	; (8005160 <HAL_GPIO_Init+0x330>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ee:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <HAL_GPIO_Init+0x330>)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <HAL_GPIO_Init+0x330>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005118:	4a11      	ldr	r2, [pc, #68]	; (8005160 <HAL_GPIO_Init+0x330>)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3301      	adds	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b0f      	cmp	r3, #15
 8005128:	f67f ae90 	bls.w	8004e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800512c:	bf00      	nop
 800512e:	3724      	adds	r7, #36	; 0x24
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40023800 	.word	0x40023800
 800513c:	40013800 	.word	0x40013800
 8005140:	40020000 	.word	0x40020000
 8005144:	40020400 	.word	0x40020400
 8005148:	40020800 	.word	0x40020800
 800514c:	40020c00 	.word	0x40020c00
 8005150:	40021000 	.word	0x40021000
 8005154:	40021400 	.word	0x40021400
 8005158:	40021800 	.word	0x40021800
 800515c:	40021c00 	.word	0x40021c00
 8005160:	40013c00 	.word	0x40013c00

08005164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
 8005170:	4613      	mov	r3, r2
 8005172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005180:	e003      	b.n	800518a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	041a      	lsls	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	619a      	str	r2, [r3, #24]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e25b      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d075      	beq.n	80052a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051b6:	4ba3      	ldr	r3, [pc, #652]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00c      	beq.n	80051dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c2:	4ba0      	ldr	r3, [pc, #640]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d112      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ce:	4b9d      	ldr	r3, [pc, #628]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051da:	d10b      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051dc:	4b99      	ldr	r3, [pc, #612]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05b      	beq.n	80052a0 <HAL_RCC_OscConfig+0x108>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d157      	bne.n	80052a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e236      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d106      	bne.n	800520c <HAL_RCC_OscConfig+0x74>
 80051fe:	4b91      	ldr	r3, [pc, #580]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a90      	ldr	r2, [pc, #576]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e01d      	b.n	8005248 <HAL_RCC_OscConfig+0xb0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005214:	d10c      	bne.n	8005230 <HAL_RCC_OscConfig+0x98>
 8005216:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a8a      	ldr	r2, [pc, #552]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a87      	ldr	r2, [pc, #540]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e00b      	b.n	8005248 <HAL_RCC_OscConfig+0xb0>
 8005230:	4b84      	ldr	r3, [pc, #528]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a83      	ldr	r2, [pc, #524]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	4b81      	ldr	r3, [pc, #516]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a80      	ldr	r2, [pc, #512]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7ff f882 	bl	8004358 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005258:	f7ff f87e 	bl	8004358 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1fb      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0xc0>
 8005276:	e014      	b.n	80052a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7ff f86e 	bl	8004358 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005280:	f7ff f86a 	bl	8004358 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	; 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e1e7      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005292:	4b6c      	ldr	r3, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0xe8>
 800529e:	e000      	b.n	80052a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d063      	beq.n	8005376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ae:	4b65      	ldr	r3, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ba:	4b62      	ldr	r3, [pc, #392]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d11c      	bne.n	8005300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052c6:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d116      	bne.n	8005300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d2:	4b5c      	ldr	r3, [pc, #368]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_RCC_OscConfig+0x152>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d001      	beq.n	80052ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e1bb      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ea:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4952      	ldr	r1, [pc, #328]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fe:	e03a      	b.n	8005376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005308:	4b4f      	ldr	r3, [pc, #316]	; (8005448 <HAL_RCC_OscConfig+0x2b0>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530e:	f7ff f823 	bl	8004358 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005316:	f7ff f81f 	bl	8004358 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e19c      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005328:	4b46      	ldr	r3, [pc, #280]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005334:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	4940      	ldr	r1, [pc, #256]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005344:	4313      	orrs	r3, r2
 8005346:	600b      	str	r3, [r1, #0]
 8005348:	e015      	b.n	8005376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534a:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <HAL_RCC_OscConfig+0x2b0>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7ff f802 	bl	8004358 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005358:	f7fe fffe 	bl	8004358 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e17b      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536a:	4b36      	ldr	r3, [pc, #216]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d030      	beq.n	80053e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCC_OscConfig+0x2b4>)
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005390:	f7fe ffe2 	bl	8004358 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005398:	f7fe ffde 	bl	8004358 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e15b      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x200>
 80053b6:	e015      	b.n	80053e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_OscConfig+0x2b4>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053be:	f7fe ffcb 	bl	8004358 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c6:	f7fe ffc7 	bl	8004358 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e144      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80053da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a0 	beq.w	8005532 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f6:	4b13      	ldr	r3, [pc, #76]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCC_OscConfig+0x2b8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d121      	bne.n	8005472 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <HAL_RCC_OscConfig+0x2b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a07      	ldr	r2, [pc, #28]	; (8005450 <HAL_RCC_OscConfig+0x2b8>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543a:	f7fe ff8d 	bl	8004358 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005440:	e011      	b.n	8005466 <HAL_RCC_OscConfig+0x2ce>
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	42470000 	.word	0x42470000
 800544c:	42470e80 	.word	0x42470e80
 8005450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fe ff80 	bl	8004358 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0fd      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005466:	4b81      	ldr	r3, [pc, #516]	; (800566c <HAL_RCC_OscConfig+0x4d4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d106      	bne.n	8005488 <HAL_RCC_OscConfig+0x2f0>
 800547a:	4b7d      	ldr	r3, [pc, #500]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	4a7c      	ldr	r2, [pc, #496]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6713      	str	r3, [r2, #112]	; 0x70
 8005486:	e01c      	b.n	80054c2 <HAL_RCC_OscConfig+0x32a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b05      	cmp	r3, #5
 800548e:	d10c      	bne.n	80054aa <HAL_RCC_OscConfig+0x312>
 8005490:	4b77      	ldr	r3, [pc, #476]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	4a76      	ldr	r2, [pc, #472]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005496:	f043 0304 	orr.w	r3, r3, #4
 800549a:	6713      	str	r3, [r2, #112]	; 0x70
 800549c:	4b74      	ldr	r3, [pc, #464]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a73      	ldr	r2, [pc, #460]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e00b      	b.n	80054c2 <HAL_RCC_OscConfig+0x32a>
 80054aa:	4b71      	ldr	r3, [pc, #452]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a70      	ldr	r2, [pc, #448]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
 80054b6:	4b6e      	ldr	r3, [pc, #440]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	4a6d      	ldr	r2, [pc, #436]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80054bc:	f023 0304 	bic.w	r3, r3, #4
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ca:	f7fe ff45 	bl	8004358 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d0:	e00a      	b.n	80054e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fe ff41 	bl	8004358 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0bc      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e8:	4b61      	ldr	r3, [pc, #388]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ee      	beq.n	80054d2 <HAL_RCC_OscConfig+0x33a>
 80054f4:	e014      	b.n	8005520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f6:	f7fe ff2f 	bl	8004358 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fc:	e00a      	b.n	8005514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fe ff2b 	bl	8004358 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e0a6      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005514:	4b56      	ldr	r3, [pc, #344]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ee      	bne.n	80054fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4b52      	ldr	r3, [pc, #328]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	4a51      	ldr	r2, [pc, #324]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8092 	beq.w	8005660 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800553c:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	2b08      	cmp	r3, #8
 8005546:	d05c      	beq.n	8005602 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d141      	bne.n	80055d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005550:	4b48      	ldr	r3, [pc, #288]	; (8005674 <HAL_RCC_OscConfig+0x4dc>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fe feff 	bl	8004358 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555e:	f7fe fefb 	bl	8004358 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e078      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005570:	4b3f      	ldr	r3, [pc, #252]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	019b      	lsls	r3, r3, #6
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	061b      	lsls	r3, r3, #24
 80055a0:	4933      	ldr	r1, [pc, #204]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a6:	4b33      	ldr	r3, [pc, #204]	; (8005674 <HAL_RCC_OscConfig+0x4dc>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fe fed4 	bl	8004358 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fe fed0 	bl	8004358 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e04d      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x41c>
 80055d2:	e045      	b.n	8005660 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d4:	4b27      	ldr	r3, [pc, #156]	; (8005674 <HAL_RCC_OscConfig+0x4dc>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055da:	f7fe febd 	bl	8004358 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fe feb9 	bl	8004358 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e036      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f4:	4b1e      	ldr	r3, [pc, #120]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x44a>
 8005600:	e02e      	b.n	8005660 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e029      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800560e:	4b18      	ldr	r3, [pc, #96]	; (8005670 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	429a      	cmp	r2, r3
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d115      	bne.n	800565c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005636:	4013      	ands	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800563c:	4293      	cmp	r3, r2
 800563e:	d10d      	bne.n	800565c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d106      	bne.n	800565c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40007000 	.word	0x40007000
 8005670:	40023800 	.word	0x40023800
 8005674:	42470060 	.word	0x42470060

08005678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0cc      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800568c:	4b68      	ldr	r3, [pc, #416]	; (8005830 <HAL_RCC_ClockConfig+0x1b8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d90c      	bls.n	80056b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569a:	4b65      	ldr	r3, [pc, #404]	; (8005830 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a2:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0b8      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d020      	beq.n	8005702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056cc:	4b59      	ldr	r3, [pc, #356]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a58      	ldr	r2, [pc, #352]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e4:	4b53      	ldr	r3, [pc, #332]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4a52      	ldr	r2, [pc, #328]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f0:	4b50      	ldr	r3, [pc, #320]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	494d      	ldr	r1, [pc, #308]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d044      	beq.n	8005798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005716:	4b47      	ldr	r3, [pc, #284]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d119      	bne.n	8005756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e07f      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d003      	beq.n	8005736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005732:	2b03      	cmp	r3, #3
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005736:	4b3f      	ldr	r3, [pc, #252]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e06f      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005746:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e067      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005756:	4b37      	ldr	r3, [pc, #220]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f023 0203 	bic.w	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4934      	ldr	r1, [pc, #208]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005768:	f7fe fdf6 	bl	8004358 <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	e00a      	b.n	8005786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005770:	f7fe fdf2 	bl	8004358 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e04f      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 020c 	and.w	r2, r3, #12
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	429a      	cmp	r2, r3
 8005796:	d1eb      	bne.n	8005770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <HAL_RCC_ClockConfig+0x1b8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d20c      	bcs.n	80057c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b22      	ldr	r3, [pc, #136]	; (8005830 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b20      	ldr	r3, [pc, #128]	; (8005830 <HAL_RCC_ClockConfig+0x1b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e032      	b.n	8005826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4916      	ldr	r1, [pc, #88]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	490e      	ldr	r1, [pc, #56]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057fe:	f000 f821 	bl	8005844 <HAL_RCC_GetSysClockFreq>
 8005802:	4601      	mov	r1, r0
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <HAL_RCC_ClockConfig+0x1c0>)
 8005810:	5cd3      	ldrb	r3, [r2, r3]
 8005812:	fa21 f303 	lsr.w	r3, r1, r3
 8005816:	4a09      	ldr	r2, [pc, #36]	; (800583c <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RCC_ClockConfig+0x1c8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe fd56 	bl	80042d0 <HAL_InitTick>

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40023c00 	.word	0x40023c00
 8005834:	40023800 	.word	0x40023800
 8005838:	080251e0 	.word	0x080251e0
 800583c:	20000010 	.word	0x20000010
 8005840:	20000014 	.word	0x20000014

08005844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	2300      	movs	r3, #0
 8005854:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800585a:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b04      	cmp	r3, #4
 8005864:	d007      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x32>
 8005866:	2b08      	cmp	r3, #8
 8005868:	d008      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x38>
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 80b4 	bne.w	80059d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005872:	60bb      	str	r3, [r7, #8]
       break;
 8005874:	e0b3      	b.n	80059de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005876:	4b5e      	ldr	r3, [pc, #376]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005878:	60bb      	str	r3, [r7, #8]
      break;
 800587a:	e0b0      	b.n	80059de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800587c:	4b5a      	ldr	r3, [pc, #360]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005884:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005886:	4b58      	ldr	r3, [pc, #352]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d04a      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005892:	4b55      	ldr	r3, [pc, #340]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	ea03 0501 	and.w	r5, r3, r1
 80058a8:	ea04 0602 	and.w	r6, r4, r2
 80058ac:	4629      	mov	r1, r5
 80058ae:	4632      	mov	r2, r6
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	0154      	lsls	r4, r2, #5
 80058ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058be:	014b      	lsls	r3, r1, #5
 80058c0:	4619      	mov	r1, r3
 80058c2:	4622      	mov	r2, r4
 80058c4:	1b49      	subs	r1, r1, r5
 80058c6:	eb62 0206 	sbc.w	r2, r2, r6
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	f04f 0400 	mov.w	r4, #0
 80058d2:	0194      	lsls	r4, r2, #6
 80058d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058d8:	018b      	lsls	r3, r1, #6
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	eb64 0402 	sbc.w	r4, r4, r2
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	00e2      	lsls	r2, r4, #3
 80058ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058ee:	00d9      	lsls	r1, r3, #3
 80058f0:	460b      	mov	r3, r1
 80058f2:	4614      	mov	r4, r2
 80058f4:	195b      	adds	r3, r3, r5
 80058f6:	eb44 0406 	adc.w	r4, r4, r6
 80058fa:	f04f 0100 	mov.w	r1, #0
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	0262      	lsls	r2, r4, #9
 8005904:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005908:	0259      	lsls	r1, r3, #9
 800590a:	460b      	mov	r3, r1
 800590c:	4614      	mov	r4, r2
 800590e:	4618      	mov	r0, r3
 8005910:	4621      	mov	r1, r4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	461a      	mov	r2, r3
 800591a:	4623      	mov	r3, r4
 800591c:	f7fb f822 	bl	8000964 <__aeabi_uldivmod>
 8005920:	4603      	mov	r3, r0
 8005922:	460c      	mov	r4, r1
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e049      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005928:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	f04f 0400 	mov.w	r4, #0
 8005932:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	ea03 0501 	and.w	r5, r3, r1
 800593e:	ea04 0602 	and.w	r6, r4, r2
 8005942:	4629      	mov	r1, r5
 8005944:	4632      	mov	r2, r6
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	f04f 0400 	mov.w	r4, #0
 800594e:	0154      	lsls	r4, r2, #5
 8005950:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005954:	014b      	lsls	r3, r1, #5
 8005956:	4619      	mov	r1, r3
 8005958:	4622      	mov	r2, r4
 800595a:	1b49      	subs	r1, r1, r5
 800595c:	eb62 0206 	sbc.w	r2, r2, r6
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	0194      	lsls	r4, r2, #6
 800596a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800596e:	018b      	lsls	r3, r1, #6
 8005970:	1a5b      	subs	r3, r3, r1
 8005972:	eb64 0402 	sbc.w	r4, r4, r2
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	00e2      	lsls	r2, r4, #3
 8005980:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005984:	00d9      	lsls	r1, r3, #3
 8005986:	460b      	mov	r3, r1
 8005988:	4614      	mov	r4, r2
 800598a:	195b      	adds	r3, r3, r5
 800598c:	eb44 0406 	adc.w	r4, r4, r6
 8005990:	f04f 0100 	mov.w	r1, #0
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	02a2      	lsls	r2, r4, #10
 800599a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800599e:	0299      	lsls	r1, r3, #10
 80059a0:	460b      	mov	r3, r1
 80059a2:	4614      	mov	r4, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	4621      	mov	r1, r4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4623      	mov	r3, r4
 80059b2:	f7fa ffd7 	bl	8000964 <__aeabi_uldivmod>
 80059b6:	4603      	mov	r3, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	3301      	adds	r3, #1
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	60bb      	str	r3, [r7, #8]
      break;
 80059d6:	e002      	b.n	80059de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059da:	60bb      	str	r3, [r7, #8]
      break;
 80059dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059de:	68bb      	ldr	r3, [r7, #8]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	007a1200 	.word	0x007a1200

080059f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e056      	b.n	8005ab4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fe fa71 	bl	8003f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	ea42 0103 	orr.w	r1, r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	f003 0104 	and.w	r1, r3, #4
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_Transmit+0x22>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e11e      	b.n	8005d1c <HAL_SPI_Transmit+0x260>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae6:	f7fe fc37 	bl	8004358 <HAL_GetTick>
 8005aea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d002      	beq.n	8005b02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
 8005afe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b00:	e103      	b.n	8005d0a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_Transmit+0x52>
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b12:	e0fa      	b.n	8005d0a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2203      	movs	r2, #3
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5a:	d107      	bne.n	8005b6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d007      	beq.n	8005b8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b92:	d14b      	bne.n	8005c2c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_SPI_Transmit+0xe6>
 8005b9c:	8afb      	ldrh	r3, [r7, #22]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d13e      	bne.n	8005c20 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bc6:	e02b      	b.n	8005c20 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d112      	bne.n	8005bfc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bfa:	e011      	b.n	8005c20 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfc:	f7fe fbac 	bl	8004358 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d803      	bhi.n	8005c14 <HAL_SPI_Transmit+0x158>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d102      	bne.n	8005c1a <HAL_SPI_Transmit+0x15e>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c1e:	e074      	b.n	8005d0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ce      	bne.n	8005bc8 <HAL_SPI_Transmit+0x10c>
 8005c2a:	e04c      	b.n	8005cc6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_SPI_Transmit+0x17e>
 8005c34:	8afb      	ldrh	r3, [r7, #22]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d140      	bne.n	8005cbc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c60:	e02c      	b.n	8005cbc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d113      	bne.n	8005c98 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c96:	e011      	b.n	8005cbc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c98:	f7fe fb5e 	bl	8004358 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d803      	bhi.n	8005cb0 <HAL_SPI_Transmit+0x1f4>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d102      	bne.n	8005cb6 <HAL_SPI_Transmit+0x1fa>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cba:	e026      	b.n	8005d0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1cd      	bne.n	8005c62 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fa44 	bl	8006158 <SPI_EndRxTxTransaction>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e000      	b.n	8005d0a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d32:	2301      	movs	r3, #1
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x26>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e18a      	b.n	8006060 <HAL_SPI_TransmitReceive+0x33c>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d52:	f7fe fb01 	bl	8004358 <HAL_GetTick>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d68:	887b      	ldrh	r3, [r7, #2]
 8005d6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d00f      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x70>
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7a:	d107      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x68>
 8005d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d003      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d92:	e15b      	b.n	800604c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x82>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x82>
 8005da0:	887b      	ldrh	r3, [r7, #2]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dac:	e14e      	b.n	800604c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d003      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	887a      	ldrh	r2, [r7, #2]
 8005dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	887a      	ldrh	r2, [r7, #2]
 8005dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	887a      	ldrh	r2, [r7, #2]
 8005de4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	887a      	ldrh	r2, [r7, #2]
 8005dea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d007      	beq.n	8005e16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1e:	d178      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x10a>
 8005e28:	8b7b      	ldrh	r3, [r7, #26]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d166      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	881a      	ldrh	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e52:	e053      	b.n	8005efc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d11b      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x176>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d016      	beq.n	8005e9a <HAL_SPI_TransmitReceive+0x176>
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d113      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	881a      	ldrh	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d119      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x1b8>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d014      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	b292      	uxth	r2, r2
 8005ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005edc:	f7fe fa3c 	bl	8004358 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d807      	bhi.n	8005efc <HAL_SPI_TransmitReceive+0x1d8>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef2:	d003      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005efa:	e0a7      	b.n	800604c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1a6      	bne.n	8005e54 <HAL_SPI_TransmitReceive+0x130>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1a1      	bne.n	8005e54 <HAL_SPI_TransmitReceive+0x130>
 8005f10:	e07c      	b.n	800600c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_SPI_TransmitReceive+0x1fc>
 8005f1a:	8b7b      	ldrh	r3, [r7, #26]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d16b      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	7812      	ldrb	r2, [r2, #0]
 8005f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f46:	e057      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d11c      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x26c>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d017      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x26c>
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d114      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	7812      	ldrb	r2, [r2, #0]
 8005f72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d119      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x2ae>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d014      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fd2:	f7fe f9c1 	bl	8004358 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d803      	bhi.n	8005fea <HAL_SPI_TransmitReceive+0x2c6>
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x2cc>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ff6:	e029      	b.n	800604c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1a2      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x224>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d19d      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800600c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f8a1 	bl	8006158 <SPI_EndRxTxTransaction>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006028:	e010      	b.n	800604c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	e000      	b.n	800604c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800604a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800605c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006060:	4618      	mov	r0, r3
 8006062:	3730      	adds	r7, #48	; 0x30
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006076:	b2db      	uxtb	r3, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006094:	e04c      	b.n	8006130 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d048      	beq.n	8006130 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800609e:	f7fe f95b 	bl	8004358 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d902      	bls.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d13d      	bne.n	8006130 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060cc:	d111      	bne.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d6:	d004      	beq.n	80060e2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d107      	bne.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fa:	d10f      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800611a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e00f      	b.n	8006150 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	429a      	cmp	r2, r3
 800614c:	d1a3      	bne.n	8006096 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <SPI_EndRxTxTransaction+0x7c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <SPI_EndRxTxTransaction+0x80>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0d5b      	lsrs	r3, r3, #21
 8006170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006174:	fb02 f303 	mul.w	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006182:	d112      	bne.n	80061aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff ff78 	bl	8006084 <SPI_WaitFlagStateUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e00f      	b.n	80061ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	2b80      	cmp	r3, #128	; 0x80
 80061c2:	d0f2      	beq.n	80061aa <SPI_EndRxTxTransaction+0x52>
 80061c4:	e000      	b.n	80061c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061c6:	bf00      	nop
  }

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000010 	.word	0x20000010
 80061d8:	165e9f81 	.word	0x165e9f81

080061dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e01d      	b.n	800622a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fd ff0c 	bl	8004020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f000 fb44 	bl	80068a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b06      	cmp	r3, #6
 800625a:	d007      	beq.n	800626c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e01d      	b.n	80062c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fd fe79 	bl	8003f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f000 faf5 	bl	80068a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fdca 	bl	8006e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a15      	ldr	r2, [pc, #84]	; (8006344 <HAL_TIM_PWM_Start+0x74>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_TIM_PWM_Start+0x2c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a14      	ldr	r2, [pc, #80]	; (8006348 <HAL_TIM_PWM_Start+0x78>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d101      	bne.n	8006300 <HAL_TIM_PWM_Start+0x30>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <HAL_TIM_PWM_Start+0x32>
 8006300:	2300      	movs	r3, #0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b06      	cmp	r3, #6
 8006326:	d007      	beq.n	8006338 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0202 	mvn.w	r2, #2
 8006378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa6b 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa5d 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fa6e 	bl	800687e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0204 	mvn.w	r2, #4
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa41 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa33 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa44 	bl	800687e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b08      	cmp	r3, #8
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0208 	mvn.w	r2, #8
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa17 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa09 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa1a 	bl	800687e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b10      	cmp	r3, #16
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0210 	mvn.w	r2, #16
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2208      	movs	r2, #8
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9ed 	bl	800686a <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9df 	bl	8006856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f9f0 	bl	800687e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10e      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d107      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0201 	mvn.w	r2, #1
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fd f90a 	bl	80036e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d10e      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d107      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fd6c 	bl	8006fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d10e      	bne.n	8006528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d107      	bne.n	8006528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9b5 	bl	8006892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b20      	cmp	r3, #32
 8006534:	d10e      	bne.n	8006554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d107      	bne.n	8006554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0220 	mvn.w	r2, #32
 800654c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fd36 	bl	8006fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006572:	2302      	movs	r3, #2
 8006574:	e0b4      	b.n	80066e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b0c      	cmp	r3, #12
 800658a:	f200 809f 	bhi.w	80066cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080066cd 	.word	0x080066cd
 800659c:	080066cd 	.word	0x080066cd
 80065a0:	080066cd 	.word	0x080066cd
 80065a4:	08006609 	.word	0x08006609
 80065a8:	080066cd 	.word	0x080066cd
 80065ac:	080066cd 	.word	0x080066cd
 80065b0:	080066cd 	.word	0x080066cd
 80065b4:	0800664b 	.word	0x0800664b
 80065b8:	080066cd 	.word	0x080066cd
 80065bc:	080066cd 	.word	0x080066cd
 80065c0:	080066cd 	.word	0x080066cd
 80065c4:	0800668b 	.word	0x0800668b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fa0a 	bl	80069e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0208 	orr.w	r2, r2, #8
 80065e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0204 	bic.w	r2, r2, #4
 80065f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6999      	ldr	r1, [r3, #24]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	619a      	str	r2, [r3, #24]
      break;
 8006606:	e062      	b.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fa5a 	bl	8006ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	619a      	str	r2, [r3, #24]
      break;
 8006648:	e041      	b.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 faaf 	bl	8006bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0208 	orr.w	r2, r2, #8
 8006664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0204 	bic.w	r2, r2, #4
 8006674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69d9      	ldr	r1, [r3, #28]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	61da      	str	r2, [r3, #28]
      break;
 8006688:	e021      	b.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fb03 	bl	8006c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69d9      	ldr	r1, [r3, #28]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	021a      	lsls	r2, r3, #8
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	61da      	str	r2, [r3, #28]
      break;
 80066ca:	e000      	b.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80066cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_ConfigClockSource+0x18>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e0a6      	b.n	800684e <HAL_TIM_ConfigClockSource+0x166>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800671e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b40      	cmp	r3, #64	; 0x40
 8006736:	d067      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0x120>
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d80b      	bhi.n	8006754 <HAL_TIM_ConfigClockSource+0x6c>
 800673c:	2b10      	cmp	r3, #16
 800673e:	d073      	beq.n	8006828 <HAL_TIM_ConfigClockSource+0x140>
 8006740:	2b10      	cmp	r3, #16
 8006742:	d802      	bhi.n	800674a <HAL_TIM_ConfigClockSource+0x62>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d06f      	beq.n	8006828 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006748:	e078      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800674a:	2b20      	cmp	r3, #32
 800674c:	d06c      	beq.n	8006828 <HAL_TIM_ConfigClockSource+0x140>
 800674e:	2b30      	cmp	r3, #48	; 0x30
 8006750:	d06a      	beq.n	8006828 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006752:	e073      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006754:	2b70      	cmp	r3, #112	; 0x70
 8006756:	d00d      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0x8c>
 8006758:	2b70      	cmp	r3, #112	; 0x70
 800675a:	d804      	bhi.n	8006766 <HAL_TIM_ConfigClockSource+0x7e>
 800675c:	2b50      	cmp	r3, #80	; 0x50
 800675e:	d033      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0xe0>
 8006760:	2b60      	cmp	r3, #96	; 0x60
 8006762:	d041      	beq.n	80067e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006764:	e06a      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676a:	d066      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x152>
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006770:	d017      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006772:	e063      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6899      	ldr	r1, [r3, #8]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f000 fb5a 	bl	8006e3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006796:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	609a      	str	r2, [r3, #8]
      break;
 80067a0:	e04c      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6899      	ldr	r1, [r3, #8]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f000 fb43 	bl	8006e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067c4:	609a      	str	r2, [r3, #8]
      break;
 80067c6:	e039      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6859      	ldr	r1, [r3, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	461a      	mov	r2, r3
 80067d6:	f000 fab7 	bl	8006d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2150      	movs	r1, #80	; 0x50
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fb10 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 80067e6:	e029      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	461a      	mov	r2, r3
 80067f6:	f000 fad6 	bl	8006da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2160      	movs	r1, #96	; 0x60
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fb00 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006806:	e019      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6859      	ldr	r1, [r3, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	461a      	mov	r2, r3
 8006816:	f000 fa97 	bl	8006d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2140      	movs	r1, #64	; 0x40
 8006820:	4618      	mov	r0, r3
 8006822:	f000 faf0 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006826:	e009      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f000 fae7 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006838:	e000      	b.n	800683c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800683a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a40      	ldr	r2, [pc, #256]	; (80069bc <TIM_Base_SetConfig+0x114>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d013      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d00f      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a3d      	ldr	r2, [pc, #244]	; (80069c0 <TIM_Base_SetConfig+0x118>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00b      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3c      	ldr	r2, [pc, #240]	; (80069c4 <TIM_Base_SetConfig+0x11c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d007      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3b      	ldr	r2, [pc, #236]	; (80069c8 <TIM_Base_SetConfig+0x120>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d003      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3a      	ldr	r2, [pc, #232]	; (80069cc <TIM_Base_SetConfig+0x124>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d108      	bne.n	80068fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2f      	ldr	r2, [pc, #188]	; (80069bc <TIM_Base_SetConfig+0x114>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d02b      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d027      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2c      	ldr	r2, [pc, #176]	; (80069c0 <TIM_Base_SetConfig+0x118>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d023      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2b      	ldr	r2, [pc, #172]	; (80069c4 <TIM_Base_SetConfig+0x11c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01f      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <TIM_Base_SetConfig+0x120>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01b      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a29      	ldr	r2, [pc, #164]	; (80069cc <TIM_Base_SetConfig+0x124>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d017      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a28      	ldr	r2, [pc, #160]	; (80069d0 <TIM_Base_SetConfig+0x128>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a27      	ldr	r2, [pc, #156]	; (80069d4 <TIM_Base_SetConfig+0x12c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00f      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <TIM_Base_SetConfig+0x130>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00b      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a25      	ldr	r2, [pc, #148]	; (80069dc <TIM_Base_SetConfig+0x134>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a24      	ldr	r2, [pc, #144]	; (80069e0 <TIM_Base_SetConfig+0x138>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a23      	ldr	r2, [pc, #140]	; (80069e4 <TIM_Base_SetConfig+0x13c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d108      	bne.n	800696c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <TIM_Base_SetConfig+0x114>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_Base_SetConfig+0xf8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a0c      	ldr	r2, [pc, #48]	; (80069cc <TIM_Base_SetConfig+0x124>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d103      	bne.n	80069a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	615a      	str	r2, [r3, #20]
}
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40000800 	.word	0x40000800
 80069c8:	40000c00 	.word	0x40000c00
 80069cc:	40010400 	.word	0x40010400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800
 80069dc:	40001800 	.word	0x40001800
 80069e0:	40001c00 	.word	0x40001c00
 80069e4:	40002000 	.word	0x40002000

080069e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0201 	bic.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0303 	bic.w	r3, r3, #3
 8006a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 0302 	bic.w	r3, r3, #2
 8006a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <TIM_OC1_SetConfig+0xd8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC1_SetConfig+0x64>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <TIM_OC1_SetConfig+0xdc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d10c      	bne.n	8006a66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0308 	bic.w	r3, r3, #8
 8006a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f023 0304 	bic.w	r3, r3, #4
 8006a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <TIM_OC1_SetConfig+0xd8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_OC1_SetConfig+0x8e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a14      	ldr	r2, [pc, #80]	; (8006ac4 <TIM_OC1_SetConfig+0xdc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d111      	bne.n	8006a9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0210 	bic.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0320 	bic.w	r3, r3, #32
 8006b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a22      	ldr	r2, [pc, #136]	; (8006bac <TIM_OC2_SetConfig+0xe4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC2_SetConfig+0x68>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <TIM_OC2_SetConfig+0xe8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d10d      	bne.n	8006b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a17      	ldr	r2, [pc, #92]	; (8006bac <TIM_OC2_SetConfig+0xe4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d003      	beq.n	8006b5c <TIM_OC2_SetConfig+0x94>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a16      	ldr	r2, [pc, #88]	; (8006bb0 <TIM_OC2_SetConfig+0xe8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d113      	bne.n	8006b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40010400 	.word	0x40010400

08006bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <TIM_OC3_SetConfig+0xe0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_OC3_SetConfig+0x66>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <TIM_OC3_SetConfig+0xe4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10d      	bne.n	8006c36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a16      	ldr	r2, [pc, #88]	; (8006c94 <TIM_OC3_SetConfig+0xe0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d003      	beq.n	8006c46 <TIM_OC3_SetConfig+0x92>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <TIM_OC3_SetConfig+0xe4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d113      	bne.n	8006c6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40010400 	.word	0x40010400

08006c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	031b      	lsls	r3, r3, #12
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <TIM_OC4_SetConfig+0xa4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_OC4_SetConfig+0x68>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a11      	ldr	r2, [pc, #68]	; (8006d44 <TIM_OC4_SetConfig+0xa8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d109      	bne.n	8006d18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	019b      	lsls	r3, r3, #6
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40010400 	.word	0x40010400

08006d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f023 0201 	bic.w	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f023 030a 	bic.w	r3, r3, #10
 8006d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0210 	bic.w	r2, r3, #16
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f043 0307 	orr.w	r3, r3, #7
 8006e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	021a      	lsls	r2, r3, #8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	609a      	str	r2, [r3, #8]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2201      	movs	r2, #1
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1a      	ldr	r2, [r3, #32]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	401a      	ands	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1a      	ldr	r2, [r3, #32]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e05a      	b.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d022      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2c:	d01d      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d018      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00e      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d009      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d004      	beq.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a15      	ldr	r2, [pc, #84]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d10c      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40010400 	.word	0x40010400
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40001800 	.word	0x40001800

08006fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <__libc_init_array>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4e0d      	ldr	r6, [pc, #52]	; (8007020 <__libc_init_array+0x38>)
 8006fec:	4c0d      	ldr	r4, [pc, #52]	; (8007024 <__libc_init_array+0x3c>)
 8006fee:	1ba4      	subs	r4, r4, r6
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	42a5      	cmp	r5, r4
 8006ff6:	d109      	bne.n	800700c <__libc_init_array+0x24>
 8006ff8:	4e0b      	ldr	r6, [pc, #44]	; (8007028 <__libc_init_array+0x40>)
 8006ffa:	4c0c      	ldr	r4, [pc, #48]	; (800702c <__libc_init_array+0x44>)
 8006ffc:	f000 f820 	bl	8007040 <_init>
 8007000:	1ba4      	subs	r4, r4, r6
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	2500      	movs	r5, #0
 8007006:	42a5      	cmp	r5, r4
 8007008:	d105      	bne.n	8007016 <__libc_init_array+0x2e>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007010:	4798      	blx	r3
 8007012:	3501      	adds	r5, #1
 8007014:	e7ee      	b.n	8006ff4 <__libc_init_array+0xc>
 8007016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800701a:	4798      	blx	r3
 800701c:	3501      	adds	r5, #1
 800701e:	e7f2      	b.n	8007006 <__libc_init_array+0x1e>
 8007020:	080251f8 	.word	0x080251f8
 8007024:	080251f8 	.word	0x080251f8
 8007028:	080251f8 	.word	0x080251f8
 800702c:	080251fc 	.word	0x080251fc

08007030 <memset>:
 8007030:	4402      	add	r2, r0
 8007032:	4603      	mov	r3, r0
 8007034:	4293      	cmp	r3, r2
 8007036:	d100      	bne.n	800703a <memset+0xa>
 8007038:	4770      	bx	lr
 800703a:	f803 1b01 	strb.w	r1, [r3], #1
 800703e:	e7f9      	b.n	8007034 <memset+0x4>

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr
