
ptm_dyktafon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08009c80  08009c80  00019c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee4  08009ee4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eec  08009eec  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  200001e8  0800a0dc  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800a0dc  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139c5  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a3b  00000000  00000000  00033bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00036618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024232  00000000  00000000  00038870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da5d  00000000  00000000  0005caa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4bd4  00000000  00000000  0006a4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f0d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  0013f150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c68 	.word	0x08009c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009c68 	.word	0x08009c68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <LCD1602_EnablePulse+0x38>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <LCD1602_EnablePulse+0x3c>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f005 fdcc 	bl	8006a18 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000e80:	230a      	movs	r3, #10
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f97c 	bl	8001180 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LCD1602_EnablePulse+0x38>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <LCD1602_EnablePulse+0x3c>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	f005 fdc0 	bl	8006a18 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000e98:	203c      	movs	r0, #60	; 0x3c
 8000e9a:	f000 f971 	bl	8001180 <LCD1602_TIM_MicorSecDelay>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000204 	.word	0x20000204
 8000ea8:	2000020a 	.word	0x2000020a

08000eac <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <LCD1602_RS+0x22>
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <LCD1602_RS+0x3c>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <LCD1602_RS+0x40>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f005 fda6 	bl	8006a18 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000ecc:	e007      	b.n	8000ede <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <LCD1602_RS+0x3c>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <LCD1602_RS+0x40>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f005 fd9d 	bl	8006a18 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000204 	.word	0x20000204
 8000eec:	20000208 	.word	0x20000208

08000ef0 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000f08:	4b61      	ldr	r3, [pc, #388]	; (8001090 <LCD1602_write+0x1a0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d15a      	bne.n	8000fc6 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000f10:	4b60      	ldr	r3, [pc, #384]	; (8001094 <LCD1602_write+0x1a4>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	4b60      	ldr	r3, [pc, #384]	; (8001098 <LCD1602_write+0x1a8>)
 8000f16:	8819      	ldrh	r1, [r3, #0]
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	f005 fd79 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <LCD1602_write+0x1a4>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <LCD1602_write+0x1ac>)
 8000f2c:	8819      	ldrh	r1, [r3, #0]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	f005 fd6e 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <LCD1602_write+0x1a4>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <LCD1602_write+0x1b0>)
 8000f42:	8819      	ldrh	r1, [r3, #0]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f005 fd63 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000f52:	4b50      	ldr	r3, [pc, #320]	; (8001094 <LCD1602_write+0x1a4>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <LCD1602_write+0x1b4>)
 8000f58:	8819      	ldrh	r1, [r3, #0]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	f005 fd58 	bl	8006a18 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <LCD1602_write+0x1b8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <LCD1602_write+0x1bc>)
 8000f6e:	8819      	ldrh	r1, [r3, #0]
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f005 fd4d 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <LCD1602_write+0x1b8>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <LCD1602_write+0x1c0>)
 8000f84:	8819      	ldrh	r1, [r3, #0]
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f005 fd42 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <LCD1602_write+0x1b8>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <LCD1602_write+0x1c4>)
 8000f9a:	8819      	ldrh	r1, [r3, #0]
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	f005 fd37 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <LCD1602_write+0x1b8>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <LCD1602_write+0x1c8>)
 8000fb0:	8819      	ldrh	r1, [r3, #0]
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f005 fd2c 	bl	8006a18 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000fc0:	f7ff ff54 	bl	8000e6c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000fc4:	e05f      	b.n	8001086 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <LCD1602_write+0x1a0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d15b      	bne.n	8001086 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <LCD1602_write+0x1b8>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <LCD1602_write+0x1bc>)
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f005 fd1a 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <LCD1602_write+0x1b8>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <LCD1602_write+0x1c0>)
 8000fea:	8819      	ldrh	r1, [r3, #0]
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f005 fd0f 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <LCD1602_write+0x1b8>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <LCD1602_write+0x1c4>)
 8001000:	8819      	ldrh	r1, [r3, #0]
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	f005 fd04 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <LCD1602_write+0x1b8>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <LCD1602_write+0x1c8>)
 8001016:	8819      	ldrh	r1, [r3, #0]
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	f005 fcf9 	bl	8006a18 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001026:	f7ff ff21 	bl	8000e6c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <LCD1602_write+0x1b8>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <LCD1602_write+0x1bc>)
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	f005 fcec 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <LCD1602_write+0x1b8>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <LCD1602_write+0x1c0>)
 8001046:	8819      	ldrh	r1, [r3, #0]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	b2db      	uxtb	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	f005 fce1 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <LCD1602_write+0x1b8>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <LCD1602_write+0x1c4>)
 800105c:	8819      	ldrh	r1, [r3, #0]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	f005 fcd6 	bl	8006a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <LCD1602_write+0x1b8>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <LCD1602_write+0x1c8>)
 8001072:	8819      	ldrh	r1, [r3, #0]
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f005 fccb 	bl	8006a18 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001082:	f7ff fef3 	bl	8000e6c <LCD1602_EnablePulse>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000000 	.word	0x20000000
 8001094:	2000020c 	.word	0x2000020c
 8001098:	20000210 	.word	0x20000210
 800109c:	20000212 	.word	0x20000212
 80010a0:	20000214 	.word	0x20000214
 80010a4:	20000216 	.word	0x20000216
 80010a8:	20000218 	.word	0x20000218
 80010ac:	2000021c 	.word	0x2000021c
 80010b0:	2000021e 	.word	0x2000021e
 80010b4:	20000220 	.word	0x20000220
 80010b8:	20000222 	.word	0x20000222
 80010bc:	00000000 	.word	0x00000000

080010c0 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 80010c6:	1d3a      	adds	r2, r7, #4
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 f90a 	bl	80072e8 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 80010da:	f006 f8f1 	bl	80072c0 <HAL_RCC_GetPCLK1Freq>
 80010de:	61f8      	str	r0, [r7, #28]
 80010e0:	e004      	b.n	80010ec <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 80010e2:	f006 f8ed 	bl	80072c0 <HAL_RCC_GetPCLK1Freq>
 80010e6:	4603      	mov	r3, r0
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f7ff fa09 	bl	8000504 <__aeabi_ui2d>
 80010f2:	a321      	add	r3, pc, #132	; (adr r3, 8001178 <LCD1602_TIM_Config+0xb8>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fa7e 	bl	80005f8 <__aeabi_dmul>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4618      	mov	r0, r3
 8001102:	4621      	mov	r1, r4
 8001104:	f7ff fd12 	bl	8000b2c <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <LCD1602_TIM_Config+0xb0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <LCD1602_TIM_Config+0xb0>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 800111e:	f023 0310 	bic.w	r3, r3, #16
 8001122:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001136:	f023 0304 	bic.w	r3, r3, #4
 800113a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b01      	subs	r3, #1
 800114e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001152:	2209      	movs	r2, #9
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001158:	2201      	movs	r2, #1
 800115a:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <LCD1602_TIM_Config+0xb4>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	6113      	str	r3, [r2, #16]
}
 8001168:	bf00      	nop
 800116a:	3724      	adds	r7, #36	; 0x24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40000400 	.word	0x40000400
 8001178:	a0b5ed8d 	.word	0xa0b5ed8d
 800117c:	3eb0c6f7 	.word	0x3eb0c6f7

08001180 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <LCD1602_TIM_MicorSecDelay+0x44>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3b01      	subs	r3, #1
 800118e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <LCD1602_TIM_MicorSecDelay+0x44>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <LCD1602_TIM_MicorSecDelay+0x44>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80011a8:	bf00      	nop
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d1f9      	bne.n	80011aa <LCD1602_TIM_MicorSecDelay+0x2a>
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40000400 	.word	0x40000400

080011c8 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fe6a 	bl	8000eac <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe88 	bl	8000ef0 <LCD1602_write>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fe5a 	bl	8000eac <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fe78 	bl	8000ef0 <LCD1602_write>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	817b      	strh	r3, [r7, #10]
 8001216:	4613      	mov	r3, r2
 8001218:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800121a:	4a2a      	ldr	r2, [pc, #168]	; (80012c4 <LCD1602_Begin8BIT+0xbc>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <LCD1602_Begin8BIT+0xc0>)
 8001222:	897b      	ldrh	r3, [r7, #10]
 8001224:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <LCD1602_Begin8BIT+0xc4>)
 8001228:	893b      	ldrh	r3, [r7, #8]
 800122a:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <LCD1602_Begin8BIT+0xc8>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <LCD1602_Begin8BIT+0xcc>)
 8001234:	8b3b      	ldrh	r3, [r7, #24]
 8001236:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <LCD1602_Begin8BIT+0xd0>)
 800123a:	8bbb      	ldrh	r3, [r7, #28]
 800123c:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 800123e:	4a27      	ldr	r2, [pc, #156]	; (80012dc <LCD1602_Begin8BIT+0xd4>)
 8001240:	8c3b      	ldrh	r3, [r7, #32]
 8001242:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <LCD1602_Begin8BIT+0xd8>)
 8001246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001248:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <LCD1602_Begin8BIT+0xdc>)
 800124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124e:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001250:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <LCD1602_Begin8BIT+0xe0>)
 8001252:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001254:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8001256:	4a25      	ldr	r2, [pc, #148]	; (80012ec <LCD1602_Begin8BIT+0xe4>)
 8001258:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800125a:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 800125c:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <LCD1602_Begin8BIT+0xe8>)
 800125e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001260:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <LCD1602_Begin8BIT+0xec>)
 8001264:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001266:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8001268:	f7ff ff2a 	bl	80010c0 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <LCD1602_Begin8BIT+0xf0>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <LCD1602_Begin8BIT+0xf4>)
 8001274:	2238      	movs	r2, #56	; 0x38
 8001276:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001278:	2014      	movs	r0, #20
 800127a:	f004 fc59 	bl	8005b30 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 800127e:	2030      	movs	r0, #48	; 0x30
 8001280:	f7ff ffa2 	bl	80011c8 <LCD1602_writeCommand>
	HAL_Delay(5);
 8001284:	2005      	movs	r0, #5
 8001286:	f004 fc53 	bl	8005b30 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 800128a:	2030      	movs	r0, #48	; 0x30
 800128c:	f7ff ff9c 	bl	80011c8 <LCD1602_writeCommand>
	HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f004 fc4d 	bl	8005b30 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 8001296:	2030      	movs	r0, #48	; 0x30
 8001298:	f7ff ff96 	bl	80011c8 <LCD1602_writeCommand>
	HAL_Delay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f004 fc47 	bl	8005b30 <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 80012a2:	2038      	movs	r0, #56	; 0x38
 80012a4:	f7ff ff90 	bl	80011c8 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80012a8:	200f      	movs	r0, #15
 80012aa:	f7ff ff8d 	bl	80011c8 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff ff8a 	bl	80011c8 <LCD1602_writeCommand>
	HAL_Delay(2);
 80012b4:	2002      	movs	r0, #2
 80012b6:	f004 fc3b 	bl	8005b30 <HAL_Delay>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000204 	.word	0x20000204
 80012c8:	20000208 	.word	0x20000208
 80012cc:	2000020a 	.word	0x2000020a
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	20000210 	.word	0x20000210
 80012d8:	20000212 	.word	0x20000212
 80012dc:	20000214 	.word	0x20000214
 80012e0:	20000216 	.word	0x20000216
 80012e4:	20000218 	.word	0x20000218
 80012e8:	2000021c 	.word	0x2000021c
 80012ec:	2000021e 	.word	0x2000021e
 80012f0:	20000220 	.word	0x20000220
 80012f4:	20000222 	.word	0x20000222
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000001 	.word	0x20000001

08001300 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e009      	b.n	8001322 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff66 	bl	80011e8 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	3301      	adds	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d805      	bhi.n	8001334 <LCD1602_print+0x34>
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ec      	bne.n	800130e <LCD1602_print+0xe>
	}
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	3b01      	subs	r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001364:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff2d 	bl	80011c8 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800136e:	e007      	b.n	8001380 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001376:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff24 	bl	80011c8 <LCD1602_writeCommand>
}	
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <LCD1602_2ndLine>:
void LCD1602_1stLine(void)
{
	LCD1602_setCursor(1,1);
}
void LCD1602_2ndLine(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 800138c:	2101      	movs	r1, #1
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff ffd4 	bl	800133c <LCD1602_setCursor>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DESELECT>:

static
inline void DESELECT(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013be:	bf00      	nop
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <xmit_spi+0x30>)
 80013c2:	f006 fafd 	bl	80079c0 <HAL_SPI_GetState>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d1f9      	bne.n	80013c0 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80013cc:	1df9      	adds	r1, r7, #7
 80013ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80013d2:	2201      	movs	r2, #1
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <xmit_spi+0x30>)
 80013d6:	f006 f81d 	bl	8007414 <HAL_SPI_Transmit>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000b10 	.word	0x20000b10

080013e8 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80013ee:	23ff      	movs	r3, #255	; 0xff
 80013f0:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80013f6:	bf00      	nop
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <rcvr_spi+0x38>)
 80013fa:	f006 fae1 	bl	80079c0 <HAL_SPI_GetState>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d1f9      	bne.n	80013f8 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8001404:	1dba      	adds	r2, r7, #6
 8001406:	1df9      	adds	r1, r7, #7
 8001408:	f241 3388 	movw	r3, #5000	; 0x1388
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <rcvr_spi+0x38>)
 8001412:	f006 f933 	bl	800767c <HAL_SPI_TransmitReceive>

	return Data;
 8001416:	79bb      	ldrb	r3, [r7, #6]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000b10 	.word	0x20000b10

08001424 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800142c:	f7ff ffdc 	bl	80013e8 <rcvr_spi>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <wait_ready+0x34>)
 8001448:	2232      	movs	r2, #50	; 0x32
 800144a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800144c:	f7ff ffcc 	bl	80013e8 <rcvr_spi>
	do
		res = rcvr_spi();
 8001450:	f7ff ffca 	bl	80013e8 <rcvr_spi>
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d004      	beq.n	8001468 <wait_ready+0x28>
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <wait_ready+0x34>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f3      	bne.n	8001450 <wait_ready+0x10>

	return res;
 8001468:	79fb      	ldrb	r3, [r7, #7]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000225 	.word	0x20000225

08001478 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 800147e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001482:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8001484:	f7ff ff8f 	bl	80013a6 <DESELECT>

	for (i = 0; i < 10; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e005      	b.n	800149a <power_on+0x22>
		xmit_spi(0xFF);
 800148e:	20ff      	movs	r0, #255	; 0xff
 8001490:	f7ff ff90 	bl	80013b4 <xmit_spi>
	for (i = 0; i < 10; i++)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	3301      	adds	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b09      	cmp	r3, #9
 800149e:	d9f6      	bls.n	800148e <power_on+0x16>

	SELECT();
 80014a0:	f7ff ff7a 	bl	8001398 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80014a4:	2340      	movs	r3, #64	; 0x40
 80014a6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80014b8:	2395      	movs	r3, #149	; 0x95
 80014ba:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e00b      	b.n	80014da <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	f107 0210 	add.w	r2, r7, #16
 80014c8:	4413      	add	r3, r2
 80014ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff70 	bl	80013b4 <xmit_spi>
	for (i = 0; i < 6; i++)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	3301      	adds	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d9f0      	bls.n	80014c2 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80014e0:	e002      	b.n	80014e8 <power_on+0x70>
		Count--;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80014e8:	f7ff ff7e 	bl	80013e8 <rcvr_spi>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d002      	beq.n	80014f8 <power_on+0x80>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f4      	bne.n	80014e2 <power_on+0x6a>

	DESELECT();
 80014f8:	f7ff ff55 	bl	80013a6 <DESELECT>
	xmit_spi(0XFF);
 80014fc:	20ff      	movs	r0, #255	; 0xff
 80014fe:	f7ff ff59 	bl	80013b4 <xmit_spi>

	PowerFlag = 1;
 8001502:	4b03      	ldr	r3, [pc, #12]	; (8001510 <power_on+0x98>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000227 	.word	0x20000227

08001514 <power_off>:

static
void power_off(void) {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <power_off+0x14>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000227 	.word	0x20000227

0800152c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <chk_power+0x14>)
 8001532:	781b      	ldrb	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000227 	.word	0x20000227

08001544 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <rcvr_datablock+0x68>)
 8001550:	220a      	movs	r2, #10
 8001552:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8001554:	f7ff ff48 	bl	80013e8 <rcvr_spi>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d104      	bne.n	800156c <rcvr_datablock+0x28>
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <rcvr_datablock+0x68>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f3      	bne.n	8001554 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2bfe      	cmp	r3, #254	; 0xfe
 8001570:	d001      	beq.n	8001576 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8001572:	2300      	movs	r3, #0
 8001574:	e016      	b.n	80015a4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff51 	bl	8001424 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff4b 	bl	8001424 <rcvr_spi_m>
	} while (btr -= 2);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3b02      	subs	r3, #2
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ed      	bne.n	8001576 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 800159a:	f7ff ff25 	bl	80013e8 <rcvr_spi>
	rcvr_spi();
 800159e:	f7ff ff23 	bl	80013e8 <rcvr_spi>

	return TRUE; /* Return with success */
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000224 	.word	0x20000224

080015b0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80015c0:	f7ff ff3e 	bl	8001440 <wait_ready>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d001      	beq.n	80015ce <xmit_datablock+0x1e>
		return FALSE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e040      	b.n	8001650 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff feef 	bl	80013b4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	2bfd      	cmp	r3, #253	; 0xfd
 80015da:	d031      	beq.n	8001640 <xmit_datablock+0x90>
		wc = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fee3 	bl	80013b4 <xmit_spi>
			xmit_spi(*buff++);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fedc 	bl	80013b4 <xmit_spi>
		} while (--wc);
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	3b01      	subs	r3, #1
 8001600:	73bb      	strb	r3, [r7, #14]
 8001602:	7bbb      	ldrb	r3, [r7, #14]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1eb      	bne.n	80015e0 <xmit_datablock+0x30>

		rcvr_spi();
 8001608:	f7ff feee 	bl	80013e8 <rcvr_spi>
		rcvr_spi();
 800160c:	f7ff feec 	bl	80013e8 <rcvr_spi>

		while (i <= 64) {
 8001610:	e00b      	b.n	800162a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8001612:	f7ff fee9 	bl	80013e8 <rcvr_spi>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2b05      	cmp	r3, #5
 8001622:	d006      	beq.n	8001632 <xmit_datablock+0x82>
				break;
			i++;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3301      	adds	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b40      	cmp	r3, #64	; 0x40
 800162e:	d9f0      	bls.n	8001612 <xmit_datablock+0x62>
 8001630:	e000      	b.n	8001634 <xmit_datablock+0x84>
				break;
 8001632:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8001634:	bf00      	nop
 8001636:	f7ff fed7 	bl	80013e8 <rcvr_spi>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0fa      	beq.n	8001636 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	2b05      	cmp	r3, #5
 8001648:	d101      	bne.n	800164e <xmit_datablock+0x9e>
		return TRUE;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <xmit_datablock+0xa0>
	else
		return FALSE;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8001664:	f7ff feec 	bl	8001440 <wait_ready>
 8001668:	4603      	mov	r3, r0
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	d001      	beq.n	8001672 <send_cmd+0x1a>
		return 0xFF;
 800166e:	23ff      	movs	r3, #255	; 0xff
 8001670:	e040      	b.n	80016f4 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fe9d 	bl	80013b4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	0e1b      	lsrs	r3, r3, #24
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe97 	bl	80013b4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe91 	bl	80013b4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe8b 	bl	80013b4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe86 	bl	80013b4 <xmit_spi>
	n = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b40      	cmp	r3, #64	; 0x40
 80016b0:	d101      	bne.n	80016b6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80016b2:	2395      	movs	r3, #149	; 0x95
 80016b4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b48      	cmp	r3, #72	; 0x48
 80016ba:	d101      	bne.n	80016c0 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80016bc:	2387      	movs	r3, #135	; 0x87
 80016be:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fe76 	bl	80013b4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b4c      	cmp	r3, #76	; 0x4c
 80016cc:	d101      	bne.n	80016d2 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80016ce:	f7ff fe8b 	bl	80013e8 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80016d2:	230a      	movs	r3, #10
 80016d4:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80016d6:	f7ff fe87 	bl	80013e8 <rcvr_spi>
 80016da:	4603      	mov	r3, r0
 80016dc:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80016de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da05      	bge.n	80016f2 <send_cmd+0x9a>
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f1      	bne.n	80016d6 <send_cmd+0x7e>

	return res; /* Return with the response value */
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800170c:	2301      	movs	r3, #1
 800170e:	e0d5      	b.n	80018bc <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001710:	4b6c      	ldr	r3, [pc, #432]	; (80018c4 <disk_initialize+0x1c8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800171e:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <disk_initialize+0x1c8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	e0ca      	b.n	80018bc <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001726:	f7ff fea7 	bl	8001478 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800172a:	f7ff fe35 	bl	8001398 <SELECT>
	ty = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8001732:	2100      	movs	r1, #0
 8001734:	2040      	movs	r0, #64	; 0x40
 8001736:	f7ff ff8f 	bl	8001658 <send_cmd>
 800173a:	4603      	mov	r3, r0
 800173c:	2b01      	cmp	r3, #1
 800173e:	f040 80a5 	bne.w	800188c <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001742:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <disk_initialize+0x1cc>)
 8001744:	2264      	movs	r2, #100	; 0x64
 8001746:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001748:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800174c:	2048      	movs	r0, #72	; 0x48
 800174e:	f7ff ff83 	bl	8001658 <send_cmd>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d158      	bne.n	800180a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e00c      	b.n	8001778 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800175e:	7bfc      	ldrb	r4, [r7, #15]
 8001760:	f7ff fe42 	bl	80013e8 <rcvr_spi>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4423      	add	r3, r4
 800176e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	3301      	adds	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d9ef      	bls.n	800175e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800177e:	7abb      	ldrb	r3, [r7, #10]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 8083 	bne.w	800188c <disk_initialize+0x190>
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	2baa      	cmp	r3, #170	; 0xaa
 800178a:	d17f      	bne.n	800188c <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 800178c:	2100      	movs	r1, #0
 800178e:	2077      	movs	r0, #119	; 0x77
 8001790:	f7ff ff62 	bl	8001658 <send_cmd>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d807      	bhi.n	80017aa <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 800179a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800179e:	2069      	movs	r0, #105	; 0x69
 80017a0:	f7ff ff5a 	bl	8001658 <send_cmd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <disk_initialize+0x1cc>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1eb      	bne.n	800178c <disk_initialize+0x90>
 80017b4:	e000      	b.n	80017b8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80017b6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <disk_initialize+0x1cc>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d064      	beq.n	800188c <disk_initialize+0x190>
 80017c2:	2100      	movs	r1, #0
 80017c4:	207a      	movs	r0, #122	; 0x7a
 80017c6:	f7ff ff47 	bl	8001658 <send_cmd>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d15d      	bne.n	800188c <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e00c      	b.n	80017f0 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80017d6:	7bfc      	ldrb	r4, [r7, #15]
 80017d8:	f7ff fe06 	bl	80013e8 <rcvr_spi>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4423      	add	r3, r4
 80017e6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	3301      	adds	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d9ef      	bls.n	80017d6 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80017f6:	7a3b      	ldrb	r3, [r7, #8]
 80017f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <disk_initialize+0x108>
 8001800:	2306      	movs	r3, #6
 8001802:	e000      	b.n	8001806 <disk_initialize+0x10a>
 8001804:	2302      	movs	r3, #2
 8001806:	73bb      	strb	r3, [r7, #14]
 8001808:	e040      	b.n	800188c <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800180a:	2100      	movs	r1, #0
 800180c:	2077      	movs	r0, #119	; 0x77
 800180e:	f7ff ff23 	bl	8001658 <send_cmd>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	d808      	bhi.n	800182a <disk_initialize+0x12e>
 8001818:	2100      	movs	r1, #0
 800181a:	2069      	movs	r0, #105	; 0x69
 800181c:	f7ff ff1c 	bl	8001658 <send_cmd>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d801      	bhi.n	800182a <disk_initialize+0x12e>
 8001826:	2302      	movs	r3, #2
 8001828:	e000      	b.n	800182c <disk_initialize+0x130>
 800182a:	2301      	movs	r3, #1
 800182c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d10e      	bne.n	8001852 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001834:	2100      	movs	r1, #0
 8001836:	2077      	movs	r0, #119	; 0x77
 8001838:	f7ff ff0e 	bl	8001658 <send_cmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d80e      	bhi.n	8001860 <disk_initialize+0x164>
 8001842:	2100      	movs	r1, #0
 8001844:	2069      	movs	r0, #105	; 0x69
 8001846:	f7ff ff07 	bl	8001658 <send_cmd>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <disk_initialize+0x164>
						break; /* ACMD41 */
 8001850:	e00d      	b.n	800186e <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8001852:	2100      	movs	r1, #0
 8001854:	2041      	movs	r0, #65	; 0x41
 8001856:	f7ff feff 	bl	8001658 <send_cmd>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <disk_initialize+0x1cc>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e1      	bne.n	800182e <disk_initialize+0x132>
 800186a:	e000      	b.n	800186e <disk_initialize+0x172>
						break; /* CMD1 */
 800186c:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <disk_initialize+0x1cc>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <disk_initialize+0x18c>
 8001878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800187c:	2050      	movs	r0, #80	; 0x50
 800187e:	f7ff feeb 	bl	8001658 <send_cmd>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <disk_initialize+0x190>
				ty = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <disk_initialize+0x1d0>)
 800188e:	7bbb      	ldrb	r3, [r7, #14]
 8001890:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8001892:	f7ff fd88 	bl	80013a6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001896:	f7ff fda7 	bl	80013e8 <rcvr_spi>

	if (ty) /* Initialization succeded */
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <disk_initialize+0x1c8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <disk_initialize+0x1c8>)
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e001      	b.n	80018b6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80018b2:	f7ff fe2f 	bl	8001514 <power_off>

	return Stat;
 80018b6:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <disk_initialize+0x1c8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	20000002 	.word	0x20000002
 80018c8:	20000224 	.word	0x20000224
 80018cc:	20000226 	.word	0x20000226

080018d0 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80018e0:	2301      	movs	r3, #1
 80018e2:	e002      	b.n	80018ea <disk_status+0x1a>
	return Stat;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <disk_status+0x28>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000002 	.word	0x20000002

080018fc <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <disk_read+0x1c>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <disk_read+0x20>
		return RES_PARERR;
 8001918:	2304      	movs	r3, #4
 800191a:	e051      	b.n	80019c0 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <disk_read+0xcc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <disk_read+0x32>
		return RES_NOTRDY;
 800192a:	2303      	movs	r3, #3
 800192c:	e048      	b.n	80019c0 <disk_read+0xc4>

	if (!(CardType & 4))
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <disk_read+0xd0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001940:	f7ff fd2a 	bl	8001398 <SELECT>

	if (count == 1) { /* Single block read */
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d111      	bne.n	800196e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	2051      	movs	r0, #81	; 0x51
 800194e:	f7ff fe83 	bl	8001658 <send_cmd>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d129      	bne.n	80019ac <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195c:	68b8      	ldr	r0, [r7, #8]
 800195e:	f7ff fdf1 	bl	8001544 <rcvr_datablock>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d021      	beq.n	80019ac <disk_read+0xb0>
			count = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	e01e      	b.n	80019ac <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	2052      	movs	r0, #82	; 0x52
 8001972:	f7ff fe71 	bl	8001658 <send_cmd>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d117      	bne.n	80019ac <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 800197c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f7ff fddf 	bl	8001544 <rcvr_datablock>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <disk_read+0xa6>
					break;
				buff += 512;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001992:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ed      	bne.n	800197c <disk_read+0x80>
 80019a0:	e000      	b.n	80019a4 <disk_read+0xa8>
					break;
 80019a2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80019a4:	2100      	movs	r1, #0
 80019a6:	204c      	movs	r0, #76	; 0x4c
 80019a8:	f7ff fe56 	bl	8001658 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80019ac:	f7ff fcfb 	bl	80013a6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80019b0:	f7ff fd1a 	bl	80013e8 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000002 	.word	0x20000002
 80019cc:	20000226 	.word	0x20000226

080019d0 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <disk_write+0x1c>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <disk_write+0x20>
		return RES_PARERR;
 80019ec:	2304      	movs	r3, #4
 80019ee:	e06b      	b.n	8001ac8 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <disk_write+0x100>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <disk_write+0x32>
		return RES_NOTRDY;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e062      	b.n	8001ac8 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <disk_write+0x100>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <disk_write+0x44>
		return RES_WRPRT;
 8001a10:	2302      	movs	r3, #2
 8001a12:	e059      	b.n	8001ac8 <disk_write+0xf8>

	if (!(CardType & 4))
 8001a14:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <disk_write+0x104>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001a26:	f7ff fcb7 	bl	8001398 <SELECT>

	if (count == 1) { /* Single block write */
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d110      	bne.n	8001a52 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	2058      	movs	r0, #88	; 0x58
 8001a34:	f7ff fe10 	bl	8001658 <send_cmd>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d13a      	bne.n	8001ab4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8001a3e:	21fe      	movs	r1, #254	; 0xfe
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f7ff fdb5 	bl	80015b0 <xmit_datablock>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d033      	beq.n	8001ab4 <disk_write+0xe4>
			count = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	e030      	b.n	8001ab4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <disk_write+0x104>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2077      	movs	r0, #119	; 0x77
 8001a62:	f7ff fdf9 	bl	8001658 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	2057      	movs	r0, #87	; 0x57
 8001a6a:	f7ff fdf5 	bl	8001658 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	2059      	movs	r0, #89	; 0x59
 8001a72:	f7ff fdf1 	bl	8001658 <send_cmd>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d11b      	bne.n	8001ab4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001a7c:	21fc      	movs	r1, #252	; 0xfc
 8001a7e:	68b8      	ldr	r0, [r7, #8]
 8001a80:	f7ff fd96 	bl	80015b0 <xmit_datablock>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <disk_write+0xd0>
					break;
				buff += 512;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ee      	bne.n	8001a7c <disk_write+0xac>
 8001a9e:	e000      	b.n	8001aa2 <disk_write+0xd2>
					break;
 8001aa0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8001aa2:	21fd      	movs	r1, #253	; 0xfd
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fd83 	bl	80015b0 <xmit_datablock>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <disk_write+0xe4>
				count = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8001ab4:	f7ff fc77 	bl	80013a6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001ab8:	f7ff fc96 	bl	80013e8 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000002 	.word	0x20000002
 8001ad4:	20000226 	.word	0x20000226

08001ad8 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	603a      	str	r2, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <disk_ioctl+0x1e>
		return RES_PARERR;
 8001af2:	2304      	movs	r3, #4
 8001af4:	e16a      	b.n	8001dcc <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d127      	bne.n	8001b52 <disk_ioctl+0x7a>
		switch (*ptr) {
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d00e      	beq.n	8001b28 <disk_ioctl+0x50>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d012      	beq.n	8001b34 <disk_ioctl+0x5c>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11b      	bne.n	8001b4a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8001b12:	f7ff fd0b 	bl	800152c <chk_power>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001b1c:	f7ff fcfa 	bl	8001514 <power_off>
			res = RES_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b26:	e14f      	b.n	8001dc8 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001b28:	f7ff fca6 	bl	8001478 <power_on>
			res = RES_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b32:	e149      	b.n	8001dc8 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001b34:	f7ff fcfa 	bl	800152c <chk_power>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b48:	e13e      	b.n	8001dc8 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b50:	e13a      	b.n	8001dc8 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8001b52:	4ba0      	ldr	r3, [pc, #640]	; (8001dd4 <disk_ioctl+0x2fc>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e133      	b.n	8001dcc <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001b64:	f7ff fc18 	bl	8001398 <SELECT>

		switch (ctrl) {
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	2b35      	cmp	r3, #53	; 0x35
 8001b6c:	f200 811d 	bhi.w	8001daa <disk_ioctl+0x2d2>
 8001b70:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <disk_ioctl+0xa0>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001d13 	.word	0x08001d13
 8001b7c:	08001c51 	.word	0x08001c51
 8001b80:	08001d03 	.word	0x08001d03
 8001b84:	08001dab 	.word	0x08001dab
 8001b88:	08001dab 	.word	0x08001dab
 8001b8c:	08001dab 	.word	0x08001dab
 8001b90:	08001dab 	.word	0x08001dab
 8001b94:	08001dab 	.word	0x08001dab
 8001b98:	08001dab 	.word	0x08001dab
 8001b9c:	08001dab 	.word	0x08001dab
 8001ba0:	08001dab 	.word	0x08001dab
 8001ba4:	08001dab 	.word	0x08001dab
 8001ba8:	08001dab 	.word	0x08001dab
 8001bac:	08001dab 	.word	0x08001dab
 8001bb0:	08001dab 	.word	0x08001dab
 8001bb4:	08001dab 	.word	0x08001dab
 8001bb8:	08001dab 	.word	0x08001dab
 8001bbc:	08001dab 	.word	0x08001dab
 8001bc0:	08001dab 	.word	0x08001dab
 8001bc4:	08001dab 	.word	0x08001dab
 8001bc8:	08001dab 	.word	0x08001dab
 8001bcc:	08001dab 	.word	0x08001dab
 8001bd0:	08001dab 	.word	0x08001dab
 8001bd4:	08001dab 	.word	0x08001dab
 8001bd8:	08001dab 	.word	0x08001dab
 8001bdc:	08001dab 	.word	0x08001dab
 8001be0:	08001dab 	.word	0x08001dab
 8001be4:	08001dab 	.word	0x08001dab
 8001be8:	08001dab 	.word	0x08001dab
 8001bec:	08001dab 	.word	0x08001dab
 8001bf0:	08001dab 	.word	0x08001dab
 8001bf4:	08001dab 	.word	0x08001dab
 8001bf8:	08001dab 	.word	0x08001dab
 8001bfc:	08001dab 	.word	0x08001dab
 8001c00:	08001dab 	.word	0x08001dab
 8001c04:	08001dab 	.word	0x08001dab
 8001c08:	08001dab 	.word	0x08001dab
 8001c0c:	08001dab 	.word	0x08001dab
 8001c10:	08001dab 	.word	0x08001dab
 8001c14:	08001dab 	.word	0x08001dab
 8001c18:	08001dab 	.word	0x08001dab
 8001c1c:	08001dab 	.word	0x08001dab
 8001c20:	08001dab 	.word	0x08001dab
 8001c24:	08001dab 	.word	0x08001dab
 8001c28:	08001dab 	.word	0x08001dab
 8001c2c:	08001dab 	.word	0x08001dab
 8001c30:	08001dab 	.word	0x08001dab
 8001c34:	08001dab 	.word	0x08001dab
 8001c38:	08001dab 	.word	0x08001dab
 8001c3c:	08001dab 	.word	0x08001dab
 8001c40:	08001dab 	.word	0x08001dab
 8001c44:	08001d25 	.word	0x08001d25
 8001c48:	08001d49 	.word	0x08001d49
 8001c4c:	08001d6d 	.word	0x08001d6d
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001c50:	2100      	movs	r1, #0
 8001c52:	2049      	movs	r0, #73	; 0x49
 8001c54:	f7ff fd00 	bl	8001658 <send_cmd>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80a9 	bne.w	8001db2 <disk_ioctl+0x2da>
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2110      	movs	r1, #16
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fc6c 	bl	8001544 <rcvr_datablock>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 809f 	beq.w	8001db2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001c74:	7b3b      	ldrb	r3, [r7, #12]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d10e      	bne.n	8001c9c <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001c7e:	7d7b      	ldrb	r3, [r7, #21]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	7d3b      	ldrb	r3, [r7, #20]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001c92:	8bfb      	ldrh	r3, [r7, #30]
 8001c94:	029a      	lsls	r2, r3, #10
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e02e      	b.n	8001cfa <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001c9c:	7c7b      	ldrb	r3, [r7, #17]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	7dbb      	ldrb	r3, [r7, #22]
 8001ca6:	09db      	lsrs	r3, r3, #7
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8001cae:	7d7b      	ldrb	r3, [r7, #21]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 0306 	and.w	r3, r3, #6
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001cc4:	7d3b      	ldrb	r3, [r7, #20]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8001cd8:	7cbb      	ldrb	r3, [r7, #18]
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001ce8:	3301      	adds	r3, #1
 8001cea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001cec:	8bfa      	ldrh	r2, [r7, #30]
 8001cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cf2:	3b09      	subs	r3, #9
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001d00:	e057      	b.n	8001db2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d10:	e056      	b.n	8001dc0 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8001d12:	f7ff fb95 	bl	8001440 <wait_ready>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2bff      	cmp	r3, #255	; 0xff
 8001d1a:	d14c      	bne.n	8001db6 <disk_ioctl+0x2de>
				res = RES_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d22:	e048      	b.n	8001db6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001d24:	2100      	movs	r1, #0
 8001d26:	2049      	movs	r0, #73	; 0x49
 8001d28:	f7ff fc96 	bl	8001658 <send_cmd>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d143      	bne.n	8001dba <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8001d32:	2110      	movs	r1, #16
 8001d34:	6a38      	ldr	r0, [r7, #32]
 8001d36:	f7ff fc05 	bl	8001544 <rcvr_datablock>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03c      	beq.n	8001dba <disk_ioctl+0x2e2>
				res = RES_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d46:	e038      	b.n	8001dba <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001d48:	2100      	movs	r1, #0
 8001d4a:	204a      	movs	r0, #74	; 0x4a
 8001d4c:	f7ff fc84 	bl	8001658 <send_cmd>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d133      	bne.n	8001dbe <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001d56:	2110      	movs	r1, #16
 8001d58:	6a38      	ldr	r0, [r7, #32]
 8001d5a:	f7ff fbf3 	bl	8001544 <rcvr_datablock>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02c      	beq.n	8001dbe <disk_ioctl+0x2e6>
				res = RES_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d6a:	e028      	b.n	8001dbe <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	207a      	movs	r0, #122	; 0x7a
 8001d70:	f7ff fc72 	bl	8001658 <send_cmd>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d117      	bne.n	8001daa <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d80:	e00b      	b.n	8001d9a <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8001d82:	6a3c      	ldr	r4, [r7, #32]
 8001d84:	1c63      	adds	r3, r4, #1
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	f7ff fb2e 	bl	80013e8 <rcvr_spi>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d94:	3301      	adds	r3, #1
 8001d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9ef      	bls.n	8001d82 <disk_ioctl+0x2aa>
				res = RES_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001da8:	e00a      	b.n	8001dc0 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8001daa:	2304      	movs	r3, #4
 8001dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001db0:	e006      	b.n	8001dc0 <disk_ioctl+0x2e8>
			break;
 8001db2:	bf00      	nop
 8001db4:	e004      	b.n	8001dc0 <disk_ioctl+0x2e8>
			break;
 8001db6:	bf00      	nop
 8001db8:	e002      	b.n	8001dc0 <disk_ioctl+0x2e8>
			break;
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <disk_ioctl+0x2e8>
			break;
 8001dbe:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8001dc0:	f7ff faf1 	bl	80013a6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8001dc4:	f7ff fb10 	bl	80013e8 <rcvr_spi>
	}

	return res;
 8001dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	372c      	adds	r7, #44	; 0x2c
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	20000002 	.word	0x20000002

08001dd8 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <disk_timerproc+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <disk_timerproc+0x1e>
		Timer1 = --n;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <disk_timerproc+0x44>)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <disk_timerproc+0x48>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <disk_timerproc+0x36>
		Timer2 = --n;
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <disk_timerproc+0x48>)
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	7013      	strb	r3, [r2, #0]

}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000224 	.word	0x20000224
 8001e20:	20000225 	.word	0x20000225

08001e24 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <sdcard_systick_timerproc+0x2c>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <sdcard_systick_timerproc+0x2c>)
 8001e34:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <sdcard_systick_timerproc+0x2c>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d904      	bls.n	8001e4a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <sdcard_systick_timerproc+0x2c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001e46:	f7ff ffc7 	bl	8001dd8 <disk_timerproc>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200004c8 	.word	0x200004c8

08001e54 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	36c55cc0 	.word	0x36c55cc0

08001e68 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	3202      	adds	r2, #2
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	3201      	adds	r2, #1
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	7812      	ldrb	r2, [r2, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
	return rv;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	1c53      	adds	r3, r2, #1
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	6179      	str	r1, [r7, #20]
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f1      	bne.n	8001f86 <mem_cpy+0x1a>
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	617a      	str	r2, [r7, #20]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f3      	bne.n	8001fbe <mem_set+0x10>
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b089      	sub	sp, #36	; 0x24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	61fa      	str	r2, [r7, #28]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	61ba      	str	r2, [r7, #24]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	1acb      	subs	r3, r1, r3
 800200e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <mem_cmp+0x40>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0eb      	beq.n	8001ffa <mem_cmp+0x18>

	return r;
 8002022:	697b      	ldr	r3, [r7, #20]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3724      	adds	r7, #36	; 0x24
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800203a:	e002      	b.n	8002042 <chk_chr+0x12>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3301      	adds	r3, #1
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <chk_chr+0x26>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4293      	cmp	r3, r2
 8002054:	d1f2      	bne.n	800203c <chk_chr+0xc>
	return *str;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8002070:	2281      	movs	r2, #129	; 0x81
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4293      	cmp	r3, r2
 8002076:	d30f      	bcc.n	8002098 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8002078:	229f      	movs	r2, #159	; 0x9f
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4293      	cmp	r3, r2
 800207e:	d801      	bhi.n	8002084 <dbc_1st+0x1e>
 8002080:	2301      	movs	r3, #1
 8002082:	e00a      	b.n	800209a <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8002084:	22e0      	movs	r2, #224	; 0xe0
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4293      	cmp	r3, r2
 800208a:	d305      	bcc.n	8002098 <dbc_1st+0x32>
 800208c:	22fc      	movs	r2, #252	; 0xfc
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4293      	cmp	r3, r2
 8002092:	d801      	bhi.n	8002098 <dbc_1st+0x32>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d319      	bcc.n	80020ec <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 80020b8:	227e      	movs	r2, #126	; 0x7e
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4293      	cmp	r3, r2
 80020be:	d801      	bhi.n	80020c4 <dbc_2nd+0x1e>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e014      	b.n	80020ee <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d305      	bcc.n	80020d8 <dbc_2nd+0x32>
 80020cc:	22fc      	movs	r2, #252	; 0xfc
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d801      	bhi.n	80020d8 <dbc_2nd+0x32>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e00a      	b.n	80020ee <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 80020d8:	2200      	movs	r2, #0
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d305      	bcc.n	80020ec <dbc_2nd+0x46>
 80020e0:	2200      	movs	r2, #0
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d801      	bhi.n	80020ec <dbc_2nd+0x46>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02c      	beq.n	8002168 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7858      	ldrb	r0, [r3, #1]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	2301      	movs	r3, #1
 800211e:	f7ff fc57 	bl	80019d0 <disk_write>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11d      	bne.n	8002164 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	429a      	cmp	r2, r3
 800213e:	d213      	bcs.n	8002168 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	789b      	ldrb	r3, [r3, #2]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d10f      	bne.n	8002168 <sync_window+0x6e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7858      	ldrb	r0, [r3, #1]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	441a      	add	r2, r3
 800215c:	2301      	movs	r3, #1
 800215e:	f7ff fc37 	bl	80019d0 <disk_write>
 8002162:	e001      	b.n	8002168 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d01b      	beq.n	80021c2 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffb5 	bl	80020fa <sync_window>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d113      	bne.n	80021c2 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7858      	ldrb	r0, [r3, #1]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80021a4:	2301      	movs	r3, #1
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	f7ff fba8 	bl	80018fc <disk_read>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff90 	bl	80020fa <sync_window>
 80021da:	4603      	mov	r3, r0
 80021dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d158      	bne.n	8002296 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d148      	bne.n	800227e <sync_fs+0xb2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d144      	bne.n	800227e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3330      	adds	r3, #48	; 0x30
 80021f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fed5 	bl	8001fae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3330      	adds	r3, #48	; 0x30
 8002208:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800220c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe64 	bl	8001ede <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3330      	adds	r3, #48	; 0x30
 800221a:	4921      	ldr	r1, [pc, #132]	; (80022a0 <sync_fs+0xd4>)
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe79 	bl	8001f14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3330      	adds	r3, #48	; 0x30
 8002226:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800222a:	491e      	ldr	r1, [pc, #120]	; (80022a4 <sync_fs+0xd8>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fe71 	bl	8001f14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3330      	adds	r3, #48	; 0x30
 8002236:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7ff fe67 	bl	8001f14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3330      	adds	r3, #48	; 0x30
 800224a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7ff fe5d 	bl	8001f14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7858      	ldrb	r0, [r3, #1]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002272:	2301      	movs	r3, #1
 8002274:	f7ff fbac 	bl	80019d0 <disk_write>
			fs->fsi_flag = 0;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fc26 	bl	8001ad8 <disk_ioctl>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <sync_fs+0xca>
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	41615252 	.word	0x41615252
 80022a4:	61417272 	.word	0x61417272

080022a8 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3b02      	subs	r3, #2
 80022b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	3b02      	subs	r3, #2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d301      	bcc.n	80022c8 <clst2sect+0x20>
 80022c4:	2300      	movs	r3, #0
 80022c6:	e008      	b.n	80022da <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	895b      	ldrh	r3, [r3, #10]
 80022d0:	4619      	mov	r1, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	fb03 f301 	mul.w	r3, r3, r1
 80022d8:	4413      	add	r3, r2
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d904      	bls.n	8002306 <get_fat+0x20>
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <get_fat+0x26>
		val = 1;	/* Internal error */
 8002306:	2301      	movs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e08c      	b.n	8002426 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d045      	beq.n	80023a6 <get_fat+0xc0>
 800231a:	2b03      	cmp	r3, #3
 800231c:	d05d      	beq.n	80023da <get_fat+0xf4>
 800231e:	2b01      	cmp	r3, #1
 8002320:	d177      	bne.n	8002412 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	4413      	add	r3, r2
 800233a:	4619      	mov	r1, r3
 800233c:	6938      	ldr	r0, [r7, #16]
 800233e:	f7ff ff18 	bl	8002172 <move_window>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d167      	bne.n	8002418 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	60fa      	str	r2, [r7, #12]
 800234e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800235a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	0a5b      	lsrs	r3, r3, #9
 8002364:	4413      	add	r3, r2
 8002366:	4619      	mov	r1, r3
 8002368:	6938      	ldr	r0, [r7, #16]
 800236a:	f7ff ff02 	bl	8002172 <move_window>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d153      	bne.n	800241c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4313      	orrs	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <get_fat+0xb6>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	e002      	b.n	80023a2 <get_fat+0xbc>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	617b      	str	r3, [r7, #20]
			break;
 80023a4:	e03f      	b.n	8002426 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	4413      	add	r3, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	6938      	ldr	r0, [r7, #16]
 80023b4:	f7ff fedd 	bl	8002172 <move_window>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d130      	bne.n	8002420 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80023cc:	4413      	add	r3, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fd4a 	bl	8001e68 <ld_word>
 80023d4:	4603      	mov	r3, r0
 80023d6:	617b      	str	r3, [r7, #20]
			break;
 80023d8:	e025      	b.n	8002426 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6a1a      	ldr	r2, [r3, #32]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	09db      	lsrs	r3, r3, #7
 80023e2:	4413      	add	r3, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	6938      	ldr	r0, [r7, #16]
 80023e8:	f7ff fec3 	bl	8002172 <move_window>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002400:	4413      	add	r3, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fd48 	bl	8001e98 <ld_dword>
 8002408:	4603      	mov	r3, r0
 800240a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800240e:	617b      	str	r3, [r7, #20]
			break;
 8002410:	e009      	b.n	8002426 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e006      	b.n	8002426 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002418:	bf00      	nop
 800241a:	e004      	b.n	8002426 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800241c:	bf00      	nop
 800241e:	e002      	b.n	8002426 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002420:	bf00      	nop
 8002422:	e000      	b.n	8002426 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002424:	bf00      	nop
		}
	}

	return val;
 8002426:	697b      	ldr	r3, [r7, #20]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800243c:	2302      	movs	r3, #2
 800243e:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b01      	cmp	r3, #1
 8002444:	f240 80d6 	bls.w	80025f4 <put_fat+0x1c4>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	f080 80d0 	bcs.w	80025f4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d073      	beq.n	8002544 <put_fat+0x114>
 800245c:	2b03      	cmp	r3, #3
 800245e:	f000 8091 	beq.w	8002584 <put_fat+0x154>
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 80c6 	bne.w	80025f4 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	0a5b      	lsrs	r3, r3, #9
 800247e:	4413      	add	r3, r2
 8002480:	4619      	mov	r1, r3
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff fe75 	bl	8002172 <move_window>
 8002488:	4603      	mov	r3, r0
 800248a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800248c:	7ffb      	ldrb	r3, [r7, #31]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 80a9 	bne.w	80025e6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1c59      	adds	r1, r3, #1
 800249e:	61b9      	str	r1, [r7, #24]
 80024a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a4:	4413      	add	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <put_fat+0x9e>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	b25a      	sxtb	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	e001      	b.n	80024d2 <put_fat+0xa2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	4413      	add	r3, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fe42 	bl	8002172 <move_window>
 80024ee:	4603      	mov	r3, r0
 80024f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d178      	bne.n	80025ea <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002504:	4413      	add	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <put_fat+0xea>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e00e      	b.n	8002538 <put_fat+0x108>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b25b      	sxtb	r3, r3
 8002520:	f023 030f 	bic.w	r3, r3, #15
 8002524:	b25a      	sxtb	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	b25b      	sxtb	r3, r3
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b25b      	sxtb	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b25b      	sxtb	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	70da      	strb	r2, [r3, #3]
			break;
 8002542:	e057      	b.n	80025f4 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1a      	ldr	r2, [r3, #32]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	4413      	add	r3, r2
 800254e:	4619      	mov	r1, r3
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fe0e 	bl	8002172 <move_window>
 8002556:	4603      	mov	r3, r0
 8002558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800255a:	7ffb      	ldrb	r3, [r7, #31]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d146      	bne.n	80025ee <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800256e:	4413      	add	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	b292      	uxth	r2, r2
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fcb1 	bl	8001ede <st_word>
			fs->wflag = 1;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	70da      	strb	r2, [r3, #3]
			break;
 8002582:	e037      	b.n	80025f4 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	4413      	add	r3, r2
 800258e:	4619      	mov	r1, r3
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fdee 	bl	8002172 <move_window>
 8002596:	4603      	mov	r3, r0
 8002598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d128      	bne.n	80025f2 <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80025b4:	4413      	add	r3, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fc6e 	bl	8001e98 <ld_dword>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025c2:	4323      	orrs	r3, r4
 80025c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80025d4:	4413      	add	r3, r2
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fc9b 	bl	8001f14 <st_dword>
			fs->wflag = 1;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	70da      	strb	r2, [r3, #3]
			break;
 80025e4:	e006      	b.n	80025f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80025f2:	bf00      	nop
		}
	}
	return res;
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}

080025fe <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b088      	sub	sp, #32
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d904      	bls.n	8002624 <remove_chain+0x26>
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	d301      	bcc.n	8002628 <remove_chain+0x2a>
 8002624:	2302      	movs	r3, #2
 8002626:	e04b      	b.n	80026c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800262e:	f04f 32ff 	mov.w	r2, #4294967295
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	69b8      	ldr	r0, [r7, #24]
 8002636:	f7ff fefb 	bl	8002430 <put_fat>
 800263a:	4603      	mov	r3, r0
 800263c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <remove_chain+0x4a>
 8002644:	7ffb      	ldrb	r3, [r7, #31]
 8002646:	e03b      	b.n	80026c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff fe4b 	bl	80022e6 <get_fat>
 8002650:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d031      	beq.n	80026bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <remove_chain+0x64>
 800265e:	2302      	movs	r3, #2
 8002660:	e02e      	b.n	80026c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d101      	bne.n	800266e <remove_chain+0x70>
 800266a:	2301      	movs	r3, #1
 800266c:	e028      	b.n	80026c0 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800266e:	2200      	movs	r2, #0
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f7ff fedc 	bl	8002430 <put_fat>
 8002678:	4603      	mov	r3, r0
 800267a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <remove_chain+0x88>
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	e01c      	b.n	80026c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	3b02      	subs	r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d20b      	bcs.n	80026ac <remove_chain+0xae>
			fs->free_clst++;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3c6      	bcc.n	8002648 <remove_chain+0x4a>
 80026ba:	e000      	b.n	80026be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80026bc:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <create_chain+0x2c>
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d31b      	bcc.n	800272c <create_chain+0x64>
 80026f4:	2301      	movs	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e018      	b.n	800272c <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fdf2 	bl	80022e6 <get_fat>
 8002702:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d801      	bhi.n	800270e <create_chain+0x46>
 800270a:	2301      	movs	r3, #1
 800270c:	e0a9      	b.n	8002862 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d101      	bne.n	800271a <create_chain+0x52>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	e0a3      	b.n	8002862 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d201      	bcs.n	8002728 <create_chain+0x60>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	e09c      	b.n	8002862 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <create_chain+0x70>
 8002734:	2300      	movs	r3, #0
 8002736:	e094      	b.n	8002862 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d129      	bne.n	8002798 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	3301      	adds	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d301      	bcc.n	8002758 <create_chain+0x90>
 8002754:	2302      	movs	r3, #2
 8002756:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fdc3 	bl	80022e6 <get_fat>
 8002760:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d003      	beq.n	8002770 <create_chain+0xa8>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d101      	bne.n	8002774 <create_chain+0xac>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	e076      	b.n	8002862 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d906      	bls.n	8002794 <create_chain+0xcc>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d201      	bcs.n	8002794 <create_chain+0xcc>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d129      	bne.n	80027f2 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d307      	bcc.n	80027c2 <create_chain+0xfa>
					ncl = 2;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d901      	bls.n	80027c2 <create_chain+0xfa>
 80027be:	2300      	movs	r3, #0
 80027c0:	e04f      	b.n	8002862 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fd8e 	bl	80022e6 <get_fat>
 80027ca:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00e      	beq.n	80027f0 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d003      	beq.n	80027e0 <create_chain+0x118>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d101      	bne.n	80027e4 <create_chain+0x11c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	e03e      	b.n	8002862 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1da      	bne.n	80027a2 <create_chain+0xda>
 80027ec:	2300      	movs	r3, #0
 80027ee:	e038      	b.n	8002862 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80027f0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80027f2:	f04f 32ff 	mov.w	r2, #4294967295
 80027f6:	69f9      	ldr	r1, [r7, #28]
 80027f8:	6938      	ldr	r0, [r7, #16]
 80027fa:	f7ff fe19 	bl	8002430 <put_fat>
 80027fe:	4603      	mov	r3, r0
 8002800:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <create_chain+0x154>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f7ff fe0c 	bl	8002430 <put_fat>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <create_chain+0x188>
		fs->last_clst = ncl;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	3b02      	subs	r3, #2
 8002832:	429a      	cmp	r2, r3
 8002834:	d804      	bhi.n	8002840 <create_chain+0x178>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	b2da      	uxtb	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	711a      	strb	r2, [r3, #4]
 800284e:	e007      	b.n	8002860 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <create_chain+0x194>
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e000      	b.n	800285e <create_chain+0x196>
 800285c:	2301      	movs	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002860:	69fb      	ldr	r3, [r7, #28]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fc40 	bl	80020fa <sync_window>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <dir_clear+0x1a>
 8002880:	2301      	movs	r3, #1
 8002882:	e036      	b.n	80028f2 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002884:	6839      	ldr	r1, [r7, #0]
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fd0e 	bl	80022a8 <clst2sect>
 800288c:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3330      	adds	r3, #48	; 0x30
 8002898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb85 	bl	8001fae <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3330      	adds	r3, #48	; 0x30
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	2301      	movs	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e003      	b.n	80028bc <dir_clear+0x52>
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4413      	add	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	895b      	ldrh	r3, [r3, #10]
 80028c0:	461a      	mov	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d20b      	bcs.n	80028e0 <dir_clear+0x76>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7858      	ldrb	r0, [r3, #1]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	441a      	add	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	f7ff f87b 	bl	80019d0 <disk_write>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0e9      	beq.n	80028b4 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	895b      	ldrh	r3, [r3, #10]
 80028e4:	461a      	mov	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002910:	d204      	bcs.n	800291c <dir_sdi+0x22>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <dir_sdi+0x26>
		return FR_INT_ERR;
 800291c:	2302      	movs	r3, #2
 800291e:	e063      	b.n	80029e8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <dir_sdi+0x46>
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <dir_sdi+0x46>
		clst = fs->dirbase;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	8912      	ldrh	r2, [r2, #8]
 800294e:	4293      	cmp	r3, r2
 8002950:	d301      	bcc.n	8002956 <dir_sdi+0x5c>
 8002952:	2302      	movs	r3, #2
 8002954:	e048      	b.n	80029e8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
 800295e:	e029      	b.n	80029b4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	895b      	ldrh	r3, [r3, #10]
 8002964:	025b      	lsls	r3, r3, #9
 8002966:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002968:	e019      	b.n	800299e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fcb9 	bl	80022e6 <get_fat>
 8002974:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d101      	bne.n	8002982 <dir_sdi+0x88>
 800297e:	2301      	movs	r3, #1
 8002980:	e032      	b.n	80029e8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d904      	bls.n	8002992 <dir_sdi+0x98>
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	429a      	cmp	r2, r3
 8002990:	d301      	bcc.n	8002996 <dir_sdi+0x9c>
 8002992:	2302      	movs	r3, #2
 8002994:	e028      	b.n	80029e8 <dir_sdi+0xee>
			ofs -= csz;
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d2e1      	bcs.n	800296a <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	6938      	ldr	r0, [r7, #16]
 80029aa:	f7ff fc7d 	bl	80022a8 <clst2sect>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <dir_sdi+0xcc>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e010      	b.n	80029e8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	0a5b      	lsrs	r3, r3, #9
 80029ce:	441a      	add	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	3320      	adds	r3, #32
 8002a06:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a0e:	d302      	bcc.n	8002a16 <dir_next+0x26>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <dir_next+0x32>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e078      	b.n	8002b14 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d166      	bne.n	8002afa <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	8912      	ldrh	r2, [r2, #8]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d357      	bcc.n	8002afa <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	2304      	movs	r3, #4
 8002a52:	e05f      	b.n	8002b14 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0a5b      	lsrs	r3, r3, #9
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	8952      	ldrh	r2, [r2, #10]
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d14a      	bne.n	8002afa <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff fc3a 	bl	80022e6 <get_fat>
 8002a72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d801      	bhi.n	8002a7e <dir_next+0x8e>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e04a      	b.n	8002b14 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d101      	bne.n	8002a8a <dir_next+0x9a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e044      	b.n	8002b14 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d328      	bcc.n	8002ae6 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e037      	b.n	8002b14 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f7ff fe0b 	bl	80026c8 <create_chain>
 8002ab2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <dir_next+0xce>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e02a      	b.n	8002b14 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <dir_next+0xd8>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e025      	b.n	8002b14 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d101      	bne.n	8002ad4 <dir_next+0xe4>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e01f      	b.n	8002b14 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002ad4:	6979      	ldr	r1, [r7, #20]
 8002ad6:	6938      	ldr	r0, [r7, #16]
 8002ad8:	f7ff fec7 	bl	800286a <dir_clear>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <dir_next+0xf6>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8002aec:	6979      	ldr	r1, [r7, #20]
 8002aee:	6938      	ldr	r0, [r7, #16]
 8002af0:	f7ff fbda 	bl	80022a8 <clst2sect>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fee3 	bl	80028fa <dir_sdi>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12b      	bne.n	8002b96 <dir_alloc+0x7a>
		n = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4619      	mov	r1, r3
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fb12 	bl	8002172 <move_window>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11d      	bne.n	8002b94 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2be5      	cmp	r3, #229	; 0xe5
 8002b60:	d004      	beq.n	8002b6c <dir_alloc+0x50>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d102      	bne.n	8002b80 <dir_alloc+0x64>
 8002b7a:	e00c      	b.n	8002b96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8002b80:	2101      	movs	r1, #1
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff34 	bl	80029f0 <dir_next>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0d7      	beq.n	8002b42 <dir_alloc+0x26>
 8002b92:	e000      	b.n	8002b96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8002b94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d101      	bne.n	8002ba0 <dir_alloc+0x84>
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	75fb      	strb	r3, [r7, #23]
	return res;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	331a      	adds	r3, #26
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f955 	bl	8001e68 <ld_word>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d109      	bne.n	8002bde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	3314      	adds	r3, #20
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f94a 	bl	8001e68 <ld_word>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	331a      	adds	r3, #26
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f96d 	bl	8001ede <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d109      	bne.n	8002c20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f103 0214 	add.w	r2, r3, #20
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7ff f95f 	bl	8001ede <st_word>
	}
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8002c32:	2304      	movs	r3, #4
 8002c34:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8002c3c:	e03c      	b.n	8002cb8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4619      	mov	r1, r3
 8002c44:	6938      	ldr	r0, [r7, #16]
 8002c46:	f7ff fa94 	bl	8002172 <move_window>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d136      	bne.n	8002cc2 <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8002c62:	2304      	movs	r3, #4
 8002c64:	75fb      	strb	r3, [r7, #23]
 8002c66:	e031      	b.n	8002ccc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	330b      	adds	r3, #11
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c74:	73bb      	strb	r3, [r7, #14]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7bba      	ldrb	r2, [r7, #14]
 8002c7a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2be5      	cmp	r3, #229	; 0xe5
 8002c80:	d011      	beq.n	8002ca6 <dir_read+0x7e>
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b2e      	cmp	r3, #46	; 0x2e
 8002c86:	d00e      	beq.n	8002ca6 <dir_read+0x7e>
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	d00b      	beq.n	8002ca6 <dir_read+0x7e>
 8002c8e:	7bbb      	ldrb	r3, [r7, #14]
 8002c90:	f023 0320 	bic.w	r3, r3, #32
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00f      	beq.n	8002cc6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fea1 	bl	80029f0 <dir_next>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d108      	bne.n	8002cca <dir_read+0xa2>
	while (dp->sect) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1be      	bne.n	8002c3e <dir_read+0x16>
 8002cc0:	e004      	b.n	8002ccc <dir_read+0xa4>
		if (res != FR_OK) break;
 8002cc2:	bf00      	nop
 8002cc4:	e002      	b.n	8002ccc <dir_read+0xa4>
				break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <dir_read+0xa4>
		if (res != FR_OK) break;
 8002cca:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <dir_read+0xb0>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
	return res;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fe01 	bl	80028fa <dir_sdi>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <dir_find+0x24>
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	e03e      	b.n	8002d84 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6938      	ldr	r0, [r7, #16]
 8002d0e:	f7ff fa30 	bl	8002172 <move_window>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d12f      	bne.n	8002d7c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <dir_find+0x4e>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	75fb      	strb	r3, [r7, #23]
 8002d2e:	e028      	b.n	8002d82 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	330b      	adds	r3, #11
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	330b      	adds	r3, #11
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <dir_find+0x86>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69d8      	ldr	r0, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3320      	adds	r3, #32
 8002d5a:	220b      	movs	r2, #11
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7ff f940 	bl	8001fe2 <mem_cmp>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8002d68:	2100      	movs	r1, #0
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fe40 	bl	80029f0 <dir_next>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0c5      	beq.n	8002d06 <dir_find+0x24>
 8002d7a:	e002      	b.n	8002d82 <dir_find+0xa0>
		if (res != FR_OK) break;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002d80:	bf00      	nop

	return res;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff febd 	bl	8002b1c <dir_alloc>
 8002da2:	4603      	mov	r3, r0
 8002da4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11c      	bne.n	8002de6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4619      	mov	r1, r3
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff f9dd 	bl	8002172 <move_window>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d111      	bne.n	8002de6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f8ef 	bl	8001fae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69d8      	ldr	r0, [r3, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3320      	adds	r3, #32
 8002dd8:	220b      	movs	r2, #11
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7ff f8c6 	bl	8001f6c <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2201      	movs	r2, #1
 8002de4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d052      	beq.n	8002eae <get_fileinfo+0xbe>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 8002e10:	e021      	b.n	8002e56 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1c59      	adds	r1, r3, #1
 8002e1a:	6179      	str	r1, [r7, #20]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d100      	bne.n	8002e2a <get_fileinfo+0x3a>
 8002e28:	e015      	b.n	8002e56 <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d101      	bne.n	8002e34 <get_fileinfo+0x44>
 8002e30:	23e5      	movs	r3, #229	; 0xe5
 8002e32:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d106      	bne.n	8002e48 <get_fileinfo+0x58>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	613a      	str	r2, [r7, #16]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	222e      	movs	r2, #46	; 0x2e
 8002e46:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	613a      	str	r2, [r7, #16]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b0a      	cmp	r3, #10
 8002e5a:	d9da      	bls.n	8002e12 <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	3309      	adds	r3, #9
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	7ada      	ldrb	r2, [r3, #11]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	331c      	adds	r3, #28
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f80d 	bl	8001e98 <ld_dword>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	3316      	adds	r3, #22
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe ffec 	bl	8001e68 <ld_word>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ffe2 	bl	8001e68 <ld_word>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	809a      	strh	r2, [r3, #4]
 8002eac:	e000      	b.n	8002eb0 <get_fileinfo+0xc0>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8002eae:	bf00      	nop
}
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3320      	adds	r3, #32
 8002ecc:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8002ece:	220b      	movs	r2, #11
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	6938      	ldr	r0, [r7, #16]
 8002ed4:	f7ff f86b 	bl	8001fae <mem_set>
	si = i = 0; ni = 8;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	61fa      	str	r2, [r7, #28]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4413      	add	r3, r2
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d97c      	bls.n	8002ff6 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f00:	2b2f      	cmp	r3, #47	; 0x2f
 8002f02:	d007      	beq.n	8002f14 <create_name+0x5c>
 8002f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f08:	2b5c      	cmp	r3, #92	; 0x5c
 8002f0a:	d110      	bne.n	8002f2e <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002f0c:	e002      	b.n	8002f14 <create_name+0x5c>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b2f      	cmp	r3, #47	; 0x2f
 8002f1e:	d0f6      	beq.n	8002f0e <create_name+0x56>
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b5c      	cmp	r3, #92	; 0x5c
 8002f2a:	d0f0      	beq.n	8002f0e <create_name+0x56>
			break;
 8002f2c:	e064      	b.n	8002ff8 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f32:	2b2e      	cmp	r3, #46	; 0x2e
 8002f34:	d003      	beq.n	8002f3e <create_name+0x86>
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d30d      	bcc.n	8002f5a <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2b0b      	cmp	r3, #11
 8002f42:	d003      	beq.n	8002f4c <create_name+0x94>
 8002f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f48:	2b2e      	cmp	r3, #46	; 0x2e
 8002f4a:	d001      	beq.n	8002f50 <create_name+0x98>
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	e06f      	b.n	8003030 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8002f50:	2308      	movs	r3, #8
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	230b      	movs	r3, #11
 8002f56:	623b      	str	r3, [r7, #32]
			continue;
 8002f58:	e04c      	b.n	8002ff4 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8002f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f881 	bl	8002066 <dbc_1st>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d024      	beq.n	8002fb4 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	61fa      	str	r2, [r7, #28]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f893 	bl	80020a6 <dbc_2nd>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <create_name+0xd8>
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d301      	bcc.n	8002f94 <create_name+0xdc>
 8002f90:	2306      	movs	r3, #6
 8002f92:	e04d      	b.n	8003030 <create_name+0x178>
			sfn[i++] = c;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	61ba      	str	r2, [r7, #24]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002fa2:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	61ba      	str	r2, [r7, #24]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e797      	b.n	8002ee4 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb8:	4619      	mov	r1, r3
 8002fba:	481f      	ldr	r0, [pc, #124]	; (8003038 <create_name+0x180>)
 8002fbc:	f7ff f838 	bl	8002030 <chk_chr>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <create_name+0x112>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e032      	b.n	8003030 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fce:	2b60      	cmp	r3, #96	; 0x60
 8002fd0:	d908      	bls.n	8002fe4 <create_name+0x12c>
 8002fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd6:	2b7a      	cmp	r3, #122	; 0x7a
 8002fd8:	d804      	bhi.n	8002fe4 <create_name+0x12c>
 8002fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fde:	3b20      	subs	r3, #32
 8002fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	61ba      	str	r2, [r7, #24]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ff2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8002ff4:	e776      	b.n	8002ee4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002ff6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <create_name+0x154>
 8003008:	2306      	movs	r3, #6
 800300a:	e011      	b.n	8003030 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2be5      	cmp	r3, #229	; 0xe5
 8003012:	d102      	bne.n	800301a <create_name+0x162>
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2205      	movs	r2, #5
 8003018:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800301a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301e:	2b20      	cmp	r3, #32
 8003020:	d801      	bhi.n	8003026 <create_name+0x16e>
 8003022:	2204      	movs	r2, #4
 8003024:	e000      	b.n	8003028 <create_name+0x170>
 8003026:	2200      	movs	r2, #0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	330b      	adds	r3, #11
 800302c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800302e:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8003030:	4618      	mov	r0, r3
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	08009c80 	.word	0x08009c80

0800303c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800304c:	e002      	b.n	8003054 <follow_path+0x18>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b2f      	cmp	r3, #47	; 0x2f
 800305a:	d0f8      	beq.n	800304e <follow_path+0x12>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b5c      	cmp	r3, #92	; 0x5c
 8003062:	d0f4      	beq.n	800304e <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b1f      	cmp	r3, #31
 8003070:	d80a      	bhi.n	8003088 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800307a:	2100      	movs	r1, #0
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fc3c 	bl	80028fa <dir_sdi>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
 8003086:	e043      	b.n	8003110 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003088:	463b      	mov	r3, r7
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff13 	bl	8002eb8 <create_name>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d134      	bne.n	8003106 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fe20 	bl	8002ce2 <dir_find>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80030ac:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d127      	bne.n	800310a <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d122      	bne.n	800310a <follow_path+0xce>
 80030c4:	2305      	movs	r3, #5
 80030c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80030c8:	e01f      	b.n	800310a <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11c      	bne.n	800310e <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 80030e0:	2305      	movs	r3, #5
 80030e2:	75fb      	strb	r3, [r7, #23]
 80030e4:	e014      	b.n	8003110 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	4413      	add	r3, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	6938      	ldr	r0, [r7, #16]
 80030fa:	f7ff fd56 	bl	8002baa <ld_clust>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003104:	e7c0      	b.n	8003088 <follow_path+0x4c>
			if (res != FR_OK) break;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <follow_path+0xd4>
				break;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800310e:	bf00      	nop
			}
		}
	}

	return res;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800311a:	b480      	push	{r7}
 800311c:	b089      	sub	sp, #36	; 0x24
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <get_ldnumber+0x22>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	e02d      	b.n	8003198 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	61fa      	str	r2, [r7, #28]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b20      	cmp	r3, #32
 800314a:	d902      	bls.n	8003152 <get_ldnumber+0x38>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b3a      	cmp	r3, #58	; 0x3a
 8003150:	d1f4      	bne.n	800313c <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b3a      	cmp	r3, #58	; 0x3a
 8003156:	d11c      	bne.n	8003192 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8003158:	2301      	movs	r3, #1
 800315a:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b2f      	cmp	r3, #47	; 0x2f
 8003162:	d90c      	bls.n	800317e <get_ldnumber+0x64>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b39      	cmp	r3, #57	; 0x39
 800316a:	d808      	bhi.n	800317e <get_ldnumber+0x64>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	3302      	adds	r3, #2
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	429a      	cmp	r2, r3
 8003174:	d103      	bne.n	800317e <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3b30      	subs	r3, #48	; 0x30
 800317c:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	dc04      	bgt.n	800318e <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	e002      	b.n	8003198 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8003196:	697b      	ldr	r3, [r7, #20]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3724      	adds	r7, #36	; 0x24
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	70da      	strb	r2, [r3, #3]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe ffd7 	bl	8002172 <move_window>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <check_fs+0x2a>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e038      	b.n	8003240 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3330      	adds	r3, #48	; 0x30
 80031d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fe46 	bl	8001e68 <ld_word>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <check_fs+0x48>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e029      	b.n	8003240 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031f2:	2be9      	cmp	r3, #233	; 0xe9
 80031f4:	d009      	beq.n	800320a <check_fs+0x66>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031fc:	2beb      	cmp	r3, #235	; 0xeb
 80031fe:	d004      	beq.n	800320a <check_fs+0x66>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003206:	2be8      	cmp	r3, #232	; 0xe8
 8003208:	d119      	bne.n	800323e <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3330      	adds	r3, #48	; 0x30
 800320e:	3336      	adds	r3, #54	; 0x36
 8003210:	2203      	movs	r2, #3
 8003212:	490d      	ldr	r1, [pc, #52]	; (8003248 <check_fs+0xa4>)
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fee4 	bl	8001fe2 <mem_cmp>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <check_fs+0x80>
 8003220:	2300      	movs	r3, #0
 8003222:	e00d      	b.n	8003240 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3330      	adds	r3, #48	; 0x30
 8003228:	3352      	adds	r3, #82	; 0x52
 800322a:	2205      	movs	r2, #5
 800322c:	4907      	ldr	r1, [pc, #28]	; (800324c <check_fs+0xa8>)
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fed7 	bl	8001fe2 <mem_cmp>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <check_fs+0x9a>
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 800323e:	2302      	movs	r3, #2
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08009c90 	.word	0x08009c90
 800324c:	08009c94 	.word	0x08009c94

08003250 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b096      	sub	sp, #88	; 0x58
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ff58 	bl	800311a <get_ldnumber>
 800326a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	da01      	bge.n	8003276 <find_volume+0x26>
 8003272:	230b      	movs	r3, #11
 8003274:	e238      	b.n	80036e8 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8003276:	4aa8      	ldr	r2, [pc, #672]	; (8003518 <find_volume+0x2c8>)
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <find_volume+0x3a>
 8003286:	230c      	movs	r3, #12
 8003288:	e22e      	b.n	80036e8 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fb13 	bl	80018d0 <disk_status>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80032b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10c      	bne.n	80032d6 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <find_volume+0x82>
 80032c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80032ce:	230a      	movs	r3, #10
 80032d0:	e20a      	b.n	80036e8 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 80032d2:	2300      	movs	r3, #0
 80032d4:	e208      	b.n	80036e8 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80032dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fa07 	bl	80016fc <disk_initialize>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80032f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003300:	2303      	movs	r3, #3
 8003302:	e1f1      	b.n	80036e8 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <find_volume+0xca>
 800330a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003316:	230a      	movs	r3, #10
 8003318:	e1e6      	b.n	80036e8 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800331e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003322:	f7ff ff3f 	bl	80031a4 <check_fs>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800332c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003330:	2b02      	cmp	r3, #2
 8003332:	d14b      	bne.n	80033cc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003334:	2300      	movs	r3, #0
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
 8003338:	e01f      	b.n	800337a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003348:	4413      	add	r3, r2
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	3304      	adds	r3, #4
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <find_volume+0x114>
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	3308      	adds	r3, #8
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fd9c 	bl	8001e98 <ld_dword>
 8003360:	4602      	mov	r2, r0
 8003362:	e000      	b.n	8003366 <find_volume+0x116>
 8003364:	2200      	movs	r2, #0
 8003366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800336e:	440b      	add	r3, r1
 8003370:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003376:	3301      	adds	r3, #1
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
 800337a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337c:	2b03      	cmp	r3, #3
 800337e:	d9dc      	bls.n	800333a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003380:	2300      	movs	r3, #0
 8003382:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8003384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <find_volume+0x140>
 800338a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338c:	3b01      	subs	r3, #1
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003398:	4413      	add	r3, r2
 800339a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800339e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80033a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <find_volume+0x162>
 80033a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80033a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033aa:	f7ff fefb 	bl	80031a4 <check_fs>
 80033ae:	4603      	mov	r3, r0
 80033b0:	e000      	b.n	80033b4 <find_volume+0x164>
 80033b2:	2303      	movs	r3, #3
 80033b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80033b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d905      	bls.n	80033cc <find_volume+0x17c>
 80033c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c2:	3301      	adds	r3, #1
 80033c4:	643b      	str	r3, [r7, #64]	; 0x40
 80033c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d9e1      	bls.n	8003390 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80033cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d101      	bne.n	80033d8 <find_volume+0x188>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e187      	b.n	80036e8 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80033d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d901      	bls.n	80033e4 <find_volume+0x194>
 80033e0:	230d      	movs	r3, #13
 80033e2:	e181      	b.n	80036e8 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	3330      	adds	r3, #48	; 0x30
 80033e8:	330b      	adds	r3, #11
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fd3c 	bl	8001e68 <ld_word>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f6:	d001      	beq.n	80033fc <find_volume+0x1ac>
 80033f8:	230d      	movs	r3, #13
 80033fa:	e175      	b.n	80036e8 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	3330      	adds	r3, #48	; 0x30
 8003400:	3316      	adds	r3, #22
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fd30 	bl	8001e68 <ld_word>
 8003408:	4603      	mov	r3, r0
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <find_volume+0x1d0>
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	3330      	adds	r3, #48	; 0x30
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe fd3d 	bl	8001e98 <ld_dword>
 800341e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003424:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d005      	beq.n	8003444 <find_volume+0x1f4>
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	789b      	ldrb	r3, [r3, #2]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d001      	beq.n	8003444 <find_volume+0x1f4>
 8003440:	230d      	movs	r3, #13
 8003442:	e151      	b.n	80036e8 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	461a      	mov	r2, r3
 800344a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b29a      	uxth	r2, r3
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	895b      	ldrh	r3, [r3, #10]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <find_volume+0x228>
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	895b      	ldrh	r3, [r3, #10]
 800346a:	461a      	mov	r2, r3
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	895b      	ldrh	r3, [r3, #10]
 8003470:	3b01      	subs	r3, #1
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <find_volume+0x22c>
 8003478:	230d      	movs	r3, #13
 800347a:	e135      	b.n	80036e8 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	3330      	adds	r3, #48	; 0x30
 8003480:	3311      	adds	r3, #17
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fcf0 	bl	8001e68 <ld_word>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	891b      	ldrh	r3, [r3, #8]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <find_volume+0x252>
 800349e:	230d      	movs	r3, #13
 80034a0:	e122      	b.n	80036e8 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	3330      	adds	r3, #48	; 0x30
 80034a6:	3313      	adds	r3, #19
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fcdd 	bl	8001e68 <ld_word>
 80034ae:	4603      	mov	r3, r0
 80034b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80034b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <find_volume+0x276>
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	3330      	adds	r3, #48	; 0x30
 80034bc:	3320      	adds	r3, #32
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fcea 	bl	8001e98 <ld_dword>
 80034c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	3330      	adds	r3, #48	; 0x30
 80034ca:	330e      	adds	r3, #14
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fccb 	bl	8001e68 <ld_word>
 80034d2:	4603      	mov	r3, r0
 80034d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80034d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <find_volume+0x290>
 80034dc:	230d      	movs	r3, #13
 80034de:	e103      	b.n	80036e8 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80034e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	4413      	add	r3, r2
 80034e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034e8:	8912      	ldrh	r2, [r2, #8]
 80034ea:	0912      	lsrs	r2, r2, #4
 80034ec:	b292      	uxth	r2, r2
 80034ee:	4413      	add	r3, r2
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80034f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d201      	bcs.n	80034fe <find_volume+0x2ae>
 80034fa:	230d      	movs	r3, #13
 80034fc:	e0f4      	b.n	80036e8 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80034fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003506:	8952      	ldrh	r2, [r2, #10]
 8003508:	fbb3 f3f2 	udiv	r3, r3, r2
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <find_volume+0x2cc>
 8003514:	230d      	movs	r3, #13
 8003516:	e0e7      	b.n	80036e8 <find_volume+0x498>
 8003518:	20000228 	.word	0x20000228
		fmt = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	4a72      	ldr	r2, [pc, #456]	; (80036f0 <find_volume+0x4a0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d802      	bhi.n	8003530 <find_volume+0x2e0>
 800352a:	2303      	movs	r3, #3
 800352c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <find_volume+0x2f0>
 800353a:	2302      	movs	r3, #2
 800353c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <find_volume+0x300>
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8003550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <find_volume+0x30c>
 8003558:	230d      	movs	r3, #13
 800355a:	e0c5      	b.n	80036e8 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	1c9a      	adds	r2, r3, #2
 8003560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003562:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003568:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800356a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800356c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356e:	441a      	add	r2, r3
 8003570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003572:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003574:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	441a      	add	r2, r3
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800357e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003582:	2b03      	cmp	r3, #3
 8003584:	d11e      	bne.n	80035c4 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	3330      	adds	r3, #48	; 0x30
 800358a:	332a      	adds	r3, #42	; 0x2a
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fc6b 	bl	8001e68 <ld_word>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <find_volume+0x34c>
 8003598:	230d      	movs	r3, #13
 800359a:	e0a5      	b.n	80036e8 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	891b      	ldrh	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <find_volume+0x358>
 80035a4:	230d      	movs	r3, #13
 80035a6:	e09f      	b.n	80036e8 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	3330      	adds	r3, #48	; 0x30
 80035ac:	332c      	adds	r3, #44	; 0x2c
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fc72 	bl	8001e98 <ld_dword>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
 80035c2:	e01f      	b.n	8003604 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80035c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c6:	891b      	ldrh	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <find_volume+0x380>
 80035cc:	230d      	movs	r3, #13
 80035ce:	e08b      	b.n	80036e8 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	441a      	add	r2, r3
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80035dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d103      	bne.n	80035ec <find_volume+0x39c>
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	e00a      	b.n	8003602 <find_volume+0x3b2>
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	085a      	lsrs	r2, r3, #1
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800360e:	0a5b      	lsrs	r3, r3, #9
 8003610:	429a      	cmp	r2, r3
 8003612:	d201      	bcs.n	8003618 <find_volume+0x3c8>
 8003614:	230d      	movs	r3, #13
 8003616:	e067      	b.n	80036e8 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	611a      	str	r2, [r3, #16]
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003626:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800362e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003632:	2b03      	cmp	r3, #3
 8003634:	d149      	bne.n	80036ca <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	3330      	adds	r3, #48	; 0x30
 800363a:	3330      	adds	r3, #48	; 0x30
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe fc13 	bl	8001e68 <ld_word>
 8003642:	4603      	mov	r3, r0
 8003644:	2b01      	cmp	r3, #1
 8003646:	d140      	bne.n	80036ca <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364a:	3301      	adds	r3, #1
 800364c:	4619      	mov	r1, r3
 800364e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003650:	f7fe fd8f 	bl	8002172 <move_window>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d137      	bne.n	80036ca <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	2200      	movs	r2, #0
 800365e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	3330      	adds	r3, #48	; 0x30
 8003664:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fbfd 	bl	8001e68 <ld_word>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003676:	429a      	cmp	r2, r3
 8003678:	d127      	bne.n	80036ca <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	3330      	adds	r3, #48	; 0x30
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fc0a 	bl	8001e98 <ld_dword>
 8003684:	4602      	mov	r2, r0
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <find_volume+0x4a4>)
 8003688:	429a      	cmp	r2, r3
 800368a:	d11e      	bne.n	80036ca <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	3330      	adds	r3, #48	; 0x30
 8003690:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fbff 	bl	8001e98 <ld_dword>
 800369a:	4602      	mov	r2, r0
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <find_volume+0x4a8>)
 800369e:	429a      	cmp	r2, r3
 80036a0:	d113      	bne.n	80036ca <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	3330      	adds	r3, #48	; 0x30
 80036a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fbf4 	bl	8001e98 <ld_dword>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	3330      	adds	r3, #48	; 0x30
 80036ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fbea 	bl	8001e98 <ld_dword>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80036d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <find_volume+0x4ac>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <find_volume+0x4ac>)
 80036dc:	801a      	strh	r2, [r3, #0]
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <find_volume+0x4ac>)
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3758      	adds	r7, #88	; 0x58
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	0ffffff5 	.word	0x0ffffff5
 80036f4:	41615252 	.word	0x41615252
 80036f8:	61417272 	.word	0x61417272
 80036fc:	2000022c 	.word	0x2000022c

08003700 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800370a:	2309      	movs	r3, #9
 800370c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01c      	beq.n	800374e <validate+0x4e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d018      	beq.n	800374e <validate+0x4e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d013      	beq.n	800374e <validate+0x4e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	889a      	ldrh	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	88db      	ldrh	r3, [r3, #6]
 8003730:	429a      	cmp	r2, r3
 8003732:	d10c      	bne.n	800374e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe f8c8 	bl	80018d0 <disk_status>
 8003740:	4603      	mov	r3, r0
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <validate+0x4e>
			res = FR_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <validate+0x5a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	e000      	b.n	800375c <validate+0x5c>
 800375a:	2300      	movs	r3, #0
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	6013      	str	r3, [r2, #0]
	return res;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fcc9 	bl	800311a <get_ldnumber>
 8003788:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	da01      	bge.n	8003794 <f_mount+0x28>
 8003790:	230b      	movs	r3, #11
 8003792:	e025      	b.n	80037e0 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <f_mount+0x7c>)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	490b      	ldr	r1, [pc, #44]	; (80037e8 <f_mount+0x7c>)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <f_mount+0x5e>
 80037c6:	2300      	movs	r3, #0
 80037c8:	e00a      	b.n	80037e0 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80037ca:	f107 010c 	add.w	r1, r7, #12
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	2200      	movs	r2, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fd3b 	bl	8003250 <find_volume>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80037de:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000228 	.word	0x20000228

080037ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b099      	sub	sp, #100	; 0x64
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <f_open+0x18>
 8003800:	2309      	movs	r3, #9
 8003802:	e172      	b.n	8003aea <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800380c:	79fa      	ldrb	r2, [r7, #7]
 800380e:	f107 0114 	add.w	r1, r7, #20
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fd1a 	bl	8003250 <find_volume>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 8156 	bne.w	8003ad8 <f_open+0x2ec>
		dj.obj.fs = fs;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	f107 0318 	add.w	r3, r7, #24
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fbff 	bl	800303c <follow_path>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8003844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800384c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003850:	b25b      	sxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	da02      	bge.n	800385c <f_open+0x70>
				res = FR_INVALID_NAME;
 8003856:	2306      	movs	r3, #6
 8003858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	f003 031c 	and.w	r3, r3, #28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d073      	beq.n	800394e <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8003866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800386a:	2b00      	cmp	r3, #0
 800386c:	d010      	beq.n	8003890 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800386e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8003876:	f107 0318 	add.w	r3, r7, #24
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fa86 	bl	8002d8c <dir_register>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	f043 0308 	orr.w	r3, r3, #8
 800388c:	71fb      	strb	r3, [r7, #7]
 800388e:	e010      	b.n	80038b2 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003890:	7fbb      	ldrb	r3, [r7, #30]
 8003892:	f003 0311 	and.w	r3, r3, #17
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <f_open+0xb6>
					res = FR_DENIED;
 800389a:	2307      	movs	r3, #7
 800389c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80038a0:	e007      	b.n	80038b2 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <f_open+0xc6>
 80038ac:	2308      	movs	r3, #8
 80038ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80038b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d163      	bne.n	8003982 <f_open+0x196>
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05e      	beq.n	8003982 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f96d 	bl	8002baa <ld_clust>
 80038d0:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	f103 040e 	add.w	r4, r3, #14
 80038d8:	f7fe fabc 	bl	8001e54 <get_fattime>
 80038dc:	4603      	mov	r3, r0
 80038de:	4619      	mov	r1, r3
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7fe fb17 	bl	8001f14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	330b      	adds	r3, #11
 80038ea:	2220      	movs	r2, #32
 80038ec:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038f2:	2200      	movs	r2, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f977 	bl	8002be8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	331c      	adds	r3, #28
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fb07 	bl	8001f14 <st_dword>
					fs->wflag = 1;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2201      	movs	r2, #1
 800390a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d037      	beq.n	8003982 <f_open+0x196>
						dw = fs->winsect;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8003918:	f107 0318 	add.w	r3, r7, #24
 800391c:	2200      	movs	r2, #0
 800391e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fe6c 	bl	80025fe <remove_chain>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800392c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d126      	bne.n	8003982 <f_open+0x196>
							res = move_window(fs, dw);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe fc1a 	bl	8002172 <move_window>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003948:	3a01      	subs	r2, #1
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	e019      	b.n	8003982 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800394e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003952:	2b00      	cmp	r3, #0
 8003954:	d115      	bne.n	8003982 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8003956:	7fbb      	ldrb	r3, [r7, #30]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <f_open+0x17c>
					res = FR_NO_FILE;
 8003960:	2304      	movs	r3, #4
 8003962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003966:	e00c      	b.n	8003982 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <f_open+0x196>
 8003972:	7fbb      	ldrb	r3, [r7, #30]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <f_open+0x196>
						res = FR_DENIED;
 800397c:	2307      	movs	r3, #7
 800397e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8003982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <f_open+0x1b0>
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80039a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80039aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 8092 	bne.w	8003ad8 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f8f5 	bl	8002baa <ld_clust>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	331c      	adds	r3, #28
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fa64 	bl	8001e98 <ld_dword>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	88da      	ldrh	r2, [r3, #6]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3328      	adds	r3, #40	; 0x28
 8003a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fad1 	bl	8001fae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d060      	beq.n	8003ad8 <f_open+0x2ec>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d05c      	beq.n	8003ad8 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	895b      	ldrh	r3, [r3, #10]
 8003a2a:	025b      	lsls	r3, r3, #9
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	657b      	str	r3, [r7, #84]	; 0x54
 8003a3a:	e016      	b.n	8003a6a <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fc50 	bl	80022e6 <get_fat>
 8003a46:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d802      	bhi.n	8003a54 <f_open+0x268>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d102      	bne.n	8003a62 <f_open+0x276>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003a62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	657b      	str	r3, [r7, #84]	; 0x54
 8003a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <f_open+0x28e>
 8003a72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d8e0      	bhi.n	8003a3c <f_open+0x250>
				}
				fp->clust = clst;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a7e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d127      	bne.n	8003ad8 <f_open+0x2ec>
 8003a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d022      	beq.n	8003ad8 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fc06 	bl	80022a8 <clst2sect>
 8003a9c:	6478      	str	r0, [r7, #68]	; 0x44
 8003a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <f_open+0x2c0>
						res = FR_INT_ERR;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003aaa:	e015      	b.n	8003ad8 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aae:	0a5a      	lsrs	r2, r3, #9
 8003ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab2:	441a      	add	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	7858      	ldrb	r0, [r3, #1]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f7fd ff18 	bl	80018fc <disk_read>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <f_open+0x2ec>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <f_open+0x2fa>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3764      	adds	r7, #100	; 0x64
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}

08003af2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08e      	sub	sp, #56	; 0x38
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f107 0214 	add.w	r2, r7, #20
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fdf4 	bl	8003700 <validate>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <f_read+0x44>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	7c5b      	ldrb	r3, [r3, #17]
 8003b2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <f_read+0x4a>
 8003b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b3a:	e109      	b.n	8003d50 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	7c1b      	ldrb	r3, [r3, #16]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <f_read+0x5a>
 8003b48:	2307      	movs	r3, #7
 8003b4a:	e101      	b.n	8003d50 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	f240 80f2 	bls.w	8003d46 <f_read+0x254>
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8003b66:	e0ee      	b.n	8003d46 <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 80ba 	bne.w	8003cea <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	0a5b      	lsrs	r3, r3, #9
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	8952      	ldrh	r2, [r2, #10]
 8003b80:	3a01      	subs	r2, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d123      	bne.n	8003bd4 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	e007      	b.n	8003bac <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f7fe fb9e 	bl	80022e6 <get_fat>
 8003baa:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d804      	bhi.n	8003bbc <f_read+0xca>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	745a      	strb	r2, [r3, #17]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0c9      	b.n	8003d50 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d104      	bne.n	8003bce <f_read+0xdc>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	745a      	strb	r2, [r3, #17]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0c0      	b.n	8003d50 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7fe fb63 	bl	80022a8 <clst2sect>
 8003be2:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <f_read+0x102>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2202      	movs	r2, #2
 8003bee:	745a      	strb	r2, [r3, #17]
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0ad      	b.n	8003d50 <f_read+0x25e>
			sect += csect;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0a5b      	lsrs	r3, r3, #9
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d039      	beq.n	8003c7c <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	4413      	add	r3, r2
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	8952      	ldrh	r2, [r2, #10]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d905      	bls.n	8003c22 <f_read+0x130>
					cc = fs->csize - csect;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	895b      	ldrh	r3, [r3, #10]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	7858      	ldrb	r0, [r3, #1]
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c2c:	f7fd fe66 	bl	80018fc <disk_read>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <f_read+0x14e>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	745a      	strb	r2, [r3, #17]
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e087      	b.n	8003d50 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	7c1b      	ldrb	r3, [r3, #16]
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da14      	bge.n	8003c74 <f_read+0x182>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	69da      	ldr	r2, [r3, #28]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d90d      	bls.n	8003c74 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	025b      	lsls	r3, r3, #9
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	18d0      	adds	r0, r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3328      	adds	r3, #40	; 0x28
 8003c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fe f97c 	bl	8001f6c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	025b      	lsls	r3, r3, #9
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8003c7a:	e050      	b.n	8003d1e <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d02e      	beq.n	8003ce4 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	7c1b      	ldrb	r3, [r3, #16]
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da18      	bge.n	8003cc2 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	7858      	ldrb	r0, [r3, #1]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f7fd fe96 	bl	80019d0 <disk_write>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <f_read+0x1c2>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	745a      	strb	r2, [r3, #17]
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e04d      	b.n	8003d50 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	7c1b      	ldrb	r3, [r3, #16]
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	7858      	ldrb	r0, [r3, #1]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003ccc:	2301      	movs	r3, #1
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	f7fd fe14 	bl	80018fc <disk_read>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <f_read+0x1f2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	745a      	strb	r2, [r3, #17]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e035      	b.n	8003d50 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d901      	bls.n	8003d04 <f_read+0x212>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d12:	4413      	add	r3, r2
 8003d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d16:	4619      	mov	r1, r3
 8003d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1a:	f7fe f927 	bl	8001f6c <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	441a      	add	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	4413      	add	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	441a      	add	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f47f af0d 	bne.w	8003b68 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3738      	adds	r7, #56	; 0x38
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f107 0210 	add.w	r2, r7, #16
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fcc1 	bl	8003700 <validate>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <f_write+0x44>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	7c5b      	ldrb	r3, [r3, #17]
 8003d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <f_write+0x4a>
 8003d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003da0:	e13f      	b.n	8004022 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	7c1b      	ldrb	r3, [r3, #16]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <f_write+0x5a>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e137      	b.n	8004022 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	f080 8121 	bcs.w	8004006 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8003dcc:	e11b      	b.n	8004006 <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 80d7 	bne.w	8003f8a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	0a5b      	lsrs	r3, r3, #9
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	8952      	ldrh	r2, [r2, #10]
 8003de6:	3a01      	subs	r2, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d137      	bne.n	8003e62 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10c      	bne.n	8003e14 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fc5c 	bl	80026c8 <create_chain>
 8003e10:	62b8      	str	r0, [r7, #40]	; 0x28
 8003e12:	e007      	b.n	8003e24 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7fe fc53 	bl	80026c8 <create_chain>
 8003e22:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80f2 	beq.w	8004010 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d104      	bne.n	8003e3c <f_write+0xe4>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2202      	movs	r2, #2
 8003e36:	745a      	strb	r2, [r3, #17]
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0f2      	b.n	8004022 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e42:	d104      	bne.n	8003e4e <f_write+0xf6>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	745a      	strb	r2, [r3, #17]
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0e9      	b.n	8004022 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e52:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <f_write+0x10a>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e60:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	7c1b      	ldrb	r3, [r3, #16]
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da18      	bge.n	8003e9e <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	7858      	ldrb	r0, [r3, #1]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f7fd fda8 	bl	80019d0 <disk_write>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <f_write+0x138>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	745a      	strb	r2, [r3, #17]
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0c8      	b.n	8004022 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	7c1b      	ldrb	r3, [r3, #16]
 8003e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7fe f9fe 	bl	80022a8 <clst2sect>
 8003eac:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <f_write+0x166>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	745a      	strb	r2, [r3, #17]
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0b1      	b.n	8004022 <f_write+0x2ca>
			sect += csect;
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03c      	beq.n	8003f4c <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	8952      	ldrh	r2, [r2, #10]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d905      	bls.n	8003eec <f_write+0x194>
					cc = fs->csize - csect;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	895b      	ldrh	r3, [r3, #10]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	7858      	ldrb	r0, [r3, #1]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	f7fd fd6b 	bl	80019d0 <disk_write>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <f_write+0x1b2>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	745a      	strb	r2, [r3, #17]
 8003f06:	2301      	movs	r3, #1
 8003f08:	e08b      	b.n	8004022 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	6a3a      	ldr	r2, [r7, #32]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d915      	bls.n	8003f44 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	025b      	lsls	r3, r3, #9
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fe f81b 	bl	8001f6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	7c1b      	ldrb	r3, [r3, #16]
 8003f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8003f4a:	e03f      	b.n	8003fcc <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d016      	beq.n	8003f84 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d210      	bcs.n	8003f84 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	7858      	ldrb	r0, [r3, #1]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f7fd fcc4 	bl	80018fc <disk_read>
 8003f74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	745a      	strb	r2, [r3, #17]
 8003f80:	2301      	movs	r3, #1
 8003f82:	e04e      	b.n	8004022 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f92:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d901      	bls.n	8003fa4 <f_write+0x24c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	4413      	add	r3, r2
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fd ffd7 	bl	8001f6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	7c1b      	ldrb	r3, [r3, #16]
 8003fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	441a      	add	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	4413      	add	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	441a      	add	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	615a      	str	r2, [r3, #20]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf38      	it	cc
 8004000:	461a      	movcc	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f47f aee0 	bne.w	8003dce <f_write+0x76>
 800400e:	e000      	b.n	8004012 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004010:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	7c1b      	ldrb	r3, [r3, #16]
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3730      	adds	r7, #48	; 0x30
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f107 0208 	add.w	r2, r7, #8
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fb60 	bl	8003700 <validate>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d168      	bne.n	800411c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7c1b      	ldrb	r3, [r3, #16]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d062      	beq.n	800411c <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7c1b      	ldrb	r3, [r3, #16]
 800405a:	b25b      	sxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	da15      	bge.n	800408c <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	7858      	ldrb	r0, [r3, #1]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	2301      	movs	r3, #1
 8004070:	f7fd fcae 	bl	80019d0 <disk_write>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <f_sync+0x54>
 800407a:	2301      	movs	r3, #1
 800407c:	e04f      	b.n	800411e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	7c1b      	ldrb	r3, [r3, #16]
 8004082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004086:	b2da      	uxtb	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800408c:	f7fd fee2 	bl	8001e54 <get_fattime>
 8004090:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fe f869 	bl	8002172 <move_window>
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d138      	bne.n	800411c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	330b      	adds	r3, #11
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	330b      	adds	r3, #11
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	f7fe fd8b 	bl	8002be8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f103 021c 	add.w	r2, r3, #28
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fd ff18 	bl	8001f14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3316      	adds	r3, #22
 80040e8:	6939      	ldr	r1, [r7, #16]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd ff12 	bl	8001f14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3312      	adds	r3, #18
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fef1 	bl	8001ede <st_word>
					fs->wflag = 1;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2201      	movs	r2, #1
 8004100:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f861 	bl	80021cc <sync_fs>
 800410a:	4603      	mov	r3, r0
 800410c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7c1b      	ldrb	r3, [r3, #16]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	b2da      	uxtb	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff7b 	bl	800402a <f_sync>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10e      	bne.n	800415c <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f107 0208 	add.w	r2, r7, #8
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fada 	bl	8003700 <validate>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <f_opendir+0x14>
 8004176:	2309      	movs	r3, #9
 8004178:	e04a      	b.n	8004210 <f_opendir+0xaa>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800417a:	f107 0108 	add.w	r1, r7, #8
 800417e:	463b      	mov	r3, r7
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f864 	bl	8003250 <find_volume>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d137      	bne.n	8004202 <f_opendir+0x9c>
		dp->obj.fs = fs;
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fe ff4d 	bl	800303c <follow_path>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d125      	bne.n	80041f8 <f_opendir+0x92>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db12      	blt.n	80041de <f_opendir+0x78>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	799b      	ldrb	r3, [r3, #6]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <f_opendir+0x74>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fcec 	bl	8002baa <ld_clust>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	e001      	b.n	80041de <f_opendir+0x78>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80041da:	2305      	movs	r3, #5
 80041dc:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <f_opendir+0x92>
				dp->obj.id = fs->id;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	88da      	ldrh	r2, [r3, #6]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80041ec:	2100      	movs	r1, #0
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fb83 	bl	80028fa <dir_sdi>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d101      	bne.n	8004202 <f_opendir+0x9c>
 80041fe:	2305      	movs	r3, #5
 8004200:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <f_opendir+0xa8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f107 0208 	add.w	r2, r7, #8
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fa69 	bl	8003700 <validate>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <f_closedir+0x26>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f107 0208 	add.w	r2, r7, #8
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fa50 	bl	8003700 <validate>
 8004260:	4603      	mov	r3, r0
 8004262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d126      	bne.n	80042b8 <f_readdir+0x70>
		if (!fno) {
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8004270:	2100      	movs	r1, #0
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fe fb41 	bl	80028fa <dir_sdi>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e01c      	b.n	80042b8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
 800427e:	2100      	movs	r1, #0
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fe fcd1 	bl	8002c28 <dir_read>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d101      	bne.n	8004294 <f_readdir+0x4c>
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10e      	bne.n	80042b8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fe fda7 	bl	8002df0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80042a2:	2100      	movs	r1, #0
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fe fba3 	bl	80029f0 <dir_next>
 80042aa:	4603      	mov	r3, r0
 80042ac:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d101      	bne.n	80042b8 <f_readdir+0x70>
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <GetNextFileName>:
#include "ff.h"
#include <stdlib.h>
#include <string.h>

char* GetNextFileName()
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	; 0x40
 80042c8:	af00      	add	r7, sp, #0
	 FRESULT res;
	 DIR dir;
	 static FILINFO fno;
	 char* path="/";
 80042ca:	4b26      	ldr	r3, [pc, #152]	; (8004364 <GetNextFileName+0xa0>)
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38

	 int ID=0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	 res = f_opendir(&dir, path);                       /* Open the directory */
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff ff45 	bl	8004166 <f_opendir>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if (res == FR_OK) {
 80042e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11f      	bne.n	800432a <GetNextFileName+0x66>
		 for (;;) {
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	491e      	ldr	r1, [pc, #120]	; (8004368 <GetNextFileName+0xa4>)
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ffaa 	bl	8004248 <f_readdir>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80042fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <GetNextFileName+0x5e>
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <GetNextFileName+0xa4>)
 8004304:	7a5b      	ldrb	r3, [r3, #9]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <GetNextFileName+0x5e>
			 else {                                       /* It is a file. */
				 if (ID < atoi(fno.fname))
 800430a:	4818      	ldr	r0, [pc, #96]	; (800436c <GetNextFileName+0xa8>)
 800430c:	f004 fb18 	bl	8008940 <atoi>
 8004310:	4602      	mov	r2, r0
 8004312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004314:	4293      	cmp	r3, r2
 8004316:	dae8      	bge.n	80042ea <GetNextFileName+0x26>
				 {
					 ID = atoi(fno.fname);
 8004318:	4814      	ldr	r0, [pc, #80]	; (800436c <GetNextFileName+0xa8>)
 800431a:	f004 fb11 	bl	8008940 <atoi>
 800431e:	63f8      	str	r0, [r7, #60]	; 0x3c
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004320:	e7e3      	b.n	80042ea <GetNextFileName+0x26>
				 }
			 }
		 }
		 f_closedir(&dir);
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff77 	bl	8004218 <f_closedir>
	 }

	 ID++;
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	3301      	adds	r3, #1
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
	 char *c;
	   sprintf(c, "%d", ID);
 8004330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004332:	490f      	ldr	r1, [pc, #60]	; (8004370 <GetNextFileName+0xac>)
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f004 fb51 	bl	80089dc <siprintf>
	   strcat(c,".wav");
 800433a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433c:	f7fb ff48 	bl	80001d0 <strlen>
 8004340:	4603      	mov	r3, r0
 8004342:	461a      	mov	r2, r3
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	4413      	add	r3, r2
 8004348:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <GetNextFileName+0xb0>)
 800434a:	6810      	ldr	r0, [r2, #0]
 800434c:	6018      	str	r0, [r3, #0]
 800434e:	7912      	ldrb	r2, [r2, #4]
 8004350:	711a      	strb	r2, [r3, #4]
	   printf("%s",c);
 8004352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004354:	4808      	ldr	r0, [pc, #32]	; (8004378 <GetNextFileName+0xb4>)
 8004356:	f004 fb29 	bl	80089ac <iprintf>
	 return c;
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800435c:	4618      	mov	r0, r3
 800435e:	3740      	adds	r7, #64	; 0x40
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	08009c9c 	.word	0x08009c9c
 8004368:	20000230 	.word	0x20000230
 800436c:	20000239 	.word	0x20000239
 8004370:	08009ca0 	.word	0x08009ca0
 8004374:	08009ca4 	.word	0x08009ca4
 8004378:	08009cac 	.word	0x08009cac

0800437c <NextFile>:

char * NextFile(char* file_name)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b090      	sub	sp, #64	; 0x40
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	static FILINFO fno;
	char* path="/";
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <NextFile+0x7c>)
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c

	res = f_opendir(&dir, path);                       /* Open the directory */
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fee9 	bl	8004166 <f_opendir>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (res == FR_OK) {
 800439a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d124      	bne.n	80043ec <NextFile+0x70>
		 for (;;) {
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80043a2:	f107 030c 	add.w	r3, r7, #12
 80043a6:	4915      	ldr	r1, [pc, #84]	; (80043fc <NextFile+0x80>)
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff4d 	bl	8004248 <f_readdir>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			 if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80043b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d112      	bne.n	80043e2 <NextFile+0x66>
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <NextFile+0x80>)
 80043be:	7a5b      	ldrb	r3, [r3, #9]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <NextFile+0x66>
			 if (file_name == fno.fname){
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <NextFile+0x84>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d1ea      	bne.n	80043a2 <NextFile+0x26>
				 res = f_readdir(&dir, &fno);
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	490a      	ldr	r1, [pc, #40]	; (80043fc <NextFile+0x80>)
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff38 	bl	8004248 <f_readdir>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				 return fno.fname;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <NextFile+0x84>)
 80043e0:	e005      	b.n	80043ee <NextFile+0x72>
			 }
		 }
		 f_closedir(&dir);
 80043e2:	f107 030c 	add.w	r3, r7, #12
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff16 	bl	8004218 <f_closedir>
	 }
	 return fno.fname;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <NextFile+0x84>)
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3740      	adds	r7, #64	; 0x40
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	08009c9c 	.word	0x08009c9c
 80043fc:	20000248 	.word	0x20000248
 8004400:	20000251 	.word	0x20000251

08004404 <PreviousFile>:
char * PreviousFile(char* file_name)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b090      	sub	sp, #64	; 0x40
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	static FILINFO fno;
	char* path="/";
 800440c:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <PreviousFile+0x80>)
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
	char* previous_name;

	res = f_opendir(&dir, path);                       /* Open the directory */
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fea5 	bl	8004166 <f_opendir>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 8004422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004426:	2b00      	cmp	r3, #0
 8004428:	d127      	bne.n	800447a <PreviousFile+0x76>
		 for (;;) {
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	4916      	ldr	r1, [pc, #88]	; (8004488 <PreviousFile+0x84>)
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff09 	bl	8004248 <f_readdir>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800443c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004440:	2b00      	cmp	r3, #0
 8004442:	d115      	bne.n	8004470 <PreviousFile+0x6c>
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <PreviousFile+0x84>)
 8004446:	7a5b      	ldrb	r3, [r3, #9]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d011      	beq.n	8004470 <PreviousFile+0x6c>
			 if (file_name == fno.fname){
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <PreviousFile+0x88>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10a      	bne.n	800446a <PreviousFile+0x66>
				 res = f_readdir(&dir, &fno);
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	490b      	ldr	r1, [pc, #44]	; (8004488 <PreviousFile+0x84>)
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fef4 	bl	8004248 <f_readdir>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				 return previous_name;
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004468:	e008      	b.n	800447c <PreviousFile+0x78>
			 }
			 previous_name = fno.fname;
 800446a:	4b08      	ldr	r3, [pc, #32]	; (800448c <PreviousFile+0x88>)
 800446c:	63fb      	str	r3, [r7, #60]	; 0x3c
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800446e:	e7dc      	b.n	800442a <PreviousFile+0x26>
		 }
		 f_closedir(&dir);
 8004470:	f107 0308 	add.w	r3, r7, #8
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fecf 	bl	8004218 <f_closedir>
	 }
	 return fno.fname;
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <PreviousFile+0x88>)
}
 800447c:	4618      	mov	r0, r3
 800447e:	3740      	adds	r7, #64	; 0x40
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08009c9c 	.word	0x08009c9c
 8004488:	20000260 	.word	0x20000260
 800448c:	20000269 	.word	0x20000269

08004490 <writeSD>:
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

/*---------------------Zapis na karte SD-----------------------*/
void writeSD()
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
	//fresult = f_mount(&FatFs, "", 0);
	fresult = f_open(&file, "plik1234.txt", FA_OPEN_ALWAYS | FA_CREATE_ALWAYS | FA_WRITE); //nazwa pliku moze miec maksymalnie 12 znakow z rozszerzeniem
 8004496:	221a      	movs	r2, #26
 8004498:	4913      	ldr	r1, [pc, #76]	; (80044e8 <writeSD+0x58>)
 800449a:	4814      	ldr	r0, [pc, #80]	; (80044ec <writeSD+0x5c>)
 800449c:	f7ff f9a6 	bl	80037ec <f_open>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <writeSD+0x60>)
 80044a6:	701a      	strb	r2, [r3, #0]
	int len = sprintf( buffer, "Hello PTM!\r\n");
 80044a8:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <writeSD+0x64>)
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <writeSD+0x68>)
 80044ac:	4614      	mov	r4, r2
 80044ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044b0:	6020      	str	r0, [r4, #0]
 80044b2:	6061      	str	r1, [r4, #4]
 80044b4:	60a2      	str	r2, [r4, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	7323      	strb	r3, [r4, #12]
 80044ba:	230c      	movs	r3, #12
 80044bc:	607b      	str	r3, [r7, #4]
	fresult = f_write(&file, buffer, len, &bytes_written);
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <writeSD+0x6c>)
 80044c2:	490c      	ldr	r1, [pc, #48]	; (80044f4 <writeSD+0x64>)
 80044c4:	4809      	ldr	r0, [pc, #36]	; (80044ec <writeSD+0x5c>)
 80044c6:	f7ff fc47 	bl	8003d58 <f_write>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <writeSD+0x60>)
 80044d0:	701a      	strb	r2, [r3, #0]
	fresult = f_close (&file);
 80044d2:	4806      	ldr	r0, [pc, #24]	; (80044ec <writeSD+0x5c>)
 80044d4:	f7ff fe27 	bl	8004126 <f_close>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <writeSD+0x60>)
 80044de:	701a      	strb	r2, [r3, #0]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}
 80044e8:	08009cb8 	.word	0x08009cb8
 80044ec:	20000590 	.word	0x20000590
 80044f0:	20000b0c 	.word	0x20000b0c
 80044f4:	20000818 	.word	0x20000818
 80044f8:	08009cc8 	.word	0x08009cc8
 80044fc:	20000ba8 	.word	0x20000ba8

08004500 <readSD>:

/*---------------------Odczyt na karcie SD-----------------------*/
void readSD()
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
	//fresult = f_mount(&FatFs, "", 0);
	fresult = f_open(&file, "WRITE1.txt", FA_READ);
 8004504:	2201      	movs	r2, #1
 8004506:	490d      	ldr	r1, [pc, #52]	; (800453c <readSD+0x3c>)
 8004508:	480d      	ldr	r0, [pc, #52]	; (8004540 <readSD+0x40>)
 800450a:	f7ff f96f 	bl	80037ec <f_open>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <readSD+0x44>)
 8004514:	701a      	strb	r2, [r3, #0]
	fresult = f_read(&file, buffer, 16, &bytes_read);
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <readSD+0x48>)
 8004518:	2210      	movs	r2, #16
 800451a:	490c      	ldr	r1, [pc, #48]	; (800454c <readSD+0x4c>)
 800451c:	4808      	ldr	r0, [pc, #32]	; (8004540 <readSD+0x40>)
 800451e:	f7ff fae8 	bl	8003af2 <f_read>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	4b07      	ldr	r3, [pc, #28]	; (8004544 <readSD+0x44>)
 8004528:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&file);
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <readSD+0x40>)
 800452c:	f7ff fdfb 	bl	8004126 <f_close>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <readSD+0x44>)
 8004536:	701a      	strb	r2, [r3, #0]

}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}
 800453c:	08009cd8 	.word	0x08009cd8
 8004540:	20000590 	.word	0x20000590
 8004544:	20000b0c 	.word	0x20000b0c
 8004548:	20000800 	.word	0x20000800
 800454c:	20000818 	.word	0x20000818

08004550 <HAL_TIM_PeriodElapsedCallback>:



/*--------------------Odczyt z mikrofonu------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM4)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d12e      	bne.n	80045c0 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if (recording)
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d02a      	beq.n	80045c0 <HAL_TIM_PeriodElapsedCallback+0x70>
		{
		HAL_ADC_Start(&hadc1);
 800456a:	4819      	ldr	r0, [pc, #100]	; (80045d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800456c:	f001 fb46 	bl	8005bfc <HAL_ADC_Start>
			  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8004570:	210a      	movs	r1, #10
 8004572:	4817      	ldr	r0, [pc, #92]	; (80045d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004574:	f001 fc08 	bl	8005d88 <HAL_ADC_PollForConversion>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d120      	bne.n	80045c0 <HAL_TIM_PeriodElapsedCallback+0x70>
			  {
				  adc_value = HAL_ADC_GetValue(&hadc1);
 800457e:	4814      	ldr	r0, [pc, #80]	; (80045d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004580:	f001 fc86 	bl	8005e90 <HAL_ADC_GetValue>
 8004584:	4603      	mov	r3, r0
 8004586:	b29a      	uxth	r2, r3
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800458a:	801a      	strh	r2, [r3, #0]
				  x = (int16_t)(2.95/(double)4096) * adc_value;
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800458e:	2200      	movs	r2, #0
 8004590:	801a      	strh	r2, [r3, #0]
				  data_chunk[data_iterator] = x;
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004598:	8812      	ldrh	r2, [r2, #0]
 800459a:	b211      	sxth	r1, r2
 800459c:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800459e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_iterator++;
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80045aa:	6013      	str	r3, [r2, #0]
				  if (data_iterator == 250)
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2bfa      	cmp	r3, #250	; 0xfa
 80045b2:	d105      	bne.n	80045c0 <HAL_TIM_PeriodElapsedCallback+0x70>
					  {
					  SaveChunk(file_name, data_chunk);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4909      	ldr	r1, [pc, #36]	; (80045e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 feea 	bl	8005394 <SaveChunk>
					  }
			  }
		}
	}
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40000800 	.word	0x40000800
 80045cc:	20000280 	.word	0x20000280
 80045d0:	200007b8 	.word	0x200007b8
 80045d4:	2000058c 	.word	0x2000058c
 80045d8:	20000288 	.word	0x20000288
 80045dc:	20000284 	.word	0x20000284
 80045e0:	20000918 	.word	0x20000918
 80045e4:	20000008 	.word	0x20000008

080045e8 <rgb1_set>:

}

/*-------------------Konfiguracja diody RGB1----------------------------*/
void rgb1_set(uint8_t red, uint8_t green, uint8_t blue)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
 80045f2:	460b      	mov	r3, r1
 80045f4:	71bb      	strb	r3, [r7, #6]
 80045f6:	4613      	mov	r3, r2
 80045f8:	717b      	strb	r3, [r7, #5]
	htim3.Instance->CCR1=red*2000;
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004600:	fb02 f203 	mul.w	r2, r2, r3
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <rgb1_set+0x50>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2=green*2000;
 800460a:	79bb      	ldrb	r3, [r7, #6]
 800460c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004610:	fb02 f203 	mul.w	r2, r2, r3
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <rgb1_set+0x50>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3=blue*2000;
 800461a:	797b      	ldrb	r3, [r7, #5]
 800461c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004620:	fb02 f203 	mul.w	r2, r2, r3
 8004624:	4b04      	ldr	r3, [pc, #16]	; (8004638 <rgb1_set+0x50>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2000054c 	.word	0x2000054c

0800463c <rgb2_set>:

/*-------------------Konfiguracja diody RGB2----------------------------*/

void rgb2_set(uint8_t red)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCR1=red*2000;
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800464c:	fb02 f203 	mul.w	r2, r2, r3
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <rgb2_set+0x28>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000b68 	.word	0x20000b68

08004668 <rgb2_set_intensity>:

/*-------Ustalenie jasnosci diody  RGB2 zaleznie od głosnosci lub czestotliwosci
 *  odbieranego dźwięku------*/
//do zrobienia
void rgb2_set_intensity()
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
	if (x<0)
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <rgb2_set_intensity+0x44>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b21b      	sxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	da03      	bge.n	800467e <rgb2_set_intensity+0x16>
	{
		rgb2_set(155);
 8004676:	209b      	movs	r0, #155	; 0x9b
 8004678:	f7ff ffe0 	bl	800463c <rgb2_set>
	}
	else
	{
		rgb2_set(255);
	}
}
 800467c:	e014      	b.n	80046a8 <rgb2_set_intensity+0x40>
	else if ((x>=0)&&(x<256))
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <rgb2_set_intensity+0x44>)
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b21b      	sxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	db0c      	blt.n	80046a2 <rgb2_set_intensity+0x3a>
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <rgb2_set_intensity+0x44>)
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b21b      	sxth	r3, r3
 800468e:	2bff      	cmp	r3, #255	; 0xff
 8004690:	dc07      	bgt.n	80046a2 <rgb2_set_intensity+0x3a>
		rgb2_set(x);
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <rgb2_set_intensity+0x44>)
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b21b      	sxth	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffce 	bl	800463c <rgb2_set>
}
 80046a0:	e002      	b.n	80046a8 <rgb2_set_intensity+0x40>
		rgb2_set(255);
 80046a2:	20ff      	movs	r0, #255	; 0xff
 80046a4:	f7ff ffca 	bl	800463c <rgb2_set>
}
 80046a8:	bf00      	nop
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000288 	.word	0x20000288

080046b0 <read_bottoms>:
		}
}

/*----------Czytanie z przyciskow---------------*/
void read_bottoms()
{
 80046b0:	b598      	push	{r3, r4, r7, lr}
 80046b2:	af00      	add	r7, sp, #0
	rgb2_set_intensity();
 80046b4:	f7ff ffd8 	bl	8004668 <rgb2_set_intensity>
	  	 if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==GPIO_PIN_RESET)
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	48ad      	ldr	r0, [pc, #692]	; (8004970 <read_bottoms+0x2c0>)
 80046bc:	f002 f994 	bl	80069e8 <HAL_GPIO_ReadPin>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <read_bottoms+0x1c>
	  	 	  	 			  	  	{selection=0;}
 80046c6:	4bab      	ldr	r3, [pc, #684]	; (8004974 <read_bottoms+0x2c4>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==GPIO_PIN_RESET)
 80046cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046d0:	48a7      	ldr	r0, [pc, #668]	; (8004970 <read_bottoms+0x2c0>)
 80046d2:	f002 f989 	bl	80069e8 <HAL_GPIO_ReadPin>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <read_bottoms+0x32>
	  	 	  	  	 			  	{selection=1;}
 80046dc:	4ba5      	ldr	r3, [pc, #660]	; (8004974 <read_bottoms+0x2c4>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2)==GPIO_PIN_RESET)
 80046e2:	2104      	movs	r1, #4
 80046e4:	48a4      	ldr	r0, [pc, #656]	; (8004978 <read_bottoms+0x2c8>)
 80046e6:	f002 f97f 	bl	80069e8 <HAL_GPIO_ReadPin>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <read_bottoms+0x46>
	  		  	  	  	  	 		{selection=2;}
 80046f0:	4ba0      	ldr	r3, [pc, #640]	; (8004974 <read_bottoms+0x2c4>)
 80046f2:	2202      	movs	r2, #2
 80046f4:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)==GPIO_PIN_RESET)
 80046f6:	2108      	movs	r1, #8
 80046f8:	489f      	ldr	r0, [pc, #636]	; (8004978 <read_bottoms+0x2c8>)
 80046fa:	f002 f975 	bl	80069e8 <HAL_GPIO_ReadPin>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <read_bottoms+0x5a>
	  		  	  	 	  	  	 	{selection=3;}
 8004704:	4b9b      	ldr	r3, [pc, #620]	; (8004974 <read_bottoms+0x2c4>)
 8004706:	2203      	movs	r2, #3
 8004708:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)==GPIO_PIN_RESET)
 800470a:	2110      	movs	r1, #16
 800470c:	489a      	ldr	r0, [pc, #616]	; (8004978 <read_bottoms+0x2c8>)
 800470e:	f002 f96b 	bl	80069e8 <HAL_GPIO_ReadPin>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <read_bottoms+0x6e>
	  	  	  	  	  	 			{selection=4;}
 8004718:	4b96      	ldr	r3, [pc, #600]	; (8004974 <read_bottoms+0x2c4>)
 800471a:	2204      	movs	r2, #4
 800471c:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)==GPIO_PIN_RESET)
 800471e:	2120      	movs	r1, #32
 8004720:	4895      	ldr	r0, [pc, #596]	; (8004978 <read_bottoms+0x2c8>)
 8004722:	f002 f961 	bl	80069e8 <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <read_bottoms+0x82>
	  	  	  	 	  	  	 		{selection=5;}
 800472c:	4b91      	ldr	r3, [pc, #580]	; (8004974 <read_bottoms+0x2c4>)
 800472e:	2205      	movs	r2, #5
 8004730:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==GPIO_PIN_RESET)
 8004732:	2140      	movs	r1, #64	; 0x40
 8004734:	4890      	ldr	r0, [pc, #576]	; (8004978 <read_bottoms+0x2c8>)
 8004736:	f002 f957 	bl	80069e8 <HAL_GPIO_ReadPin>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <read_bottoms+0x96>
	  	  	  		  	  	  	  	 {selection=6;}
 8004740:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <read_bottoms+0x2c4>)
 8004742:	2206      	movs	r2, #6
 8004744:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)==GPIO_PIN_RESET)
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	488b      	ldr	r0, [pc, #556]	; (8004978 <read_bottoms+0x2c8>)
 800474a:	f002 f94d 	bl	80069e8 <HAL_GPIO_ReadPin>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <read_bottoms+0xaa>
	  	  	  		  	  	 	  	 {selection=7;}
 8004754:	4b87      	ldr	r3, [pc, #540]	; (8004974 <read_bottoms+0x2c4>)
 8004756:	2207      	movs	r2, #7
 8004758:	601a      	str	r2, [r3, #0]

	  switch(selection)
 800475a:	4b86      	ldr	r3, [pc, #536]	; (8004974 <read_bottoms+0x2c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b07      	cmp	r3, #7
 8004760:	f200 8169 	bhi.w	8004a36 <read_bottoms+0x386>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <read_bottoms+0xbc>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004815 	.word	0x08004815
 8004774:	08004853 	.word	0x08004853
 8004778:	0800488f 	.word	0x0800488f
 800477c:	080048f9 	.word	0x080048f9
 8004780:	0800494f 	.word	0x0800494f
 8004784:	080049b1 	.word	0x080049b1
 8004788:	08004a03 	.word	0x08004a03
	  	  {
				 case 0: {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800478c:	2201      	movs	r2, #1
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	4877      	ldr	r0, [pc, #476]	; (8004970 <read_bottoms+0x2c0>)
 8004792:	f002 f941 	bl	8006a18 <HAL_GPIO_WritePin>
					  if ((sample<10)&&(sample>0))
 8004796:	4b79      	ldr	r3, [pc, #484]	; (800497c <read_bottoms+0x2cc>)
 8004798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	4b77      	ldr	r3, [pc, #476]	; (8004980 <read_bottoms+0x2d0>)
 80047a2:	f7fc f99b 	bl	8000adc <__aeabi_dcmplt>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <read_bottoms+0x124>
 80047ac:	4b73      	ldr	r3, [pc, #460]	; (800497c <read_bottoms+0x2cc>)
 80047ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f7fc f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <read_bottoms+0x124>
						  {
							  sample=0;
 80047c4:	4a6d      	ldr	r2, [pc, #436]	; (800497c <read_bottoms+0x2cc>)
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	f04f 0400 	mov.w	r4, #0
 80047ce:	e9c2 3400 	strd	r3, r4, [r2]
						  sample=sample-10;
						  LCD1602_2ndLine();
						  LCD1602_print("-10");
						  }

					  break;
 80047d2:	e137      	b.n	8004a44 <read_bottoms+0x394>
					  else if (sample==0)
 80047d4:	4b69      	ldr	r3, [pc, #420]	; (800497c <read_bottoms+0x2cc>)
 80047d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f7fc f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f040 812b 	bne.w	8004a44 <read_bottoms+0x394>
						  sample=sample-10;
 80047ee:	4b63      	ldr	r3, [pc, #396]	; (800497c <read_bottoms+0x2cc>)
 80047f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	4b61      	ldr	r3, [pc, #388]	; (8004980 <read_bottoms+0x2d0>)
 80047fa:	f7fb fd45 	bl	8000288 <__aeabi_dsub>
 80047fe:	4603      	mov	r3, r0
 8004800:	460c      	mov	r4, r1
 8004802:	4a5e      	ldr	r2, [pc, #376]	; (800497c <read_bottoms+0x2cc>)
 8004804:	e9c2 3400 	strd	r3, r4, [r2]
						  LCD1602_2ndLine();
 8004808:	f7fc fdbe 	bl	8001388 <LCD1602_2ndLine>
						  LCD1602_print("-10");
 800480c:	485d      	ldr	r0, [pc, #372]	; (8004984 <read_bottoms+0x2d4>)
 800480e:	f7fc fd77 	bl	8001300 <LCD1602_print>
					  break;
 8004812:	e117      	b.n	8004a44 <read_bottoms+0x394>
						}
				case 1: {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800481a:	4855      	ldr	r0, [pc, #340]	; (8004970 <read_bottoms+0x2c0>)
 800481c:	f002 f8fc 	bl	8006a18 <HAL_GPIO_WritePin>
					  sample=sample+0;
 8004820:	4b56      	ldr	r3, [pc, #344]	; (800497c <read_bottoms+0x2cc>)
 8004822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	f7fb fd2d 	bl	800028c <__adddf3>
 8004832:	4603      	mov	r3, r0
 8004834:	460c      	mov	r4, r1
 8004836:	4a51      	ldr	r2, [pc, #324]	; (800497c <read_bottoms+0x2cc>)
 8004838:	e9c2 3400 	strd	r3, r4, [r2]
					  LCD1602_2ndLine();
 800483c:	f7fc fda4 	bl	8001388 <LCD1602_2ndLine>
					  LCD1602_print("stop");
 8004840:	4851      	ldr	r0, [pc, #324]	; (8004988 <read_bottoms+0x2d8>)
 8004842:	f7fc fd5d 	bl	8001300 <LCD1602_print>
					  rgb1_set(255, 255, 0); //pomaranczowy
 8004846:	2200      	movs	r2, #0
 8004848:	21ff      	movs	r1, #255	; 0xff
 800484a:	20ff      	movs	r0, #255	; 0xff
 800484c:	f7ff fecc 	bl	80045e8 <rgb1_set>
					  break;
 8004850:	e0fb      	b.n	8004a4a <read_bottoms+0x39a>
						}
				case 2: {
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8004852:	2201      	movs	r2, #1
 8004854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004858:	484c      	ldr	r0, [pc, #304]	; (800498c <read_bottoms+0x2dc>)
 800485a:	f002 f8dd 	bl	8006a18 <HAL_GPIO_WritePin>
					  sample++;
 800485e:	4b47      	ldr	r3, [pc, #284]	; (800497c <read_bottoms+0x2cc>)
 8004860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	4b49      	ldr	r3, [pc, #292]	; (8004990 <read_bottoms+0x2e0>)
 800486a:	f7fb fd0f 	bl	800028c <__adddf3>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	4a42      	ldr	r2, [pc, #264]	; (800497c <read_bottoms+0x2cc>)
 8004874:	e9c2 3400 	strd	r3, r4, [r2]
					  LCD1602_2ndLine();
 8004878:	f7fc fd86 	bl	8001388 <LCD1602_2ndLine>
					  LCD1602_print("start");
 800487c:	4845      	ldr	r0, [pc, #276]	; (8004994 <read_bottoms+0x2e4>)
 800487e:	f7fc fd3f 	bl	8001300 <LCD1602_print>
					  rgb1_set(0, 255, 0); //zielony
 8004882:	2200      	movs	r2, #0
 8004884:	21ff      	movs	r1, #255	; 0xff
 8004886:	2000      	movs	r0, #0
 8004888:	f7ff feae 	bl	80045e8 <rgb1_set>
					  break;
 800488c:	e0dd      	b.n	8004a4a <read_bottoms+0x39a>
						}
				case 3: {
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 800488e:	2200      	movs	r2, #0
 8004890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004894:	483d      	ldr	r0, [pc, #244]	; (800498c <read_bottoms+0x2dc>)
 8004896:	f002 f8bf 	bl	8006a18 <HAL_GPIO_WritePin>
					 if (sample+10>123200/*utwor.size()*/)
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <read_bottoms+0x2cc>)
 800489c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <read_bottoms+0x2d0>)
 80048a6:	f7fb fcf1 	bl	800028c <__adddf3>
 80048aa:	4603      	mov	r3, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	4618      	mov	r0, r3
 80048b0:	4621      	mov	r1, r4
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	4b38      	ldr	r3, [pc, #224]	; (8004998 <read_bottoms+0x2e8>)
 80048b8:	f7fc f92e 	bl	8000b18 <__aeabi_dcmpgt>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <read_bottoms+0x222>
					 {
						 sample=0;
 80048c2:	4a2e      	ldr	r2, [pc, #184]	; (800497c <read_bottoms+0x2cc>)
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	e9c2 3400 	strd	r3, r4, [r2]
					 {
						sample=sample+10;
						LCD1602_2ndLine();
						LCD1602_print("+10");
					 }
					break;
 80048d0:	e0bb      	b.n	8004a4a <read_bottoms+0x39a>
						sample=sample+10;
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <read_bottoms+0x2cc>)
 80048d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <read_bottoms+0x2d0>)
 80048de:	f7fb fcd5 	bl	800028c <__adddf3>
 80048e2:	4603      	mov	r3, r0
 80048e4:	460c      	mov	r4, r1
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <read_bottoms+0x2cc>)
 80048e8:	e9c2 3400 	strd	r3, r4, [r2]
						LCD1602_2ndLine();
 80048ec:	f7fc fd4c 	bl	8001388 <LCD1602_2ndLine>
						LCD1602_print("+10");
 80048f0:	482a      	ldr	r0, [pc, #168]	; (800499c <read_bottoms+0x2ec>)
 80048f2:	f7fc fd05 	bl	8001300 <LCD1602_print>
					break;
 80048f6:	e0a8      	b.n	8004a4a <read_bottoms+0x39a>
						}
				case 4: {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80048f8:	2201      	movs	r2, #1
 80048fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048fe:	4823      	ldr	r0, [pc, #140]	; (800498c <read_bottoms+0x2dc>)
 8004900:	f002 f88a 	bl	8006a18 <HAL_GPIO_WritePin>
					LCD1602_2ndLine();
 8004904:	f7fc fd40 	bl	8001388 <LCD1602_2ndLine>
					LCD1602_print("recording");
 8004908:	4825      	ldr	r0, [pc, #148]	; (80049a0 <read_bottoms+0x2f0>)
 800490a:	f7fc fcf9 	bl	8001300 <LCD1602_print>
					rgb1_set(255, 0, 0);//czerwony
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	20ff      	movs	r0, #255	; 0xff
 8004914:	f7ff fe68 	bl	80045e8 <rgb1_set>
					if (recording)
 8004918:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <read_bottoms+0x2f4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <read_bottoms+0x282>
						{
						recording = 0;
 8004920:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <read_bottoms+0x2f4>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
						AddWaveHeader(file_name); // nadpisuje nagłówek
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <read_bottoms+0x2f8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fc61 	bl	80051f2 <AddWaveHeader>
					{
						file_name = GetNextFileName();
						AddWaveHeader(file_name); // dodaje  nagłówek
						recording = 1;
					}
					break;
 8004930:	e08b      	b.n	8004a4a <read_bottoms+0x39a>
						file_name = GetNextFileName();
 8004932:	f7ff fcc7 	bl	80042c4 <GetNextFileName>
 8004936:	4602      	mov	r2, r0
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <read_bottoms+0x2f8>)
 800493a:	601a      	str	r2, [r3, #0]
						AddWaveHeader(file_name); // dodaje  nagłówek
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <read_bottoms+0x2f8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fc56 	bl	80051f2 <AddWaveHeader>
						recording = 1;
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <read_bottoms+0x2f4>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
					break;
 800494c:	e07d      	b.n	8004a4a <read_bottoms+0x39a>
					}
				case 5: {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 800494e:	2200      	movs	r2, #0
 8004950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004954:	480d      	ldr	r0, [pc, #52]	; (800498c <read_bottoms+0x2dc>)
 8004956:	f002 f85f 	bl	8006a18 <HAL_GPIO_WritePin>
					rgb1_set(0, 0, 255);//niebieski
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	2100      	movs	r1, #0
 800495e:	2000      	movs	r0, #0
 8004960:	f7ff fe42 	bl	80045e8 <rgb1_set>
					LCD1602_2ndLine();
 8004964:	f7fc fd10 	bl	8001388 <LCD1602_2ndLine>
					LCD1602_print("stop recording");
 8004968:	4810      	ldr	r0, [pc, #64]	; (80049ac <read_bottoms+0x2fc>)
 800496a:	f7fc fcc9 	bl	8001300 <LCD1602_print>
					break;
 800496e:	e06c      	b.n	8004a4a <read_bottoms+0x39a>
 8004970:	40020400 	.word	0x40020400
 8004974:	20000004 	.word	0x20000004
 8004978:	40021000 	.word	0x40021000
 800497c:	20000278 	.word	0x20000278
 8004980:	40240000 	.word	0x40240000
 8004984:	08009ce4 	.word	0x08009ce4
 8004988:	08009ce8 	.word	0x08009ce8
 800498c:	40020c00 	.word	0x40020c00
 8004990:	3ff00000 	.word	0x3ff00000
 8004994:	08009cf0 	.word	0x08009cf0
 8004998:	40fe1400 	.word	0x40fe1400
 800499c:	08009cf8 	.word	0x08009cf8
 80049a0:	08009cfc 	.word	0x08009cfc
 80049a4:	20000280 	.word	0x20000280
 80049a8:	20000008 	.word	0x20000008
 80049ac:	08009d08 	.word	0x08009d08
				}
				case 6: {
					if (atoi(file_name)>0)
 80049b0:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <read_bottoms+0x3a0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f003 ffc3 	bl	8008940 <atoi>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dd43      	ble.n	8004a48 <read_bottoms+0x398>
					{
						file_name = PreviousFile(file_name);
 80049c0:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <read_bottoms+0x3a0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fd1d 	bl	8004404 <PreviousFile>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <read_bottoms+0x3a0>)
 80049ce:	601a      	str	r2, [r3, #0]
						fresult = f_close (&file);
 80049d0:	4820      	ldr	r0, [pc, #128]	; (8004a54 <read_bottoms+0x3a4>)
 80049d2:	f7ff fba8 	bl	8004126 <f_close>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <read_bottoms+0x3a8>)
 80049dc:	701a      	strb	r2, [r3, #0]
						fresult = f_open(&file, file_name, FA_READ);
 80049de:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <read_bottoms+0x3a0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	4619      	mov	r1, r3
 80049e6:	481b      	ldr	r0, [pc, #108]	; (8004a54 <read_bottoms+0x3a4>)
 80049e8:	f7fe ff00 	bl	80037ec <f_open>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <read_bottoms+0x3a8>)
 80049f2:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 80049f4:	2201      	movs	r2, #1
 80049f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049fa:	4818      	ldr	r0, [pc, #96]	; (8004a5c <read_bottoms+0x3ac>)
 80049fc:	f002 f80c 	bl	8006a18 <HAL_GPIO_WritePin>
					}
					break;
 8004a00:	e022      	b.n	8004a48 <read_bottoms+0x398>
				}
				case 7: {
					file_name = NextFile(file_name);
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <read_bottoms+0x3a0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fcb8 	bl	800437c <NextFile>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <read_bottoms+0x3a0>)
 8004a10:	601a      	str	r2, [r3, #0]
					fresult = f_open(&file, file_name, FA_READ);
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <read_bottoms+0x3a0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2201      	movs	r2, #1
 8004a18:	4619      	mov	r1, r3
 8004a1a:	480e      	ldr	r0, [pc, #56]	; (8004a54 <read_bottoms+0x3a4>)
 8004a1c:	f7fe fee6 	bl	80037ec <f_open>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <read_bottoms+0x3a8>)
 8004a26:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a2e:	480b      	ldr	r0, [pc, #44]	; (8004a5c <read_bottoms+0x3ac>)
 8004a30:	f001 fff2 	bl	8006a18 <HAL_GPIO_WritePin>
					break;
 8004a34:	e009      	b.n	8004a4a <read_bottoms+0x39a>
				}
				default: {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, RESET);
 8004a36:	2200      	movs	r2, #0
 8004a38:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004a3c:	4807      	ldr	r0, [pc, #28]	; (8004a5c <read_bottoms+0x3ac>)
 8004a3e:	f001 ffeb 	bl	8006a18 <HAL_GPIO_WritePin>
							break;}
 8004a42:	e002      	b.n	8004a4a <read_bottoms+0x39a>
					  break;
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <read_bottoms+0x39a>
					break;
 8004a48:	bf00      	nop
	    7 - wybranie utworu w przod

	   */


}
 8004a4a:	bf00      	nop
 8004a4c:	bd98      	pop	{r3, r4, r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000008 	.word	0x20000008
 8004a54:	20000590 	.word	0x20000590
 8004a58:	20000b0c 	.word	0x20000b0c
 8004a5c:	40020c00 	.word	0x40020c00

08004a60 <petla>:

void petla()
	{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af0a      	add	r7, sp, #40	; 0x28
		//HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,2048);
			 	 writeSD();
 8004a66:	f7ff fd13 	bl	8004490 <writeSD>
			 	 readSD();
 8004a6a:	f7ff fd49 	bl	8004500 <readSD>
					//LCD1602_1stLine();
		 	 	LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8004a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a72:	9308      	str	r3, [sp, #32]
 8004a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a78:	9307      	str	r3, [sp, #28]
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	9306      	str	r3, [sp, #24]
 8004a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a84:	9305      	str	r3, [sp, #20]
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <petla+0x60>)
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	9303      	str	r3, [sp, #12]
 8004a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a94:	9302      	str	r3, [sp, #8]
 8004a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <petla+0x64>)
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <petla+0x68>)
 8004aaa:	f7fc fbad 	bl	8001208 <LCD1602_Begin8BIT>
				//LCD1602_1stLine();
				LCD1602_print("sprawdzam");
 8004aae:	4807      	ldr	r0, [pc, #28]	; (8004acc <petla+0x6c>)
 8004ab0:	f7fc fc26 	bl	8001300 <LCD1602_print>



			 	  read_bottoms();
 8004ab4:	f7ff fdfc 	bl	80046b0 <read_bottoms>
	}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40020c00 	.word	0x40020c00
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	08009d18 	.word	0x08009d18

08004ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ad4:	f000 ffba 	bl	8005a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ad8:	f000 f844 	bl	8004b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004adc:	f000 fac0 	bl	8005060 <MX_GPIO_Init>
  MX_TIM2_Init();
 8004ae0:	f000 f95c 	bl	8004d9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004ae4:	f000 f9b4 	bl	8004e50 <MX_TIM3_Init>
  MX_SPI1_Init();
 8004ae8:	f000 f922 	bl	8004d30 <MX_SPI1_Init>
  MX_DAC_Init();
 8004aec:	f000 f8f6 	bl	8004cdc <MX_DAC_Init>
  MX_TIM5_Init();
 8004af0:	f000 fa6a 	bl	8004fc8 <MX_TIM5_Init>
  MX_ADC1_Init();
 8004af4:	f000 f8a0 	bl	8004c38 <MX_ADC1_Init>
  MX_TIM4_Init();
 8004af8:	f000 fa1a 	bl	8004f30 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8004afc:	2100      	movs	r1, #0
 8004afe:	4812      	ldr	r0, [pc, #72]	; (8004b48 <main+0x78>)
 8004b00:	f001 fd25 	bl	800654e <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004b04:	2100      	movs	r1, #0
 8004b06:	4811      	ldr	r0, [pc, #68]	; (8004b4c <main+0x7c>)
 8004b08:	f003 f88e 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	480f      	ldr	r0, [pc, #60]	; (8004b4c <main+0x7c>)
 8004b10:	f003 f88a 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004b14:	2108      	movs	r1, #8
 8004b16:	480d      	ldr	r0, [pc, #52]	; (8004b4c <main+0x7c>)
 8004b18:	f003 f886 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	480c      	ldr	r0, [pc, #48]	; (8004b50 <main+0x80>)
 8004b20:	f003 f882 	bl	8007c28 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8004b24:	480b      	ldr	r0, [pc, #44]	; (8004b54 <main+0x84>)
 8004b26:	f003 f830 	bl	8007b8a <HAL_TIM_Base_Start_IT>
  //HAL_SPI_Init(&hspi1);
 // HAL_SPI_IRQHandler(&hspi1);

  //HAL_ADC_Start(&hadc1);
  //HAL_ADC_Start(&hadc2);
  fresult = f_mount(&FatFs, "", 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	490a      	ldr	r1, [pc, #40]	; (8004b58 <main+0x88>)
 8004b2e:	480b      	ldr	r0, [pc, #44]	; (8004b5c <main+0x8c>)
 8004b30:	f7fe fe1c 	bl	800376c <f_mount>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <main+0x90>)
 8004b3a:	701a      	strb	r2, [r3, #0]
//readSD();
writeSD();
 8004b3c:	f7ff fca8 	bl	8004490 <writeSD>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// set_volume();
 petla();
 8004b40:	f7ff ff8e 	bl	8004a60 <petla>
 8004b44:	e7fc      	b.n	8004b40 <main+0x70>
 8004b46:	bf00      	nop
 8004b48:	20000804 	.word	0x20000804
 8004b4c:	2000054c 	.word	0x2000054c
 8004b50:	20000b68 	.word	0x20000b68
 8004b54:	2000050c 	.word	0x2000050c
 8004b58:	08009d24 	.word	0x08009d24
 8004b5c:	2000028c 	.word	0x2000028c
 8004b60:	20000b0c 	.word	0x20000b0c

08004b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b094      	sub	sp, #80	; 0x50
 8004b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b6a:	f107 0320 	add.w	r3, r7, #32
 8004b6e:	2230      	movs	r2, #48	; 0x30
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f003 ff12 	bl	800899c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <SystemClock_Config+0xcc>)
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <SystemClock_Config+0xcc>)
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6413      	str	r3, [r2, #64]	; 0x40
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <SystemClock_Config+0xcc>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <SystemClock_Config+0xd0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <SystemClock_Config+0xd0>)
 8004bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <SystemClock_Config+0xd0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004bd8:	23a8      	movs	r3, #168	; 0xa8
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004be0:	2304      	movs	r3, #4
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004be4:	f107 0320 	add.w	r3, r7, #32
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 ff2f 	bl	8006a4c <HAL_RCC_OscConfig>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004bf4:	f000 faf6 	bl	80051e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bf8:	230f      	movs	r3, #15
 8004bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c10:	f107 030c 	add.w	r3, r7, #12
 8004c14:	2105      	movs	r1, #5
 8004c16:	4618      	mov	r0, r3
 8004c18:	f002 f988 	bl	8006f2c <HAL_RCC_ClockConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004c22:	f000 fadf 	bl	80051e4 <Error_Handler>
  }
}
 8004c26:	bf00      	nop
 8004c28:	3750      	adds	r7, #80	; 0x50
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40007000 	.word	0x40007000

08004c38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004c3e:	463b      	mov	r3, r7
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004c4a:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c4c:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <MX_ADC1_Init+0x9c>)
 8004c4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c50:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c6a:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c72:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c7a:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <MX_ADC1_Init+0xa0>)
 8004c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c98:	480d      	ldr	r0, [pc, #52]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004c9a:	f000 ff6b 	bl	8005b74 <HAL_ADC_Init>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004ca4:	f000 fa9e 	bl	80051e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004ca8:	230f      	movs	r3, #15
 8004caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004cac:	2301      	movs	r3, #1
 8004cae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cb4:	463b      	mov	r3, r7
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4805      	ldr	r0, [pc, #20]	; (8004cd0 <MX_ADC1_Init+0x98>)
 8004cba:	f001 f8f7 	bl	8005eac <HAL_ADC_ConfigChannel>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004cc4:	f000 fa8e 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200007b8 	.word	0x200007b8
 8004cd4:	40012000 	.word	0x40012000
 8004cd8:	0f000001 	.word	0x0f000001

08004cdc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <MX_DAC_Init+0x4c>)
 8004cec:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <MX_DAC_Init+0x50>)
 8004cee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004cf0:	480d      	ldr	r0, [pc, #52]	; (8004d28 <MX_DAC_Init+0x4c>)
 8004cf2:	f001 fc0a 	bl	800650a <HAL_DAC_Init>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004cfc:	f000 fa72 	bl	80051e4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004d08:	463b      	mov	r3, r7
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4806      	ldr	r0, [pc, #24]	; (8004d28 <MX_DAC_Init+0x4c>)
 8004d10:	f001 fc83 	bl	800661a <HAL_DAC_ConfigChannel>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8004d1a:	f000 fa63 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000804 	.word	0x20000804
 8004d2c:	40007400 	.word	0x40007400

08004d30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d36:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <MX_SPI1_Init+0x68>)
 8004d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d48:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d64:	2218      	movs	r2, #24
 8004d66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d7c:	220a      	movs	r2, #10
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d80:	4804      	ldr	r0, [pc, #16]	; (8004d94 <MX_SPI1_Init+0x64>)
 8004d82:	f002 fae3 	bl	800734c <HAL_SPI_Init>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004d8c:	f000 fa2a 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000b10 	.word	0x20000b10
 8004d98:	40013000 	.word	0x40013000

08004d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004da2:	f107 0320 	add.w	r3, r7, #32
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	609a      	str	r2, [r3, #8]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	611a      	str	r2, [r3, #16]
 8004dba:	615a      	str	r2, [r3, #20]
 8004dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dbe:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004dc8:	f245 2207 	movw	r2, #20999	; 0x5207
 8004dcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dce:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004dd6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004de8:	4818      	ldr	r0, [pc, #96]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004dea:	f002 fef2 	bl	8007bd2 <HAL_TIM_PWM_Init>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004df4:	f000 f9f6 	bl	80051e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e00:	f107 0320 	add.w	r3, r7, #32
 8004e04:	4619      	mov	r1, r3
 8004e06:	4811      	ldr	r0, [pc, #68]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004e08:	f003 fd0a 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004e12:	f000 f9e7 	bl	80051e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e16:	2360      	movs	r3, #96	; 0x60
 8004e18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4807      	ldr	r0, [pc, #28]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004e2e:	f003 f841 	bl	8007eb4 <HAL_TIM_PWM_ConfigChannel>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8004e38:	f000 f9d4 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e3c:	4803      	ldr	r0, [pc, #12]	; (8004e4c <MX_TIM2_Init+0xb0>)
 8004e3e:	f000 fc5d 	bl	80056fc <HAL_TIM_MspPostInit>

}
 8004e42:	bf00      	nop
 8004e44:	3728      	adds	r7, #40	; 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000b68 	.word	0x20000b68

08004e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e56:	f107 0320 	add.w	r3, r7, #32
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	609a      	str	r2, [r3, #8]
 8004e6a:	60da      	str	r2, [r3, #12]
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	615a      	str	r2, [r3, #20]
 8004e70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e74:	4a2d      	ldr	r2, [pc, #180]	; (8004f2c <MX_TIM3_Init+0xdc>)
 8004e76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e7a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004e7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8004e86:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e88:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004e8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e94:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004e9a:	4823      	ldr	r0, [pc, #140]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004e9c:	f002 fe99 	bl	8007bd2 <HAL_TIM_PWM_Init>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004ea6:	f000 f99d 	bl	80051e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004eb2:	f107 0320 	add.w	r3, r7, #32
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	481b      	ldr	r0, [pc, #108]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004eba:	f003 fcb1 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004ec4:	f000 f98e 	bl	80051e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ec8:	2360      	movs	r3, #96	; 0x60
 8004eca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ed8:	1d3b      	adds	r3, r7, #4
 8004eda:	2200      	movs	r2, #0
 8004edc:	4619      	mov	r1, r3
 8004ede:	4812      	ldr	r0, [pc, #72]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004ee0:	f002 ffe8 	bl	8007eb4 <HAL_TIM_PWM_ConfigChannel>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004eea:	f000 f97b 	bl	80051e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	480c      	ldr	r0, [pc, #48]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004ef6:	f002 ffdd 	bl	8007eb4 <HAL_TIM_PWM_ConfigChannel>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004f00:	f000 f970 	bl	80051e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	2208      	movs	r2, #8
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4807      	ldr	r0, [pc, #28]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004f0c:	f002 ffd2 	bl	8007eb4 <HAL_TIM_PWM_ConfigChannel>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004f16:	f000 f965 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004f1a:	4803      	ldr	r0, [pc, #12]	; (8004f28 <MX_TIM3_Init+0xd8>)
 8004f1c:	f000 fbee 	bl	80056fc <HAL_TIM_MspPostInit>

}
 8004f20:	bf00      	nop
 8004f22:	3728      	adds	r7, #40	; 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	2000054c 	.word	0x2000054c
 8004f2c:	40000400 	.word	0x40000400

08004f30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f44:	463b      	mov	r3, r7
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <MX_TIM4_Init+0x94>)
 8004f50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f54:	2231      	movs	r2, #49	; 0x31
 8004f56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 209;
 8004f5e:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f60:	22d1      	movs	r2, #209	; 0xd1
 8004f62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004f70:	4813      	ldr	r0, [pc, #76]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f72:	f002 fddf 	bl	8007b34 <HAL_TIM_Base_Init>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8004f7c:	f000 f932 	bl	80051e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	480c      	ldr	r0, [pc, #48]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004f8e:	f003 f857 	bl	8008040 <HAL_TIM_ConfigClockSource>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004f98:	f000 f924 	bl	80051e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <MX_TIM4_Init+0x90>)
 8004faa:	f003 fc39 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8004fb4:	f000 f916 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004fb8:	bf00      	nop
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	200004cc 	.word	0x200004cc
 8004fc4:	40000800 	.word	0x40000800

08004fc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fce:	f107 0308 	add.w	r3, r7, #8
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fdc:	463b      	mov	r3, r7
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <MX_TIM5_Init+0x90>)
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	; (800505c <MX_TIM5_Init+0x94>)
 8004fe8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49;
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <MX_TIM5_Init+0x90>)
 8004fec:	2231      	movs	r2, #49	; 0x31
 8004fee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <MX_TIM5_Init+0x90>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 104;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <MX_TIM5_Init+0x90>)
 8004ff8:	2268      	movs	r2, #104	; 0x68
 8004ffa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ffc:	4b16      	ldr	r3, [pc, #88]	; (8005058 <MX_TIM5_Init+0x90>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <MX_TIM5_Init+0x90>)
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005008:	4813      	ldr	r0, [pc, #76]	; (8005058 <MX_TIM5_Init+0x90>)
 800500a:	f002 fd93 	bl	8007b34 <HAL_TIM_Base_Init>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8005014:	f000 f8e6 	bl	80051e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800501c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4619      	mov	r1, r3
 8005024:	480c      	ldr	r0, [pc, #48]	; (8005058 <MX_TIM5_Init+0x90>)
 8005026:	f003 f80b 	bl	8008040 <HAL_TIM_ConfigClockSource>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8005030:	f000 f8d8 	bl	80051e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005034:	2300      	movs	r3, #0
 8005036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005038:	2300      	movs	r3, #0
 800503a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800503c:	463b      	mov	r3, r7
 800503e:	4619      	mov	r1, r3
 8005040:	4805      	ldr	r0, [pc, #20]	; (8005058 <MX_TIM5_Init+0x90>)
 8005042:	f003 fbed 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800504c:	f000 f8ca 	bl	80051e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005050:	bf00      	nop
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	2000050c 	.word	0x2000050c
 800505c:	40000c00 	.word	0x40000c00

08005060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005066:	f107 031c 	add.w	r3, r7, #28
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	60da      	str	r2, [r3, #12]
 8005074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	4b56      	ldr	r3, [pc, #344]	; (80051d4 <MX_GPIO_Init+0x174>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a55      	ldr	r2, [pc, #340]	; (80051d4 <MX_GPIO_Init+0x174>)
 8005080:	f043 0310 	orr.w	r3, r3, #16
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b53      	ldr	r3, [pc, #332]	; (80051d4 <MX_GPIO_Init+0x174>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	4b4f      	ldr	r3, [pc, #316]	; (80051d4 <MX_GPIO_Init+0x174>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a4e      	ldr	r2, [pc, #312]	; (80051d4 <MX_GPIO_Init+0x174>)
 800509c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	4b48      	ldr	r3, [pc, #288]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	4a47      	ldr	r2, [pc, #284]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6313      	str	r3, [r2, #48]	; 0x30
 80050be:	4b45      	ldr	r3, [pc, #276]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	6313      	str	r3, [r2, #48]	; 0x30
 80050da:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	4b3a      	ldr	r3, [pc, #232]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	4a39      	ldr	r2, [pc, #228]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	6313      	str	r3, [r2, #48]	; 0x30
 80050f6:	4b37      	ldr	r3, [pc, #220]	; (80051d4 <MX_GPIO_Init+0x174>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <MX_GPIO_Init+0x174>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	4a32      	ldr	r2, [pc, #200]	; (80051d4 <MX_GPIO_Init+0x174>)
 800510c:	f043 0308 	orr.w	r3, r3, #8
 8005110:	6313      	str	r3, [r2, #48]	; 0x30
 8005112:	4b30      	ldr	r3, [pc, #192]	; (80051d4 <MX_GPIO_Init+0x174>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 800511e:	2200      	movs	r2, #0
 8005120:	f44f 4171 	mov.w	r1, #61696	; 0xf100
 8005124:	482c      	ldr	r0, [pc, #176]	; (80051d8 <MX_GPIO_Init+0x178>)
 8005126:	f001 fc77 	bl	8006a18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800512a:	2200      	movs	r2, #0
 800512c:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005130:	482a      	ldr	r0, [pc, #168]	; (80051dc <MX_GPIO_Init+0x17c>)
 8005132:	f001 fc71 	bl	8006a18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8005136:	2200      	movs	r2, #0
 8005138:	2103      	movs	r1, #3
 800513a:	4829      	ldr	r0, [pc, #164]	; (80051e0 <MX_GPIO_Init+0x180>)
 800513c:	f001 fc6c 	bl	8006a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8005140:	23fc      	movs	r3, #252	; 0xfc
 8005142:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005144:	2300      	movs	r3, #0
 8005146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005148:	2301      	movs	r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800514c:	f107 031c 	add.w	r3, r7, #28
 8005150:	4619      	mov	r1, r3
 8005152:	4823      	ldr	r0, [pc, #140]	; (80051e0 <MX_GPIO_Init+0x180>)
 8005154:	f001 faae 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin 
                           PB8 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 8005158:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 800515c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800515e:	2301      	movs	r3, #1
 8005160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005166:	2300      	movs	r3, #0
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800516a:	f107 031c 	add.w	r3, r7, #28
 800516e:	4619      	mov	r1, r3
 8005170:	4819      	ldr	r0, [pc, #100]	; (80051d8 <MX_GPIO_Init+0x178>)
 8005172:	f001 fa9f 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           PD12 PD13 PD14 PD15 
                           PD7 */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8005176:	f64f 7380 	movw	r3, #65408	; 0xff80
 800517a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800517c:	2301      	movs	r3, #1
 800517e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005184:	2300      	movs	r3, #0
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005188:	f107 031c 	add.w	r3, r7, #28
 800518c:	4619      	mov	r1, r3
 800518e:	4813      	ldr	r0, [pc, #76]	; (80051dc <MX_GPIO_Init+0x17c>)
 8005190:	f001 fa90 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8005194:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800519e:	2301      	movs	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a2:	f107 031c 	add.w	r3, r7, #28
 80051a6:	4619      	mov	r1, r3
 80051a8:	480b      	ldr	r0, [pc, #44]	; (80051d8 <MX_GPIO_Init+0x178>)
 80051aa:	f001 fa83 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80051ae:	2303      	movs	r3, #3
 80051b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b2:	2301      	movs	r3, #1
 80051b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051be:	f107 031c 	add.w	r3, r7, #28
 80051c2:	4619      	mov	r1, r3
 80051c4:	4806      	ldr	r0, [pc, #24]	; (80051e0 <MX_GPIO_Init+0x180>)
 80051c6:	f001 fa75 	bl	80066b4 <HAL_GPIO_Init>

}
 80051ca:	bf00      	nop
 80051cc:	3730      	adds	r7, #48	; 0x30
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40020400 	.word	0x40020400
 80051dc:	40020c00 	.word	0x40020c00
 80051e0:	40021000 	.word	0x40021000

080051e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <AddWaveHeader>:
const uint16_t SAMPLE_RATE = 8000;
const uint16_t BITS_PER_SAMPLE = 16;


int AddWaveHeader(char* file_path)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b0b4      	sub	sp, #208	; 0xd0
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
	FIL *f;
	char* wave_header[44];

	f_open(f, file_path, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80051fa:	2213      	movs	r2, #19
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005202:	f7fe faf3 	bl	80037ec <f_open>
	if (!f)
 8005206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <AddWaveHeader+0x20>
	{
		// błąd otwarcia pliku
		return 1;
 800520e:	2301      	movs	r3, #1
 8005210:	e0bc      	b.n	800538c <AddWaveHeader+0x19a>
	}
	// sprawdzenie rozmiaru pliku
	int data_size = f_size(f);
 8005212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	/* write chunkID, must be 'RIFF'  ------------------------------------------*/
	  wave_header[0] = 'R';
 800521c:	2352      	movs	r3, #82	; 0x52
 800521e:	613b      	str	r3, [r7, #16]
	  wave_header[1] = 'I';
 8005220:	2349      	movs	r3, #73	; 0x49
 8005222:	617b      	str	r3, [r7, #20]
	  wave_header[2] = 'F';
 8005224:	2346      	movs	r3, #70	; 0x46
 8005226:	61bb      	str	r3, [r7, #24]
	  wave_header[3] = 'F';
 8005228:	2346      	movs	r3, #70	; 0x46
 800522a:	61fb      	str	r3, [r7, #28]

	  /*CHUNK_SIZE - Write the file length */
	  int file_size = data_size + 36;
 800522c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005230:	3324      	adds	r3, #36	; 0x24
 8005232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  wave_header[4]  = (uint8_t)((file_size & 0xFF));
 8005236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800523a:	b2db      	uxtb	r3, r3
 800523c:	623b      	str	r3, [r7, #32]
	  wave_header[5]  = (uint8_t)((file_size >> 8) & 0xFF);
 800523e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005242:	121b      	asrs	r3, r3, #8
 8005244:	b2db      	uxtb	r3, r3
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
	  wave_header[6]  = (uint8_t)((file_size >> 16) & 0xFF);
 8005248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800524c:	141b      	asrs	r3, r3, #16
 800524e:	b2db      	uxtb	r3, r3
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
	  wave_header[7]  = (uint8_t)((file_size >> 24) & 0xFF);
 8005252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005256:	161b      	asrs	r3, r3, #24
 8005258:	b2db      	uxtb	r3, r3
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c


	  /*FORMAT - Write the file format, must be 'WAVE' */
	  wave_header[8]  = 'W';
 800525c:	2357      	movs	r3, #87	; 0x57
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
	  wave_header[9]  = 'A';
 8005260:	2341      	movs	r3, #65	; 0x41
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
	  wave_header[10] = 'V';
 8005264:	2356      	movs	r3, #86	; 0x56
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
	  wave_header[11] = 'E';
 8005268:	2345      	movs	r3, #69	; 0x45
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c

	  /*SUBCHUNK_1_ID - Write the format chunk, must be'fmt ' */
	  wave_header[12]  = 'f';
 800526c:	2366      	movs	r3, #102	; 0x66
 800526e:	643b      	str	r3, [r7, #64]	; 0x40
	  wave_header[13]  = 'm';
 8005270:	236d      	movs	r3, #109	; 0x6d
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
	  wave_header[14]  = 't';
 8005274:	2374      	movs	r3, #116	; 0x74
 8005276:	64bb      	str	r3, [r7, #72]	; 0x48
	  wave_header[15]  = ' ';
 8005278:	2320      	movs	r3, #32
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c

	  /*SUBCHUN_1_SIZE - Write the length of the 'fmt' data, must be 0x10 */
	  wave_header[16]  = 0x10;
 800527c:	2310      	movs	r3, #16
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
	  wave_header[17]  = 0x00;
 8005280:	2300      	movs	r3, #0
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
	  wave_header[18]  = 0x00;
 8005284:	2300      	movs	r3, #0
 8005286:	65bb      	str	r3, [r7, #88]	; 0x58
	  wave_header[19]  = 0x00;
 8005288:	2300      	movs	r3, #0
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c

	  /*AUDIO_FORMAT -  Write the audio format, must be 0x01 (PCM) */
	  wave_header[20]  = 0x01;
 800528c:	2301      	movs	r3, #1
 800528e:	663b      	str	r3, [r7, #96]	; 0x60
	  wave_header[21]  = 0x00;
 8005290:	2300      	movs	r3, #0
 8005292:	667b      	str	r3, [r7, #100]	; 0x64

	  /*NUM_CHANNELS Write the number of channels, must be 0x01 (Mono) or 0x02 (Stereo) */
	  wave_header[22]  = 0x01;
 8005294:	2301      	movs	r3, #1
 8005296:	66bb      	str	r3, [r7, #104]	; 0x68
	  wave_header[23]  = 0x00;
 8005298:	2300      	movs	r3, #0
 800529a:	66fb      	str	r3, [r7, #108]	; 0x6c

	  /*SAMPLE_RATE Write the Sample Rate 8000 Hz */
	  wave_header[24]  = (uint8_t)((SAMPLE_RATE  & 0xFF));
 800529c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	673b      	str	r3, [r7, #112]	; 0x70
	  wave_header[25]  = (uint8_t)((SAMPLE_RATE  >> 8) & 0xFF);
 80052a4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	677b      	str	r3, [r7, #116]	; 0x74
	  wave_header[26]  = (uint8_t)((SAMPLE_RATE >> 16) & 0xFF);
 80052b0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80052b4:	141b      	asrs	r3, r3, #16
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	67bb      	str	r3, [r7, #120]	; 0x78
	  wave_header[27]  = (uint8_t)((SAMPLE_RATE >> 24) & 0xFF);
 80052ba:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80052be:	161b      	asrs	r3, r3, #24
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	67fb      	str	r3, [r7, #124]	; 0x7c

	  /*BYTE_RATE Write the Byte Rate ( == SampleRate * NumChannels * BitsPerSample/8)*/
	  int byte_rate = SAMPLE_RATE * BITS_PER_SAMPLE / 8;
 80052c4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80052c8:	2210      	movs	r2, #16
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da00      	bge.n	80052d4 <AddWaveHeader+0xe2>
 80052d2:	3307      	adds	r3, #7
 80052d4:	10db      	asrs	r3, r3, #3
 80052d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	  wave_header[28]  = (uint8_t)((byte_rate & 0xFF));
 80052da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  wave_header[29]  = (uint8_t)((byte_rate >> 8) & 0xFF);
 80052e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e8:	121b      	asrs	r3, r3, #8
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  wave_header[30]  = (uint8_t)((byte_rate >> 16) & 0xFF);
 80052f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052f4:	141b      	asrs	r3, r3, #16
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  wave_header[31]  = (uint8_t)((byte_rate >> 24) & 0xFF);
 80052fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005300:	161b      	asrs	r3, r3, #24
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	  /* Write the block alignment  == NumChannels * BitsPerSample/8*/
	  wave_header[32]  = 0x02;
 8005308:	2302      	movs	r3, #2
 800530a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  wave_header[33]  = 0x00;
 800530e:	2300      	movs	r3, #0
 8005310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	  /* Write the number of bits per sample */
	  wave_header[34]  = 0x10;
 8005314:	2310      	movs	r3, #16
 8005316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  wave_header[35]  = 0x00;
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	  /* Write the Data chunk, must be 'data' */
	  wave_header[36]  = 'd';
 8005320:	2364      	movs	r3, #100	; 0x64
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  wave_header[37]  = 'a';
 8005326:	2361      	movs	r3, #97	; 0x61
 8005328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  wave_header[38]  = 't';
 800532c:	2374      	movs	r3, #116	; 0x74
 800532e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  wave_header[39]  = 'a';
 8005332:	2361      	movs	r3, #97	; 0x61
 8005334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	  /* Write the number of sample data */
	  wave_header[40]  = (uint8_t)((data_size & 0xFF));
 8005338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  wave_header[41]  = (uint8_t)((data_size >> 8) & 0xFF);
 8005342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005346:	121b      	asrs	r3, r3, #8
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  wave_header[42]  = (uint8_t)((data_size >> 16) & 0xFF);
 800534e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005352:	141b      	asrs	r3, r3, #16
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  wave_header[43]  = (uint8_t)((data_size >> 24) & 0xFF);
 800535a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800535e:	161b      	asrs	r3, r3, #24
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	  uint16_t bw;
	  f_write(f, wave_header, 44, &bw);
 8005366:	f107 030e 	add.w	r3, r7, #14
 800536a:	f107 0110 	add.w	r1, r7, #16
 800536e:	222c      	movs	r2, #44	; 0x2c
 8005370:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005374:	f7fe fcf0 	bl	8003d58 <f_write>
	  f_close(f);
 8005378:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800537c:	f7fe fed3 	bl	8004126 <f_close>
	  if (bw!=44) return 1;
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	2b2c      	cmp	r3, #44	; 0x2c
 8005384:	d001      	beq.n	800538a <AddWaveHeader+0x198>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <AddWaveHeader+0x19a>
	  return 0;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	37d0      	adds	r7, #208	; 0xd0
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SaveChunk>:

int SaveChunk(char* file_path, int16_t data[])
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	FIL* f;
	uint32_t chunk_size = 256;
 800539e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a2:	617b      	str	r3, [r7, #20]
	f_open(f, file_path, FA_OPEN_APPEND | FA_WRITE);
 80053a4:	2232      	movs	r2, #50	; 0x32
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	6938      	ldr	r0, [r7, #16]
 80053aa:	f7fe fa1f 	bl	80037ec <f_open>
	uint16_t bw;
	f_write(f, data, chunk_size, &bw);
 80053ae:	f107 030e 	add.w	r3, r7, #14
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6938      	ldr	r0, [r7, #16]
 80053b8:	f7fe fcce 	bl	8003d58 <f_write>
	if (bw!=44) return 1;
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	2b2c      	cmp	r3, #44	; 0x2c
 80053c0:	d001      	beq.n	80053c6 <SaveChunk+0x32>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <SaveChunk+0x34>
	return 0;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <HAL_MspInit+0x4c>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	4a0f      	ldr	r2, [pc, #60]	; (800541c <HAL_MspInit+0x4c>)
 80053e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e4:	6453      	str	r3, [r2, #68]	; 0x44
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <HAL_MspInit+0x4c>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_MspInit+0x4c>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <HAL_MspInit+0x4c>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_MspInit+0x4c>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800

08005420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <HAL_ADC_MspInit+0xb0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d141      	bne.n	80054c6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 800544c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6313      	str	r3, [r2, #48]	; 0x30
 800546e:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 8005484:	f043 0304 	orr.w	r3, r3, #4
 8005488:	6313      	str	r3, [r2, #48]	; 0x30
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_ADC_MspInit+0xb4>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005496:	2303      	movs	r3, #3
 8005498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800549a:	2303      	movs	r3, #3
 800549c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4619      	mov	r1, r3
 80054a8:	480b      	ldr	r0, [pc, #44]	; (80054d8 <HAL_ADC_MspInit+0xb8>)
 80054aa:	f001 f903 	bl	80066b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054ae:	2320      	movs	r3, #32
 80054b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054b2:	2303      	movs	r3, #3
 80054b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	4619      	mov	r1, r3
 80054c0:	4806      	ldr	r0, [pc, #24]	; (80054dc <HAL_ADC_MspInit+0xbc>)
 80054c2:	f001 f8f7 	bl	80066b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80054c6:	bf00      	nop
 80054c8:	3728      	adds	r7, #40	; 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40012000 	.word	0x40012000
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40020000 	.word	0x40020000
 80054dc:	40020800 	.word	0x40020800

080054e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a17      	ldr	r2, [pc, #92]	; (800555c <HAL_DAC_MspInit+0x7c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d127      	bne.n	8005552 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	4b16      	ldr	r3, [pc, #88]	; (8005560 <HAL_DAC_MspInit+0x80>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	4a15      	ldr	r2, [pc, #84]	; (8005560 <HAL_DAC_MspInit+0x80>)
 800550c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005510:	6413      	str	r3, [r2, #64]	; 0x40
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_DAC_MspInit+0x80>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <HAL_DAC_MspInit+0x80>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <HAL_DAC_MspInit+0x80>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6313      	str	r3, [r2, #48]	; 0x30
 800552e:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <HAL_DAC_MspInit+0x80>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800553a:	2310      	movs	r3, #16
 800553c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800553e:	2303      	movs	r3, #3
 8005540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005546:	f107 0314 	add.w	r3, r7, #20
 800554a:	4619      	mov	r1, r3
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <HAL_DAC_MspInit+0x84>)
 800554e:	f001 f8b1 	bl	80066b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005552:	bf00      	nop
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40007400 	.word	0x40007400
 8005560:	40023800 	.word	0x40023800
 8005564:	40020000 	.word	0x40020000

08005568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	; 0x28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a19      	ldr	r2, [pc, #100]	; (80055ec <HAL_SPI_MspInit+0x84>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d12b      	bne.n	80055e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_SPI_MspInit+0x88>)
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_SPI_MspInit+0x88>)
 8005594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005598:	6453      	str	r3, [r2, #68]	; 0x44
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <HAL_SPI_MspInit+0x88>)
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <HAL_SPI_MspInit+0x88>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <HAL_SPI_MspInit+0x88>)
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6313      	str	r3, [r2, #48]	; 0x30
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_SPI_MspInit+0x88>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80055c2:	2338      	movs	r3, #56	; 0x38
 80055c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c6:	2302      	movs	r3, #2
 80055c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ce:	2303      	movs	r3, #3
 80055d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055d2:	2305      	movs	r3, #5
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	4805      	ldr	r0, [pc, #20]	; (80055f4 <HAL_SPI_MspInit+0x8c>)
 80055de:	f001 f869 	bl	80066b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80055e2:	bf00      	nop
 80055e4:	3728      	adds	r7, #40	; 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40013000 	.word	0x40013000
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40020400 	.word	0x40020400

080055f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d116      	bne.n	8005638 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <HAL_TIM_PWM_MspInit+0x80>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	4a19      	ldr	r2, [pc, #100]	; (8005678 <HAL_TIM_PWM_MspInit+0x80>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6413      	str	r3, [r2, #64]	; 0x40
 800561a:	4b17      	ldr	r3, [pc, #92]	; (8005678 <HAL_TIM_PWM_MspInit+0x80>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005626:	2200      	movs	r2, #0
 8005628:	2100      	movs	r1, #0
 800562a:	201c      	movs	r0, #28
 800562c:	f000 ff37 	bl	800649e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005630:	201c      	movs	r0, #28
 8005632:	f000 ff50 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005636:	e01a      	b.n	800566e <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0f      	ldr	r2, [pc, #60]	; (800567c <HAL_TIM_PWM_MspInit+0x84>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d115      	bne.n	800566e <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <HAL_TIM_PWM_MspInit+0x80>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	4a0b      	ldr	r2, [pc, #44]	; (8005678 <HAL_TIM_PWM_MspInit+0x80>)
 800564c:	f043 0302 	orr.w	r3, r3, #2
 8005650:	6413      	str	r3, [r2, #64]	; 0x40
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <HAL_TIM_PWM_MspInit+0x80>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	201d      	movs	r0, #29
 8005664:	f000 ff1b 	bl	800649e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005668:	201d      	movs	r0, #29
 800566a:	f000 ff34 	bl	80064d6 <HAL_NVIC_EnableIRQ>
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	40000400 	.word	0x40000400

08005680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <HAL_TIM_Base_MspInit+0x70>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10e      	bne.n	80056b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <HAL_TIM_Base_MspInit+0x74>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <HAL_TIM_Base_MspInit+0x74>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6413      	str	r3, [r2, #64]	; 0x40
 80056a2:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <HAL_TIM_Base_MspInit+0x74>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80056ae:	e01a      	b.n	80056e6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a10      	ldr	r2, [pc, #64]	; (80056f8 <HAL_TIM_Base_MspInit+0x78>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d115      	bne.n	80056e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_TIM_Base_MspInit+0x74>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <HAL_TIM_Base_MspInit+0x74>)
 80056c4:	f043 0308 	orr.w	r3, r3, #8
 80056c8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_TIM_Base_MspInit+0x74>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80056d6:	2200      	movs	r2, #0
 80056d8:	2100      	movs	r1, #0
 80056da:	2032      	movs	r0, #50	; 0x32
 80056dc:	f000 fedf 	bl	800649e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80056e0:	2032      	movs	r0, #50	; 0x32
 80056e2:	f000 fef8 	bl	80064d6 <HAL_NVIC_EnableIRQ>
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40000c00 	.word	0x40000c00

080056fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d11f      	bne.n	800575e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6313      	str	r3, [r2, #48]	; 0x30
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800573a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005740:	2302      	movs	r3, #2
 8005742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005748:	2300      	movs	r3, #0
 800574a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800574c:	2301      	movs	r3, #1
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4619      	mov	r1, r3
 8005756:	4825      	ldr	r0, [pc, #148]	; (80057ec <HAL_TIM_MspPostInit+0xf0>)
 8005758:	f000 ffac 	bl	80066b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800575c:	e040      	b.n	80057e0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a23      	ldr	r2, [pc, #140]	; (80057f0 <HAL_TIM_MspPostInit+0xf4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d13b      	bne.n	80057e0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	6313      	str	r3, [r2, #48]	; 0x30
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005784:	2300      	movs	r3, #0
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 800578e:	f043 0304 	orr.w	r3, r3, #4
 8005792:	6313      	str	r3, [r2, #48]	; 0x30
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <HAL_TIM_MspPostInit+0xec>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057a0:	2301      	movs	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a4:	2302      	movs	r3, #2
 80057a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ac:	2300      	movs	r3, #0
 80057ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057b0:	2302      	movs	r3, #2
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b4:	f107 0314 	add.w	r3, r7, #20
 80057b8:	4619      	mov	r1, r3
 80057ba:	480e      	ldr	r0, [pc, #56]	; (80057f4 <HAL_TIM_MspPostInit+0xf8>)
 80057bc:	f000 ff7a 	bl	80066b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057c0:	23c0      	movs	r3, #192	; 0xc0
 80057c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	2302      	movs	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057cc:	2300      	movs	r3, #0
 80057ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057d0:	2302      	movs	r3, #2
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4619      	mov	r1, r3
 80057da:	4807      	ldr	r0, [pc, #28]	; (80057f8 <HAL_TIM_MspPostInit+0xfc>)
 80057dc:	f000 ff6a 	bl	80066b4 <HAL_GPIO_Init>
}
 80057e0:	bf00      	nop
 80057e2:	3728      	adds	r7, #40	; 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40020400 	.word	0x40020400
 80057f8:	40020800 	.word	0x40020800

080057fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800580e:	e7fe      	b.n	800580e <HardFault_Handler+0x4>

08005810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005814:	e7fe      	b.n	8005814 <MemManage_Handler+0x4>

08005816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005816:	b480      	push	{r7}
 8005818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800581a:	e7fe      	b.n	800581a <BusFault_Handler+0x4>

0800581c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005820:	e7fe      	b.n	8005820 <UsageFault_Handler+0x4>

08005822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005822:	b480      	push	{r7}
 8005824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005834:	bf00      	nop
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005842:	bf00      	nop
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8005850:	f7fc fae8 	bl	8001e24 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005854:	f000 f94c 	bl	8005af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}

0800585c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <TIM2_IRQHandler+0x10>)
 8005862:	f002 fa1f 	bl	8007ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000b68 	.word	0x20000b68

08005870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005874:	4802      	ldr	r0, [pc, #8]	; (8005880 <TIM3_IRQHandler+0x10>)
 8005876:	f002 fa15 	bl	8007ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	2000054c 	.word	0x2000054c

08005884 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005888:	4802      	ldr	r0, [pc, #8]	; (8005894 <TIM5_IRQHandler+0x10>)
 800588a:	f002 fa0b 	bl	8007ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000050c 	.word	0x2000050c

08005898 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e00a      	b.n	80058c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80058aa:	f3af 8000 	nop.w
 80058ae:	4601      	mov	r1, r0
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	60ba      	str	r2, [r7, #8]
 80058b6:	b2ca      	uxtb	r2, r1
 80058b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	3301      	adds	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	dbf0      	blt.n	80058aa <_read+0x12>
	}

return len;
 80058c8:	687b      	ldr	r3, [r7, #4]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e009      	b.n	80058f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	60ba      	str	r2, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	3301      	adds	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	dbf1      	blt.n	80058e4 <_write+0x12>
	}
	return len;
 8005900:	687b      	ldr	r3, [r7, #4]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <_close>:

int _close(int file)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
	return -1;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005932:	605a      	str	r2, [r3, #4]
	return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <_isatty>:

int _isatty(int file)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
	return 1;
 800594a:	2301      	movs	r3, #1
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
	return 0;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800597c:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <_sbrk+0x50>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <_sbrk+0x16>
		heap_end = &end;
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <_sbrk+0x50>)
 8005986:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <_sbrk+0x54>)
 8005988:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <_sbrk+0x50>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <_sbrk+0x50>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	466a      	mov	r2, sp
 800599a:	4293      	cmp	r3, r2
 800599c:	d907      	bls.n	80059ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800599e:	f002 ffd3 	bl	8008948 <__errno>
 80059a2:	4602      	mov	r2, r0
 80059a4:	230c      	movs	r3, #12
 80059a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	e006      	b.n	80059bc <_sbrk+0x48>
	}

	heap_end += incr;
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <_sbrk+0x50>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	4a03      	ldr	r2, [pc, #12]	; (80059c4 <_sbrk+0x50>)
 80059b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80059ba:	68fb      	ldr	r3, [r7, #12]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200004bc 	.word	0x200004bc
 80059c8:	20000bb8 	.word	0x20000bb8

080059cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059d0:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <SystemInit+0x28>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	4a07      	ldr	r2, [pc, #28]	; (80059f4 <SystemInit+0x28>)
 80059d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <SystemInit+0x28>)
 80059e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059e6:	609a      	str	r2, [r3, #8]
#endif
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000ed00 	.word	0xe000ed00

080059f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80059f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80059fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80059fe:	e003      	b.n	8005a08 <LoopCopyDataInit>

08005a00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a06:	3104      	adds	r1, #4

08005a08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a10:	d3f6      	bcc.n	8005a00 <CopyDataInit>
  ldr  r2, =_sbss
 8005a12:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a14:	e002      	b.n	8005a1c <LoopFillZerobss>

08005a16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a18:	f842 3b04 	str.w	r3, [r2], #4

08005a1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a20:	d3f9      	bcc.n	8005a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a22:	f7ff ffd3 	bl	80059cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a26:	f002 ff95 	bl	8008954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a2a:	f7ff f851 	bl	8004ad0 <main>
  bx  lr    
 8005a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005a34:	08009ef4 	.word	0x08009ef4
  ldr  r0, =_sdata
 8005a38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a3c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8005a40:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8005a44:	20000bb4 	.word	0x20000bb4

08005a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a48:	e7fe      	b.n	8005a48 <ADC_IRQHandler>
	...

08005a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <HAL_Init+0x40>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <HAL_Init+0x40>)
 8005a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_Init+0x40>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <HAL_Init+0x40>)
 8005a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a68:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_Init+0x40>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <HAL_Init+0x40>)
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a74:	2003      	movs	r0, #3
 8005a76:	f000 fd07 	bl	8006488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f000 f808 	bl	8005a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a80:	f7ff fca6 	bl	80053d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023c00 	.word	0x40023c00

08005a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a98:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <HAL_InitTick+0x54>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_InitTick+0x58>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fd1f 	bl	80064f2 <HAL_SYSTICK_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e00e      	b.n	8005adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d80a      	bhi.n	8005ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	f000 fce7 	bl	800649e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ad0:	4a06      	ldr	r2, [pc, #24]	; (8005aec <HAL_InitTick+0x5c>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000000c 	.word	0x2000000c
 8005ae8:	20000014 	.word	0x20000014
 8005aec:	20000010 	.word	0x20000010

08005af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <HAL_IncTick+0x20>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_IncTick+0x24>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4413      	add	r3, r2
 8005b00:	4a04      	ldr	r2, [pc, #16]	; (8005b14 <HAL_IncTick+0x24>)
 8005b02:	6013      	str	r3, [r2, #0]
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000014 	.word	0x20000014
 8005b14:	20000bac 	.word	0x20000bac

08005b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <HAL_GetTick+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000bac 	.word	0x20000bac

08005b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b38:	f7ff ffee 	bl	8005b18 <HAL_GetTick>
 8005b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d005      	beq.n	8005b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_Delay+0x40>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b56:	bf00      	nop
 8005b58:	f7ff ffde 	bl	8005b18 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d8f7      	bhi.n	8005b58 <HAL_Delay+0x28>
  {
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000014 	.word	0x20000014

08005b74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e033      	b.n	8005bf2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fc44 	bl	8005420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d118      	bne.n	8005be4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005bba:	f023 0302 	bic.w	r3, r3, #2
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa92 	bl	80060f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
 8005be2:	e001      	b.n	8005be8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_ADC_Start+0x1a>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0a5      	b.n	8005d62 <HAL_ADC_Start+0x166>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d018      	beq.n	8005c5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c3c:	4b4c      	ldr	r3, [pc, #304]	; (8005d70 <HAL_ADC_Start+0x174>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a4c      	ldr	r2, [pc, #304]	; (8005d74 <HAL_ADC_Start+0x178>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0c9a      	lsrs	r2, r3, #18
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005c50:	e002      	b.n	8005c58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f9      	bne.n	8005c52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d179      	bne.n	8005d60 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d106      	bne.n	8005cba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	f023 0206 	bic.w	r2, r3, #6
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44
 8005cb8:	e002      	b.n	8005cc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <HAL_ADC_Start+0x17c>)
 8005cca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d12a      	bne.n	8005d38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a25      	ldr	r2, [pc, #148]	; (8005d7c <HAL_ADC_Start+0x180>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d015      	beq.n	8005d18 <HAL_ADC_Start+0x11c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <HAL_ADC_Start+0x184>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d105      	bne.n	8005d02 <HAL_ADC_Start+0x106>
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_ADC_Start+0x17c>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <HAL_ADC_Start+0x188>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d129      	bne.n	8005d60 <HAL_ADC_Start+0x164>
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <HAL_ADC_Start+0x17c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	2b0f      	cmp	r3, #15
 8005d16:	d823      	bhi.n	8005d60 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d11c      	bne.n	8005d60 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d34:	609a      	str	r2, [r3, #8]
 8005d36:	e013      	b.n	8005d60 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a0f      	ldr	r2, [pc, #60]	; (8005d7c <HAL_ADC_Start+0x180>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10e      	bne.n	8005d60 <HAL_ADC_Start+0x164>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d107      	bne.n	8005d60 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d5e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	2000000c 	.word	0x2000000c
 8005d74:	431bde83 	.word	0x431bde83
 8005d78:	40012300 	.word	0x40012300
 8005d7c:	40012000 	.word	0x40012000
 8005d80:	40012100 	.word	0x40012100
 8005d84:	40012200 	.word	0x40012200

08005d88 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da4:	d113      	bne.n	8005dce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db4:	d10b      	bne.n	8005dce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f043 0220 	orr.w	r2, r3, #32
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e05c      	b.n	8005e88 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005dce:	f7ff fea3 	bl	8005b18 <HAL_GetTick>
 8005dd2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005dd4:	e01a      	b.n	8005e0c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d016      	beq.n	8005e0c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <HAL_ADC_PollForConversion+0x6c>
 8005de4:	f7ff fe98 	bl	8005b18 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d20b      	bcs.n	8005e0c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	f043 0204 	orr.w	r2, r3, #4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e03d      	b.n	8005e88 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d1dd      	bne.n	8005dd6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0212 	mvn.w	r2, #18
 8005e22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d123      	bne.n	8005e86 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11f      	bne.n	8005e86 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d111      	bne.n	8005e86 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x1c>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e105      	b.n	80060d4 <HAL_ADC_ConfigChannel+0x228>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b09      	cmp	r3, #9
 8005ed6:	d925      	bls.n	8005f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68d9      	ldr	r1, [r3, #12]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	3b1e      	subs	r3, #30
 8005eee:	2207      	movs	r2, #7
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	43da      	mvns	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	400a      	ands	r2, r1
 8005efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68d9      	ldr	r1, [r3, #12]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	4618      	mov	r0, r3
 8005f10:	4603      	mov	r3, r0
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4403      	add	r3, r0
 8005f16:	3b1e      	subs	r3, #30
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e022      	b.n	8005f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6919      	ldr	r1, [r3, #16]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	4613      	mov	r3, r2
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	2207      	movs	r2, #7
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	400a      	ands	r2, r1
 8005f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6919      	ldr	r1, [r3, #16]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	4403      	add	r3, r0
 8005f60:	409a      	lsls	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d824      	bhi.n	8005fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	3b05      	subs	r3, #5
 8005f84:	221f      	movs	r2, #31
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	400a      	ands	r2, r1
 8005f92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	3b05      	subs	r3, #5
 8005fae:	fa00 f203 	lsl.w	r2, r0, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8005fba:	e04c      	b.n	8006056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b0c      	cmp	r3, #12
 8005fc2:	d824      	bhi.n	800600e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3b23      	subs	r3, #35	; 0x23
 8005fd6:	221f      	movs	r2, #31
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	43da      	mvns	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3b23      	subs	r3, #35	; 0x23
 8006000:	fa00 f203 	lsl.w	r2, r0, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
 800600c:	e023      	b.n	8006056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	3b41      	subs	r3, #65	; 0x41
 8006020:	221f      	movs	r2, #31
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43da      	mvns	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	400a      	ands	r2, r1
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	4618      	mov	r0, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	3b41      	subs	r3, #65	; 0x41
 800604a:	fa00 f203 	lsl.w	r2, r0, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <HAL_ADC_ConfigChannel+0x234>)
 8006058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <HAL_ADC_ConfigChannel+0x238>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d109      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x1cc>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b12      	cmp	r3, #18
 800606a:	d105      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <HAL_ADC_ConfigChannel+0x238>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d123      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x21e>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b10      	cmp	r3, #16
 8006088:	d003      	beq.n	8006092 <HAL_ADC_ConfigChannel+0x1e6>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b11      	cmp	r3, #17
 8006090:	d11b      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d111      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060a6:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <HAL_ADC_ConfigChannel+0x23c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <HAL_ADC_ConfigChannel+0x240>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	0c9a      	lsrs	r2, r3, #18
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80060bc:	e002      	b.n	80060c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f9      	bne.n	80060be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40012300 	.word	0x40012300
 80060e4:	40012000 	.word	0x40012000
 80060e8:	2000000c 	.word	0x2000000c
 80060ec:	431bde83 	.word	0x431bde83

080060f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060f8:	4b79      	ldr	r3, [pc, #484]	; (80062e0 <ADC_Init+0x1f0>)
 80060fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6859      	ldr	r1, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	021a      	lsls	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6859      	ldr	r1, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800616a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	4a58      	ldr	r2, [pc, #352]	; (80062e4 <ADC_Init+0x1f4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80061b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6899      	ldr	r1, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	e00f      	b.n	80061ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80061ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0202 	bic.w	r2, r2, #2
 80061fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6899      	ldr	r1, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	7e1b      	ldrb	r3, [r3, #24]
 8006208:	005a      	lsls	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01b      	beq.n	8006254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800623a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6859      	ldr	r1, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	3b01      	subs	r3, #1
 8006248:	035a      	lsls	r2, r3, #13
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	e007      	b.n	8006264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	3b01      	subs	r3, #1
 8006280:	051a      	lsls	r2, r3, #20
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6899      	ldr	r1, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062a6:	025a      	lsls	r2, r3, #9
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6899      	ldr	r1, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	029a      	lsls	r2, r3, #10
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40012300 	.word	0x40012300
 80062e4:	0f000001 	.word	0x0f000001

080062e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <__NVIC_SetPriorityGrouping+0x44>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006304:	4013      	ands	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800631a:	4a04      	ldr	r2, [pc, #16]	; (800632c <__NVIC_SetPriorityGrouping+0x44>)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	60d3      	str	r3, [r2, #12]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	e000ed00 	.word	0xe000ed00

08006330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006334:	4b04      	ldr	r3, [pc, #16]	; (8006348 <__NVIC_GetPriorityGrouping+0x18>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	f003 0307 	and.w	r3, r3, #7
}
 800633e:	4618      	mov	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	e000ed00 	.word	0xe000ed00

0800634c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635a:	2b00      	cmp	r3, #0
 800635c:	db0b      	blt.n	8006376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	f003 021f 	and.w	r2, r3, #31
 8006364:	4907      	ldr	r1, [pc, #28]	; (8006384 <__NVIC_EnableIRQ+0x38>)
 8006366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	2001      	movs	r0, #1
 800636e:	fa00 f202 	lsl.w	r2, r0, r2
 8006372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	e000e100 	.word	0xe000e100

08006388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006398:	2b00      	cmp	r3, #0
 800639a:	db0a      	blt.n	80063b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	490c      	ldr	r1, [pc, #48]	; (80063d4 <__NVIC_SetPriority+0x4c>)
 80063a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a6:	0112      	lsls	r2, r2, #4
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	440b      	add	r3, r1
 80063ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b0:	e00a      	b.n	80063c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	4908      	ldr	r1, [pc, #32]	; (80063d8 <__NVIC_SetPriority+0x50>)
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	3b04      	subs	r3, #4
 80063c0:	0112      	lsls	r2, r2, #4
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	440b      	add	r3, r1
 80063c6:	761a      	strb	r2, [r3, #24]
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	e000e100 	.word	0xe000e100
 80063d8:	e000ed00 	.word	0xe000ed00

080063dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	; 0x24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f1c3 0307 	rsb	r3, r3, #7
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	bf28      	it	cs
 80063fa:	2304      	movcs	r3, #4
 80063fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3304      	adds	r3, #4
 8006402:	2b06      	cmp	r3, #6
 8006404:	d902      	bls.n	800640c <NVIC_EncodePriority+0x30>
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3b03      	subs	r3, #3
 800640a:	e000      	b.n	800640e <NVIC_EncodePriority+0x32>
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43da      	mvns	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	401a      	ands	r2, r3
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006424:	f04f 31ff 	mov.w	r1, #4294967295
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	fa01 f303 	lsl.w	r3, r1, r3
 800642e:	43d9      	mvns	r1, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006434:	4313      	orrs	r3, r2
         );
}
 8006436:	4618      	mov	r0, r3
 8006438:	3724      	adds	r7, #36	; 0x24
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3b01      	subs	r3, #1
 8006450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006454:	d301      	bcc.n	800645a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006456:	2301      	movs	r3, #1
 8006458:	e00f      	b.n	800647a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800645a:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <SysTick_Config+0x40>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3b01      	subs	r3, #1
 8006460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006462:	210f      	movs	r1, #15
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	f7ff ff8e 	bl	8006388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <SysTick_Config+0x40>)
 800646e:	2200      	movs	r2, #0
 8006470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006472:	4b04      	ldr	r3, [pc, #16]	; (8006484 <SysTick_Config+0x40>)
 8006474:	2207      	movs	r2, #7
 8006476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	e000e010 	.word	0xe000e010

08006488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ff29 	bl	80062e8 <__NVIC_SetPriorityGrouping>
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800649e:	b580      	push	{r7, lr}
 80064a0:	b086      	sub	sp, #24
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	4603      	mov	r3, r0
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064b0:	f7ff ff3e 	bl	8006330 <__NVIC_GetPriorityGrouping>
 80064b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	6978      	ldr	r0, [r7, #20]
 80064bc:	f7ff ff8e 	bl	80063dc <NVIC_EncodePriority>
 80064c0:	4602      	mov	r2, r0
 80064c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ff5d 	bl	8006388 <__NVIC_SetPriority>
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	4603      	mov	r3, r0
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ff31 	bl	800634c <__NVIC_EnableIRQ>
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff ffa2 	bl	8006444 <SysTick_Config>
 8006500:	4603      	mov	r3, r0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e014      	b.n	8006546 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fe ffd7 	bl	80054e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	2300      	movs	r3, #0
 800655e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	795b      	ldrb	r3, [r3, #5]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_DAC_Start+0x1e>
 8006568:	2302      	movs	r3, #2
 800656a:	e050      	b.n	800660e <HAL_DAC_Start+0xc0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6819      	ldr	r1, [r3, #0]
 800657e:	2201      	movs	r2, #1
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	409a      	lsls	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11a      	bne.n	80065c8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a8:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d127      	bne.n	8006600 <HAL_DAC_Start+0xb2>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b38      	cmp	r3, #56	; 0x38
 80065b4:	d124      	bne.n	8006600 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	e01b      	b.n	8006600 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80065de:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065e6:	d10b      	bne.n	8006600 <HAL_DAC_Start+0xb2>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80065ee:	d107      	bne.n	8006600 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0202 	orr.w	r2, r2, #2
 80065fe:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800661a:	b480      	push	{r7}
 800661c:	b087      	sub	sp, #28
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	795b      	ldrb	r3, [r3, #5]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_DAC_ConfigChannel+0x20>
 8006636:	2302      	movs	r3, #2
 8006638:	e036      	b.n	80066a8 <HAL_DAC_ConfigChannel+0x8e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2202      	movs	r2, #2
 8006644:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800664e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4013      	ands	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	22c0      	movs	r2, #192	; 0xc0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	43da      	mvns	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	400a      	ands	r2, r1
 8006698:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	; 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e16b      	b.n	80069a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066d0:	2201      	movs	r2, #1
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4013      	ands	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	f040 815a 	bne.w	80069a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d00b      	beq.n	800670e <HAL_GPIO_Init+0x5a>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d007      	beq.n	800670e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006702:	2b11      	cmp	r3, #17
 8006704:	d003      	beq.n	800670e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b12      	cmp	r3, #18
 800670c:	d130      	bne.n	8006770 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	2203      	movs	r2, #3
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	43db      	mvns	r3, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	4013      	ands	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	4313      	orrs	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006744:	2201      	movs	r2, #1
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	43db      	mvns	r3, r3
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	4013      	ands	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 0201 	and.w	r2, r3, #1
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	2203      	movs	r2, #3
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4313      	orrs	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_Init+0xfc>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b12      	cmp	r3, #18
 80067ae:	d123      	bne.n	80067f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	08da      	lsrs	r2, r3, #3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3208      	adds	r2, #8
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	220f      	movs	r2, #15
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	4013      	ands	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	08da      	lsrs	r2, r3, #3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3208      	adds	r2, #8
 80067f2:	69b9      	ldr	r1, [r7, #24]
 80067f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	2203      	movs	r2, #3
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4013      	ands	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 0203 	and.w	r2, r3, #3
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80b4 	beq.w	80069a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	4b5f      	ldr	r3, [pc, #380]	; (80069bc <HAL_GPIO_Init+0x308>)
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	4a5e      	ldr	r2, [pc, #376]	; (80069bc <HAL_GPIO_Init+0x308>)
 8006844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006848:	6453      	str	r3, [r2, #68]	; 0x44
 800684a:	4b5c      	ldr	r3, [pc, #368]	; (80069bc <HAL_GPIO_Init+0x308>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006856:	4a5a      	ldr	r2, [pc, #360]	; (80069c0 <HAL_GPIO_Init+0x30c>)
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	3302      	adds	r3, #2
 800685e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	220f      	movs	r2, #15
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4013      	ands	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a51      	ldr	r2, [pc, #324]	; (80069c4 <HAL_GPIO_Init+0x310>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d02b      	beq.n	80068da <HAL_GPIO_Init+0x226>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a50      	ldr	r2, [pc, #320]	; (80069c8 <HAL_GPIO_Init+0x314>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d025      	beq.n	80068d6 <HAL_GPIO_Init+0x222>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a4f      	ldr	r2, [pc, #316]	; (80069cc <HAL_GPIO_Init+0x318>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01f      	beq.n	80068d2 <HAL_GPIO_Init+0x21e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a4e      	ldr	r2, [pc, #312]	; (80069d0 <HAL_GPIO_Init+0x31c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d019      	beq.n	80068ce <HAL_GPIO_Init+0x21a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a4d      	ldr	r2, [pc, #308]	; (80069d4 <HAL_GPIO_Init+0x320>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <HAL_GPIO_Init+0x216>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a4c      	ldr	r2, [pc, #304]	; (80069d8 <HAL_GPIO_Init+0x324>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00d      	beq.n	80068c6 <HAL_GPIO_Init+0x212>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a4b      	ldr	r2, [pc, #300]	; (80069dc <HAL_GPIO_Init+0x328>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d007      	beq.n	80068c2 <HAL_GPIO_Init+0x20e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a4a      	ldr	r2, [pc, #296]	; (80069e0 <HAL_GPIO_Init+0x32c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <HAL_GPIO_Init+0x20a>
 80068ba:	2307      	movs	r3, #7
 80068bc:	e00e      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068be:	2308      	movs	r3, #8
 80068c0:	e00c      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068c2:	2306      	movs	r3, #6
 80068c4:	e00a      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068c6:	2305      	movs	r3, #5
 80068c8:	e008      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068ca:	2304      	movs	r3, #4
 80068cc:	e006      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068ce:	2303      	movs	r3, #3
 80068d0:	e004      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e002      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <HAL_GPIO_Init+0x228>
 80068da:	2300      	movs	r3, #0
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	f002 0203 	and.w	r2, r2, #3
 80068e2:	0092      	lsls	r2, r2, #2
 80068e4:	4093      	lsls	r3, r2
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068ec:	4934      	ldr	r1, [pc, #208]	; (80069c0 <HAL_GPIO_Init+0x30c>)
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	3302      	adds	r3, #2
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068fa:	4b3a      	ldr	r3, [pc, #232]	; (80069e4 <HAL_GPIO_Init+0x330>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	43db      	mvns	r3, r3
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	4013      	ands	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800691e:	4a31      	ldr	r2, [pc, #196]	; (80069e4 <HAL_GPIO_Init+0x330>)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006924:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <HAL_GPIO_Init+0x330>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	43db      	mvns	r3, r3
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	4013      	ands	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006948:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <HAL_GPIO_Init+0x330>)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800694e:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <HAL_GPIO_Init+0x330>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006972:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <HAL_GPIO_Init+0x330>)
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <HAL_GPIO_Init+0x330>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	43db      	mvns	r3, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4013      	ands	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800699c:	4a11      	ldr	r2, [pc, #68]	; (80069e4 <HAL_GPIO_Init+0x330>)
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3301      	adds	r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	f67f ae90 	bls.w	80066d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069b0:	bf00      	nop
 80069b2:	3724      	adds	r7, #36	; 0x24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40023800 	.word	0x40023800
 80069c0:	40013800 	.word	0x40013800
 80069c4:	40020000 	.word	0x40020000
 80069c8:	40020400 	.word	0x40020400
 80069cc:	40020800 	.word	0x40020800
 80069d0:	40020c00 	.word	0x40020c00
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40021400 	.word	0x40021400
 80069dc:	40021800 	.word	0x40021800
 80069e0:	40021c00 	.word	0x40021c00
 80069e4:	40013c00 	.word	0x40013c00

080069e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	887b      	ldrh	r3, [r7, #2]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]
 8006a04:	e001      	b.n	8006a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
 8006a24:	4613      	mov	r3, r2
 8006a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a28:	787b      	ldrb	r3, [r7, #1]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a2e:	887a      	ldrh	r2, [r7, #2]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a34:	e003      	b.n	8006a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	041a      	lsls	r2, r3, #16
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	619a      	str	r2, [r3, #24]
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e25b      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d075      	beq.n	8006b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a6a:	4ba3      	ldr	r3, [pc, #652]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d00c      	beq.n	8006a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a76:	4ba0      	ldr	r3, [pc, #640]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d112      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a82:	4b9d      	ldr	r3, [pc, #628]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a8e:	d10b      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a90:	4b99      	ldr	r3, [pc, #612]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d05b      	beq.n	8006b54 <HAL_RCC_OscConfig+0x108>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d157      	bne.n	8006b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e236      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x74>
 8006ab2:	4b91      	ldr	r3, [pc, #580]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a90      	ldr	r2, [pc, #576]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	e01d      	b.n	8006afc <HAL_RCC_OscConfig+0xb0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x98>
 8006aca:	4b8b      	ldr	r3, [pc, #556]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a8a      	ldr	r2, [pc, #552]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	4b88      	ldr	r3, [pc, #544]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a87      	ldr	r2, [pc, #540]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e00b      	b.n	8006afc <HAL_RCC_OscConfig+0xb0>
 8006ae4:	4b84      	ldr	r3, [pc, #528]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a83      	ldr	r2, [pc, #524]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	4b81      	ldr	r3, [pc, #516]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a80      	ldr	r2, [pc, #512]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d013      	beq.n	8006b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7ff f808 	bl	8005b18 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7ff f804 	bl	8005b18 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	; 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e1fb      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1e:	4b76      	ldr	r3, [pc, #472]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0xc0>
 8006b2a:	e014      	b.n	8006b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2c:	f7fe fff4 	bl	8005b18 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b34:	f7fe fff0 	bl	8005b18 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b64      	cmp	r3, #100	; 0x64
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e1e7      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b46:	4b6c      	ldr	r3, [pc, #432]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0xe8>
 8006b52:	e000      	b.n	8006b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d063      	beq.n	8006c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b62:	4b65      	ldr	r3, [pc, #404]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 030c 	and.w	r3, r3, #12
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b6e:	4b62      	ldr	r3, [pc, #392]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d11c      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7a:	4b5f      	ldr	r3, [pc, #380]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d116      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b86:	4b5c      	ldr	r3, [pc, #368]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_RCC_OscConfig+0x152>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d001      	beq.n	8006b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e1bb      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b9e:	4b56      	ldr	r3, [pc, #344]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4952      	ldr	r1, [pc, #328]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb2:	e03a      	b.n	8006c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d020      	beq.n	8006bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bbc:	4b4f      	ldr	r3, [pc, #316]	; (8006cfc <HAL_RCC_OscConfig+0x2b0>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc2:	f7fe ffa9 	bl	8005b18 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bca:	f7fe ffa5 	bl	8005b18 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e19c      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bdc:	4b46      	ldr	r3, [pc, #280]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be8:	4b43      	ldr	r3, [pc, #268]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	4940      	ldr	r1, [pc, #256]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	600b      	str	r3, [r1, #0]
 8006bfc:	e015      	b.n	8006c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bfe:	4b3f      	ldr	r3, [pc, #252]	; (8006cfc <HAL_RCC_OscConfig+0x2b0>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fe ff88 	bl	8005b18 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c0c:	f7fe ff84 	bl	8005b18 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e17b      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1e:	4b36      	ldr	r3, [pc, #216]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f0      	bne.n	8006c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d030      	beq.n	8006c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d016      	beq.n	8006c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c3e:	4b30      	ldr	r3, [pc, #192]	; (8006d00 <HAL_RCC_OscConfig+0x2b4>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c44:	f7fe ff68 	bl	8005b18 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c4c:	f7fe ff64 	bl	8005b18 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e15b      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c5e:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0x200>
 8006c6a:	e015      	b.n	8006c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c6c:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <HAL_RCC_OscConfig+0x2b4>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c72:	f7fe ff51 	bl	8005b18 <HAL_GetTick>
 8006c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7a:	f7fe ff4d 	bl	8005b18 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e144      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c8c:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1f0      	bne.n	8006c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80a0 	beq.w	8006de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10f      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	4a0e      	ldr	r2, [pc, #56]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <HAL_RCC_OscConfig+0x2ac>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cce:	60bb      	str	r3, [r7, #8]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <HAL_RCC_OscConfig+0x2b8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d121      	bne.n	8006d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <HAL_RCC_OscConfig+0x2b8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <HAL_RCC_OscConfig+0x2b8>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cee:	f7fe ff13 	bl	8005b18 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf4:	e011      	b.n	8006d1a <HAL_RCC_OscConfig+0x2ce>
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	42470000 	.word	0x42470000
 8006d00:	42470e80 	.word	0x42470e80
 8006d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d08:	f7fe ff06 	bl	8005b18 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0fd      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1a:	4b81      	ldr	r3, [pc, #516]	; (8006f20 <HAL_RCC_OscConfig+0x4d4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d106      	bne.n	8006d3c <HAL_RCC_OscConfig+0x2f0>
 8006d2e:	4b7d      	ldr	r3, [pc, #500]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	4a7c      	ldr	r2, [pc, #496]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3a:	e01c      	b.n	8006d76 <HAL_RCC_OscConfig+0x32a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	d10c      	bne.n	8006d5e <HAL_RCC_OscConfig+0x312>
 8006d44:	4b77      	ldr	r3, [pc, #476]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	4a76      	ldr	r2, [pc, #472]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d4a:	f043 0304 	orr.w	r3, r3, #4
 8006d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d50:	4b74      	ldr	r3, [pc, #464]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d54:	4a73      	ldr	r2, [pc, #460]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5c:	e00b      	b.n	8006d76 <HAL_RCC_OscConfig+0x32a>
 8006d5e:	4b71      	ldr	r3, [pc, #452]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	4a70      	ldr	r2, [pc, #448]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6a:	4b6e      	ldr	r3, [pc, #440]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	4a6d      	ldr	r2, [pc, #436]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d70:	f023 0304 	bic.w	r3, r3, #4
 8006d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d015      	beq.n	8006daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7e:	f7fe fecb 	bl	8005b18 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d84:	e00a      	b.n	8006d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d86:	f7fe fec7 	bl	8005b18 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0bc      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9c:	4b61      	ldr	r3, [pc, #388]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0ee      	beq.n	8006d86 <HAL_RCC_OscConfig+0x33a>
 8006da8:	e014      	b.n	8006dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006daa:	f7fe feb5 	bl	8005b18 <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db0:	e00a      	b.n	8006dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db2:	f7fe feb1 	bl	8005b18 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e0a6      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc8:	4b56      	ldr	r3, [pc, #344]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1ee      	bne.n	8006db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d105      	bne.n	8006de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dda:	4b52      	ldr	r3, [pc, #328]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	4a51      	ldr	r2, [pc, #324]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8092 	beq.w	8006f14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df0:	4b4c      	ldr	r3, [pc, #304]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 030c 	and.w	r3, r3, #12
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d05c      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d141      	bne.n	8006e88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e04:	4b48      	ldr	r3, [pc, #288]	; (8006f28 <HAL_RCC_OscConfig+0x4dc>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0a:	f7fe fe85 	bl	8005b18 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e12:	f7fe fe81 	bl	8005b18 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e078      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e24:	4b3f      	ldr	r3, [pc, #252]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f0      	bne.n	8006e12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	019b      	lsls	r3, r3, #6
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	061b      	lsls	r3, r3, #24
 8006e54:	4933      	ldr	r1, [pc, #204]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5a:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <HAL_RCC_OscConfig+0x4dc>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fe fe5a 	bl	8005b18 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fe fe56 	bl	8005b18 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e04d      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0f0      	beq.n	8006e68 <HAL_RCC_OscConfig+0x41c>
 8006e86:	e045      	b.n	8006f14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_RCC_OscConfig+0x4dc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8e:	f7fe fe43 	bl	8005b18 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e96:	f7fe fe3f 	bl	8005b18 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e036      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea8:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f0      	bne.n	8006e96 <HAL_RCC_OscConfig+0x44a>
 8006eb4:	e02e      	b.n	8006f14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e029      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ec2:	4b18      	ldr	r3, [pc, #96]	; (8006f24 <HAL_RCC_OscConfig+0x4d8>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d11c      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d115      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eea:	4013      	ands	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d10d      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d106      	bne.n	8006f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40007000 	.word	0x40007000
 8006f24:	40023800 	.word	0x40023800
 8006f28:	42470060 	.word	0x42470060

08006f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0cc      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f40:	4b68      	ldr	r3, [pc, #416]	; (80070e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d90c      	bls.n	8006f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4e:	4b65      	ldr	r3, [pc, #404]	; (80070e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f56:	4b63      	ldr	r3, [pc, #396]	; (80070e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d001      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0b8      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d020      	beq.n	8006fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f80:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4a58      	ldr	r2, [pc, #352]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f98:	4b53      	ldr	r3, [pc, #332]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a52      	ldr	r2, [pc, #328]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fa4:	4b50      	ldr	r3, [pc, #320]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	494d      	ldr	r1, [pc, #308]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d044      	beq.n	800704c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d107      	bne.n	8006fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fca:	4b47      	ldr	r3, [pc, #284]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d119      	bne.n	800700a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e07f      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d003      	beq.n	8006fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d107      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fea:	4b3f      	ldr	r3, [pc, #252]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e06f      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ffa:	4b3b      	ldr	r3, [pc, #236]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e067      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f023 0203 	bic.w	r2, r3, #3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	4934      	ldr	r1, [pc, #208]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007018:	4313      	orrs	r3, r2
 800701a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800701c:	f7fe fd7c 	bl	8005b18 <HAL_GetTick>
 8007020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007022:	e00a      	b.n	800703a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007024:	f7fe fd78 	bl	8005b18 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007032:	4293      	cmp	r3, r2
 8007034:	d901      	bls.n	800703a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e04f      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	4b2b      	ldr	r3, [pc, #172]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 020c 	and.w	r2, r3, #12
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	429a      	cmp	r2, r3
 800704a:	d1eb      	bne.n	8007024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <HAL_RCC_ClockConfig+0x1b8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d20c      	bcs.n	8007074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <HAL_RCC_ClockConfig+0x1b8>)
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007062:	4b20      	ldr	r3, [pc, #128]	; (80070e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d001      	beq.n	8007074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e032      	b.n	80070da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d008      	beq.n	8007092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007080:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	4916      	ldr	r1, [pc, #88]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	4313      	orrs	r3, r2
 8007090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800709e:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	490e      	ldr	r1, [pc, #56]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070b2:	f000 f821 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80070b6:	4601      	mov	r1, r0
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	091b      	lsrs	r3, r3, #4
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <HAL_RCC_ClockConfig+0x1c0>)
 80070c4:	5cd3      	ldrb	r3, [r2, r3]
 80070c6:	fa21 f303 	lsr.w	r3, r1, r3
 80070ca:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <HAL_RCC_ClockConfig+0x1c4>)
 80070cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <HAL_RCC_ClockConfig+0x1c8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fcdc 	bl	8005a90 <HAL_InitTick>

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40023c00 	.word	0x40023c00
 80070e8:	40023800 	.word	0x40023800
 80070ec:	08009d28 	.word	0x08009d28
 80070f0:	2000000c 	.word	0x2000000c
 80070f4:	20000010 	.word	0x20000010

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	607b      	str	r3, [r7, #4]
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	2300      	movs	r3, #0
 8007108:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800710e:	4b63      	ldr	r3, [pc, #396]	; (800729c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b04      	cmp	r3, #4
 8007118:	d007      	beq.n	800712a <HAL_RCC_GetSysClockFreq+0x32>
 800711a:	2b08      	cmp	r3, #8
 800711c:	d008      	beq.n	8007130 <HAL_RCC_GetSysClockFreq+0x38>
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 80b4 	bne.w	800728c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007124:	4b5e      	ldr	r3, [pc, #376]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007126:	60bb      	str	r3, [r7, #8]
       break;
 8007128:	e0b3      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800712a:	4b5e      	ldr	r3, [pc, #376]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800712c:	60bb      	str	r3, [r7, #8]
      break;
 800712e:	e0b0      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007130:	4b5a      	ldr	r3, [pc, #360]	; (800729c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007138:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800713a:	4b58      	ldr	r3, [pc, #352]	; (800729c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d04a      	beq.n	80071dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007146:	4b55      	ldr	r3, [pc, #340]	; (800729c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	f04f 0400 	mov.w	r4, #0
 8007150:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	ea03 0501 	and.w	r5, r3, r1
 800715c:	ea04 0602 	and.w	r6, r4, r2
 8007160:	4629      	mov	r1, r5
 8007162:	4632      	mov	r2, r6
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	f04f 0400 	mov.w	r4, #0
 800716c:	0154      	lsls	r4, r2, #5
 800716e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007172:	014b      	lsls	r3, r1, #5
 8007174:	4619      	mov	r1, r3
 8007176:	4622      	mov	r2, r4
 8007178:	1b49      	subs	r1, r1, r5
 800717a:	eb62 0206 	sbc.w	r2, r2, r6
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	f04f 0400 	mov.w	r4, #0
 8007186:	0194      	lsls	r4, r2, #6
 8007188:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800718c:	018b      	lsls	r3, r1, #6
 800718e:	1a5b      	subs	r3, r3, r1
 8007190:	eb64 0402 	sbc.w	r4, r4, r2
 8007194:	f04f 0100 	mov.w	r1, #0
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	00e2      	lsls	r2, r4, #3
 800719e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071a2:	00d9      	lsls	r1, r3, #3
 80071a4:	460b      	mov	r3, r1
 80071a6:	4614      	mov	r4, r2
 80071a8:	195b      	adds	r3, r3, r5
 80071aa:	eb44 0406 	adc.w	r4, r4, r6
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	f04f 0200 	mov.w	r2, #0
 80071b6:	0262      	lsls	r2, r4, #9
 80071b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80071bc:	0259      	lsls	r1, r3, #9
 80071be:	460b      	mov	r3, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	4621      	mov	r1, r4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f04f 0400 	mov.w	r4, #0
 80071cc:	461a      	mov	r2, r3
 80071ce:	4623      	mov	r3, r4
 80071d0:	f7f9 fccc 	bl	8000b6c <__aeabi_uldivmod>
 80071d4:	4603      	mov	r3, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	e049      	b.n	8007270 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071dc:	4b2f      	ldr	r3, [pc, #188]	; (800729c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	099b      	lsrs	r3, r3, #6
 80071e2:	f04f 0400 	mov.w	r4, #0
 80071e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	ea03 0501 	and.w	r5, r3, r1
 80071f2:	ea04 0602 	and.w	r6, r4, r2
 80071f6:	4629      	mov	r1, r5
 80071f8:	4632      	mov	r2, r6
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	f04f 0400 	mov.w	r4, #0
 8007202:	0154      	lsls	r4, r2, #5
 8007204:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007208:	014b      	lsls	r3, r1, #5
 800720a:	4619      	mov	r1, r3
 800720c:	4622      	mov	r2, r4
 800720e:	1b49      	subs	r1, r1, r5
 8007210:	eb62 0206 	sbc.w	r2, r2, r6
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	0194      	lsls	r4, r2, #6
 800721e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007222:	018b      	lsls	r3, r1, #6
 8007224:	1a5b      	subs	r3, r3, r1
 8007226:	eb64 0402 	sbc.w	r4, r4, r2
 800722a:	f04f 0100 	mov.w	r1, #0
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	00e2      	lsls	r2, r4, #3
 8007234:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007238:	00d9      	lsls	r1, r3, #3
 800723a:	460b      	mov	r3, r1
 800723c:	4614      	mov	r4, r2
 800723e:	195b      	adds	r3, r3, r5
 8007240:	eb44 0406 	adc.w	r4, r4, r6
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	02a2      	lsls	r2, r4, #10
 800724e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007252:	0299      	lsls	r1, r3, #10
 8007254:	460b      	mov	r3, r1
 8007256:	4614      	mov	r4, r2
 8007258:	4618      	mov	r0, r3
 800725a:	4621      	mov	r1, r4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f04f 0400 	mov.w	r4, #0
 8007262:	461a      	mov	r2, r3
 8007264:	4623      	mov	r3, r4
 8007266:	f7f9 fc81 	bl	8000b6c <__aeabi_uldivmod>
 800726a:	4603      	mov	r3, r0
 800726c:	460c      	mov	r4, r1
 800726e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	3301      	adds	r3, #1
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	fbb2 f3f3 	udiv	r3, r2, r3
 8007288:	60bb      	str	r3, [r7, #8]
      break;
 800728a:	e002      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800728e:	60bb      	str	r3, [r7, #8]
      break;
 8007290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007292:	68bb      	ldr	r3, [r7, #8]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729c:	40023800 	.word	0x40023800
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	007a1200 	.word	0x007a1200

080072a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072ac:	4b03      	ldr	r3, [pc, #12]	; (80072bc <HAL_RCC_GetHCLKFreq+0x14>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	2000000c 	.word	0x2000000c

080072c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072c4:	f7ff fff0 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 80072c8:	4601      	mov	r1, r0
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	0a9b      	lsrs	r3, r3, #10
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	4a03      	ldr	r2, [pc, #12]	; (80072e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d6:	5cd3      	ldrb	r3, [r2, r3]
 80072d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072dc:	4618      	mov	r0, r3
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40023800 	.word	0x40023800
 80072e4:	08009d38 	.word	0x08009d38

080072e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	220f      	movs	r2, #15
 80072f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072f8:	4b12      	ldr	r3, [pc, #72]	; (8007344 <HAL_RCC_GetClockConfig+0x5c>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0203 	and.w	r2, r3, #3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <HAL_RCC_GetClockConfig+0x5c>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <HAL_RCC_GetClockConfig+0x5c>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_RCC_GetClockConfig+0x5c>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	08db      	lsrs	r3, r3, #3
 8007322:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <HAL_RCC_GetClockConfig+0x60>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 020f 	and.w	r2, r3, #15
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	601a      	str	r2, [r3, #0]
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40023800 	.word	0x40023800
 8007348:	40023c00 	.word	0x40023c00

0800734c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e056      	b.n	800740c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7fe f8f5 	bl	8005568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007394:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	ea42 0103 	orr.w	r1, r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	0c1b      	lsrs	r3, r3, #16
 80073dc:	f003 0104 	and.w	r1, r3, #4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69da      	ldr	r2, [r3, #28]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	4613      	mov	r3, r2
 8007422:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_SPI_Transmit+0x22>
 8007432:	2302      	movs	r3, #2
 8007434:	e11e      	b.n	8007674 <HAL_SPI_Transmit+0x260>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800743e:	f7fe fb6b 	bl	8005b18 <HAL_GetTick>
 8007442:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d002      	beq.n	800745a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007454:	2302      	movs	r3, #2
 8007456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007458:	e103      	b.n	8007662 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_SPI_Transmit+0x52>
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800746a:	e0fa      	b.n	8007662 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2203      	movs	r2, #3
 8007470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b2:	d107      	bne.n	80074c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d007      	beq.n	80074e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ea:	d14b      	bne.n	8007584 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <HAL_SPI_Transmit+0xe6>
 80074f4:	8afb      	ldrh	r3, [r7, #22]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d13e      	bne.n	8007578 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800751e:	e02b      	b.n	8007578 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d112      	bne.n	8007554 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	881a      	ldrh	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	86da      	strh	r2, [r3, #54]	; 0x36
 8007552:	e011      	b.n	8007578 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007554:	f7fe fae0 	bl	8005b18 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d803      	bhi.n	800756c <HAL_SPI_Transmit+0x158>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	d102      	bne.n	8007572 <HAL_SPI_Transmit+0x15e>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007576:	e074      	b.n	8007662 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1ce      	bne.n	8007520 <HAL_SPI_Transmit+0x10c>
 8007582:	e04c      	b.n	800761e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_SPI_Transmit+0x17e>
 800758c:	8afb      	ldrh	r3, [r7, #22]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d140      	bne.n	8007614 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	330c      	adds	r3, #12
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075b8:	e02c      	b.n	8007614 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d113      	bne.n	80075f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	7812      	ldrb	r2, [r2, #0]
 80075d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ee:	e011      	b.n	8007614 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f0:	f7fe fa92 	bl	8005b18 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d803      	bhi.n	8007608 <HAL_SPI_Transmit+0x1f4>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d102      	bne.n	800760e <HAL_SPI_Transmit+0x1fa>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007612:	e026      	b.n	8007662 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1cd      	bne.n	80075ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fa44 	bl	8007ab0 <SPI_EndRxTxTransaction>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	77fb      	strb	r3, [r7, #31]
 800765e:	e000      	b.n	8007662 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007672:	7ffb      	ldrb	r3, [r7, #31]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	; 0x30
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800768a:	2301      	movs	r3, #1
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x26>
 800769e:	2302      	movs	r3, #2
 80076a0:	e18a      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x33c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076aa:	f7fe fa35 	bl	8005b18 <HAL_GetTick>
 80076ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d00f      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x70>
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d2:	d107      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x68>
 80076dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d003      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ea:	e15b      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x82>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x82>
 80076f8:	887b      	ldrh	r3, [r7, #2]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007704:	e14e      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b04      	cmp	r3, #4
 8007710:	d003      	beq.n	800771a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2205      	movs	r2, #5
 8007716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	887a      	ldrh	r2, [r7, #2]
 800772a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	887a      	ldrh	r2, [r7, #2]
 8007730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	887a      	ldrh	r2, [r7, #2]
 800773c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	887a      	ldrh	r2, [r7, #2]
 8007742:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d007      	beq.n	800776e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007776:	d178      	bne.n	800786a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_SPI_TransmitReceive+0x10a>
 8007780:	8b7b      	ldrh	r3, [r7, #26]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d166      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	881a      	ldrh	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	1c9a      	adds	r2, r3, #2
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077aa:	e053      	b.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d11b      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x176>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d016      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x176>
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d113      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	881a      	ldrh	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	1c9a      	adds	r2, r3, #2
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d119      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x1b8>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	b292      	uxth	r2, r2
 8007816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	1c9a      	adds	r2, r3, #2
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007830:	2301      	movs	r3, #1
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007834:	f7fe f970 	bl	8005b18 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007840:	429a      	cmp	r2, r3
 8007842:	d807      	bhi.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d003      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007852:	e0a7      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1a6      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x130>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1a1      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x130>
 8007868:	e07c      	b.n	8007964 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x1fc>
 8007872:	8b7b      	ldrh	r3, [r7, #26]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d16b      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789e:	e057      	b.n	8007950 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d11c      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x26c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x26c>
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d114      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	7812      	ldrb	r2, [r2, #0]
 80078ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d119      	bne.n	800792a <HAL_SPI_TransmitReceive+0x2ae>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d014      	beq.n	800792a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007926:	2301      	movs	r3, #1
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800792a:	f7fe f8f5 	bl	8005b18 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007936:	429a      	cmp	r2, r3
 8007938:	d803      	bhi.n	8007942 <HAL_SPI_TransmitReceive+0x2c6>
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d102      	bne.n	8007948 <HAL_SPI_TransmitReceive+0x2cc>
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800794e:	e029      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1a2      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x224>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d19d      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007966:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f8a1 	bl	8007ab0 <SPI_EndRxTxTransaction>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007980:	e010      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	e000      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3730      	adds	r7, #48	; 0x30
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079ce:	b2db      	uxtb	r3, r3
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ec:	e04c      	b.n	8007a88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d048      	beq.n	8007a88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079f6:	f7fe f88f 	bl	8005b18 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d902      	bls.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x30>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d13d      	bne.n	8007a88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a24:	d111      	bne.n	8007a4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2e:	d004      	beq.n	8007a3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a38:	d107      	bne.n	8007a4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a52:	d10f      	bne.n	8007a74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e00f      	b.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	4013      	ands	r3, r2
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	bf0c      	ite	eq
 8007a98:	2301      	moveq	r3, #1
 8007a9a:	2300      	movne	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d1a3      	bne.n	80079ee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007abc:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <SPI_EndRxTxTransaction+0x7c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1b      	ldr	r2, [pc, #108]	; (8007b30 <SPI_EndRxTxTransaction+0x80>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	0d5b      	lsrs	r3, r3, #21
 8007ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007acc:	fb02 f303 	mul.w	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ada:	d112      	bne.n	8007b02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7ff ff78 	bl	80079dc <SPI_WaitFlagStateUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af6:	f043 0220 	orr.w	r2, r3, #32
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e00f      	b.n	8007b22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	d0f2      	beq.n	8007b02 <SPI_EndRxTxTransaction+0x52>
 8007b1c:	e000      	b.n	8007b20 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b1e:	bf00      	nop
  }

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	2000000c 	.word	0x2000000c
 8007b30:	165e9f81 	.word	0x165e9f81

08007b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e01d      	b.n	8007b82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fd fd90 	bl	8005680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 fb44 	bl	8008200 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d007      	beq.n	8007bc4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e01d      	b.n	8007c20 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d106      	bne.n	8007bfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7fd fcfd 	bl	80055f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f000 faf5 	bl	8008200 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fdca 	bl	80087d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <HAL_TIM_PWM_Start+0x74>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_TIM_PWM_Start+0x2c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <HAL_TIM_PWM_Start+0x78>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <HAL_TIM_PWM_Start+0x30>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <HAL_TIM_PWM_Start+0x32>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d007      	beq.n	8007c90 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40010400 	.word	0x40010400

08007ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d122      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d11b      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0202 	mvn.w	r2, #2
 8007cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa6b 	bl	80081c2 <HAL_TIM_IC_CaptureCallback>
 8007cec:	e005      	b.n	8007cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa5d 	bl	80081ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa6e 	bl	80081d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d122      	bne.n	8007d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d11b      	bne.n	8007d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0204 	mvn.w	r2, #4
 8007d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa41 	bl	80081c2 <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa33 	bl	80081ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa44 	bl	80081d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0208 	mvn.w	r2, #8
 8007d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2204      	movs	r2, #4
 8007d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa17 	bl	80081c2 <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa09 	bl	80081ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa1a 	bl	80081d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b10      	cmp	r3, #16
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0210 	mvn.w	r2, #16
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9ed 	bl	80081c2 <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f9df 	bl	80081ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f9f0 	bl	80081d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d10e      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d107      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0201 	mvn.w	r2, #1
 8007e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fc fb94 	bl	8004550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b80      	cmp	r3, #128	; 0x80
 8007e34:	d10e      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d107      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fd6c 	bl	800892c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d10e      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d107      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9b5 	bl	80081ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d10e      	bne.n	8007eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d107      	bne.n	8007eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0220 	mvn.w	r2, #32
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fd36 	bl	8008918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e0b4      	b.n	8008038 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b0c      	cmp	r3, #12
 8007ee2:	f200 809f 	bhi.w	8008024 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08008025 	.word	0x08008025
 8007ef4:	08008025 	.word	0x08008025
 8007ef8:	08008025 	.word	0x08008025
 8007efc:	08007f61 	.word	0x08007f61
 8007f00:	08008025 	.word	0x08008025
 8007f04:	08008025 	.word	0x08008025
 8007f08:	08008025 	.word	0x08008025
 8007f0c:	08007fa3 	.word	0x08007fa3
 8007f10:	08008025 	.word	0x08008025
 8007f14:	08008025 	.word	0x08008025
 8007f18:	08008025 	.word	0x08008025
 8007f1c:	08007fe3 	.word	0x08007fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fa0a 	bl	8008340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0208 	orr.w	r2, r2, #8
 8007f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0204 	bic.w	r2, r2, #4
 8007f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6999      	ldr	r1, [r3, #24]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	619a      	str	r2, [r3, #24]
      break;
 8007f5e:	e062      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fa5a 	bl	8008420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699a      	ldr	r2, [r3, #24]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6999      	ldr	r1, [r3, #24]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	021a      	lsls	r2, r3, #8
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	619a      	str	r2, [r3, #24]
      break;
 8007fa0:	e041      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 faaf 	bl	800850c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0208 	orr.w	r2, r2, #8
 8007fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0204 	bic.w	r2, r2, #4
 8007fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69d9      	ldr	r1, [r3, #28]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	691a      	ldr	r2, [r3, #16]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	61da      	str	r2, [r3, #28]
      break;
 8007fe0:	e021      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fb03 	bl	80085f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800800c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69d9      	ldr	r1, [r3, #28]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	021a      	lsls	r2, r3, #8
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	61da      	str	r2, [r3, #28]
      break;
 8008022:	e000      	b.n	8008026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008024:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_TIM_ConfigClockSource+0x18>
 8008054:	2302      	movs	r3, #2
 8008056:	e0a6      	b.n	80081a6 <HAL_TIM_ConfigClockSource+0x166>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800807e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b40      	cmp	r3, #64	; 0x40
 800808e:	d067      	beq.n	8008160 <HAL_TIM_ConfigClockSource+0x120>
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d80b      	bhi.n	80080ac <HAL_TIM_ConfigClockSource+0x6c>
 8008094:	2b10      	cmp	r3, #16
 8008096:	d073      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x140>
 8008098:	2b10      	cmp	r3, #16
 800809a:	d802      	bhi.n	80080a2 <HAL_TIM_ConfigClockSource+0x62>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d06f      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80080a0:	e078      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d06c      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x140>
 80080a6:	2b30      	cmp	r3, #48	; 0x30
 80080a8:	d06a      	beq.n	8008180 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80080aa:	e073      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080ac:	2b70      	cmp	r3, #112	; 0x70
 80080ae:	d00d      	beq.n	80080cc <HAL_TIM_ConfigClockSource+0x8c>
 80080b0:	2b70      	cmp	r3, #112	; 0x70
 80080b2:	d804      	bhi.n	80080be <HAL_TIM_ConfigClockSource+0x7e>
 80080b4:	2b50      	cmp	r3, #80	; 0x50
 80080b6:	d033      	beq.n	8008120 <HAL_TIM_ConfigClockSource+0xe0>
 80080b8:	2b60      	cmp	r3, #96	; 0x60
 80080ba:	d041      	beq.n	8008140 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80080bc:	e06a      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c2:	d066      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x152>
 80080c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c8:	d017      	beq.n	80080fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80080ca:	e063      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	6899      	ldr	r1, [r3, #8]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f000 fb5a 	bl	8008794 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	609a      	str	r2, [r3, #8]
      break;
 80080f8:	e04c      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6899      	ldr	r1, [r3, #8]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f000 fb43 	bl	8008794 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800811c:	609a      	str	r2, [r3, #8]
      break;
 800811e:	e039      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	6859      	ldr	r1, [r3, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	461a      	mov	r2, r3
 800812e:	f000 fab7 	bl	80086a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2150      	movs	r1, #80	; 0x50
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fb10 	bl	800875e <TIM_ITRx_SetConfig>
      break;
 800813e:	e029      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6859      	ldr	r1, [r3, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	461a      	mov	r2, r3
 800814e:	f000 fad6 	bl	80086fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2160      	movs	r1, #96	; 0x60
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fb00 	bl	800875e <TIM_ITRx_SetConfig>
      break;
 800815e:	e019      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	6859      	ldr	r1, [r3, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	461a      	mov	r2, r3
 800816e:	f000 fa97 	bl	80086a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2140      	movs	r1, #64	; 0x40
 8008178:	4618      	mov	r0, r3
 800817a:	f000 faf0 	bl	800875e <TIM_ITRx_SetConfig>
      break;
 800817e:	e009      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f000 fae7 	bl	800875e <TIM_ITRx_SetConfig>
      break;
 8008190:	e000      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a40      	ldr	r2, [pc, #256]	; (8008314 <TIM_Base_SetConfig+0x114>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d00f      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a3d      	ldr	r2, [pc, #244]	; (8008318 <TIM_Base_SetConfig+0x118>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00b      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a3c      	ldr	r2, [pc, #240]	; (800831c <TIM_Base_SetConfig+0x11c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d007      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a3b      	ldr	r2, [pc, #236]	; (8008320 <TIM_Base_SetConfig+0x120>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a3a      	ldr	r2, [pc, #232]	; (8008324 <TIM_Base_SetConfig+0x124>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d108      	bne.n	8008252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2f      	ldr	r2, [pc, #188]	; (8008314 <TIM_Base_SetConfig+0x114>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d02b      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008260:	d027      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2c      	ldr	r2, [pc, #176]	; (8008318 <TIM_Base_SetConfig+0x118>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d023      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2b      	ldr	r2, [pc, #172]	; (800831c <TIM_Base_SetConfig+0x11c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01f      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2a      	ldr	r2, [pc, #168]	; (8008320 <TIM_Base_SetConfig+0x120>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01b      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a29      	ldr	r2, [pc, #164]	; (8008324 <TIM_Base_SetConfig+0x124>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d017      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a28      	ldr	r2, [pc, #160]	; (8008328 <TIM_Base_SetConfig+0x128>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a27      	ldr	r2, [pc, #156]	; (800832c <TIM_Base_SetConfig+0x12c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00f      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a26      	ldr	r2, [pc, #152]	; (8008330 <TIM_Base_SetConfig+0x130>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a25      	ldr	r2, [pc, #148]	; (8008334 <TIM_Base_SetConfig+0x134>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a24      	ldr	r2, [pc, #144]	; (8008338 <TIM_Base_SetConfig+0x138>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a23      	ldr	r2, [pc, #140]	; (800833c <TIM_Base_SetConfig+0x13c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d108      	bne.n	80082c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <TIM_Base_SetConfig+0x114>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d003      	beq.n	80082f8 <TIM_Base_SetConfig+0xf8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <TIM_Base_SetConfig+0x124>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d103      	bne.n	8008300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	615a      	str	r2, [r3, #20]
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40010000 	.word	0x40010000
 8008318:	40000400 	.word	0x40000400
 800831c:	40000800 	.word	0x40000800
 8008320:	40000c00 	.word	0x40000c00
 8008324:	40010400 	.word	0x40010400
 8008328:	40014000 	.word	0x40014000
 800832c:	40014400 	.word	0x40014400
 8008330:	40014800 	.word	0x40014800
 8008334:	40001800 	.word	0x40001800
 8008338:	40001c00 	.word	0x40001c00
 800833c:	40002000 	.word	0x40002000

08008340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 0302 	bic.w	r3, r3, #2
 8008388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a20      	ldr	r2, [pc, #128]	; (8008418 <TIM_OC1_SetConfig+0xd8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <TIM_OC1_SetConfig+0x64>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a1f      	ldr	r2, [pc, #124]	; (800841c <TIM_OC1_SetConfig+0xdc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10c      	bne.n	80083be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 0308 	bic.w	r3, r3, #8
 80083aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 0304 	bic.w	r3, r3, #4
 80083bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a15      	ldr	r2, [pc, #84]	; (8008418 <TIM_OC1_SetConfig+0xd8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d003      	beq.n	80083ce <TIM_OC1_SetConfig+0x8e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a14      	ldr	r2, [pc, #80]	; (800841c <TIM_OC1_SetConfig+0xdc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d111      	bne.n	80083f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	621a      	str	r2, [r3, #32]
}
 800840c:	bf00      	nop
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	40010000 	.word	0x40010000
 800841c:	40010400 	.word	0x40010400

08008420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f023 0210 	bic.w	r2, r3, #16
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f023 0320 	bic.w	r3, r3, #32
 800846a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a22      	ldr	r2, [pc, #136]	; (8008504 <TIM_OC2_SetConfig+0xe4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d003      	beq.n	8008488 <TIM_OC2_SetConfig+0x68>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a21      	ldr	r2, [pc, #132]	; (8008508 <TIM_OC2_SetConfig+0xe8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d10d      	bne.n	80084a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800848e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a17      	ldr	r2, [pc, #92]	; (8008504 <TIM_OC2_SetConfig+0xe4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_OC2_SetConfig+0x94>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a16      	ldr	r2, [pc, #88]	; (8008508 <TIM_OC2_SetConfig+0xe8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d113      	bne.n	80084dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	621a      	str	r2, [r3, #32]
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40010000 	.word	0x40010000
 8008508:	40010400 	.word	0x40010400

0800850c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a21      	ldr	r2, [pc, #132]	; (80085ec <TIM_OC3_SetConfig+0xe0>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_OC3_SetConfig+0x66>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a20      	ldr	r2, [pc, #128]	; (80085f0 <TIM_OC3_SetConfig+0xe4>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d10d      	bne.n	800858e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800858c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a16      	ldr	r2, [pc, #88]	; (80085ec <TIM_OC3_SetConfig+0xe0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d003      	beq.n	800859e <TIM_OC3_SetConfig+0x92>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <TIM_OC3_SetConfig+0xe4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d113      	bne.n	80085c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40010000 	.word	0x40010000
 80085f0:	40010400 	.word	0x40010400

080085f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800862a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800863e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a12      	ldr	r2, [pc, #72]	; (8008698 <TIM_OC4_SetConfig+0xa4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_OC4_SetConfig+0x68>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a11      	ldr	r2, [pc, #68]	; (800869c <TIM_OC4_SetConfig+0xa8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d109      	bne.n	8008670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	019b      	lsls	r3, r3, #6
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	621a      	str	r2, [r3, #32]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40010000 	.word	0x40010000
 800869c:	40010400 	.word	0x40010400

080086a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f023 0201 	bic.w	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f023 030a 	bic.w	r3, r3, #10
 80086dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086fe:	b480      	push	{r7}
 8008700:	b087      	sub	sp, #28
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f023 0210 	bic.w	r2, r3, #16
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	031b      	lsls	r3, r3, #12
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800873a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	621a      	str	r2, [r3, #32]
}
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800875e:	b480      	push	{r7}
 8008760:	b085      	sub	sp, #20
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	f043 0307 	orr.w	r3, r3, #7
 8008780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	609a      	str	r2, [r3, #8]
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	021a      	lsls	r2, r3, #8
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	4313      	orrs	r3, r2
 80087c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	609a      	str	r2, [r3, #8]
}
 80087c8:	bf00      	nop
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f003 031f 	and.w	r3, r3, #31
 80087e6:	2201      	movs	r2, #1
 80087e8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a1a      	ldr	r2, [r3, #32]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	43db      	mvns	r3, r3
 80087f6:	401a      	ands	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1a      	ldr	r2, [r3, #32]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f003 031f 	and.w	r3, r3, #31
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	fa01 f303 	lsl.w	r3, r1, r3
 800880c:	431a      	orrs	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	621a      	str	r2, [r3, #32]
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
	...

08008820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008834:	2302      	movs	r3, #2
 8008836:	e05a      	b.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a21      	ldr	r2, [pc, #132]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d022      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d01d      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d018      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a1b      	ldr	r2, [pc, #108]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00e      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a18      	ldr	r2, [pc, #96]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d009      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a17      	ldr	r2, [pc, #92]	; (8008910 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d004      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d10c      	bne.n	80088dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40010000 	.word	0x40010000
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40000c00 	.word	0x40000c00
 800890c:	40010400 	.word	0x40010400
 8008910:	40014000 	.word	0x40014000
 8008914:	40001800 	.word	0x40001800

08008918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <atoi>:
 8008940:	220a      	movs	r2, #10
 8008942:	2100      	movs	r1, #0
 8008944:	f000 b8e6 	b.w	8008b14 <strtol>

08008948 <__errno>:
 8008948:	4b01      	ldr	r3, [pc, #4]	; (8008950 <__errno+0x8>)
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20000018 	.word	0x20000018

08008954 <__libc_init_array>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4e0d      	ldr	r6, [pc, #52]	; (800898c <__libc_init_array+0x38>)
 8008958:	4c0d      	ldr	r4, [pc, #52]	; (8008990 <__libc_init_array+0x3c>)
 800895a:	1ba4      	subs	r4, r4, r6
 800895c:	10a4      	asrs	r4, r4, #2
 800895e:	2500      	movs	r5, #0
 8008960:	42a5      	cmp	r5, r4
 8008962:	d109      	bne.n	8008978 <__libc_init_array+0x24>
 8008964:	4e0b      	ldr	r6, [pc, #44]	; (8008994 <__libc_init_array+0x40>)
 8008966:	4c0c      	ldr	r4, [pc, #48]	; (8008998 <__libc_init_array+0x44>)
 8008968:	f001 f97e 	bl	8009c68 <_init>
 800896c:	1ba4      	subs	r4, r4, r6
 800896e:	10a4      	asrs	r4, r4, #2
 8008970:	2500      	movs	r5, #0
 8008972:	42a5      	cmp	r5, r4
 8008974:	d105      	bne.n	8008982 <__libc_init_array+0x2e>
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800897c:	4798      	blx	r3
 800897e:	3501      	adds	r5, #1
 8008980:	e7ee      	b.n	8008960 <__libc_init_array+0xc>
 8008982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008986:	4798      	blx	r3
 8008988:	3501      	adds	r5, #1
 800898a:	e7f2      	b.n	8008972 <__libc_init_array+0x1e>
 800898c:	08009eec 	.word	0x08009eec
 8008990:	08009eec 	.word	0x08009eec
 8008994:	08009eec 	.word	0x08009eec
 8008998:	08009ef0 	.word	0x08009ef0

0800899c <memset>:
 800899c:	4402      	add	r2, r0
 800899e:	4603      	mov	r3, r0
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d100      	bne.n	80089a6 <memset+0xa>
 80089a4:	4770      	bx	lr
 80089a6:	f803 1b01 	strb.w	r1, [r3], #1
 80089aa:	e7f9      	b.n	80089a0 <memset+0x4>

080089ac <iprintf>:
 80089ac:	b40f      	push	{r0, r1, r2, r3}
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <iprintf+0x2c>)
 80089b0:	b513      	push	{r0, r1, r4, lr}
 80089b2:	681c      	ldr	r4, [r3, #0]
 80089b4:	b124      	cbz	r4, 80089c0 <iprintf+0x14>
 80089b6:	69a3      	ldr	r3, [r4, #24]
 80089b8:	b913      	cbnz	r3, 80089c0 <iprintf+0x14>
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f900 	bl	8008bc0 <__sinit>
 80089c0:	ab05      	add	r3, sp, #20
 80089c2:	9a04      	ldr	r2, [sp, #16]
 80089c4:	68a1      	ldr	r1, [r4, #8]
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fb6f 	bl	80090ac <_vfiprintf_r>
 80089ce:	b002      	add	sp, #8
 80089d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d4:	b004      	add	sp, #16
 80089d6:	4770      	bx	lr
 80089d8:	20000018 	.word	0x20000018

080089dc <siprintf>:
 80089dc:	b40e      	push	{r1, r2, r3}
 80089de:	b500      	push	{lr}
 80089e0:	b09c      	sub	sp, #112	; 0x70
 80089e2:	ab1d      	add	r3, sp, #116	; 0x74
 80089e4:	9002      	str	r0, [sp, #8]
 80089e6:	9006      	str	r0, [sp, #24]
 80089e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089ec:	4809      	ldr	r0, [pc, #36]	; (8008a14 <siprintf+0x38>)
 80089ee:	9107      	str	r1, [sp, #28]
 80089f0:	9104      	str	r1, [sp, #16]
 80089f2:	4909      	ldr	r1, [pc, #36]	; (8008a18 <siprintf+0x3c>)
 80089f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f8:	9105      	str	r1, [sp, #20]
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	a902      	add	r1, sp, #8
 8008a00:	f000 fa32 	bl	8008e68 <_svfiprintf_r>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	b01c      	add	sp, #112	; 0x70
 8008a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a10:	b003      	add	sp, #12
 8008a12:	4770      	bx	lr
 8008a14:	20000018 	.word	0x20000018
 8008a18:	ffff0208 	.word	0xffff0208

08008a1c <_strtol_l.isra.0>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	4680      	mov	r8, r0
 8008a22:	4689      	mov	r9, r1
 8008a24:	4692      	mov	sl, r2
 8008a26:	461e      	mov	r6, r3
 8008a28:	460f      	mov	r7, r1
 8008a2a:	463d      	mov	r5, r7
 8008a2c:	9808      	ldr	r0, [sp, #32]
 8008a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a32:	f000 f94f 	bl	8008cd4 <__locale_ctype_ptr_l>
 8008a36:	4420      	add	r0, r4
 8008a38:	7843      	ldrb	r3, [r0, #1]
 8008a3a:	f013 0308 	ands.w	r3, r3, #8
 8008a3e:	d132      	bne.n	8008aa6 <_strtol_l.isra.0+0x8a>
 8008a40:	2c2d      	cmp	r4, #45	; 0x2d
 8008a42:	d132      	bne.n	8008aaa <_strtol_l.isra.0+0x8e>
 8008a44:	787c      	ldrb	r4, [r7, #1]
 8008a46:	1cbd      	adds	r5, r7, #2
 8008a48:	2201      	movs	r2, #1
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	d05d      	beq.n	8008b0a <_strtol_l.isra.0+0xee>
 8008a4e:	2e10      	cmp	r6, #16
 8008a50:	d109      	bne.n	8008a66 <_strtol_l.isra.0+0x4a>
 8008a52:	2c30      	cmp	r4, #48	; 0x30
 8008a54:	d107      	bne.n	8008a66 <_strtol_l.isra.0+0x4a>
 8008a56:	782b      	ldrb	r3, [r5, #0]
 8008a58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a5c:	2b58      	cmp	r3, #88	; 0x58
 8008a5e:	d14f      	bne.n	8008b00 <_strtol_l.isra.0+0xe4>
 8008a60:	786c      	ldrb	r4, [r5, #1]
 8008a62:	2610      	movs	r6, #16
 8008a64:	3502      	adds	r5, #2
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	bf14      	ite	ne
 8008a6a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008a6e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008a72:	2700      	movs	r7, #0
 8008a74:	fbb1 fcf6 	udiv	ip, r1, r6
 8008a78:	4638      	mov	r0, r7
 8008a7a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008a7e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d817      	bhi.n	8008ab6 <_strtol_l.isra.0+0x9a>
 8008a86:	461c      	mov	r4, r3
 8008a88:	42a6      	cmp	r6, r4
 8008a8a:	dd23      	ble.n	8008ad4 <_strtol_l.isra.0+0xb8>
 8008a8c:	1c7b      	adds	r3, r7, #1
 8008a8e:	d007      	beq.n	8008aa0 <_strtol_l.isra.0+0x84>
 8008a90:	4584      	cmp	ip, r0
 8008a92:	d31c      	bcc.n	8008ace <_strtol_l.isra.0+0xb2>
 8008a94:	d101      	bne.n	8008a9a <_strtol_l.isra.0+0x7e>
 8008a96:	45a6      	cmp	lr, r4
 8008a98:	db19      	blt.n	8008ace <_strtol_l.isra.0+0xb2>
 8008a9a:	fb00 4006 	mla	r0, r0, r6, r4
 8008a9e:	2701      	movs	r7, #1
 8008aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008aa4:	e7eb      	b.n	8008a7e <_strtol_l.isra.0+0x62>
 8008aa6:	462f      	mov	r7, r5
 8008aa8:	e7bf      	b.n	8008a2a <_strtol_l.isra.0+0xe>
 8008aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8008aac:	bf04      	itt	eq
 8008aae:	1cbd      	addeq	r5, r7, #2
 8008ab0:	787c      	ldrbeq	r4, [r7, #1]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	e7c9      	b.n	8008a4a <_strtol_l.isra.0+0x2e>
 8008ab6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008aba:	2b19      	cmp	r3, #25
 8008abc:	d801      	bhi.n	8008ac2 <_strtol_l.isra.0+0xa6>
 8008abe:	3c37      	subs	r4, #55	; 0x37
 8008ac0:	e7e2      	b.n	8008a88 <_strtol_l.isra.0+0x6c>
 8008ac2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008ac6:	2b19      	cmp	r3, #25
 8008ac8:	d804      	bhi.n	8008ad4 <_strtol_l.isra.0+0xb8>
 8008aca:	3c57      	subs	r4, #87	; 0x57
 8008acc:	e7dc      	b.n	8008a88 <_strtol_l.isra.0+0x6c>
 8008ace:	f04f 37ff 	mov.w	r7, #4294967295
 8008ad2:	e7e5      	b.n	8008aa0 <_strtol_l.isra.0+0x84>
 8008ad4:	1c7b      	adds	r3, r7, #1
 8008ad6:	d108      	bne.n	8008aea <_strtol_l.isra.0+0xce>
 8008ad8:	2322      	movs	r3, #34	; 0x22
 8008ada:	f8c8 3000 	str.w	r3, [r8]
 8008ade:	4608      	mov	r0, r1
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	d107      	bne.n	8008af6 <_strtol_l.isra.0+0xda>
 8008ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aea:	b102      	cbz	r2, 8008aee <_strtol_l.isra.0+0xd2>
 8008aec:	4240      	negs	r0, r0
 8008aee:	f1ba 0f00 	cmp.w	sl, #0
 8008af2:	d0f8      	beq.n	8008ae6 <_strtol_l.isra.0+0xca>
 8008af4:	b10f      	cbz	r7, 8008afa <_strtol_l.isra.0+0xde>
 8008af6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008afa:	f8ca 9000 	str.w	r9, [sl]
 8008afe:	e7f2      	b.n	8008ae6 <_strtol_l.isra.0+0xca>
 8008b00:	2430      	movs	r4, #48	; 0x30
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	d1af      	bne.n	8008a66 <_strtol_l.isra.0+0x4a>
 8008b06:	2608      	movs	r6, #8
 8008b08:	e7ad      	b.n	8008a66 <_strtol_l.isra.0+0x4a>
 8008b0a:	2c30      	cmp	r4, #48	; 0x30
 8008b0c:	d0a3      	beq.n	8008a56 <_strtol_l.isra.0+0x3a>
 8008b0e:	260a      	movs	r6, #10
 8008b10:	e7a9      	b.n	8008a66 <_strtol_l.isra.0+0x4a>
	...

08008b14 <strtol>:
 8008b14:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <strtol+0x24>)
 8008b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b18:	681c      	ldr	r4, [r3, #0]
 8008b1a:	4d08      	ldr	r5, [pc, #32]	; (8008b3c <strtol+0x28>)
 8008b1c:	6a23      	ldr	r3, [r4, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bf08      	it	eq
 8008b22:	462b      	moveq	r3, r5
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	4613      	mov	r3, r2
 8008b28:	460a      	mov	r2, r1
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7ff ff75 	bl	8008a1c <_strtol_l.isra.0>
 8008b32:	b003      	add	sp, #12
 8008b34:	bd30      	pop	{r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	20000018 	.word	0x20000018
 8008b3c:	2000007c 	.word	0x2000007c

08008b40 <std>:
 8008b40:	2300      	movs	r3, #0
 8008b42:	b510      	push	{r4, lr}
 8008b44:	4604      	mov	r4, r0
 8008b46:	e9c0 3300 	strd	r3, r3, [r0]
 8008b4a:	6083      	str	r3, [r0, #8]
 8008b4c:	8181      	strh	r1, [r0, #12]
 8008b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b50:	81c2      	strh	r2, [r0, #14]
 8008b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b56:	6183      	str	r3, [r0, #24]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	2208      	movs	r2, #8
 8008b5c:	305c      	adds	r0, #92	; 0x5c
 8008b5e:	f7ff ff1d 	bl	800899c <memset>
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <std+0x38>)
 8008b64:	6263      	str	r3, [r4, #36]	; 0x24
 8008b66:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <std+0x3c>)
 8008b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b6a:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <std+0x40>)
 8008b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <std+0x44>)
 8008b70:	6224      	str	r4, [r4, #32]
 8008b72:	6323      	str	r3, [r4, #48]	; 0x30
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	bf00      	nop
 8008b78:	08009609 	.word	0x08009609
 8008b7c:	0800962b 	.word	0x0800962b
 8008b80:	08009663 	.word	0x08009663
 8008b84:	08009687 	.word	0x08009687

08008b88 <_cleanup_r>:
 8008b88:	4901      	ldr	r1, [pc, #4]	; (8008b90 <_cleanup_r+0x8>)
 8008b8a:	f000 b885 	b.w	8008c98 <_fwalk_reent>
 8008b8e:	bf00      	nop
 8008b90:	0800997d 	.word	0x0800997d

08008b94 <__sfmoreglue>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	1e4a      	subs	r2, r1, #1
 8008b98:	2568      	movs	r5, #104	; 0x68
 8008b9a:	4355      	muls	r5, r2
 8008b9c:	460e      	mov	r6, r1
 8008b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ba2:	f000 f8ad 	bl	8008d00 <_malloc_r>
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	b140      	cbz	r0, 8008bbc <__sfmoreglue+0x28>
 8008baa:	2100      	movs	r1, #0
 8008bac:	e9c0 1600 	strd	r1, r6, [r0]
 8008bb0:	300c      	adds	r0, #12
 8008bb2:	60a0      	str	r0, [r4, #8]
 8008bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bb8:	f7ff fef0 	bl	800899c <memset>
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}

08008bc0 <__sinit>:
 8008bc0:	6983      	ldr	r3, [r0, #24]
 8008bc2:	b510      	push	{r4, lr}
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	bb33      	cbnz	r3, 8008c16 <__sinit+0x56>
 8008bc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008bcc:	6503      	str	r3, [r0, #80]	; 0x50
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <__sinit+0x58>)
 8008bd0:	4a12      	ldr	r2, [pc, #72]	; (8008c1c <__sinit+0x5c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6282      	str	r2, [r0, #40]	; 0x28
 8008bd6:	4298      	cmp	r0, r3
 8008bd8:	bf04      	itt	eq
 8008bda:	2301      	moveq	r3, #1
 8008bdc:	6183      	streq	r3, [r0, #24]
 8008bde:	f000 f81f 	bl	8008c20 <__sfp>
 8008be2:	6060      	str	r0, [r4, #4]
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 f81b 	bl	8008c20 <__sfp>
 8008bea:	60a0      	str	r0, [r4, #8]
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 f817 	bl	8008c20 <__sfp>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60e0      	str	r0, [r4, #12]
 8008bf6:	2104      	movs	r1, #4
 8008bf8:	6860      	ldr	r0, [r4, #4]
 8008bfa:	f7ff ffa1 	bl	8008b40 <std>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	2109      	movs	r1, #9
 8008c02:	68a0      	ldr	r0, [r4, #8]
 8008c04:	f7ff ff9c 	bl	8008b40 <std>
 8008c08:	2202      	movs	r2, #2
 8008c0a:	2112      	movs	r1, #18
 8008c0c:	68e0      	ldr	r0, [r4, #12]
 8008c0e:	f7ff ff97 	bl	8008b40 <std>
 8008c12:	2301      	movs	r3, #1
 8008c14:	61a3      	str	r3, [r4, #24]
 8008c16:	bd10      	pop	{r4, pc}
 8008c18:	08009d40 	.word	0x08009d40
 8008c1c:	08008b89 	.word	0x08008b89

08008c20 <__sfp>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <__sfp+0x70>)
 8008c24:	681e      	ldr	r6, [r3, #0]
 8008c26:	69b3      	ldr	r3, [r6, #24]
 8008c28:	4607      	mov	r7, r0
 8008c2a:	b913      	cbnz	r3, 8008c32 <__sfp+0x12>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff ffc7 	bl	8008bc0 <__sinit>
 8008c32:	3648      	adds	r6, #72	; 0x48
 8008c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	d503      	bpl.n	8008c44 <__sfp+0x24>
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	b133      	cbz	r3, 8008c4e <__sfp+0x2e>
 8008c40:	6836      	ldr	r6, [r6, #0]
 8008c42:	e7f7      	b.n	8008c34 <__sfp+0x14>
 8008c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c48:	b16d      	cbz	r5, 8008c66 <__sfp+0x46>
 8008c4a:	3468      	adds	r4, #104	; 0x68
 8008c4c:	e7f4      	b.n	8008c38 <__sfp+0x18>
 8008c4e:	2104      	movs	r1, #4
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff ff9f 	bl	8008b94 <__sfmoreglue>
 8008c56:	6030      	str	r0, [r6, #0]
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d1f1      	bne.n	8008c40 <__sfp+0x20>
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4604      	mov	r4, r0
 8008c62:	4620      	mov	r0, r4
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <__sfp+0x74>)
 8008c68:	6665      	str	r5, [r4, #100]	; 0x64
 8008c6a:	e9c4 5500 	strd	r5, r5, [r4]
 8008c6e:	60a5      	str	r5, [r4, #8]
 8008c70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008c74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c80:	f7ff fe8c 	bl	800899c <memset>
 8008c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c8c:	e7e9      	b.n	8008c62 <__sfp+0x42>
 8008c8e:	bf00      	nop
 8008c90:	08009d40 	.word	0x08009d40
 8008c94:	ffff0001 	.word	0xffff0001

08008c98 <_fwalk_reent>:
 8008c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4689      	mov	r9, r1
 8008ca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ca4:	2600      	movs	r6, #0
 8008ca6:	b914      	cbnz	r4, 8008cae <_fwalk_reent+0x16>
 8008ca8:	4630      	mov	r0, r6
 8008caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008cb2:	3f01      	subs	r7, #1
 8008cb4:	d501      	bpl.n	8008cba <_fwalk_reent+0x22>
 8008cb6:	6824      	ldr	r4, [r4, #0]
 8008cb8:	e7f5      	b.n	8008ca6 <_fwalk_reent+0xe>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d907      	bls.n	8008cd0 <_fwalk_reent+0x38>
 8008cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	d003      	beq.n	8008cd0 <_fwalk_reent+0x38>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4640      	mov	r0, r8
 8008ccc:	47c8      	blx	r9
 8008cce:	4306      	orrs	r6, r0
 8008cd0:	3568      	adds	r5, #104	; 0x68
 8008cd2:	e7ee      	b.n	8008cb2 <_fwalk_reent+0x1a>

08008cd4 <__locale_ctype_ptr_l>:
 8008cd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008cd8:	4770      	bx	lr

08008cda <__ascii_mbtowc>:
 8008cda:	b082      	sub	sp, #8
 8008cdc:	b901      	cbnz	r1, 8008ce0 <__ascii_mbtowc+0x6>
 8008cde:	a901      	add	r1, sp, #4
 8008ce0:	b142      	cbz	r2, 8008cf4 <__ascii_mbtowc+0x1a>
 8008ce2:	b14b      	cbz	r3, 8008cf8 <__ascii_mbtowc+0x1e>
 8008ce4:	7813      	ldrb	r3, [r2, #0]
 8008ce6:	600b      	str	r3, [r1, #0]
 8008ce8:	7812      	ldrb	r2, [r2, #0]
 8008cea:	1c10      	adds	r0, r2, #0
 8008cec:	bf18      	it	ne
 8008cee:	2001      	movne	r0, #1
 8008cf0:	b002      	add	sp, #8
 8008cf2:	4770      	bx	lr
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	e7fb      	b.n	8008cf0 <__ascii_mbtowc+0x16>
 8008cf8:	f06f 0001 	mvn.w	r0, #1
 8008cfc:	e7f8      	b.n	8008cf0 <__ascii_mbtowc+0x16>
	...

08008d00 <_malloc_r>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	1ccd      	adds	r5, r1, #3
 8008d04:	f025 0503 	bic.w	r5, r5, #3
 8008d08:	3508      	adds	r5, #8
 8008d0a:	2d0c      	cmp	r5, #12
 8008d0c:	bf38      	it	cc
 8008d0e:	250c      	movcc	r5, #12
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	4606      	mov	r6, r0
 8008d14:	db01      	blt.n	8008d1a <_malloc_r+0x1a>
 8008d16:	42a9      	cmp	r1, r5
 8008d18:	d903      	bls.n	8008d22 <_malloc_r+0x22>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	2000      	movs	r0, #0
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	f000 feef 	bl	8009b04 <__malloc_lock>
 8008d26:	4a21      	ldr	r2, [pc, #132]	; (8008dac <_malloc_r+0xac>)
 8008d28:	6814      	ldr	r4, [r2, #0]
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	b991      	cbnz	r1, 8008d54 <_malloc_r+0x54>
 8008d2e:	4c20      	ldr	r4, [pc, #128]	; (8008db0 <_malloc_r+0xb0>)
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	b91b      	cbnz	r3, 8008d3c <_malloc_r+0x3c>
 8008d34:	4630      	mov	r0, r6
 8008d36:	f000 fc57 	bl	80095e8 <_sbrk_r>
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f000 fc52 	bl	80095e8 <_sbrk_r>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d124      	bne.n	8008d92 <_malloc_r+0x92>
 8008d48:	230c      	movs	r3, #12
 8008d4a:	6033      	str	r3, [r6, #0]
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f000 feda 	bl	8009b06 <__malloc_unlock>
 8008d52:	e7e4      	b.n	8008d1e <_malloc_r+0x1e>
 8008d54:	680b      	ldr	r3, [r1, #0]
 8008d56:	1b5b      	subs	r3, r3, r5
 8008d58:	d418      	bmi.n	8008d8c <_malloc_r+0x8c>
 8008d5a:	2b0b      	cmp	r3, #11
 8008d5c:	d90f      	bls.n	8008d7e <_malloc_r+0x7e>
 8008d5e:	600b      	str	r3, [r1, #0]
 8008d60:	50cd      	str	r5, [r1, r3]
 8008d62:	18cc      	adds	r4, r1, r3
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 fece 	bl	8009b06 <__malloc_unlock>
 8008d6a:	f104 000b 	add.w	r0, r4, #11
 8008d6e:	1d23      	adds	r3, r4, #4
 8008d70:	f020 0007 	bic.w	r0, r0, #7
 8008d74:	1ac3      	subs	r3, r0, r3
 8008d76:	d0d3      	beq.n	8008d20 <_malloc_r+0x20>
 8008d78:	425a      	negs	r2, r3
 8008d7a:	50e2      	str	r2, [r4, r3]
 8008d7c:	e7d0      	b.n	8008d20 <_malloc_r+0x20>
 8008d7e:	428c      	cmp	r4, r1
 8008d80:	684b      	ldr	r3, [r1, #4]
 8008d82:	bf16      	itet	ne
 8008d84:	6063      	strne	r3, [r4, #4]
 8008d86:	6013      	streq	r3, [r2, #0]
 8008d88:	460c      	movne	r4, r1
 8008d8a:	e7eb      	b.n	8008d64 <_malloc_r+0x64>
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6849      	ldr	r1, [r1, #4]
 8008d90:	e7cc      	b.n	8008d2c <_malloc_r+0x2c>
 8008d92:	1cc4      	adds	r4, r0, #3
 8008d94:	f024 0403 	bic.w	r4, r4, #3
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d005      	beq.n	8008da8 <_malloc_r+0xa8>
 8008d9c:	1a21      	subs	r1, r4, r0
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f000 fc22 	bl	80095e8 <_sbrk_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d0cf      	beq.n	8008d48 <_malloc_r+0x48>
 8008da8:	6025      	str	r5, [r4, #0]
 8008daa:	e7db      	b.n	8008d64 <_malloc_r+0x64>
 8008dac:	200004c0 	.word	0x200004c0
 8008db0:	200004c4 	.word	0x200004c4

08008db4 <__ssputs_r>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	688e      	ldr	r6, [r1, #8]
 8008dba:	429e      	cmp	r6, r3
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	4690      	mov	r8, r2
 8008dc2:	4699      	mov	r9, r3
 8008dc4:	d837      	bhi.n	8008e36 <__ssputs_r+0x82>
 8008dc6:	898a      	ldrh	r2, [r1, #12]
 8008dc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dcc:	d031      	beq.n	8008e32 <__ssputs_r+0x7e>
 8008dce:	6825      	ldr	r5, [r4, #0]
 8008dd0:	6909      	ldr	r1, [r1, #16]
 8008dd2:	1a6f      	subs	r7, r5, r1
 8008dd4:	6965      	ldr	r5, [r4, #20]
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ddc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008de0:	f109 0301 	add.w	r3, r9, #1
 8008de4:	443b      	add	r3, r7
 8008de6:	429d      	cmp	r5, r3
 8008de8:	bf38      	it	cc
 8008dea:	461d      	movcc	r5, r3
 8008dec:	0553      	lsls	r3, r2, #21
 8008dee:	d530      	bpl.n	8008e52 <__ssputs_r+0x9e>
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7ff ff85 	bl	8008d00 <_malloc_r>
 8008df6:	4606      	mov	r6, r0
 8008df8:	b950      	cbnz	r0, 8008e10 <__ssputs_r+0x5c>
 8008dfa:	230c      	movs	r3, #12
 8008dfc:	f8ca 3000 	str.w	r3, [sl]
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e10:	463a      	mov	r2, r7
 8008e12:	6921      	ldr	r1, [r4, #16]
 8008e14:	f000 fe52 	bl	8009abc <memcpy>
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	6126      	str	r6, [r4, #16]
 8008e26:	6165      	str	r5, [r4, #20]
 8008e28:	443e      	add	r6, r7
 8008e2a:	1bed      	subs	r5, r5, r7
 8008e2c:	6026      	str	r6, [r4, #0]
 8008e2e:	60a5      	str	r5, [r4, #8]
 8008e30:	464e      	mov	r6, r9
 8008e32:	454e      	cmp	r6, r9
 8008e34:	d900      	bls.n	8008e38 <__ssputs_r+0x84>
 8008e36:	464e      	mov	r6, r9
 8008e38:	4632      	mov	r2, r6
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	f000 fe48 	bl	8009ad2 <memmove>
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	441e      	add	r6, r3
 8008e4c:	6026      	str	r6, [r4, #0]
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e7dc      	b.n	8008e0c <__ssputs_r+0x58>
 8008e52:	462a      	mov	r2, r5
 8008e54:	f000 fea6 	bl	8009ba4 <_realloc_r>
 8008e58:	4606      	mov	r6, r0
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1e2      	bne.n	8008e24 <__ssputs_r+0x70>
 8008e5e:	6921      	ldr	r1, [r4, #16]
 8008e60:	4650      	mov	r0, sl
 8008e62:	f000 fe51 	bl	8009b08 <_free_r>
 8008e66:	e7c8      	b.n	8008dfa <__ssputs_r+0x46>

08008e68 <_svfiprintf_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	461d      	mov	r5, r3
 8008e6e:	898b      	ldrh	r3, [r1, #12]
 8008e70:	061f      	lsls	r7, r3, #24
 8008e72:	b09d      	sub	sp, #116	; 0x74
 8008e74:	4680      	mov	r8, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	4616      	mov	r6, r2
 8008e7a:	d50f      	bpl.n	8008e9c <_svfiprintf_r+0x34>
 8008e7c:	690b      	ldr	r3, [r1, #16]
 8008e7e:	b96b      	cbnz	r3, 8008e9c <_svfiprintf_r+0x34>
 8008e80:	2140      	movs	r1, #64	; 0x40
 8008e82:	f7ff ff3d 	bl	8008d00 <_malloc_r>
 8008e86:	6020      	str	r0, [r4, #0]
 8008e88:	6120      	str	r0, [r4, #16]
 8008e8a:	b928      	cbnz	r0, 8008e98 <_svfiprintf_r+0x30>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	f8c8 3000 	str.w	r3, [r8]
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	e0c8      	b.n	800902a <_svfiprintf_r+0x1c2>
 8008e98:	2340      	movs	r3, #64	; 0x40
 8008e9a:	6163      	str	r3, [r4, #20]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea6:	2330      	movs	r3, #48	; 0x30
 8008ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eac:	9503      	str	r5, [sp, #12]
 8008eae:	f04f 0b01 	mov.w	fp, #1
 8008eb2:	4637      	mov	r7, r6
 8008eb4:	463d      	mov	r5, r7
 8008eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eba:	b10b      	cbz	r3, 8008ec0 <_svfiprintf_r+0x58>
 8008ebc:	2b25      	cmp	r3, #37	; 0x25
 8008ebe:	d13e      	bne.n	8008f3e <_svfiprintf_r+0xd6>
 8008ec0:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ec4:	d00b      	beq.n	8008ede <_svfiprintf_r+0x76>
 8008ec6:	4653      	mov	r3, sl
 8008ec8:	4632      	mov	r2, r6
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4640      	mov	r0, r8
 8008ece:	f7ff ff71 	bl	8008db4 <__ssputs_r>
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f000 80a4 	beq.w	8009020 <_svfiprintf_r+0x1b8>
 8008ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eda:	4453      	add	r3, sl
 8008edc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ede:	783b      	ldrb	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 809d 	beq.w	8009020 <_svfiprintf_r+0x1b8>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	9307      	str	r3, [sp, #28]
 8008ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8008efa:	462f      	mov	r7, r5
 8008efc:	2205      	movs	r2, #5
 8008efe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008f02:	4850      	ldr	r0, [pc, #320]	; (8009044 <_svfiprintf_r+0x1dc>)
 8008f04:	f7f7 f96c 	bl	80001e0 <memchr>
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	b9d0      	cbnz	r0, 8008f42 <_svfiprintf_r+0xda>
 8008f0c:	06d9      	lsls	r1, r3, #27
 8008f0e:	bf44      	itt	mi
 8008f10:	2220      	movmi	r2, #32
 8008f12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f16:	071a      	lsls	r2, r3, #28
 8008f18:	bf44      	itt	mi
 8008f1a:	222b      	movmi	r2, #43	; 0x2b
 8008f1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f20:	782a      	ldrb	r2, [r5, #0]
 8008f22:	2a2a      	cmp	r2, #42	; 0x2a
 8008f24:	d015      	beq.n	8008f52 <_svfiprintf_r+0xea>
 8008f26:	9a07      	ldr	r2, [sp, #28]
 8008f28:	462f      	mov	r7, r5
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	250a      	movs	r5, #10
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f34:	3b30      	subs	r3, #48	; 0x30
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	d94d      	bls.n	8008fd6 <_svfiprintf_r+0x16e>
 8008f3a:	b1b8      	cbz	r0, 8008f6c <_svfiprintf_r+0x104>
 8008f3c:	e00f      	b.n	8008f5e <_svfiprintf_r+0xf6>
 8008f3e:	462f      	mov	r7, r5
 8008f40:	e7b8      	b.n	8008eb4 <_svfiprintf_r+0x4c>
 8008f42:	4a40      	ldr	r2, [pc, #256]	; (8009044 <_svfiprintf_r+0x1dc>)
 8008f44:	1a80      	subs	r0, r0, r2
 8008f46:	fa0b f000 	lsl.w	r0, fp, r0
 8008f4a:	4318      	orrs	r0, r3
 8008f4c:	9004      	str	r0, [sp, #16]
 8008f4e:	463d      	mov	r5, r7
 8008f50:	e7d3      	b.n	8008efa <_svfiprintf_r+0x92>
 8008f52:	9a03      	ldr	r2, [sp, #12]
 8008f54:	1d11      	adds	r1, r2, #4
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	9103      	str	r1, [sp, #12]
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	db01      	blt.n	8008f62 <_svfiprintf_r+0xfa>
 8008f5e:	9207      	str	r2, [sp, #28]
 8008f60:	e004      	b.n	8008f6c <_svfiprintf_r+0x104>
 8008f62:	4252      	negs	r2, r2
 8008f64:	f043 0302 	orr.w	r3, r3, #2
 8008f68:	9207      	str	r2, [sp, #28]
 8008f6a:	9304      	str	r3, [sp, #16]
 8008f6c:	783b      	ldrb	r3, [r7, #0]
 8008f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f70:	d10c      	bne.n	8008f8c <_svfiprintf_r+0x124>
 8008f72:	787b      	ldrb	r3, [r7, #1]
 8008f74:	2b2a      	cmp	r3, #42	; 0x2a
 8008f76:	d133      	bne.n	8008fe0 <_svfiprintf_r+0x178>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	1d1a      	adds	r2, r3, #4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	9203      	str	r2, [sp, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bfb8      	it	lt
 8008f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f88:	3702      	adds	r7, #2
 8008f8a:	9305      	str	r3, [sp, #20]
 8008f8c:	4d2e      	ldr	r5, [pc, #184]	; (8009048 <_svfiprintf_r+0x1e0>)
 8008f8e:	7839      	ldrb	r1, [r7, #0]
 8008f90:	2203      	movs	r2, #3
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7f7 f924 	bl	80001e0 <memchr>
 8008f98:	b138      	cbz	r0, 8008faa <_svfiprintf_r+0x142>
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	1b40      	subs	r0, r0, r5
 8008f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	4303      	orrs	r3, r0
 8008fa6:	3701      	adds	r7, #1
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	7839      	ldrb	r1, [r7, #0]
 8008fac:	4827      	ldr	r0, [pc, #156]	; (800904c <_svfiprintf_r+0x1e4>)
 8008fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	1c7e      	adds	r6, r7, #1
 8008fb6:	f7f7 f913 	bl	80001e0 <memchr>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d038      	beq.n	8009030 <_svfiprintf_r+0x1c8>
 8008fbe:	4b24      	ldr	r3, [pc, #144]	; (8009050 <_svfiprintf_r+0x1e8>)
 8008fc0:	bb13      	cbnz	r3, 8009008 <_svfiprintf_r+0x1a0>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3307      	adds	r3, #7
 8008fc6:	f023 0307 	bic.w	r3, r3, #7
 8008fca:	3308      	adds	r3, #8
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	444b      	add	r3, r9
 8008fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd4:	e76d      	b.n	8008eb2 <_svfiprintf_r+0x4a>
 8008fd6:	fb05 3202 	mla	r2, r5, r2, r3
 8008fda:	2001      	movs	r0, #1
 8008fdc:	460f      	mov	r7, r1
 8008fde:	e7a6      	b.n	8008f2e <_svfiprintf_r+0xc6>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	3701      	adds	r7, #1
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	250a      	movs	r5, #10
 8008fea:	4638      	mov	r0, r7
 8008fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff0:	3a30      	subs	r2, #48	; 0x30
 8008ff2:	2a09      	cmp	r2, #9
 8008ff4:	d903      	bls.n	8008ffe <_svfiprintf_r+0x196>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0c8      	beq.n	8008f8c <_svfiprintf_r+0x124>
 8008ffa:	9105      	str	r1, [sp, #20]
 8008ffc:	e7c6      	b.n	8008f8c <_svfiprintf_r+0x124>
 8008ffe:	fb05 2101 	mla	r1, r5, r1, r2
 8009002:	2301      	movs	r3, #1
 8009004:	4607      	mov	r7, r0
 8009006:	e7f0      	b.n	8008fea <_svfiprintf_r+0x182>
 8009008:	ab03      	add	r3, sp, #12
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	4622      	mov	r2, r4
 800900e:	4b11      	ldr	r3, [pc, #68]	; (8009054 <_svfiprintf_r+0x1ec>)
 8009010:	a904      	add	r1, sp, #16
 8009012:	4640      	mov	r0, r8
 8009014:	f3af 8000 	nop.w
 8009018:	f1b0 3fff 	cmp.w	r0, #4294967295
 800901c:	4681      	mov	r9, r0
 800901e:	d1d6      	bne.n	8008fce <_svfiprintf_r+0x166>
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	065b      	lsls	r3, r3, #25
 8009024:	f53f af35 	bmi.w	8008e92 <_svfiprintf_r+0x2a>
 8009028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902a:	b01d      	add	sp, #116	; 0x74
 800902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	4622      	mov	r2, r4
 8009036:	4b07      	ldr	r3, [pc, #28]	; (8009054 <_svfiprintf_r+0x1ec>)
 8009038:	a904      	add	r1, sp, #16
 800903a:	4640      	mov	r0, r8
 800903c:	f000 f9c2 	bl	80093c4 <_printf_i>
 8009040:	e7ea      	b.n	8009018 <_svfiprintf_r+0x1b0>
 8009042:	bf00      	nop
 8009044:	08009dae 	.word	0x08009dae
 8009048:	08009db4 	.word	0x08009db4
 800904c:	08009db8 	.word	0x08009db8
 8009050:	00000000 	.word	0x00000000
 8009054:	08008db5 	.word	0x08008db5

08009058 <__sfputc_r>:
 8009058:	6893      	ldr	r3, [r2, #8]
 800905a:	3b01      	subs	r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	b410      	push	{r4}
 8009060:	6093      	str	r3, [r2, #8]
 8009062:	da08      	bge.n	8009076 <__sfputc_r+0x1e>
 8009064:	6994      	ldr	r4, [r2, #24]
 8009066:	42a3      	cmp	r3, r4
 8009068:	db01      	blt.n	800906e <__sfputc_r+0x16>
 800906a:	290a      	cmp	r1, #10
 800906c:	d103      	bne.n	8009076 <__sfputc_r+0x1e>
 800906e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009072:	f000 bb0d 	b.w	8009690 <__swbuf_r>
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	1c58      	adds	r0, r3, #1
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	7019      	strb	r1, [r3, #0]
 800907e:	4608      	mov	r0, r1
 8009080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009084:	4770      	bx	lr

08009086 <__sfputs_r>:
 8009086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009088:	4606      	mov	r6, r0
 800908a:	460f      	mov	r7, r1
 800908c:	4614      	mov	r4, r2
 800908e:	18d5      	adds	r5, r2, r3
 8009090:	42ac      	cmp	r4, r5
 8009092:	d101      	bne.n	8009098 <__sfputs_r+0x12>
 8009094:	2000      	movs	r0, #0
 8009096:	e007      	b.n	80090a8 <__sfputs_r+0x22>
 8009098:	463a      	mov	r2, r7
 800909a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ffda 	bl	8009058 <__sfputc_r>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d1f3      	bne.n	8009090 <__sfputs_r+0xa>
 80090a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090ac <_vfiprintf_r>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	460c      	mov	r4, r1
 80090b2:	b09d      	sub	sp, #116	; 0x74
 80090b4:	4617      	mov	r7, r2
 80090b6:	461d      	mov	r5, r3
 80090b8:	4606      	mov	r6, r0
 80090ba:	b118      	cbz	r0, 80090c4 <_vfiprintf_r+0x18>
 80090bc:	6983      	ldr	r3, [r0, #24]
 80090be:	b90b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x18>
 80090c0:	f7ff fd7e 	bl	8008bc0 <__sinit>
 80090c4:	4b7c      	ldr	r3, [pc, #496]	; (80092b8 <_vfiprintf_r+0x20c>)
 80090c6:	429c      	cmp	r4, r3
 80090c8:	d158      	bne.n	800917c <_vfiprintf_r+0xd0>
 80090ca:	6874      	ldr	r4, [r6, #4]
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	0718      	lsls	r0, r3, #28
 80090d0:	d55e      	bpl.n	8009190 <_vfiprintf_r+0xe4>
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d05b      	beq.n	8009190 <_vfiprintf_r+0xe4>
 80090d8:	2300      	movs	r3, #0
 80090da:	9309      	str	r3, [sp, #36]	; 0x24
 80090dc:	2320      	movs	r3, #32
 80090de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e2:	2330      	movs	r3, #48	; 0x30
 80090e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e8:	9503      	str	r5, [sp, #12]
 80090ea:	f04f 0b01 	mov.w	fp, #1
 80090ee:	46b8      	mov	r8, r7
 80090f0:	4645      	mov	r5, r8
 80090f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090f6:	b10b      	cbz	r3, 80090fc <_vfiprintf_r+0x50>
 80090f8:	2b25      	cmp	r3, #37	; 0x25
 80090fa:	d154      	bne.n	80091a6 <_vfiprintf_r+0xfa>
 80090fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8009100:	d00b      	beq.n	800911a <_vfiprintf_r+0x6e>
 8009102:	4653      	mov	r3, sl
 8009104:	463a      	mov	r2, r7
 8009106:	4621      	mov	r1, r4
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff ffbc 	bl	8009086 <__sfputs_r>
 800910e:	3001      	adds	r0, #1
 8009110:	f000 80c2 	beq.w	8009298 <_vfiprintf_r+0x1ec>
 8009114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009116:	4453      	add	r3, sl
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	f898 3000 	ldrb.w	r3, [r8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 80ba 	beq.w	8009298 <_vfiprintf_r+0x1ec>
 8009124:	2300      	movs	r3, #0
 8009126:	f04f 32ff 	mov.w	r2, #4294967295
 800912a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	9307      	str	r3, [sp, #28]
 8009132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009136:	931a      	str	r3, [sp, #104]	; 0x68
 8009138:	46a8      	mov	r8, r5
 800913a:	2205      	movs	r2, #5
 800913c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009140:	485e      	ldr	r0, [pc, #376]	; (80092bc <_vfiprintf_r+0x210>)
 8009142:	f7f7 f84d 	bl	80001e0 <memchr>
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	bb78      	cbnz	r0, 80091aa <_vfiprintf_r+0xfe>
 800914a:	06d9      	lsls	r1, r3, #27
 800914c:	bf44      	itt	mi
 800914e:	2220      	movmi	r2, #32
 8009150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009154:	071a      	lsls	r2, r3, #28
 8009156:	bf44      	itt	mi
 8009158:	222b      	movmi	r2, #43	; 0x2b
 800915a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800915e:	782a      	ldrb	r2, [r5, #0]
 8009160:	2a2a      	cmp	r2, #42	; 0x2a
 8009162:	d02a      	beq.n	80091ba <_vfiprintf_r+0x10e>
 8009164:	9a07      	ldr	r2, [sp, #28]
 8009166:	46a8      	mov	r8, r5
 8009168:	2000      	movs	r0, #0
 800916a:	250a      	movs	r5, #10
 800916c:	4641      	mov	r1, r8
 800916e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009172:	3b30      	subs	r3, #48	; 0x30
 8009174:	2b09      	cmp	r3, #9
 8009176:	d969      	bls.n	800924c <_vfiprintf_r+0x1a0>
 8009178:	b360      	cbz	r0, 80091d4 <_vfiprintf_r+0x128>
 800917a:	e024      	b.n	80091c6 <_vfiprintf_r+0x11a>
 800917c:	4b50      	ldr	r3, [pc, #320]	; (80092c0 <_vfiprintf_r+0x214>)
 800917e:	429c      	cmp	r4, r3
 8009180:	d101      	bne.n	8009186 <_vfiprintf_r+0xda>
 8009182:	68b4      	ldr	r4, [r6, #8]
 8009184:	e7a2      	b.n	80090cc <_vfiprintf_r+0x20>
 8009186:	4b4f      	ldr	r3, [pc, #316]	; (80092c4 <_vfiprintf_r+0x218>)
 8009188:	429c      	cmp	r4, r3
 800918a:	bf08      	it	eq
 800918c:	68f4      	ldreq	r4, [r6, #12]
 800918e:	e79d      	b.n	80090cc <_vfiprintf_r+0x20>
 8009190:	4621      	mov	r1, r4
 8009192:	4630      	mov	r0, r6
 8009194:	f000 faee 	bl	8009774 <__swsetup_r>
 8009198:	2800      	cmp	r0, #0
 800919a:	d09d      	beq.n	80090d8 <_vfiprintf_r+0x2c>
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
 80091a0:	b01d      	add	sp, #116	; 0x74
 80091a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a6:	46a8      	mov	r8, r5
 80091a8:	e7a2      	b.n	80090f0 <_vfiprintf_r+0x44>
 80091aa:	4a44      	ldr	r2, [pc, #272]	; (80092bc <_vfiprintf_r+0x210>)
 80091ac:	1a80      	subs	r0, r0, r2
 80091ae:	fa0b f000 	lsl.w	r0, fp, r0
 80091b2:	4318      	orrs	r0, r3
 80091b4:	9004      	str	r0, [sp, #16]
 80091b6:	4645      	mov	r5, r8
 80091b8:	e7be      	b.n	8009138 <_vfiprintf_r+0x8c>
 80091ba:	9a03      	ldr	r2, [sp, #12]
 80091bc:	1d11      	adds	r1, r2, #4
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	9103      	str	r1, [sp, #12]
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	db01      	blt.n	80091ca <_vfiprintf_r+0x11e>
 80091c6:	9207      	str	r2, [sp, #28]
 80091c8:	e004      	b.n	80091d4 <_vfiprintf_r+0x128>
 80091ca:	4252      	negs	r2, r2
 80091cc:	f043 0302 	orr.w	r3, r3, #2
 80091d0:	9207      	str	r2, [sp, #28]
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	f898 3000 	ldrb.w	r3, [r8]
 80091d8:	2b2e      	cmp	r3, #46	; 0x2e
 80091da:	d10e      	bne.n	80091fa <_vfiprintf_r+0x14e>
 80091dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80091e0:	2b2a      	cmp	r3, #42	; 0x2a
 80091e2:	d138      	bne.n	8009256 <_vfiprintf_r+0x1aa>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	1d1a      	adds	r2, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	9203      	str	r2, [sp, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfb8      	it	lt
 80091f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f4:	f108 0802 	add.w	r8, r8, #2
 80091f8:	9305      	str	r3, [sp, #20]
 80091fa:	4d33      	ldr	r5, [pc, #204]	; (80092c8 <_vfiprintf_r+0x21c>)
 80091fc:	f898 1000 	ldrb.w	r1, [r8]
 8009200:	2203      	movs	r2, #3
 8009202:	4628      	mov	r0, r5
 8009204:	f7f6 ffec 	bl	80001e0 <memchr>
 8009208:	b140      	cbz	r0, 800921c <_vfiprintf_r+0x170>
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	1b40      	subs	r0, r0, r5
 800920e:	fa03 f000 	lsl.w	r0, r3, r0
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	4303      	orrs	r3, r0
 8009216:	f108 0801 	add.w	r8, r8, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	f898 1000 	ldrb.w	r1, [r8]
 8009220:	482a      	ldr	r0, [pc, #168]	; (80092cc <_vfiprintf_r+0x220>)
 8009222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009226:	2206      	movs	r2, #6
 8009228:	f108 0701 	add.w	r7, r8, #1
 800922c:	f7f6 ffd8 	bl	80001e0 <memchr>
 8009230:	2800      	cmp	r0, #0
 8009232:	d037      	beq.n	80092a4 <_vfiprintf_r+0x1f8>
 8009234:	4b26      	ldr	r3, [pc, #152]	; (80092d0 <_vfiprintf_r+0x224>)
 8009236:	bb1b      	cbnz	r3, 8009280 <_vfiprintf_r+0x1d4>
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	3307      	adds	r3, #7
 800923c:	f023 0307 	bic.w	r3, r3, #7
 8009240:	3308      	adds	r3, #8
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009246:	444b      	add	r3, r9
 8009248:	9309      	str	r3, [sp, #36]	; 0x24
 800924a:	e750      	b.n	80090ee <_vfiprintf_r+0x42>
 800924c:	fb05 3202 	mla	r2, r5, r2, r3
 8009250:	2001      	movs	r0, #1
 8009252:	4688      	mov	r8, r1
 8009254:	e78a      	b.n	800916c <_vfiprintf_r+0xc0>
 8009256:	2300      	movs	r3, #0
 8009258:	f108 0801 	add.w	r8, r8, #1
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	4619      	mov	r1, r3
 8009260:	250a      	movs	r5, #10
 8009262:	4640      	mov	r0, r8
 8009264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009268:	3a30      	subs	r2, #48	; 0x30
 800926a:	2a09      	cmp	r2, #9
 800926c:	d903      	bls.n	8009276 <_vfiprintf_r+0x1ca>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0c3      	beq.n	80091fa <_vfiprintf_r+0x14e>
 8009272:	9105      	str	r1, [sp, #20]
 8009274:	e7c1      	b.n	80091fa <_vfiprintf_r+0x14e>
 8009276:	fb05 2101 	mla	r1, r5, r1, r2
 800927a:	2301      	movs	r3, #1
 800927c:	4680      	mov	r8, r0
 800927e:	e7f0      	b.n	8009262 <_vfiprintf_r+0x1b6>
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	4622      	mov	r2, r4
 8009286:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <_vfiprintf_r+0x228>)
 8009288:	a904      	add	r1, sp, #16
 800928a:	4630      	mov	r0, r6
 800928c:	f3af 8000 	nop.w
 8009290:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009294:	4681      	mov	r9, r0
 8009296:	d1d5      	bne.n	8009244 <_vfiprintf_r+0x198>
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	065b      	lsls	r3, r3, #25
 800929c:	f53f af7e 	bmi.w	800919c <_vfiprintf_r+0xf0>
 80092a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092a2:	e77d      	b.n	80091a0 <_vfiprintf_r+0xf4>
 80092a4:	ab03      	add	r3, sp, #12
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4622      	mov	r2, r4
 80092aa:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <_vfiprintf_r+0x228>)
 80092ac:	a904      	add	r1, sp, #16
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 f888 	bl	80093c4 <_printf_i>
 80092b4:	e7ec      	b.n	8009290 <_vfiprintf_r+0x1e4>
 80092b6:	bf00      	nop
 80092b8:	08009d64 	.word	0x08009d64
 80092bc:	08009dae 	.word	0x08009dae
 80092c0:	08009d84 	.word	0x08009d84
 80092c4:	08009d44 	.word	0x08009d44
 80092c8:	08009db4 	.word	0x08009db4
 80092cc:	08009db8 	.word	0x08009db8
 80092d0:	00000000 	.word	0x00000000
 80092d4:	08009087 	.word	0x08009087

080092d8 <_printf_common>:
 80092d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	4691      	mov	r9, r2
 80092de:	461f      	mov	r7, r3
 80092e0:	688a      	ldr	r2, [r1, #8]
 80092e2:	690b      	ldr	r3, [r1, #16]
 80092e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	bfb8      	it	lt
 80092ec:	4613      	movlt	r3, r2
 80092ee:	f8c9 3000 	str.w	r3, [r9]
 80092f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092f6:	4606      	mov	r6, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	b112      	cbz	r2, 8009302 <_printf_common+0x2a>
 80092fc:	3301      	adds	r3, #1
 80092fe:	f8c9 3000 	str.w	r3, [r9]
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	0699      	lsls	r1, r3, #26
 8009306:	bf42      	ittt	mi
 8009308:	f8d9 3000 	ldrmi.w	r3, [r9]
 800930c:	3302      	addmi	r3, #2
 800930e:	f8c9 3000 	strmi.w	r3, [r9]
 8009312:	6825      	ldr	r5, [r4, #0]
 8009314:	f015 0506 	ands.w	r5, r5, #6
 8009318:	d107      	bne.n	800932a <_printf_common+0x52>
 800931a:	f104 0a19 	add.w	sl, r4, #25
 800931e:	68e3      	ldr	r3, [r4, #12]
 8009320:	f8d9 2000 	ldr.w	r2, [r9]
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	42ab      	cmp	r3, r5
 8009328:	dc28      	bgt.n	800937c <_printf_common+0xa4>
 800932a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800932e:	6822      	ldr	r2, [r4, #0]
 8009330:	3300      	adds	r3, #0
 8009332:	bf18      	it	ne
 8009334:	2301      	movne	r3, #1
 8009336:	0692      	lsls	r2, r2, #26
 8009338:	d42d      	bmi.n	8009396 <_printf_common+0xbe>
 800933a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800933e:	4639      	mov	r1, r7
 8009340:	4630      	mov	r0, r6
 8009342:	47c0      	blx	r8
 8009344:	3001      	adds	r0, #1
 8009346:	d020      	beq.n	800938a <_printf_common+0xb2>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	68e5      	ldr	r5, [r4, #12]
 800934c:	f8d9 2000 	ldr.w	r2, [r9]
 8009350:	f003 0306 	and.w	r3, r3, #6
 8009354:	2b04      	cmp	r3, #4
 8009356:	bf08      	it	eq
 8009358:	1aad      	subeq	r5, r5, r2
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	6922      	ldr	r2, [r4, #16]
 800935e:	bf0c      	ite	eq
 8009360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009364:	2500      	movne	r5, #0
 8009366:	4293      	cmp	r3, r2
 8009368:	bfc4      	itt	gt
 800936a:	1a9b      	subgt	r3, r3, r2
 800936c:	18ed      	addgt	r5, r5, r3
 800936e:	f04f 0900 	mov.w	r9, #0
 8009372:	341a      	adds	r4, #26
 8009374:	454d      	cmp	r5, r9
 8009376:	d11a      	bne.n	80093ae <_printf_common+0xd6>
 8009378:	2000      	movs	r0, #0
 800937a:	e008      	b.n	800938e <_printf_common+0xb6>
 800937c:	2301      	movs	r3, #1
 800937e:	4652      	mov	r2, sl
 8009380:	4639      	mov	r1, r7
 8009382:	4630      	mov	r0, r6
 8009384:	47c0      	blx	r8
 8009386:	3001      	adds	r0, #1
 8009388:	d103      	bne.n	8009392 <_printf_common+0xba>
 800938a:	f04f 30ff 	mov.w	r0, #4294967295
 800938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009392:	3501      	adds	r5, #1
 8009394:	e7c3      	b.n	800931e <_printf_common+0x46>
 8009396:	18e1      	adds	r1, r4, r3
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	2030      	movs	r0, #48	; 0x30
 800939c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093a0:	4422      	add	r2, r4
 80093a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093aa:	3302      	adds	r3, #2
 80093ac:	e7c5      	b.n	800933a <_printf_common+0x62>
 80093ae:	2301      	movs	r3, #1
 80093b0:	4622      	mov	r2, r4
 80093b2:	4639      	mov	r1, r7
 80093b4:	4630      	mov	r0, r6
 80093b6:	47c0      	blx	r8
 80093b8:	3001      	adds	r0, #1
 80093ba:	d0e6      	beq.n	800938a <_printf_common+0xb2>
 80093bc:	f109 0901 	add.w	r9, r9, #1
 80093c0:	e7d8      	b.n	8009374 <_printf_common+0x9c>
	...

080093c4 <_printf_i>:
 80093c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80093cc:	460c      	mov	r4, r1
 80093ce:	7e09      	ldrb	r1, [r1, #24]
 80093d0:	b085      	sub	sp, #20
 80093d2:	296e      	cmp	r1, #110	; 0x6e
 80093d4:	4617      	mov	r7, r2
 80093d6:	4606      	mov	r6, r0
 80093d8:	4698      	mov	r8, r3
 80093da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093dc:	f000 80b3 	beq.w	8009546 <_printf_i+0x182>
 80093e0:	d822      	bhi.n	8009428 <_printf_i+0x64>
 80093e2:	2963      	cmp	r1, #99	; 0x63
 80093e4:	d036      	beq.n	8009454 <_printf_i+0x90>
 80093e6:	d80a      	bhi.n	80093fe <_printf_i+0x3a>
 80093e8:	2900      	cmp	r1, #0
 80093ea:	f000 80b9 	beq.w	8009560 <_printf_i+0x19c>
 80093ee:	2958      	cmp	r1, #88	; 0x58
 80093f0:	f000 8083 	beq.w	80094fa <_printf_i+0x136>
 80093f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80093fc:	e032      	b.n	8009464 <_printf_i+0xa0>
 80093fe:	2964      	cmp	r1, #100	; 0x64
 8009400:	d001      	beq.n	8009406 <_printf_i+0x42>
 8009402:	2969      	cmp	r1, #105	; 0x69
 8009404:	d1f6      	bne.n	80093f4 <_printf_i+0x30>
 8009406:	6820      	ldr	r0, [r4, #0]
 8009408:	6813      	ldr	r3, [r2, #0]
 800940a:	0605      	lsls	r5, r0, #24
 800940c:	f103 0104 	add.w	r1, r3, #4
 8009410:	d52a      	bpl.n	8009468 <_printf_i+0xa4>
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	da03      	bge.n	8009422 <_printf_i+0x5e>
 800941a:	222d      	movs	r2, #45	; 0x2d
 800941c:	425b      	negs	r3, r3
 800941e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009422:	486f      	ldr	r0, [pc, #444]	; (80095e0 <_printf_i+0x21c>)
 8009424:	220a      	movs	r2, #10
 8009426:	e039      	b.n	800949c <_printf_i+0xd8>
 8009428:	2973      	cmp	r1, #115	; 0x73
 800942a:	f000 809d 	beq.w	8009568 <_printf_i+0x1a4>
 800942e:	d808      	bhi.n	8009442 <_printf_i+0x7e>
 8009430:	296f      	cmp	r1, #111	; 0x6f
 8009432:	d020      	beq.n	8009476 <_printf_i+0xb2>
 8009434:	2970      	cmp	r1, #112	; 0x70
 8009436:	d1dd      	bne.n	80093f4 <_printf_i+0x30>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	f043 0320 	orr.w	r3, r3, #32
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	e003      	b.n	800944a <_printf_i+0x86>
 8009442:	2975      	cmp	r1, #117	; 0x75
 8009444:	d017      	beq.n	8009476 <_printf_i+0xb2>
 8009446:	2978      	cmp	r1, #120	; 0x78
 8009448:	d1d4      	bne.n	80093f4 <_printf_i+0x30>
 800944a:	2378      	movs	r3, #120	; 0x78
 800944c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009450:	4864      	ldr	r0, [pc, #400]	; (80095e4 <_printf_i+0x220>)
 8009452:	e055      	b.n	8009500 <_printf_i+0x13c>
 8009454:	6813      	ldr	r3, [r2, #0]
 8009456:	1d19      	adds	r1, r3, #4
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6011      	str	r1, [r2, #0]
 800945c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009464:	2301      	movs	r3, #1
 8009466:	e08c      	b.n	8009582 <_printf_i+0x1be>
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6011      	str	r1, [r2, #0]
 800946c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009470:	bf18      	it	ne
 8009472:	b21b      	sxthne	r3, r3
 8009474:	e7cf      	b.n	8009416 <_printf_i+0x52>
 8009476:	6813      	ldr	r3, [r2, #0]
 8009478:	6825      	ldr	r5, [r4, #0]
 800947a:	1d18      	adds	r0, r3, #4
 800947c:	6010      	str	r0, [r2, #0]
 800947e:	0628      	lsls	r0, r5, #24
 8009480:	d501      	bpl.n	8009486 <_printf_i+0xc2>
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	e002      	b.n	800948c <_printf_i+0xc8>
 8009486:	0668      	lsls	r0, r5, #25
 8009488:	d5fb      	bpl.n	8009482 <_printf_i+0xbe>
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	4854      	ldr	r0, [pc, #336]	; (80095e0 <_printf_i+0x21c>)
 800948e:	296f      	cmp	r1, #111	; 0x6f
 8009490:	bf14      	ite	ne
 8009492:	220a      	movne	r2, #10
 8009494:	2208      	moveq	r2, #8
 8009496:	2100      	movs	r1, #0
 8009498:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800949c:	6865      	ldr	r5, [r4, #4]
 800949e:	60a5      	str	r5, [r4, #8]
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	f2c0 8095 	blt.w	80095d0 <_printf_i+0x20c>
 80094a6:	6821      	ldr	r1, [r4, #0]
 80094a8:	f021 0104 	bic.w	r1, r1, #4
 80094ac:	6021      	str	r1, [r4, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d13d      	bne.n	800952e <_printf_i+0x16a>
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	f040 808e 	bne.w	80095d4 <_printf_i+0x210>
 80094b8:	4665      	mov	r5, ip
 80094ba:	2a08      	cmp	r2, #8
 80094bc:	d10b      	bne.n	80094d6 <_printf_i+0x112>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	07db      	lsls	r3, r3, #31
 80094c2:	d508      	bpl.n	80094d6 <_printf_i+0x112>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	6862      	ldr	r2, [r4, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	bfde      	ittt	le
 80094cc:	2330      	movle	r3, #48	; 0x30
 80094ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094d6:	ebac 0305 	sub.w	r3, ip, r5
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	f8cd 8000 	str.w	r8, [sp]
 80094e0:	463b      	mov	r3, r7
 80094e2:	aa03      	add	r2, sp, #12
 80094e4:	4621      	mov	r1, r4
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7ff fef6 	bl	80092d8 <_printf_common>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d14d      	bne.n	800958c <_printf_i+0x1c8>
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	b005      	add	sp, #20
 80094f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094fa:	4839      	ldr	r0, [pc, #228]	; (80095e0 <_printf_i+0x21c>)
 80094fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	6821      	ldr	r1, [r4, #0]
 8009504:	1d1d      	adds	r5, r3, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6015      	str	r5, [r2, #0]
 800950a:	060a      	lsls	r2, r1, #24
 800950c:	d50b      	bpl.n	8009526 <_printf_i+0x162>
 800950e:	07ca      	lsls	r2, r1, #31
 8009510:	bf44      	itt	mi
 8009512:	f041 0120 	orrmi.w	r1, r1, #32
 8009516:	6021      	strmi	r1, [r4, #0]
 8009518:	b91b      	cbnz	r3, 8009522 <_printf_i+0x15e>
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	f022 0220 	bic.w	r2, r2, #32
 8009520:	6022      	str	r2, [r4, #0]
 8009522:	2210      	movs	r2, #16
 8009524:	e7b7      	b.n	8009496 <_printf_i+0xd2>
 8009526:	064d      	lsls	r5, r1, #25
 8009528:	bf48      	it	mi
 800952a:	b29b      	uxthmi	r3, r3
 800952c:	e7ef      	b.n	800950e <_printf_i+0x14a>
 800952e:	4665      	mov	r5, ip
 8009530:	fbb3 f1f2 	udiv	r1, r3, r2
 8009534:	fb02 3311 	mls	r3, r2, r1, r3
 8009538:	5cc3      	ldrb	r3, [r0, r3]
 800953a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800953e:	460b      	mov	r3, r1
 8009540:	2900      	cmp	r1, #0
 8009542:	d1f5      	bne.n	8009530 <_printf_i+0x16c>
 8009544:	e7b9      	b.n	80094ba <_printf_i+0xf6>
 8009546:	6813      	ldr	r3, [r2, #0]
 8009548:	6825      	ldr	r5, [r4, #0]
 800954a:	6961      	ldr	r1, [r4, #20]
 800954c:	1d18      	adds	r0, r3, #4
 800954e:	6010      	str	r0, [r2, #0]
 8009550:	0628      	lsls	r0, r5, #24
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	d501      	bpl.n	800955a <_printf_i+0x196>
 8009556:	6019      	str	r1, [r3, #0]
 8009558:	e002      	b.n	8009560 <_printf_i+0x19c>
 800955a:	066a      	lsls	r2, r5, #25
 800955c:	d5fb      	bpl.n	8009556 <_printf_i+0x192>
 800955e:	8019      	strh	r1, [r3, #0]
 8009560:	2300      	movs	r3, #0
 8009562:	6123      	str	r3, [r4, #16]
 8009564:	4665      	mov	r5, ip
 8009566:	e7b9      	b.n	80094dc <_printf_i+0x118>
 8009568:	6813      	ldr	r3, [r2, #0]
 800956a:	1d19      	adds	r1, r3, #4
 800956c:	6011      	str	r1, [r2, #0]
 800956e:	681d      	ldr	r5, [r3, #0]
 8009570:	6862      	ldr	r2, [r4, #4]
 8009572:	2100      	movs	r1, #0
 8009574:	4628      	mov	r0, r5
 8009576:	f7f6 fe33 	bl	80001e0 <memchr>
 800957a:	b108      	cbz	r0, 8009580 <_printf_i+0x1bc>
 800957c:	1b40      	subs	r0, r0, r5
 800957e:	6060      	str	r0, [r4, #4]
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	2300      	movs	r3, #0
 8009586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800958a:	e7a7      	b.n	80094dc <_printf_i+0x118>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	462a      	mov	r2, r5
 8009590:	4639      	mov	r1, r7
 8009592:	4630      	mov	r0, r6
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d0aa      	beq.n	80094f0 <_printf_i+0x12c>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	079b      	lsls	r3, r3, #30
 800959e:	d413      	bmi.n	80095c8 <_printf_i+0x204>
 80095a0:	68e0      	ldr	r0, [r4, #12]
 80095a2:	9b03      	ldr	r3, [sp, #12]
 80095a4:	4298      	cmp	r0, r3
 80095a6:	bfb8      	it	lt
 80095a8:	4618      	movlt	r0, r3
 80095aa:	e7a3      	b.n	80094f4 <_printf_i+0x130>
 80095ac:	2301      	movs	r3, #1
 80095ae:	464a      	mov	r2, r9
 80095b0:	4639      	mov	r1, r7
 80095b2:	4630      	mov	r0, r6
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d09a      	beq.n	80094f0 <_printf_i+0x12c>
 80095ba:	3501      	adds	r5, #1
 80095bc:	68e3      	ldr	r3, [r4, #12]
 80095be:	9a03      	ldr	r2, [sp, #12]
 80095c0:	1a9b      	subs	r3, r3, r2
 80095c2:	42ab      	cmp	r3, r5
 80095c4:	dcf2      	bgt.n	80095ac <_printf_i+0x1e8>
 80095c6:	e7eb      	b.n	80095a0 <_printf_i+0x1dc>
 80095c8:	2500      	movs	r5, #0
 80095ca:	f104 0919 	add.w	r9, r4, #25
 80095ce:	e7f5      	b.n	80095bc <_printf_i+0x1f8>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1ac      	bne.n	800952e <_printf_i+0x16a>
 80095d4:	7803      	ldrb	r3, [r0, #0]
 80095d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095de:	e76c      	b.n	80094ba <_printf_i+0xf6>
 80095e0:	08009dbf 	.word	0x08009dbf
 80095e4:	08009dd0 	.word	0x08009dd0

080095e8 <_sbrk_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4c06      	ldr	r4, [pc, #24]	; (8009604 <_sbrk_r+0x1c>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4605      	mov	r5, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	f7fc f9be 	bl	8005974 <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_sbrk_r+0x1a>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_sbrk_r+0x1a>
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	20000bb0 	.word	0x20000bb0

08009608 <__sread>:
 8009608:	b510      	push	{r4, lr}
 800960a:	460c      	mov	r4, r1
 800960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009610:	f000 faee 	bl	8009bf0 <_read_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	bfab      	itete	ge
 8009618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800961a:	89a3      	ldrhlt	r3, [r4, #12]
 800961c:	181b      	addge	r3, r3, r0
 800961e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009622:	bfac      	ite	ge
 8009624:	6563      	strge	r3, [r4, #84]	; 0x54
 8009626:	81a3      	strhlt	r3, [r4, #12]
 8009628:	bd10      	pop	{r4, pc}

0800962a <__swrite>:
 800962a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962e:	461f      	mov	r7, r3
 8009630:	898b      	ldrh	r3, [r1, #12]
 8009632:	05db      	lsls	r3, r3, #23
 8009634:	4605      	mov	r5, r0
 8009636:	460c      	mov	r4, r1
 8009638:	4616      	mov	r6, r2
 800963a:	d505      	bpl.n	8009648 <__swrite+0x1e>
 800963c:	2302      	movs	r3, #2
 800963e:	2200      	movs	r2, #0
 8009640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009644:	f000 f9c4 	bl	80099d0 <_lseek_r>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800964e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	4632      	mov	r2, r6
 8009656:	463b      	mov	r3, r7
 8009658:	4628      	mov	r0, r5
 800965a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800965e:	f000 b877 	b.w	8009750 <_write_r>

08009662 <__sseek>:
 8009662:	b510      	push	{r4, lr}
 8009664:	460c      	mov	r4, r1
 8009666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966a:	f000 f9b1 	bl	80099d0 <_lseek_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	bf15      	itete	ne
 8009674:	6560      	strne	r0, [r4, #84]	; 0x54
 8009676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800967a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800967e:	81a3      	strheq	r3, [r4, #12]
 8009680:	bf18      	it	ne
 8009682:	81a3      	strhne	r3, [r4, #12]
 8009684:	bd10      	pop	{r4, pc}

08009686 <__sclose>:
 8009686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968a:	f000 b8e1 	b.w	8009850 <_close_r>
	...

08009690 <__swbuf_r>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	460e      	mov	r6, r1
 8009694:	4614      	mov	r4, r2
 8009696:	4605      	mov	r5, r0
 8009698:	b118      	cbz	r0, 80096a2 <__swbuf_r+0x12>
 800969a:	6983      	ldr	r3, [r0, #24]
 800969c:	b90b      	cbnz	r3, 80096a2 <__swbuf_r+0x12>
 800969e:	f7ff fa8f 	bl	8008bc0 <__sinit>
 80096a2:	4b21      	ldr	r3, [pc, #132]	; (8009728 <__swbuf_r+0x98>)
 80096a4:	429c      	cmp	r4, r3
 80096a6:	d12a      	bne.n	80096fe <__swbuf_r+0x6e>
 80096a8:	686c      	ldr	r4, [r5, #4]
 80096aa:	69a3      	ldr	r3, [r4, #24]
 80096ac:	60a3      	str	r3, [r4, #8]
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	071a      	lsls	r2, r3, #28
 80096b2:	d52e      	bpl.n	8009712 <__swbuf_r+0x82>
 80096b4:	6923      	ldr	r3, [r4, #16]
 80096b6:	b363      	cbz	r3, 8009712 <__swbuf_r+0x82>
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	6820      	ldr	r0, [r4, #0]
 80096bc:	1ac0      	subs	r0, r0, r3
 80096be:	6963      	ldr	r3, [r4, #20]
 80096c0:	b2f6      	uxtb	r6, r6
 80096c2:	4283      	cmp	r3, r0
 80096c4:	4637      	mov	r7, r6
 80096c6:	dc04      	bgt.n	80096d2 <__swbuf_r+0x42>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f956 	bl	800997c <_fflush_r>
 80096d0:	bb28      	cbnz	r0, 800971e <__swbuf_r+0x8e>
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	60a3      	str	r3, [r4, #8]
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	6022      	str	r2, [r4, #0]
 80096de:	701e      	strb	r6, [r3, #0]
 80096e0:	6963      	ldr	r3, [r4, #20]
 80096e2:	3001      	adds	r0, #1
 80096e4:	4283      	cmp	r3, r0
 80096e6:	d004      	beq.n	80096f2 <__swbuf_r+0x62>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	07db      	lsls	r3, r3, #31
 80096ec:	d519      	bpl.n	8009722 <__swbuf_r+0x92>
 80096ee:	2e0a      	cmp	r6, #10
 80096f0:	d117      	bne.n	8009722 <__swbuf_r+0x92>
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 f941 	bl	800997c <_fflush_r>
 80096fa:	b190      	cbz	r0, 8009722 <__swbuf_r+0x92>
 80096fc:	e00f      	b.n	800971e <__swbuf_r+0x8e>
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <__swbuf_r+0x9c>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d101      	bne.n	8009708 <__swbuf_r+0x78>
 8009704:	68ac      	ldr	r4, [r5, #8]
 8009706:	e7d0      	b.n	80096aa <__swbuf_r+0x1a>
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <__swbuf_r+0xa0>)
 800970a:	429c      	cmp	r4, r3
 800970c:	bf08      	it	eq
 800970e:	68ec      	ldreq	r4, [r5, #12]
 8009710:	e7cb      	b.n	80096aa <__swbuf_r+0x1a>
 8009712:	4621      	mov	r1, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f000 f82d 	bl	8009774 <__swsetup_r>
 800971a:	2800      	cmp	r0, #0
 800971c:	d0cc      	beq.n	80096b8 <__swbuf_r+0x28>
 800971e:	f04f 37ff 	mov.w	r7, #4294967295
 8009722:	4638      	mov	r0, r7
 8009724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009726:	bf00      	nop
 8009728:	08009d64 	.word	0x08009d64
 800972c:	08009d84 	.word	0x08009d84
 8009730:	08009d44 	.word	0x08009d44

08009734 <__ascii_wctomb>:
 8009734:	b149      	cbz	r1, 800974a <__ascii_wctomb+0x16>
 8009736:	2aff      	cmp	r2, #255	; 0xff
 8009738:	bf85      	ittet	hi
 800973a:	238a      	movhi	r3, #138	; 0x8a
 800973c:	6003      	strhi	r3, [r0, #0]
 800973e:	700a      	strbls	r2, [r1, #0]
 8009740:	f04f 30ff 	movhi.w	r0, #4294967295
 8009744:	bf98      	it	ls
 8009746:	2001      	movls	r0, #1
 8009748:	4770      	bx	lr
 800974a:	4608      	mov	r0, r1
 800974c:	4770      	bx	lr
	...

08009750 <_write_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4c07      	ldr	r4, [pc, #28]	; (8009770 <_write_r+0x20>)
 8009754:	4605      	mov	r5, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	2200      	movs	r2, #0
 800975c:	6022      	str	r2, [r4, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7fc f8b7 	bl	80058d2 <_write>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_write_r+0x1e>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	b103      	cbz	r3, 800976e <_write_r+0x1e>
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20000bb0 	.word	0x20000bb0

08009774 <__swsetup_r>:
 8009774:	4b32      	ldr	r3, [pc, #200]	; (8009840 <__swsetup_r+0xcc>)
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	681d      	ldr	r5, [r3, #0]
 800977a:	4606      	mov	r6, r0
 800977c:	460c      	mov	r4, r1
 800977e:	b125      	cbz	r5, 800978a <__swsetup_r+0x16>
 8009780:	69ab      	ldr	r3, [r5, #24]
 8009782:	b913      	cbnz	r3, 800978a <__swsetup_r+0x16>
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff fa1b 	bl	8008bc0 <__sinit>
 800978a:	4b2e      	ldr	r3, [pc, #184]	; (8009844 <__swsetup_r+0xd0>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d10f      	bne.n	80097b0 <__swsetup_r+0x3c>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	b29a      	uxth	r2, r3
 8009798:	0715      	lsls	r5, r2, #28
 800979a:	d42c      	bmi.n	80097f6 <__swsetup_r+0x82>
 800979c:	06d0      	lsls	r0, r2, #27
 800979e:	d411      	bmi.n	80097c4 <__swsetup_r+0x50>
 80097a0:	2209      	movs	r2, #9
 80097a2:	6032      	str	r2, [r6, #0]
 80097a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	f04f 30ff 	mov.w	r0, #4294967295
 80097ae:	e03e      	b.n	800982e <__swsetup_r+0xba>
 80097b0:	4b25      	ldr	r3, [pc, #148]	; (8009848 <__swsetup_r+0xd4>)
 80097b2:	429c      	cmp	r4, r3
 80097b4:	d101      	bne.n	80097ba <__swsetup_r+0x46>
 80097b6:	68ac      	ldr	r4, [r5, #8]
 80097b8:	e7eb      	b.n	8009792 <__swsetup_r+0x1e>
 80097ba:	4b24      	ldr	r3, [pc, #144]	; (800984c <__swsetup_r+0xd8>)
 80097bc:	429c      	cmp	r4, r3
 80097be:	bf08      	it	eq
 80097c0:	68ec      	ldreq	r4, [r5, #12]
 80097c2:	e7e6      	b.n	8009792 <__swsetup_r+0x1e>
 80097c4:	0751      	lsls	r1, r2, #29
 80097c6:	d512      	bpl.n	80097ee <__swsetup_r+0x7a>
 80097c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ca:	b141      	cbz	r1, 80097de <__swsetup_r+0x6a>
 80097cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d0:	4299      	cmp	r1, r3
 80097d2:	d002      	beq.n	80097da <__swsetup_r+0x66>
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 f997 	bl	8009b08 <_free_r>
 80097da:	2300      	movs	r3, #0
 80097dc:	6363      	str	r3, [r4, #52]	; 0x34
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	2300      	movs	r3, #0
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f043 0308 	orr.w	r3, r3, #8
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	b94b      	cbnz	r3, 800980e <__swsetup_r+0x9a>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009804:	d003      	beq.n	800980e <__swsetup_r+0x9a>
 8009806:	4621      	mov	r1, r4
 8009808:	4630      	mov	r0, r6
 800980a:	f000 f917 	bl	8009a3c <__smakebuf_r>
 800980e:	89a2      	ldrh	r2, [r4, #12]
 8009810:	f012 0301 	ands.w	r3, r2, #1
 8009814:	d00c      	beq.n	8009830 <__swsetup_r+0xbc>
 8009816:	2300      	movs	r3, #0
 8009818:	60a3      	str	r3, [r4, #8]
 800981a:	6963      	ldr	r3, [r4, #20]
 800981c:	425b      	negs	r3, r3
 800981e:	61a3      	str	r3, [r4, #24]
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	b953      	cbnz	r3, 800983a <__swsetup_r+0xc6>
 8009824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009828:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800982c:	d1ba      	bne.n	80097a4 <__swsetup_r+0x30>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	0792      	lsls	r2, r2, #30
 8009832:	bf58      	it	pl
 8009834:	6963      	ldrpl	r3, [r4, #20]
 8009836:	60a3      	str	r3, [r4, #8]
 8009838:	e7f2      	b.n	8009820 <__swsetup_r+0xac>
 800983a:	2000      	movs	r0, #0
 800983c:	e7f7      	b.n	800982e <__swsetup_r+0xba>
 800983e:	bf00      	nop
 8009840:	20000018 	.word	0x20000018
 8009844:	08009d64 	.word	0x08009d64
 8009848:	08009d84 	.word	0x08009d84
 800984c:	08009d44 	.word	0x08009d44

08009850 <_close_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4c06      	ldr	r4, [pc, #24]	; (800986c <_close_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4605      	mov	r5, r0
 8009858:	4608      	mov	r0, r1
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	f7fc f855 	bl	800590a <_close>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_close_r+0x1a>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	b103      	cbz	r3, 800986a <_close_r+0x1a>
 8009868:	602b      	str	r3, [r5, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20000bb0 	.word	0x20000bb0

08009870 <__sflush_r>:
 8009870:	898a      	ldrh	r2, [r1, #12]
 8009872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	0710      	lsls	r0, r2, #28
 800987a:	460c      	mov	r4, r1
 800987c:	d458      	bmi.n	8009930 <__sflush_r+0xc0>
 800987e:	684b      	ldr	r3, [r1, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	dc05      	bgt.n	8009890 <__sflush_r+0x20>
 8009884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	dc02      	bgt.n	8009890 <__sflush_r+0x20>
 800988a:	2000      	movs	r0, #0
 800988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009892:	2e00      	cmp	r6, #0
 8009894:	d0f9      	beq.n	800988a <__sflush_r+0x1a>
 8009896:	2300      	movs	r3, #0
 8009898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800989c:	682f      	ldr	r7, [r5, #0]
 800989e:	6a21      	ldr	r1, [r4, #32]
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	d032      	beq.n	800990a <__sflush_r+0x9a>
 80098a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	075a      	lsls	r2, r3, #29
 80098aa:	d505      	bpl.n	80098b8 <__sflush_r+0x48>
 80098ac:	6863      	ldr	r3, [r4, #4]
 80098ae:	1ac0      	subs	r0, r0, r3
 80098b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b2:	b10b      	cbz	r3, 80098b8 <__sflush_r+0x48>
 80098b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098b6:	1ac0      	subs	r0, r0, r3
 80098b8:	2300      	movs	r3, #0
 80098ba:	4602      	mov	r2, r0
 80098bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098be:	6a21      	ldr	r1, [r4, #32]
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b0      	blx	r6
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	d106      	bne.n	80098d8 <__sflush_r+0x68>
 80098ca:	6829      	ldr	r1, [r5, #0]
 80098cc:	291d      	cmp	r1, #29
 80098ce:	d848      	bhi.n	8009962 <__sflush_r+0xf2>
 80098d0:	4a29      	ldr	r2, [pc, #164]	; (8009978 <__sflush_r+0x108>)
 80098d2:	40ca      	lsrs	r2, r1
 80098d4:	07d6      	lsls	r6, r2, #31
 80098d6:	d544      	bpl.n	8009962 <__sflush_r+0xf2>
 80098d8:	2200      	movs	r2, #0
 80098da:	6062      	str	r2, [r4, #4]
 80098dc:	04d9      	lsls	r1, r3, #19
 80098de:	6922      	ldr	r2, [r4, #16]
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	d504      	bpl.n	80098ee <__sflush_r+0x7e>
 80098e4:	1c42      	adds	r2, r0, #1
 80098e6:	d101      	bne.n	80098ec <__sflush_r+0x7c>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b903      	cbnz	r3, 80098ee <__sflush_r+0x7e>
 80098ec:	6560      	str	r0, [r4, #84]	; 0x54
 80098ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f0:	602f      	str	r7, [r5, #0]
 80098f2:	2900      	cmp	r1, #0
 80098f4:	d0c9      	beq.n	800988a <__sflush_r+0x1a>
 80098f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098fa:	4299      	cmp	r1, r3
 80098fc:	d002      	beq.n	8009904 <__sflush_r+0x94>
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 f902 	bl	8009b08 <_free_r>
 8009904:	2000      	movs	r0, #0
 8009906:	6360      	str	r0, [r4, #52]	; 0x34
 8009908:	e7c0      	b.n	800988c <__sflush_r+0x1c>
 800990a:	2301      	movs	r3, #1
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	1c41      	adds	r1, r0, #1
 8009912:	d1c8      	bne.n	80098a6 <__sflush_r+0x36>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c5      	beq.n	80098a6 <__sflush_r+0x36>
 800991a:	2b1d      	cmp	r3, #29
 800991c:	d001      	beq.n	8009922 <__sflush_r+0xb2>
 800991e:	2b16      	cmp	r3, #22
 8009920:	d101      	bne.n	8009926 <__sflush_r+0xb6>
 8009922:	602f      	str	r7, [r5, #0]
 8009924:	e7b1      	b.n	800988a <__sflush_r+0x1a>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7ad      	b.n	800988c <__sflush_r+0x1c>
 8009930:	690f      	ldr	r7, [r1, #16]
 8009932:	2f00      	cmp	r7, #0
 8009934:	d0a9      	beq.n	800988a <__sflush_r+0x1a>
 8009936:	0793      	lsls	r3, r2, #30
 8009938:	680e      	ldr	r6, [r1, #0]
 800993a:	bf08      	it	eq
 800993c:	694b      	ldreq	r3, [r1, #20]
 800993e:	600f      	str	r7, [r1, #0]
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	eba6 0807 	sub.w	r8, r6, r7
 8009948:	608b      	str	r3, [r1, #8]
 800994a:	f1b8 0f00 	cmp.w	r8, #0
 800994e:	dd9c      	ble.n	800988a <__sflush_r+0x1a>
 8009950:	4643      	mov	r3, r8
 8009952:	463a      	mov	r2, r7
 8009954:	6a21      	ldr	r1, [r4, #32]
 8009956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009958:	4628      	mov	r0, r5
 800995a:	47b0      	blx	r6
 800995c:	2800      	cmp	r0, #0
 800995e:	dc06      	bgt.n	800996e <__sflush_r+0xfe>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	e78e      	b.n	800988c <__sflush_r+0x1c>
 800996e:	4407      	add	r7, r0
 8009970:	eba8 0800 	sub.w	r8, r8, r0
 8009974:	e7e9      	b.n	800994a <__sflush_r+0xda>
 8009976:	bf00      	nop
 8009978:	20400001 	.word	0x20400001

0800997c <_fflush_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	690b      	ldr	r3, [r1, #16]
 8009980:	4605      	mov	r5, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b1db      	cbz	r3, 80099be <_fflush_r+0x42>
 8009986:	b118      	cbz	r0, 8009990 <_fflush_r+0x14>
 8009988:	6983      	ldr	r3, [r0, #24]
 800998a:	b90b      	cbnz	r3, 8009990 <_fflush_r+0x14>
 800998c:	f7ff f918 	bl	8008bc0 <__sinit>
 8009990:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <_fflush_r+0x48>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d109      	bne.n	80099aa <_fflush_r+0x2e>
 8009996:	686c      	ldr	r4, [r5, #4]
 8009998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999c:	b17b      	cbz	r3, 80099be <_fflush_r+0x42>
 800999e:	4621      	mov	r1, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a6:	f7ff bf63 	b.w	8009870 <__sflush_r>
 80099aa:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <_fflush_r+0x4c>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d101      	bne.n	80099b4 <_fflush_r+0x38>
 80099b0:	68ac      	ldr	r4, [r5, #8]
 80099b2:	e7f1      	b.n	8009998 <_fflush_r+0x1c>
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <_fflush_r+0x50>)
 80099b6:	429c      	cmp	r4, r3
 80099b8:	bf08      	it	eq
 80099ba:	68ec      	ldreq	r4, [r5, #12]
 80099bc:	e7ec      	b.n	8009998 <_fflush_r+0x1c>
 80099be:	2000      	movs	r0, #0
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	bf00      	nop
 80099c4:	08009d64 	.word	0x08009d64
 80099c8:	08009d84 	.word	0x08009d84
 80099cc:	08009d44 	.word	0x08009d44

080099d0 <_lseek_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4c07      	ldr	r4, [pc, #28]	; (80099f0 <_lseek_r+0x20>)
 80099d4:	4605      	mov	r5, r0
 80099d6:	4608      	mov	r0, r1
 80099d8:	4611      	mov	r1, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	f7fb ffba 	bl	8005958 <_lseek>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d102      	bne.n	80099ee <_lseek_r+0x1e>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	b103      	cbz	r3, 80099ee <_lseek_r+0x1e>
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	20000bb0 	.word	0x20000bb0

080099f4 <__swhatbuf_r>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	460e      	mov	r6, r1
 80099f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fc:	2900      	cmp	r1, #0
 80099fe:	b096      	sub	sp, #88	; 0x58
 8009a00:	4614      	mov	r4, r2
 8009a02:	461d      	mov	r5, r3
 8009a04:	da07      	bge.n	8009a16 <__swhatbuf_r+0x22>
 8009a06:	2300      	movs	r3, #0
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	89b3      	ldrh	r3, [r6, #12]
 8009a0c:	061a      	lsls	r2, r3, #24
 8009a0e:	d410      	bmi.n	8009a32 <__swhatbuf_r+0x3e>
 8009a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a14:	e00e      	b.n	8009a34 <__swhatbuf_r+0x40>
 8009a16:	466a      	mov	r2, sp
 8009a18:	f000 f8fc 	bl	8009c14 <_fstat_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	dbf2      	blt.n	8009a06 <__swhatbuf_r+0x12>
 8009a20:	9a01      	ldr	r2, [sp, #4]
 8009a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a2a:	425a      	negs	r2, r3
 8009a2c:	415a      	adcs	r2, r3
 8009a2e:	602a      	str	r2, [r5, #0]
 8009a30:	e7ee      	b.n	8009a10 <__swhatbuf_r+0x1c>
 8009a32:	2340      	movs	r3, #64	; 0x40
 8009a34:	2000      	movs	r0, #0
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	b016      	add	sp, #88	; 0x58
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}

08009a3c <__smakebuf_r>:
 8009a3c:	898b      	ldrh	r3, [r1, #12]
 8009a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a40:	079d      	lsls	r5, r3, #30
 8009a42:	4606      	mov	r6, r0
 8009a44:	460c      	mov	r4, r1
 8009a46:	d507      	bpl.n	8009a58 <__smakebuf_r+0x1c>
 8009a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	2301      	movs	r3, #1
 8009a52:	6163      	str	r3, [r4, #20]
 8009a54:	b002      	add	sp, #8
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	ab01      	add	r3, sp, #4
 8009a5a:	466a      	mov	r2, sp
 8009a5c:	f7ff ffca 	bl	80099f4 <__swhatbuf_r>
 8009a60:	9900      	ldr	r1, [sp, #0]
 8009a62:	4605      	mov	r5, r0
 8009a64:	4630      	mov	r0, r6
 8009a66:	f7ff f94b 	bl	8008d00 <_malloc_r>
 8009a6a:	b948      	cbnz	r0, 8009a80 <__smakebuf_r+0x44>
 8009a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a70:	059a      	lsls	r2, r3, #22
 8009a72:	d4ef      	bmi.n	8009a54 <__smakebuf_r+0x18>
 8009a74:	f023 0303 	bic.w	r3, r3, #3
 8009a78:	f043 0302 	orr.w	r3, r3, #2
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	e7e3      	b.n	8009a48 <__smakebuf_r+0xc>
 8009a80:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <__smakebuf_r+0x7c>)
 8009a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	6020      	str	r0, [r4, #0]
 8009a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	6163      	str	r3, [r4, #20]
 8009a92:	9b01      	ldr	r3, [sp, #4]
 8009a94:	6120      	str	r0, [r4, #16]
 8009a96:	b15b      	cbz	r3, 8009ab0 <__smakebuf_r+0x74>
 8009a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 f8cb 	bl	8009c38 <_isatty_r>
 8009aa2:	b128      	cbz	r0, 8009ab0 <__smakebuf_r+0x74>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f023 0303 	bic.w	r3, r3, #3
 8009aaa:	f043 0301 	orr.w	r3, r3, #1
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	431d      	orrs	r5, r3
 8009ab4:	81a5      	strh	r5, [r4, #12]
 8009ab6:	e7cd      	b.n	8009a54 <__smakebuf_r+0x18>
 8009ab8:	08008b89 	.word	0x08008b89

08009abc <memcpy>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	1e43      	subs	r3, r0, #1
 8009ac0:	440a      	add	r2, r1
 8009ac2:	4291      	cmp	r1, r2
 8009ac4:	d100      	bne.n	8009ac8 <memcpy+0xc>
 8009ac6:	bd10      	pop	{r4, pc}
 8009ac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ad0:	e7f7      	b.n	8009ac2 <memcpy+0x6>

08009ad2 <memmove>:
 8009ad2:	4288      	cmp	r0, r1
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	eb01 0302 	add.w	r3, r1, r2
 8009ada:	d807      	bhi.n	8009aec <memmove+0x1a>
 8009adc:	1e42      	subs	r2, r0, #1
 8009ade:	4299      	cmp	r1, r3
 8009ae0:	d00a      	beq.n	8009af8 <memmove+0x26>
 8009ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ae6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009aea:	e7f8      	b.n	8009ade <memmove+0xc>
 8009aec:	4283      	cmp	r3, r0
 8009aee:	d9f5      	bls.n	8009adc <memmove+0xa>
 8009af0:	1881      	adds	r1, r0, r2
 8009af2:	1ad2      	subs	r2, r2, r3
 8009af4:	42d3      	cmn	r3, r2
 8009af6:	d100      	bne.n	8009afa <memmove+0x28>
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009afe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009b02:	e7f7      	b.n	8009af4 <memmove+0x22>

08009b04 <__malloc_lock>:
 8009b04:	4770      	bx	lr

08009b06 <__malloc_unlock>:
 8009b06:	4770      	bx	lr

08009b08 <_free_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d045      	beq.n	8009b9c <_free_r+0x94>
 8009b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b14:	1f0c      	subs	r4, r1, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	18e4      	addlt	r4, r4, r3
 8009b1c:	f7ff fff2 	bl	8009b04 <__malloc_lock>
 8009b20:	4a1f      	ldr	r2, [pc, #124]	; (8009ba0 <_free_r+0x98>)
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	4610      	mov	r0, r2
 8009b26:	b933      	cbnz	r3, 8009b36 <_free_r+0x2e>
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	6014      	str	r4, [r2, #0]
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b32:	f7ff bfe8 	b.w	8009b06 <__malloc_unlock>
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	d90c      	bls.n	8009b54 <_free_r+0x4c>
 8009b3a:	6821      	ldr	r1, [r4, #0]
 8009b3c:	1862      	adds	r2, r4, r1
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	bf04      	itt	eq
 8009b42:	681a      	ldreq	r2, [r3, #0]
 8009b44:	685b      	ldreq	r3, [r3, #4]
 8009b46:	6063      	str	r3, [r4, #4]
 8009b48:	bf04      	itt	eq
 8009b4a:	1852      	addeq	r2, r2, r1
 8009b4c:	6022      	streq	r2, [r4, #0]
 8009b4e:	6004      	str	r4, [r0, #0]
 8009b50:	e7ec      	b.n	8009b2c <_free_r+0x24>
 8009b52:	4613      	mov	r3, r2
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	b10a      	cbz	r2, 8009b5c <_free_r+0x54>
 8009b58:	42a2      	cmp	r2, r4
 8009b5a:	d9fa      	bls.n	8009b52 <_free_r+0x4a>
 8009b5c:	6819      	ldr	r1, [r3, #0]
 8009b5e:	1858      	adds	r0, r3, r1
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	d10b      	bne.n	8009b7c <_free_r+0x74>
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	4401      	add	r1, r0
 8009b68:	1858      	adds	r0, r3, r1
 8009b6a:	4282      	cmp	r2, r0
 8009b6c:	6019      	str	r1, [r3, #0]
 8009b6e:	d1dd      	bne.n	8009b2c <_free_r+0x24>
 8009b70:	6810      	ldr	r0, [r2, #0]
 8009b72:	6852      	ldr	r2, [r2, #4]
 8009b74:	605a      	str	r2, [r3, #4]
 8009b76:	4401      	add	r1, r0
 8009b78:	6019      	str	r1, [r3, #0]
 8009b7a:	e7d7      	b.n	8009b2c <_free_r+0x24>
 8009b7c:	d902      	bls.n	8009b84 <_free_r+0x7c>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	e7d3      	b.n	8009b2c <_free_r+0x24>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	1821      	adds	r1, r4, r0
 8009b88:	428a      	cmp	r2, r1
 8009b8a:	bf04      	itt	eq
 8009b8c:	6811      	ldreq	r1, [r2, #0]
 8009b8e:	6852      	ldreq	r2, [r2, #4]
 8009b90:	6062      	str	r2, [r4, #4]
 8009b92:	bf04      	itt	eq
 8009b94:	1809      	addeq	r1, r1, r0
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	605c      	str	r4, [r3, #4]
 8009b9a:	e7c7      	b.n	8009b2c <_free_r+0x24>
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200004c0 	.word	0x200004c0

08009ba4 <_realloc_r>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	4614      	mov	r4, r2
 8009baa:	460e      	mov	r6, r1
 8009bac:	b921      	cbnz	r1, 8009bb8 <_realloc_r+0x14>
 8009bae:	4611      	mov	r1, r2
 8009bb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bb4:	f7ff b8a4 	b.w	8008d00 <_malloc_r>
 8009bb8:	b922      	cbnz	r2, 8009bc4 <_realloc_r+0x20>
 8009bba:	f7ff ffa5 	bl	8009b08 <_free_r>
 8009bbe:	4625      	mov	r5, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc4:	f000 f848 	bl	8009c58 <_malloc_usable_size_r>
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d20f      	bcs.n	8009bec <_realloc_r+0x48>
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f7ff f896 	bl	8008d00 <_malloc_r>
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d0f2      	beq.n	8009bc0 <_realloc_r+0x1c>
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4622      	mov	r2, r4
 8009bde:	f7ff ff6d 	bl	8009abc <memcpy>
 8009be2:	4631      	mov	r1, r6
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff ff8f 	bl	8009b08 <_free_r>
 8009bea:	e7e9      	b.n	8009bc0 <_realloc_r+0x1c>
 8009bec:	4635      	mov	r5, r6
 8009bee:	e7e7      	b.n	8009bc0 <_realloc_r+0x1c>

08009bf0 <_read_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4c07      	ldr	r4, [pc, #28]	; (8009c10 <_read_r+0x20>)
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	6022      	str	r2, [r4, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7fb fe4a 	bl	8005898 <_read>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_read_r+0x1e>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_read_r+0x1e>
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20000bb0 	.word	0x20000bb0

08009c14 <_fstat_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4c07      	ldr	r4, [pc, #28]	; (8009c34 <_fstat_r+0x20>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	f7fb fe7e 	bl	8005922 <_fstat>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	d102      	bne.n	8009c30 <_fstat_r+0x1c>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	b103      	cbz	r3, 8009c30 <_fstat_r+0x1c>
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	bf00      	nop
 8009c34:	20000bb0 	.word	0x20000bb0

08009c38 <_isatty_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4c06      	ldr	r4, [pc, #24]	; (8009c54 <_isatty_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4605      	mov	r5, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	f7fb fe7d 	bl	8005942 <_isatty>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_isatty_r+0x1a>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_isatty_r+0x1a>
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20000bb0 	.word	0x20000bb0

08009c58 <_malloc_usable_size_r>:
 8009c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5c:	1f18      	subs	r0, r3, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfbc      	itt	lt
 8009c62:	580b      	ldrlt	r3, [r1, r0]
 8009c64:	18c0      	addlt	r0, r0, r3
 8009c66:	4770      	bx	lr

08009c68 <_init>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	bf00      	nop
 8009c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6e:	bc08      	pop	{r3}
 8009c70:	469e      	mov	lr, r3
 8009c72:	4770      	bx	lr

08009c74 <_fini>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr
