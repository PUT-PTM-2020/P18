
ptm_dyktafon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009794  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c60  20000200  08009990  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e60  08009990  00020e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e25  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000285a  00000000  00000000  00033051  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  000358b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  00036a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002391f  00000000  00000000  00037a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5e5  00000000  00000000  0005b35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4037  00000000  00000000  00068944  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c97b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e50  00000000  00000000  0013c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009560 	.word	0x08009560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08009560 	.word	0x08009560

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b972 	b.w	8000d18 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	4688      	mov	r8, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	d967      	bls.n	8000b30 <__udivmoddi4+0xe4>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0720 	rsb	r7, r2, #32
 8000a6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a72:	4095      	lsls	r5, r2
 8000a74:	ea47 0803 	orr.w	r8, r7, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a7e:	0c23      	lsrs	r3, r4, #16
 8000a80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a84:	fa1f fc85 	uxth.w	ip, r5
 8000a88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a90:	fb07 f10c 	mul.w	r1, r7, ip
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x60>
 8000a98:	18eb      	adds	r3, r5, r3
 8000a9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a9e:	f080 811b 	bcs.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 8118 	bls.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa8:	3f02      	subs	r7, #2
 8000aaa:	442b      	add	r3, r5
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac0:	45a4      	cmp	ip, r4
 8000ac2:	d909      	bls.n	8000ad8 <__udivmoddi4+0x8c>
 8000ac4:	192c      	adds	r4, r5, r4
 8000ac6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aca:	f080 8107 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000ace:	45a4      	cmp	ip, r4
 8000ad0:	f240 8104 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	442c      	add	r4, r5
 8000ad8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000adc:	eba4 040c 	sub.w	r4, r4, ip
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	b11e      	cbz	r6, 8000aec <__udivmoddi4+0xa0>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xbe>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80eb 	beq.w	8000cd2 <__udivmoddi4+0x286>
 8000afc:	2700      	movs	r7, #0
 8000afe:	e9c6 0100 	strd	r0, r1, [r6]
 8000b02:	4638      	mov	r0, r7
 8000b04:	4639      	mov	r1, r7
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f783 	clz	r7, r3
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d147      	bne.n	8000ba2 <__udivmoddi4+0x156>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd0>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80fa 	bhi.w	8000d10 <__udivmoddi4+0x2c4>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	4698      	mov	r8, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa0>
 8000b2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa0>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xe8>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3e:	1b49      	subs	r1, r1, r5
 8000b40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b44:	fa1f f885 	uxth.w	r8, r5
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb08 f10c 	mul.w	r1, r8, ip
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b60:	18eb      	adds	r3, r5, r3
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2bc>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x14c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x14a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80b6 	bhi.w	8000d02 <__udivmoddi4+0x2b6>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e79f      	b.n	8000ae2 <__udivmoddi4+0x96>
 8000ba2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ba6:	40bb      	lsls	r3, r7
 8000ba8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc0:	4325      	orrs	r5, r4
 8000bc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bc6:	0c2c      	lsrs	r4, r5, #16
 8000bc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bcc:	fa1f fa8e 	uxth.w	sl, lr
 8000bd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	fa02 f207 	lsl.w	r2, r2, r7
 8000bde:	fa00 f107 	lsl.w	r1, r0, r7
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1e 0303 	adds.w	r3, lr, r3
 8000be8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bec:	f080 8087 	bcs.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	f240 8084 	bls.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4473      	add	r3, lr
 8000bfc:	1b1b      	subs	r3, r3, r4
 8000bfe:	b2ad      	uxth	r5, r5
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c10:	45a2      	cmp	sl, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1e 0404 	adds.w	r4, lr, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1c:	d26b      	bcs.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c1e:	45a2      	cmp	sl, r4
 8000c20:	d969      	bls.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4474      	add	r4, lr
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2e:	eba4 040a 	sub.w	r4, r4, sl
 8000c32:	454c      	cmp	r4, r9
 8000c34:	46c2      	mov	sl, r8
 8000c36:	464b      	mov	r3, r9
 8000c38:	d354      	bcc.n	8000ce4 <__udivmoddi4+0x298>
 8000c3a:	d051      	beq.n	8000ce0 <__udivmoddi4+0x294>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d069      	beq.n	8000d14 <__udivmoddi4+0x2c8>
 8000c40:	ebb1 050a 	subs.w	r5, r1, sl
 8000c44:	eb64 0403 	sbc.w	r4, r4, r3
 8000c48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	40fc      	lsrs	r4, r7
 8000c50:	ea4c 0505 	orr.w	r5, ip, r5
 8000c54:	e9c6 5400 	strd	r5, r4, [r6]
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e747      	b.n	8000aec <__udivmoddi4+0xa0>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f703 	lsr.w	r7, r0, r3
 8000c64:	4095      	lsls	r5, r2
 8000c66:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c72:	4338      	orrs	r0, r7
 8000c74:	0c01      	lsrs	r1, r0, #16
 8000c76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c7a:	fa1f f885 	uxth.w	r8, r5
 8000c7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb07 f308 	mul.w	r3, r7, r8
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x256>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c98:	d22f      	bcs.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d92d      	bls.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9e:	3f02      	subs	r7, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	b281      	uxth	r1, r0
 8000ca6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000caa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb2:	fb00 f308 	mul.w	r3, r0, r8
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x27e>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cc0:	d217      	bcs.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d915      	bls.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd0:	e73b      	b.n	8000b4a <__udivmoddi4+0xfe>
 8000cd2:	4637      	mov	r7, r6
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e709      	b.n	8000aec <__udivmoddi4+0xa0>
 8000cd8:	4607      	mov	r7, r0
 8000cda:	e6e7      	b.n	8000aac <__udivmoddi4+0x60>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6fb      	b.n	8000ad8 <__udivmoddi4+0x8c>
 8000ce0:	4541      	cmp	r1, r8
 8000ce2:	d2ab      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cec:	3801      	subs	r0, #1
 8000cee:	4613      	mov	r3, r2
 8000cf0:	e7a4      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	e7e9      	b.n	8000cca <__udivmoddi4+0x27e>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e795      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfa:	4667      	mov	r7, ip
 8000cfc:	e7d1      	b.n	8000ca2 <__udivmoddi4+0x256>
 8000cfe:	4681      	mov	r9, r0
 8000d00:	e77c      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d02:	3802      	subs	r0, #2
 8000d04:	442c      	add	r4, r5
 8000d06:	e747      	b.n	8000b98 <__udivmoddi4+0x14c>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	442b      	add	r3, r5
 8000d0e:	e72f      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d10:	4638      	mov	r0, r7
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xda>
 8000d14:	4637      	mov	r7, r6
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0xa0>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <LCD1602_EnablePulse+0x38>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <LCD1602_EnablePulse+0x3c>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f005 ffcc 	bl	8006cc8 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000d30:	230a      	movs	r3, #10
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f91a 	bl	8000f6c <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <LCD1602_EnablePulse+0x38>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LCD1602_EnablePulse+0x3c>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	f005 ffc0 	bl	8006cc8 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000d48:	203c      	movs	r0, #60	; 0x3c
 8000d4a:	f000 f90f 	bl	8000f6c <LCD1602_TIM_MicorSecDelay>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000021c 	.word	0x2000021c
 8000d58:	20000222 	.word	0x20000222

08000d5c <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <LCD1602_RS+0x22>
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <LCD1602_RS+0x3c>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LCD1602_RS+0x40>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	f005 ffa6 	bl	8006cc8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000d7c:	e007      	b.n	8000d8e <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <LCD1602_RS+0x3c>)
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <LCD1602_RS+0x40>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f005 ff9d 	bl	8006cc8 <HAL_GPIO_WritePin>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000021c 	.word	0x2000021c
 8000d9c:	20000220 	.word	0x20000220

08000da0 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000db8:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <LCD1602_write+0x1a0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d15a      	bne.n	8000e76 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000dc0:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <LCD1602_write+0x1a4>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <LCD1602_write+0x1a8>)
 8000dc6:	8819      	ldrh	r1, [r3, #0]
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f005 ff79 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000dd6:	4b5b      	ldr	r3, [pc, #364]	; (8000f44 <LCD1602_write+0x1a4>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <LCD1602_write+0x1ac>)
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f005 ff6e 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000dec:	4b55      	ldr	r3, [pc, #340]	; (8000f44 <LCD1602_write+0x1a4>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <LCD1602_write+0x1b0>)
 8000df2:	8819      	ldrh	r1, [r3, #0]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f005 ff63 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <LCD1602_write+0x1a4>)
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <LCD1602_write+0x1b4>)
 8000e08:	8819      	ldrh	r1, [r3, #0]
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	f005 ff58 	bl	8006cc8 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000e18:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <LCD1602_write+0x1b8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <LCD1602_write+0x1bc>)
 8000e1e:	8819      	ldrh	r1, [r3, #0]
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f005 ff4d 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000e2e:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <LCD1602_write+0x1b8>)
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <LCD1602_write+0x1c0>)
 8000e34:	8819      	ldrh	r1, [r3, #0]
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f005 ff42 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <LCD1602_write+0x1b8>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <LCD1602_write+0x1c4>)
 8000e4a:	8819      	ldrh	r1, [r3, #0]
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	f005 ff37 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <LCD1602_write+0x1b8>)
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <LCD1602_write+0x1c8>)
 8000e60:	8819      	ldrh	r1, [r3, #0]
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f005 ff2c 	bl	8006cc8 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000e70:	f7ff ff54 	bl	8000d1c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000e74:	e05f      	b.n	8000f36 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <LCD1602_write+0x1a0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d15b      	bne.n	8000f36 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <LCD1602_write+0x1b8>)
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <LCD1602_write+0x1bc>)
 8000e84:	8819      	ldrh	r1, [r3, #0]
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f005 ff1a 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <LCD1602_write+0x1b8>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <LCD1602_write+0x1c0>)
 8000e9a:	8819      	ldrh	r1, [r3, #0]
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f005 ff0f 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <LCD1602_write+0x1b8>)
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <LCD1602_write+0x1c4>)
 8000eb0:	8819      	ldrh	r1, [r3, #0]
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f005 ff04 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <LCD1602_write+0x1b8>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <LCD1602_write+0x1c8>)
 8000ec6:	8819      	ldrh	r1, [r3, #0]
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f005 fef9 	bl	8006cc8 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000ed6:	f7ff ff21 	bl	8000d1c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <LCD1602_write+0x1b8>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <LCD1602_write+0x1bc>)
 8000ee0:	8819      	ldrh	r1, [r3, #0]
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	f005 feec 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <LCD1602_write+0x1b8>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <LCD1602_write+0x1c0>)
 8000ef6:	8819      	ldrh	r1, [r3, #0]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	f005 fee1 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <LCD1602_write+0x1b8>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <LCD1602_write+0x1c4>)
 8000f0c:	8819      	ldrh	r1, [r3, #0]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f005 fed6 	bl	8006cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <LCD1602_write+0x1b8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <LCD1602_write+0x1c8>)
 8000f22:	8819      	ldrh	r1, [r3, #0]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f005 fecb 	bl	8006cc8 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000f32:	f7ff fef3 	bl	8000d1c <LCD1602_EnablePulse>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000224 	.word	0x20000224
 8000f48:	20000228 	.word	0x20000228
 8000f4c:	2000022a 	.word	0x2000022a
 8000f50:	2000022c 	.word	0x2000022c
 8000f54:	2000022e 	.word	0x2000022e
 8000f58:	20000230 	.word	0x20000230
 8000f5c:	20000234 	.word	0x20000234
 8000f60:	20000236 	.word	0x20000236
 8000f64:	20000238 	.word	0x20000238
 8000f68:	2000023a 	.word	0x2000023a

08000f6c <LCD1602_TIM_MicorSecDelay>:
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
}
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
//	HAL_TIM_SET_COUNTER(&htim3, 0);
//	while((HAL_TIM_GET_COUNTER(&htim3))<uSecDelay);
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fee6 	bl	8000d5c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff04 	bl	8000da0 <LCD1602_write>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <LCD1602_writeData>:

//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fed6 	bl	8000d5c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fef4 	bl	8000da0 <LCD1602_write>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e009      	b.n	8000fe2 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffe2 	bl	8000fa0 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d805      	bhi.n	8000ff4 <LCD1602_print+0x34>
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1ec      	bne.n	8000fce <LCD1602_print+0xe>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	3b01      	subs	r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d108      	bne.n	8001030 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001024:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ffa9 	bl	8000f80 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800102e:	e007      	b.n	8001040 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001036:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffa0 	bl	8000f80 <LCD1602_writeCommand>
}	
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <LCD1602_1stLine>:
void LCD1602_1stLine(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(1,1);
 800104c:	2101      	movs	r1, #1
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff ffd4 	bl	8000ffc <LCD1602_setCursor>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <LCD1602_2ndLine>:
void LCD1602_2ndLine(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 800105c:	2101      	movs	r1, #1
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff ffcc 	bl	8000ffc <LCD1602_setCursor>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <LCD1602_OneLine>:
{
	FunctionSet |= (0x08);
	LCD1602_writeCommand(FunctionSet);
}
void LCD1602_OneLine(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	FunctionSet &= ~(0x08);
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <LCD1602_OneLine+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f023 0308 	bic.w	r3, r3, #8
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <LCD1602_OneLine+0x20>)
 8001078:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(FunctionSet);
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <LCD1602_OneLine+0x20>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff7e 	bl	8000f80 <LCD1602_writeCommand>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000002 	.word	0x20000002

0800108c <LCD1602_display>:
{
	DisplayControl &= ~(0x04);
	LCD1602_writeCommand(DisplayControl);
}
void LCD1602_display(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	DisplayControl |= (0x04);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LCD1602_display+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <LCD1602_display+0x20>)
 800109c:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 800109e:	4b03      	ldr	r3, [pc, #12]	; (80010ac <LCD1602_display+0x20>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff6c 	bl	8000f80 <LCD1602_writeCommand>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000001 	.word	0x20000001

080010b0 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DESELECT>:

static
inline void DESELECT(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80010d6:	bf00      	nop
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <xmit_spi+0x30>)
 80010da:	f006 fd77 	bl	8007bcc <HAL_SPI_GetState>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d1f9      	bne.n	80010d8 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80010e4:	1df9      	adds	r1, r7, #7
 80010e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ea:	2201      	movs	r2, #1
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <xmit_spi+0x30>)
 80010ee:	f006 fa97 	bl	8007620 <HAL_SPI_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000b94 	.word	0x20000b94

08001100 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8001106:	23ff      	movs	r3, #255	; 0xff
 8001108:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800110e:	bf00      	nop
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <rcvr_spi+0x38>)
 8001112:	f006 fd5b 	bl	8007bcc <HAL_SPI_GetState>
 8001116:	4603      	mov	r3, r0
 8001118:	2b01      	cmp	r3, #1
 800111a:	d1f9      	bne.n	8001110 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 800111c:	1dba      	adds	r2, r7, #6
 800111e:	1df9      	adds	r1, r7, #7
 8001120:	f241 3388 	movw	r3, #5000	; 0x1388
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <rcvr_spi+0x38>)
 800112a:	f006 fbad 	bl	8007888 <HAL_SPI_TransmitReceive>

	return Data;
 800112e:	79bb      	ldrb	r3, [r7, #6]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000b94 	.word	0x20000b94

0800113c <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8001144:	f7ff ffdc 	bl	8001100 <rcvr_spi>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <wait_ready+0x34>)
 8001160:	2232      	movs	r2, #50	; 0x32
 8001162:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8001164:	f7ff ffcc 	bl	8001100 <rcvr_spi>
	do
		res = rcvr_spi();
 8001168:	f7ff ffca 	bl	8001100 <rcvr_spi>
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2bff      	cmp	r3, #255	; 0xff
 8001174:	d004      	beq.n	8001180 <wait_ready+0x28>
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <wait_ready+0x34>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f3      	bne.n	8001168 <wait_ready+0x10>

	return res;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000023d 	.word	0x2000023d

08001190 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8001196:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800119a:	60bb      	str	r3, [r7, #8]

	DESELECT();
 800119c:	f7ff ff8f 	bl	80010be <DESELECT>

	for (i = 0; i < 10; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e005      	b.n	80011b2 <power_on+0x22>
		xmit_spi(0xFF);
 80011a6:	20ff      	movs	r0, #255	; 0xff
 80011a8:	f7ff ff90 	bl	80010cc <xmit_spi>
	for (i = 0; i < 10; i++)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3301      	adds	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b09      	cmp	r3, #9
 80011b6:	d9f6      	bls.n	80011a6 <power_on+0x16>

	SELECT();
 80011b8:	f7ff ff7a 	bl	80010b0 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80011d0:	2395      	movs	r3, #149	; 0x95
 80011d2:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e00b      	b.n	80011f2 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f107 0210 	add.w	r2, r7, #16
 80011e0:	4413      	add	r3, r2
 80011e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff70 	bl	80010cc <xmit_spi>
	for (i = 0; i < 6; i++)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	3301      	adds	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d9f0      	bls.n	80011da <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80011f8:	e002      	b.n	8001200 <power_on+0x70>
		Count--;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8001200:	f7ff ff7e 	bl	8001100 <rcvr_spi>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d002      	beq.n	8001210 <power_on+0x80>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f4      	bne.n	80011fa <power_on+0x6a>

	DESELECT();
 8001210:	f7ff ff55 	bl	80010be <DESELECT>
	xmit_spi(0XFF);
 8001214:	20ff      	movs	r0, #255	; 0xff
 8001216:	f7ff ff59 	bl	80010cc <xmit_spi>

	PowerFlag = 1;
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <power_on+0x98>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000023f 	.word	0x2000023f

0800122c <power_off>:

static
void power_off(void) {
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <power_off+0x14>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	2000023f 	.word	0x2000023f

08001244 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <chk_power+0x14>)
 800124a:	781b      	ldrb	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000023f 	.word	0x2000023f

0800125c <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <rcvr_datablock+0x68>)
 8001268:	220a      	movs	r2, #10
 800126a:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 800126c:	f7ff ff48 	bl	8001100 <rcvr_spi>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2bff      	cmp	r3, #255	; 0xff
 8001278:	d104      	bne.n	8001284 <rcvr_datablock+0x28>
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <rcvr_datablock+0x68>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f3      	bne.n	800126c <rcvr_datablock+0x10>
	if (token != 0xFE)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2bfe      	cmp	r3, #254	; 0xfe
 8001288:	d001      	beq.n	800128e <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800128a:	2300      	movs	r3, #0
 800128c:	e016      	b.n	80012bc <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff51 	bl	800113c <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff4b 	bl	800113c <rcvr_spi_m>
	} while (btr -= 2);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3b02      	subs	r3, #2
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ed      	bne.n	800128e <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80012b2:	f7ff ff25 	bl	8001100 <rcvr_spi>
	rcvr_spi();
 80012b6:	f7ff ff23 	bl	8001100 <rcvr_spi>

	return TRUE; /* Return with success */
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000023c 	.word	0x2000023c

080012c8 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80012d8:	f7ff ff3e 	bl	8001158 <wait_ready>
 80012dc:	4603      	mov	r3, r0
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d001      	beq.n	80012e6 <xmit_datablock+0x1e>
		return FALSE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e040      	b.n	8001368 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff feef 	bl	80010cc <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2bfd      	cmp	r3, #253	; 0xfd
 80012f2:	d031      	beq.n	8001358 <xmit_datablock+0x90>
		wc = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fee3 	bl	80010cc <xmit_spi>
			xmit_spi(*buff++);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fedc 	bl	80010cc <xmit_spi>
		} while (--wc);
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	3b01      	subs	r3, #1
 8001318:	73bb      	strb	r3, [r7, #14]
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1eb      	bne.n	80012f8 <xmit_datablock+0x30>

		rcvr_spi();
 8001320:	f7ff feee 	bl	8001100 <rcvr_spi>
		rcvr_spi();
 8001324:	f7ff feec 	bl	8001100 <rcvr_spi>

		while (i <= 64) {
 8001328:	e00b      	b.n	8001342 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 800132a:	f7ff fee9 	bl	8001100 <rcvr_spi>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	2b05      	cmp	r3, #5
 800133a:	d006      	beq.n	800134a <xmit_datablock+0x82>
				break;
			i++;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b40      	cmp	r3, #64	; 0x40
 8001346:	d9f0      	bls.n	800132a <xmit_datablock+0x62>
 8001348:	e000      	b.n	800134c <xmit_datablock+0x84>
				break;
 800134a:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 800134c:	bf00      	nop
 800134e:	f7ff fed7 	bl	8001100 <rcvr_spi>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0fa      	beq.n	800134e <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	2b05      	cmp	r3, #5
 8001360:	d101      	bne.n	8001366 <xmit_datablock+0x9e>
		return TRUE;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <xmit_datablock+0xa0>
	else
		return FALSE;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 800137c:	f7ff feec 	bl	8001158 <wait_ready>
 8001380:	4603      	mov	r3, r0
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d001      	beq.n	800138a <send_cmd+0x1a>
		return 0xFF;
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	e040      	b.n	800140c <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe9d 	bl	80010cc <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	0e1b      	lsrs	r3, r3, #24
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe97 	bl	80010cc <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe91 	bl	80010cc <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe8b 	bl	80010cc <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe86 	bl	80010cc <xmit_spi>
	n = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d101      	bne.n	80013ce <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80013ca:	2395      	movs	r3, #149	; 0x95
 80013cc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b48      	cmp	r3, #72	; 0x48
 80013d2:	d101      	bne.n	80013d8 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80013d4:	2387      	movs	r3, #135	; 0x87
 80013d6:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe76 	bl	80010cc <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b4c      	cmp	r3, #76	; 0x4c
 80013e4:	d101      	bne.n	80013ea <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80013e6:	f7ff fe8b 	bl	8001100 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80013ea:	230a      	movs	r3, #10
 80013ec:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80013ee:	f7ff fe87 	bl	8001100 <rcvr_spi>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80013f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da05      	bge.n	800140a <send_cmd+0x9a>
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	3b01      	subs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f1      	bne.n	80013ee <send_cmd+0x7e>

	return res; /* Return with the response value */
 800140a:	7bbb      	ldrb	r3, [r7, #14]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001424:	2301      	movs	r3, #1
 8001426:	e0d5      	b.n	80015d4 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001428:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <disk_initialize+0x1c8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <disk_initialize+0x1c8>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	e0ca      	b.n	80015d4 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 800143e:	f7ff fea7 	bl	8001190 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001442:	f7ff fe35 	bl	80010b0 <SELECT>
	ty = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800144a:	2100      	movs	r1, #0
 800144c:	2040      	movs	r0, #64	; 0x40
 800144e:	f7ff ff8f 	bl	8001370 <send_cmd>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 80a5 	bne.w	80015a4 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800145a:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <disk_initialize+0x1cc>)
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001460:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001464:	2048      	movs	r0, #72	; 0x48
 8001466:	f7ff ff83 	bl	8001370 <send_cmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d158      	bne.n	8001522 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e00c      	b.n	8001490 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001476:	7bfc      	ldrb	r4, [r7, #15]
 8001478:	f7ff fe42 	bl	8001100 <rcvr_spi>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4423      	add	r3, r4
 8001486:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3301      	adds	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d9ef      	bls.n	8001476 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001496:	7abb      	ldrb	r3, [r7, #10]
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 8083 	bne.w	80015a4 <disk_initialize+0x190>
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	2baa      	cmp	r3, #170	; 0xaa
 80014a2:	d17f      	bne.n	80015a4 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80014a4:	2100      	movs	r1, #0
 80014a6:	2077      	movs	r0, #119	; 0x77
 80014a8:	f7ff ff62 	bl	8001370 <send_cmd>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d807      	bhi.n	80014c2 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80014b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014b6:	2069      	movs	r0, #105	; 0x69
 80014b8:	f7ff ff5a 	bl	8001370 <send_cmd>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <disk_initialize+0x1cc>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1eb      	bne.n	80014a4 <disk_initialize+0x90>
 80014cc:	e000      	b.n	80014d0 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80014ce:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <disk_initialize+0x1cc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d064      	beq.n	80015a4 <disk_initialize+0x190>
 80014da:	2100      	movs	r1, #0
 80014dc:	207a      	movs	r0, #122	; 0x7a
 80014de:	f7ff ff47 	bl	8001370 <send_cmd>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d15d      	bne.n	80015a4 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e00c      	b.n	8001508 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80014ee:	7bfc      	ldrb	r4, [r7, #15]
 80014f0:	f7ff fe06 	bl	8001100 <rcvr_spi>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4423      	add	r3, r4
 80014fe:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	3301      	adds	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d9ef      	bls.n	80014ee <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 800150e:	7a3b      	ldrb	r3, [r7, #8]
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <disk_initialize+0x108>
 8001518:	2306      	movs	r3, #6
 800151a:	e000      	b.n	800151e <disk_initialize+0x10a>
 800151c:	2302      	movs	r3, #2
 800151e:	73bb      	strb	r3, [r7, #14]
 8001520:	e040      	b.n	80015a4 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001522:	2100      	movs	r1, #0
 8001524:	2077      	movs	r0, #119	; 0x77
 8001526:	f7ff ff23 	bl	8001370 <send_cmd>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d808      	bhi.n	8001542 <disk_initialize+0x12e>
 8001530:	2100      	movs	r1, #0
 8001532:	2069      	movs	r0, #105	; 0x69
 8001534:	f7ff ff1c 	bl	8001370 <send_cmd>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d801      	bhi.n	8001542 <disk_initialize+0x12e>
 800153e:	2302      	movs	r3, #2
 8001540:	e000      	b.n	8001544 <disk_initialize+0x130>
 8001542:	2301      	movs	r3, #1
 8001544:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d10e      	bne.n	800156a <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 800154c:	2100      	movs	r1, #0
 800154e:	2077      	movs	r0, #119	; 0x77
 8001550:	f7ff ff0e 	bl	8001370 <send_cmd>
 8001554:	4603      	mov	r3, r0
 8001556:	2b01      	cmp	r3, #1
 8001558:	d80e      	bhi.n	8001578 <disk_initialize+0x164>
 800155a:	2100      	movs	r1, #0
 800155c:	2069      	movs	r0, #105	; 0x69
 800155e:	f7ff ff07 	bl	8001370 <send_cmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <disk_initialize+0x164>
						break; /* ACMD41 */
 8001568:	e00d      	b.n	8001586 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800156a:	2100      	movs	r1, #0
 800156c:	2041      	movs	r0, #65	; 0x41
 800156e:	f7ff feff 	bl	8001370 <send_cmd>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <disk_initialize+0x1cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e1      	bne.n	8001546 <disk_initialize+0x132>
 8001582:	e000      	b.n	8001586 <disk_initialize+0x172>
						break; /* CMD1 */
 8001584:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <disk_initialize+0x1cc>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <disk_initialize+0x18c>
 8001590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001594:	2050      	movs	r0, #80	; 0x50
 8001596:	f7ff feeb 	bl	8001370 <send_cmd>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <disk_initialize+0x190>
				ty = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <disk_initialize+0x1d0>)
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80015aa:	f7ff fd88 	bl	80010be <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80015ae:	f7ff fda7 	bl	8001100 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80015b2:	7bbb      	ldrb	r3, [r7, #14]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <disk_initialize+0x1c8>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <disk_initialize+0x1c8>)
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e001      	b.n	80015ce <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80015ca:	f7ff fe2f 	bl	800122c <power_off>

	return Stat;
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <disk_initialize+0x1c8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000003 	.word	0x20000003
 80015e0:	2000023c 	.word	0x2000023c
 80015e4:	2000023e 	.word	0x2000023e

080015e8 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80015f8:	2301      	movs	r3, #1
 80015fa:	e002      	b.n	8001602 <disk_status+0x1a>
	return Stat;
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <disk_status+0x28>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000003 	.word	0x20000003

08001614 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <disk_read+0x1c>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <disk_read+0x20>
		return RES_PARERR;
 8001630:	2304      	movs	r3, #4
 8001632:	e051      	b.n	80016d8 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <disk_read+0xcc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <disk_read+0x32>
		return RES_NOTRDY;
 8001642:	2303      	movs	r3, #3
 8001644:	e048      	b.n	80016d8 <disk_read+0xc4>

	if (!(CardType & 4))
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <disk_read+0xd0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001658:	f7ff fd2a 	bl	80010b0 <SELECT>

	if (count == 1) { /* Single block read */
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d111      	bne.n	8001686 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	2051      	movs	r0, #81	; 0x51
 8001666:	f7ff fe83 	bl	8001370 <send_cmd>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d129      	bne.n	80016c4 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	68b8      	ldr	r0, [r7, #8]
 8001676:	f7ff fdf1 	bl	800125c <rcvr_datablock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d021      	beq.n	80016c4 <disk_read+0xb0>
			count = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	e01e      	b.n	80016c4 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	2052      	movs	r0, #82	; 0x52
 800168a:	f7ff fe71 	bl	8001370 <send_cmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d117      	bne.n	80016c4 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f7ff fddf 	bl	800125c <rcvr_datablock>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00a      	beq.n	80016ba <disk_read+0xa6>
					break;
				buff += 512;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016aa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ed      	bne.n	8001694 <disk_read+0x80>
 80016b8:	e000      	b.n	80016bc <disk_read+0xa8>
					break;
 80016ba:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80016bc:	2100      	movs	r1, #0
 80016be:	204c      	movs	r0, #76	; 0x4c
 80016c0:	f7ff fe56 	bl	8001370 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80016c4:	f7ff fcfb 	bl	80010be <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80016c8:	f7ff fd1a 	bl	8001100 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000003 	.word	0x20000003
 80016e4:	2000023e 	.word	0x2000023e

080016e8 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <disk_write+0x1c>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <disk_write+0x20>
		return RES_PARERR;
 8001704:	2304      	movs	r3, #4
 8001706:	e06b      	b.n	80017e0 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <disk_write+0x100>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <disk_write+0x32>
		return RES_NOTRDY;
 8001716:	2303      	movs	r3, #3
 8001718:	e062      	b.n	80017e0 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <disk_write+0x100>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <disk_write+0x44>
		return RES_WRPRT;
 8001728:	2302      	movs	r3, #2
 800172a:	e059      	b.n	80017e0 <disk_write+0xf8>

	if (!(CardType & 4))
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <disk_write+0x104>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800173e:	f7ff fcb7 	bl	80010b0 <SELECT>

	if (count == 1) { /* Single block write */
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d110      	bne.n	800176a <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	2058      	movs	r0, #88	; 0x58
 800174c:	f7ff fe10 	bl	8001370 <send_cmd>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d13a      	bne.n	80017cc <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8001756:	21fe      	movs	r1, #254	; 0xfe
 8001758:	68b8      	ldr	r0, [r7, #8]
 800175a:	f7ff fdb5 	bl	80012c8 <xmit_datablock>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d033      	beq.n	80017cc <disk_write+0xe4>
			count = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	e030      	b.n	80017cc <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <disk_write+0x104>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001776:	2100      	movs	r1, #0
 8001778:	2077      	movs	r0, #119	; 0x77
 800177a:	f7ff fdf9 	bl	8001370 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	2057      	movs	r0, #87	; 0x57
 8001782:	f7ff fdf5 	bl	8001370 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	2059      	movs	r0, #89	; 0x59
 800178a:	f7ff fdf1 	bl	8001370 <send_cmd>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11b      	bne.n	80017cc <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001794:	21fc      	movs	r1, #252	; 0xfc
 8001796:	68b8      	ldr	r0, [r7, #8]
 8001798:	f7ff fd96 	bl	80012c8 <xmit_datablock>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <disk_write+0xd0>
					break;
				buff += 512;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <disk_write+0xac>
 80017b6:	e000      	b.n	80017ba <disk_write+0xd2>
					break;
 80017b8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80017ba:	21fd      	movs	r1, #253	; 0xfd
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fd83 	bl	80012c8 <xmit_datablock>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <disk_write+0xe4>
				count = 1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80017cc:	f7ff fc77 	bl	80010be <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80017d0:	f7ff fc96 	bl	8001100 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000003 	.word	0x20000003
 80017ec:	2000023e 	.word	0x2000023e

080017f0 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	603a      	str	r2, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	460b      	mov	r3, r1
 80017fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <disk_ioctl+0x1e>
		return RES_PARERR;
 800180a:	2304      	movs	r3, #4
 800180c:	e16a      	b.n	8001ae4 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	2b07      	cmp	r3, #7
 8001818:	d127      	bne.n	800186a <disk_ioctl+0x7a>
		switch (*ptr) {
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d00e      	beq.n	8001840 <disk_ioctl+0x50>
 8001822:	2b02      	cmp	r3, #2
 8001824:	d012      	beq.n	800184c <disk_ioctl+0x5c>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d11b      	bne.n	8001862 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800182a:	f7ff fd0b 	bl	8001244 <chk_power>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001834:	f7ff fcfa 	bl	800122c <power_off>
			res = RES_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800183e:	e14f      	b.n	8001ae0 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001840:	f7ff fca6 	bl	8001190 <power_on>
			res = RES_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800184a:	e149      	b.n	8001ae0 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 800184c:	f7ff fcfa 	bl	8001244 <chk_power>
 8001850:	4602      	mov	r2, r0
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	3301      	adds	r3, #1
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001860:	e13e      	b.n	8001ae0 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001862:	2304      	movs	r3, #4
 8001864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001868:	e13a      	b.n	8001ae0 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800186a:	4ba0      	ldr	r3, [pc, #640]	; (8001aec <disk_ioctl+0x2fc>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001878:	2303      	movs	r3, #3
 800187a:	e133      	b.n	8001ae4 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 800187c:	f7ff fc18 	bl	80010b0 <SELECT>

		switch (ctrl) {
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b35      	cmp	r3, #53	; 0x35
 8001884:	f200 811d 	bhi.w	8001ac2 <disk_ioctl+0x2d2>
 8001888:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <disk_ioctl+0xa0>)
 800188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188e:	bf00      	nop
 8001890:	08001a2b 	.word	0x08001a2b
 8001894:	08001969 	.word	0x08001969
 8001898:	08001a1b 	.word	0x08001a1b
 800189c:	08001ac3 	.word	0x08001ac3
 80018a0:	08001ac3 	.word	0x08001ac3
 80018a4:	08001ac3 	.word	0x08001ac3
 80018a8:	08001ac3 	.word	0x08001ac3
 80018ac:	08001ac3 	.word	0x08001ac3
 80018b0:	08001ac3 	.word	0x08001ac3
 80018b4:	08001ac3 	.word	0x08001ac3
 80018b8:	08001ac3 	.word	0x08001ac3
 80018bc:	08001ac3 	.word	0x08001ac3
 80018c0:	08001ac3 	.word	0x08001ac3
 80018c4:	08001ac3 	.word	0x08001ac3
 80018c8:	08001ac3 	.word	0x08001ac3
 80018cc:	08001ac3 	.word	0x08001ac3
 80018d0:	08001ac3 	.word	0x08001ac3
 80018d4:	08001ac3 	.word	0x08001ac3
 80018d8:	08001ac3 	.word	0x08001ac3
 80018dc:	08001ac3 	.word	0x08001ac3
 80018e0:	08001ac3 	.word	0x08001ac3
 80018e4:	08001ac3 	.word	0x08001ac3
 80018e8:	08001ac3 	.word	0x08001ac3
 80018ec:	08001ac3 	.word	0x08001ac3
 80018f0:	08001ac3 	.word	0x08001ac3
 80018f4:	08001ac3 	.word	0x08001ac3
 80018f8:	08001ac3 	.word	0x08001ac3
 80018fc:	08001ac3 	.word	0x08001ac3
 8001900:	08001ac3 	.word	0x08001ac3
 8001904:	08001ac3 	.word	0x08001ac3
 8001908:	08001ac3 	.word	0x08001ac3
 800190c:	08001ac3 	.word	0x08001ac3
 8001910:	08001ac3 	.word	0x08001ac3
 8001914:	08001ac3 	.word	0x08001ac3
 8001918:	08001ac3 	.word	0x08001ac3
 800191c:	08001ac3 	.word	0x08001ac3
 8001920:	08001ac3 	.word	0x08001ac3
 8001924:	08001ac3 	.word	0x08001ac3
 8001928:	08001ac3 	.word	0x08001ac3
 800192c:	08001ac3 	.word	0x08001ac3
 8001930:	08001ac3 	.word	0x08001ac3
 8001934:	08001ac3 	.word	0x08001ac3
 8001938:	08001ac3 	.word	0x08001ac3
 800193c:	08001ac3 	.word	0x08001ac3
 8001940:	08001ac3 	.word	0x08001ac3
 8001944:	08001ac3 	.word	0x08001ac3
 8001948:	08001ac3 	.word	0x08001ac3
 800194c:	08001ac3 	.word	0x08001ac3
 8001950:	08001ac3 	.word	0x08001ac3
 8001954:	08001ac3 	.word	0x08001ac3
 8001958:	08001ac3 	.word	0x08001ac3
 800195c:	08001a3d 	.word	0x08001a3d
 8001960:	08001a61 	.word	0x08001a61
 8001964:	08001a85 	.word	0x08001a85
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001968:	2100      	movs	r1, #0
 800196a:	2049      	movs	r0, #73	; 0x49
 800196c:	f7ff fd00 	bl	8001370 <send_cmd>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80a9 	bne.w	8001aca <disk_ioctl+0x2da>
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2110      	movs	r1, #16
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fc6c 	bl	800125c <rcvr_datablock>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 809f 	beq.w	8001aca <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001996:	7d7b      	ldrb	r3, [r7, #21]
 8001998:	b29a      	uxth	r2, r3
 800199a:	7d3b      	ldrb	r3, [r7, #20]
 800199c:	b29b      	uxth	r3, r3
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80019aa:	8bfb      	ldrh	r3, [r7, #30]
 80019ac:	029a      	lsls	r2, r3, #10
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e02e      	b.n	8001a12 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80019b4:	7c7b      	ldrb	r3, [r7, #17]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	09db      	lsrs	r3, r3, #7
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80019c6:	7d7b      	ldrb	r3, [r7, #21]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 0306 	and.w	r3, r3, #6
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80019d6:	3302      	adds	r3, #2
 80019d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80019dc:	7d3b      	ldrb	r3, [r7, #20]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80019f0:	7cbb      	ldrb	r3, [r7, #18]
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001a00:	3301      	adds	r3, #1
 8001a02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a04:	8bfa      	ldrh	r2, [r7, #30]
 8001a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a0a:	3b09      	subs	r3, #9
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001a18:	e057      	b.n	8001aca <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a20:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a28:	e056      	b.n	8001ad8 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8001a2a:	f7ff fb95 	bl	8001158 <wait_ready>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	d14c      	bne.n	8001ace <disk_ioctl+0x2de>
				res = RES_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a3a:	e048      	b.n	8001ace <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2049      	movs	r0, #73	; 0x49
 8001a40:	f7ff fc96 	bl	8001370 <send_cmd>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d143      	bne.n	8001ad2 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	6a38      	ldr	r0, [r7, #32]
 8001a4e:	f7ff fc05 	bl	800125c <rcvr_datablock>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d03c      	beq.n	8001ad2 <disk_ioctl+0x2e2>
				res = RES_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a5e:	e038      	b.n	8001ad2 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001a60:	2100      	movs	r1, #0
 8001a62:	204a      	movs	r0, #74	; 0x4a
 8001a64:	f7ff fc84 	bl	8001370 <send_cmd>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d133      	bne.n	8001ad6 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001a6e:	2110      	movs	r1, #16
 8001a70:	6a38      	ldr	r0, [r7, #32]
 8001a72:	f7ff fbf3 	bl	800125c <rcvr_datablock>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d02c      	beq.n	8001ad6 <disk_ioctl+0x2e6>
				res = RES_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a82:	e028      	b.n	8001ad6 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001a84:	2100      	movs	r1, #0
 8001a86:	207a      	movs	r0, #122	; 0x7a
 8001a88:	f7ff fc72 	bl	8001370 <send_cmd>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d117      	bne.n	8001ac2 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a98:	e00b      	b.n	8001ab2 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8001a9a:	6a3c      	ldr	r4, [r7, #32]
 8001a9c:	1c63      	adds	r3, r4, #1
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	f7ff fb2e 	bl	8001100 <rcvr_spi>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aac:	3301      	adds	r3, #1
 8001aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d9ef      	bls.n	8001a9a <disk_ioctl+0x2aa>
				res = RES_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001ac0:	e00a      	b.n	8001ad8 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ac8:	e006      	b.n	8001ad8 <disk_ioctl+0x2e8>
			break;
 8001aca:	bf00      	nop
 8001acc:	e004      	b.n	8001ad8 <disk_ioctl+0x2e8>
			break;
 8001ace:	bf00      	nop
 8001ad0:	e002      	b.n	8001ad8 <disk_ioctl+0x2e8>
			break;
 8001ad2:	bf00      	nop
 8001ad4:	e000      	b.n	8001ad8 <disk_ioctl+0x2e8>
			break;
 8001ad6:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8001ad8:	f7ff faf1 	bl	80010be <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8001adc:	f7ff fb10 	bl	8001100 <rcvr_spi>
	}

	return res;
 8001ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	372c      	adds	r7, #44	; 0x2c
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	20000003 	.word	0x20000003

08001af0 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <disk_timerproc+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <disk_timerproc+0x1e>
		Timer1 = --n;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <disk_timerproc+0x44>)
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <disk_timerproc+0x48>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <disk_timerproc+0x36>
		Timer2 = --n;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <disk_timerproc+0x48>)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	7013      	strb	r3, [r2, #0]

}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000023c 	.word	0x2000023c
 8001b38:	2000023d 	.word	0x2000023d

08001b3c <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <sdcard_systick_timerproc+0x2c>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <sdcard_systick_timerproc+0x2c>)
 8001b4c:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <sdcard_systick_timerproc+0x2c>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d904      	bls.n	8001b62 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <sdcard_systick_timerproc+0x2c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001b5e:	f7ff ffc7 	bl	8001af0 <disk_timerproc>
	}
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000720 	.word	0x20000720

08001b6c <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	36c55cc0 	.word	0x36c55cc0

08001b80 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3303      	adds	r3, #3
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	3202      	adds	r2, #2
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	3201      	adds	r2, #1
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
	return rv;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	887a      	ldrh	r2, [r7, #2]
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	1c53      	adds	r3, r2, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	1c59      	adds	r1, r3, #1
 8001ca8:	6179      	str	r1, [r7, #20]
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f1      	bne.n	8001c9e <mem_cpy+0x1a>
	}
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b087      	sub	sp, #28
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	617a      	str	r2, [r7, #20]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f3      	bne.n	8001cd6 <mem_set+0x10>
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b089      	sub	sp, #36	; 0x24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	61fa      	str	r2, [r7, #28]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	61ba      	str	r2, [r7, #24]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	1acb      	subs	r3, r1, r3
 8001d26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <mem_cmp+0x40>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0eb      	beq.n	8001d12 <mem_cmp+0x18>

	return r;
 8001d3a:	697b      	ldr	r3, [r7, #20]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001d52:	e002      	b.n	8001d5a <chk_chr+0x12>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3301      	adds	r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <chk_chr+0x26>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d1f2      	bne.n	8001d54 <chk_chr+0xc>
	return *str;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	781b      	ldrb	r3, [r3, #0]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8001d88:	2281      	movs	r2, #129	; 0x81
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d30f      	bcc.n	8001db0 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001d90:	229f      	movs	r2, #159	; 0x9f
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d801      	bhi.n	8001d9c <dbc_1st+0x1e>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e00a      	b.n	8001db2 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001d9c:	22e0      	movs	r2, #224	; 0xe0
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d305      	bcc.n	8001db0 <dbc_1st+0x32>
 8001da4:	22fc      	movs	r2, #252	; 0xfc
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d801      	bhi.n	8001db0 <dbc_1st+0x32>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d319      	bcc.n	8001e04 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001dd0:	227e      	movs	r2, #126	; 0x7e
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d801      	bhi.n	8001ddc <dbc_2nd+0x1e>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e014      	b.n	8001e06 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d305      	bcc.n	8001df0 <dbc_2nd+0x32>
 8001de4:	22fc      	movs	r2, #252	; 0xfc
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d801      	bhi.n	8001df0 <dbc_2nd+0x32>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e00a      	b.n	8001e06 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001df0:	2200      	movs	r2, #0
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d305      	bcc.n	8001e04 <dbc_2nd+0x46>
 8001df8:	2200      	movs	r2, #0
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d801      	bhi.n	8001e04 <dbc_2nd+0x46>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	78db      	ldrb	r3, [r3, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02c      	beq.n	8001e80 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7858      	ldrb	r0, [r3, #1]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e34:	2301      	movs	r3, #1
 8001e36:	f7ff fc57 	bl	80016e8 <disk_write>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11d      	bne.n	8001e7c <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d213      	bcs.n	8001e80 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d10f      	bne.n	8001e80 <sync_window+0x6e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7858      	ldrb	r0, [r3, #1]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	441a      	add	r2, r3
 8001e74:	2301      	movs	r3, #1
 8001e76:	f7ff fc37 	bl	80016e8 <disk_write>
 8001e7a:	e001      	b.n	8001e80 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d01b      	beq.n	8001eda <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffb5 	bl	8001e12 <sync_window>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d113      	bne.n	8001eda <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7858      	ldrb	r0, [r3, #1]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	f7ff fba8 	bl	8001614 <disk_read>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff90 	bl	8001e12 <sync_window>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d158      	bne.n	8001fae <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d148      	bne.n	8001f96 <sync_fs+0xb2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	791b      	ldrb	r3, [r3, #4]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d144      	bne.n	8001f96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3330      	adds	r3, #48	; 0x30
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fed5 	bl	8001cc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3330      	adds	r3, #48	; 0x30
 8001f20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001f24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe64 	bl	8001bf6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3330      	adds	r3, #48	; 0x30
 8001f32:	4921      	ldr	r1, [pc, #132]	; (8001fb8 <sync_fs+0xd4>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fe79 	bl	8001c2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3330      	adds	r3, #48	; 0x30
 8001f3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001f42:	491e      	ldr	r1, [pc, #120]	; (8001fbc <sync_fs+0xd8>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe71 	bl	8001c2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3330      	adds	r3, #48	; 0x30
 8001f4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7ff fe67 	bl	8001c2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3330      	adds	r3, #48	; 0x30
 8001f62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f7ff fe5d 	bl	8001c2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7858      	ldrb	r0, [r3, #1]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f7ff fbac 	bl	80016e8 <disk_write>
			fs->fsi_flag = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	785b      	ldrb	r3, [r3, #1]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fc26 	bl	80017f0 <disk_ioctl>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <sync_fs+0xca>
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	41615252 	.word	0x41615252
 8001fbc:	61417272 	.word	0x61417272

08001fc0 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3b02      	subs	r3, #2
 8001fce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	3b02      	subs	r3, #2
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d301      	bcc.n	8001fe0 <clst2sect+0x20>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e008      	b.n	8001ff2 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	895b      	ldrh	r3, [r3, #10]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	fb03 f301 	mul.w	r3, r3, r1
 8001ff0:	4413      	add	r3, r2
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d904      	bls.n	800201e <get_fat+0x20>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <get_fat+0x26>
		val = 1;	/* Internal error */
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e08c      	b.n	800213e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d045      	beq.n	80020be <get_fat+0xc0>
 8002032:	2b03      	cmp	r3, #3
 8002034:	d05d      	beq.n	80020f2 <get_fat+0xf4>
 8002036:	2b01      	cmp	r3, #1
 8002038:	d177      	bne.n	800212a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	0a5b      	lsrs	r3, r3, #9
 8002050:	4413      	add	r3, r2
 8002052:	4619      	mov	r1, r3
 8002054:	6938      	ldr	r0, [r7, #16]
 8002056:	f7ff ff18 	bl	8001e8a <move_window>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d167      	bne.n	8002130 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60fa      	str	r2, [r7, #12]
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002072:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0a5b      	lsrs	r3, r3, #9
 800207c:	4413      	add	r3, r2
 800207e:	4619      	mov	r1, r3
 8002080:	6938      	ldr	r0, [r7, #16]
 8002082:	f7ff ff02 	bl	8001e8a <move_window>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d153      	bne.n	8002134 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <get_fat+0xb6>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	e002      	b.n	80020ba <get_fat+0xbc>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	617b      	str	r3, [r7, #20]
			break;
 80020bc:	e03f      	b.n	800213e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	4413      	add	r3, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	6938      	ldr	r0, [r7, #16]
 80020cc:	f7ff fedd 	bl	8001e8a <move_window>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d130      	bne.n	8002138 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80020e4:	4413      	add	r3, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fd4a 	bl	8001b80 <ld_word>
 80020ec:	4603      	mov	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]
			break;
 80020f0:	e025      	b.n	800213e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	09db      	lsrs	r3, r3, #7
 80020fa:	4413      	add	r3, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	6938      	ldr	r0, [r7, #16]
 8002100:	f7ff fec3 	bl	8001e8a <move_window>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002118:	4413      	add	r3, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd48 	bl	8001bb0 <ld_dword>
 8002120:	4603      	mov	r3, r0
 8002122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002126:	617b      	str	r3, [r7, #20]
			break;
 8002128:	e009      	b.n	800213e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800212a:	2301      	movs	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e006      	b.n	800213e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002130:	bf00      	nop
 8002132:	e004      	b.n	800213e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002134:	bf00      	nop
 8002136:	e002      	b.n	800213e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002138:	bf00      	nop
 800213a:	e000      	b.n	800213e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800213c:	bf00      	nop
		}
	}

	return val;
 800213e:	697b      	ldr	r3, [r7, #20]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002154:	2302      	movs	r3, #2
 8002156:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f240 80d6 	bls.w	800230c <put_fat+0x1c4>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	f080 80d0 	bcs.w	800230c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d073      	beq.n	800225c <put_fat+0x114>
 8002174:	2b03      	cmp	r3, #3
 8002176:	f000 8091 	beq.w	800229c <put_fat+0x154>
 800217a:	2b01      	cmp	r3, #1
 800217c:	f040 80c6 	bne.w	800230c <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	0a5b      	lsrs	r3, r3, #9
 8002196:	4413      	add	r3, r2
 8002198:	4619      	mov	r1, r3
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff fe75 	bl	8001e8a <move_window>
 80021a0:	4603      	mov	r3, r0
 80021a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80021a4:	7ffb      	ldrb	r3, [r7, #31]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80a9 	bne.w	80022fe <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	61b9      	str	r1, [r7, #24]
 80021b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021bc:	4413      	add	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <put_fat+0x9e>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	b25a      	sxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e001      	b.n	80021ea <put_fat+0xa2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	4413      	add	r3, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fe42 	bl	8001e8a <move_window>
 8002206:	4603      	mov	r3, r0
 8002208:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800220a:	7ffb      	ldrb	r3, [r7, #31]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d178      	bne.n	8002302 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <put_fat+0xea>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e00e      	b.n	8002250 <put_fat+0x108>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b25b      	sxtb	r3, r3
 8002238:	f023 030f 	bic.w	r3, r3, #15
 800223c:	b25a      	sxtb	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	b25b      	sxtb	r3, r3
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	b25b      	sxtb	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b25b      	sxtb	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	70da      	strb	r2, [r3, #3]
			break;
 800225a:	e057      	b.n	800230c <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	4413      	add	r3, r2
 8002266:	4619      	mov	r1, r3
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff fe0e 	bl	8001e8a <move_window>
 800226e:	4603      	mov	r3, r0
 8002270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002272:	7ffb      	ldrb	r3, [r7, #31]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d146      	bne.n	8002306 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002286:	4413      	add	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	b292      	uxth	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fcb1 	bl	8001bf6 <st_word>
			fs->wflag = 1;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	70da      	strb	r2, [r3, #3]
			break;
 800229a:	e037      	b.n	800230c <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	09db      	lsrs	r3, r3, #7
 80022a4:	4413      	add	r3, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff fdee 	bl	8001e8a <move_window>
 80022ae:	4603      	mov	r3, r0
 80022b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d128      	bne.n	800230a <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80022cc:	4413      	add	r3, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fc6e 	bl	8001bb0 <ld_dword>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80022da:	4323      	orrs	r3, r4
 80022dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80022ec:	4413      	add	r3, r2
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fc9b 	bl	8001c2c <st_dword>
			fs->wflag = 1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	70da      	strb	r2, [r3, #3]
			break;
 80022fc:	e006      	b.n	800230c <put_fat+0x1c4>
			if (res != FR_OK) break;
 80022fe:	bf00      	nop
 8002300:	e004      	b.n	800230c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002302:	bf00      	nop
 8002304:	e002      	b.n	800230c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800230a:	bf00      	nop
		}
	}
	return res;
 800230c:	7ffb      	ldrb	r3, [r7, #31]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}

08002316 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d904      	bls.n	800233c <remove_chain+0x26>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d301      	bcc.n	8002340 <remove_chain+0x2a>
 800233c:	2302      	movs	r3, #2
 800233e:	e04b      	b.n	80023d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00c      	beq.n	8002360 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002346:	f04f 32ff 	mov.w	r2, #4294967295
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	69b8      	ldr	r0, [r7, #24]
 800234e:	f7ff fefb 	bl	8002148 <put_fat>
 8002352:	4603      	mov	r3, r0
 8002354:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <remove_chain+0x4a>
 800235c:	7ffb      	ldrb	r3, [r7, #31]
 800235e:	e03b      	b.n	80023d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff fe4b 	bl	8001ffe <get_fat>
 8002368:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d031      	beq.n	80023d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <remove_chain+0x64>
 8002376:	2302      	movs	r3, #2
 8002378:	e02e      	b.n	80023d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d101      	bne.n	8002386 <remove_chain+0x70>
 8002382:	2301      	movs	r3, #1
 8002384:	e028      	b.n	80023d8 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002386:	2200      	movs	r2, #0
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	69b8      	ldr	r0, [r7, #24]
 800238c:	f7ff fedc 	bl	8002148 <put_fat>
 8002390:	4603      	mov	r3, r0
 8002392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002394:	7ffb      	ldrb	r3, [r7, #31]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <remove_chain+0x88>
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	e01c      	b.n	80023d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	3b02      	subs	r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d20b      	bcs.n	80023c4 <remove_chain+0xae>
			fs->free_clst++;
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3c6      	bcc.n	8002360 <remove_chain+0x4a>
 80023d2:	e000      	b.n	80023d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80023d4:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <create_chain+0x2c>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	d31b      	bcc.n	8002444 <create_chain+0x64>
 800240c:	2301      	movs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e018      	b.n	8002444 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fdf2 	bl	8001ffe <get_fat>
 800241a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d801      	bhi.n	8002426 <create_chain+0x46>
 8002422:	2301      	movs	r3, #1
 8002424:	e0a9      	b.n	800257a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d101      	bne.n	8002432 <create_chain+0x52>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	e0a3      	b.n	800257a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	429a      	cmp	r2, r3
 800243a:	d201      	bcs.n	8002440 <create_chain+0x60>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	e09c      	b.n	800257a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <create_chain+0x70>
 800244c:	2300      	movs	r3, #0
 800244e:	e094      	b.n	800257a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d129      	bne.n	80024b0 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	3301      	adds	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	429a      	cmp	r2, r3
 800246a:	d301      	bcc.n	8002470 <create_chain+0x90>
 800246c:	2302      	movs	r3, #2
 800246e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fdc3 	bl	8001ffe <get_fat>
 8002478:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d003      	beq.n	8002488 <create_chain+0xa8>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d101      	bne.n	800248c <create_chain+0xac>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	e076      	b.n	800257a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00e      	beq.n	80024b0 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d906      	bls.n	80024ac <create_chain+0xcc>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d201      	bcs.n	80024ac <create_chain+0xcc>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d129      	bne.n	800250a <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d307      	bcc.n	80024da <create_chain+0xfa>
					ncl = 2;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d901      	bls.n	80024da <create_chain+0xfa>
 80024d6:	2300      	movs	r3, #0
 80024d8:	e04f      	b.n	800257a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80024da:	69f9      	ldr	r1, [r7, #28]
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff fd8e 	bl	8001ffe <get_fat>
 80024e2:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00e      	beq.n	8002508 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d003      	beq.n	80024f8 <create_chain+0x118>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d101      	bne.n	80024fc <create_chain+0x11c>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	e03e      	b.n	800257a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	429a      	cmp	r2, r3
 8002502:	d1da      	bne.n	80024ba <create_chain+0xda>
 8002504:	2300      	movs	r3, #0
 8002506:	e038      	b.n	800257a <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8002508:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800250a:	f04f 32ff 	mov.w	r2, #4294967295
 800250e:	69f9      	ldr	r1, [r7, #28]
 8002510:	6938      	ldr	r0, [r7, #16]
 8002512:	f7ff fe19 	bl	8002148 <put_fat>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <create_chain+0x154>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	6938      	ldr	r0, [r7, #16]
 800252c:	f7ff fe0c 	bl	8002148 <put_fat>
 8002530:	4603      	mov	r3, r0
 8002532:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <create_chain+0x188>
		fs->last_clst = ncl;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	3b02      	subs	r3, #2
 800254a:	429a      	cmp	r2, r3
 800254c:	d804      	bhi.n	8002558 <create_chain+0x178>
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	711a      	strb	r2, [r3, #4]
 8002566:	e007      	b.n	8002578 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <create_chain+0x194>
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e000      	b.n	8002576 <create_chain+0x196>
 8002574:	2301      	movs	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002578:	69fb      	ldr	r3, [r7, #28]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff fc40 	bl	8001e12 <sync_window>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <dir_clear+0x1a>
 8002598:	2301      	movs	r3, #1
 800259a:	e036      	b.n	800260a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fd0e 	bl	8001fc0 <clst2sect>
 80025a4:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3330      	adds	r3, #48	; 0x30
 80025b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fb85 	bl	8001cc6 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2301      	movs	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e003      	b.n	80025d4 <dir_clear+0x52>
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4413      	add	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	895b      	ldrh	r3, [r3, #10]
 80025d8:	461a      	mov	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	4293      	cmp	r3, r2
 80025de:	d20b      	bcs.n	80025f8 <dir_clear+0x76>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7858      	ldrb	r0, [r3, #1]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	441a      	add	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	f7ff f87b 	bl	80016e8 <disk_write>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0e9      	beq.n	80025cc <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	895b      	ldrh	r3, [r3, #10]
 80025fc:	461a      	mov	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4293      	cmp	r3, r2
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002628:	d204      	bcs.n	8002634 <dir_sdi+0x22>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <dir_sdi+0x26>
		return FR_INT_ERR;
 8002634:	2302      	movs	r3, #2
 8002636:	e063      	b.n	8002700 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <dir_sdi+0x46>
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <dir_sdi+0x46>
		clst = fs->dirbase;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	8912      	ldrh	r2, [r2, #8]
 8002666:	4293      	cmp	r3, r2
 8002668:	d301      	bcc.n	800266e <dir_sdi+0x5c>
 800266a:	2302      	movs	r3, #2
 800266c:	e048      	b.n	8002700 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
 8002676:	e029      	b.n	80026cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	895b      	ldrh	r3, [r3, #10]
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002680:	e019      	b.n	80026b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fcb9 	bl	8001ffe <get_fat>
 800268c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d101      	bne.n	800269a <dir_sdi+0x88>
 8002696:	2301      	movs	r3, #1
 8002698:	e032      	b.n	8002700 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d904      	bls.n	80026aa <dir_sdi+0x98>
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d301      	bcc.n	80026ae <dir_sdi+0x9c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e028      	b.n	8002700 <dir_sdi+0xee>
			ofs -= csz;
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d2e1      	bcs.n	8002682 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80026be:	6979      	ldr	r1, [r7, #20]
 80026c0:	6938      	ldr	r0, [r7, #16]
 80026c2:	f7ff fc7d 	bl	8001fc0 <clst2sect>
 80026c6:	4602      	mov	r2, r0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <dir_sdi+0xcc>
 80026da:	2302      	movs	r3, #2
 80026dc:	e010      	b.n	8002700 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	0a5b      	lsrs	r3, r3, #9
 80026e6:	441a      	add	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	3320      	adds	r3, #32
 800271e:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002726:	d302      	bcc.n	800272e <dir_next+0x26>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <dir_next+0x32>
 8002736:	2304      	movs	r3, #4
 8002738:	e078      	b.n	800282c <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	2b00      	cmp	r3, #0
 8002742:	d166      	bne.n	8002812 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	8912      	ldrh	r2, [r2, #8]
 800275e:	4293      	cmp	r3, r2
 8002760:	d357      	bcc.n	8002812 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
 8002768:	2304      	movs	r3, #4
 800276a:	e05f      	b.n	800282c <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0a5b      	lsrs	r3, r3, #9
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	8952      	ldrh	r2, [r2, #10]
 8002774:	3a01      	subs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d14a      	bne.n	8002812 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7ff fc3a 	bl	8001ffe <get_fat>
 800278a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d801      	bhi.n	8002796 <dir_next+0x8e>
 8002792:	2302      	movs	r3, #2
 8002794:	e04a      	b.n	800282c <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d101      	bne.n	80027a2 <dir_next+0x9a>
 800279e:	2301      	movs	r3, #1
 80027a0:	e044      	b.n	800282c <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d328      	bcc.n	80027fe <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
 80027b8:	2304      	movs	r3, #4
 80027ba:	e037      	b.n	800282c <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f7ff fe0b 	bl	80023e0 <create_chain>
 80027ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <dir_next+0xce>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e02a      	b.n	800282c <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <dir_next+0xd8>
 80027dc:	2302      	movs	r3, #2
 80027de:	e025      	b.n	800282c <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d101      	bne.n	80027ec <dir_next+0xe4>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01f      	b.n	800282c <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f7ff fec7 	bl	8002582 <dir_clear>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <dir_next+0xf6>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e016      	b.n	800282c <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8002804:	6979      	ldr	r1, [r7, #20]
 8002806:	6938      	ldr	r0, [r7, #16]
 8002808:	f7ff fbda 	bl	8001fc0 <clst2sect>
 800280c:	4602      	mov	r2, r0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002844:	2100      	movs	r1, #0
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fee3 	bl	8002612 <dir_sdi>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12b      	bne.n	80028ae <dir_alloc+0x7a>
		n = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4619      	mov	r1, r3
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fb12 	bl	8001e8a <move_window>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11d      	bne.n	80028ac <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2be5      	cmp	r3, #229	; 0xe5
 8002878:	d004      	beq.n	8002884 <dir_alloc+0x50>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	3301      	adds	r3, #1
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d102      	bne.n	8002898 <dir_alloc+0x64>
 8002892:	e00c      	b.n	80028ae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8002898:	2101      	movs	r1, #1
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff34 	bl	8002708 <dir_next>
 80028a0:	4603      	mov	r3, r0
 80028a2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0d7      	beq.n	800285a <dir_alloc+0x26>
 80028aa:	e000      	b.n	80028ae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80028ac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d101      	bne.n	80028b8 <dir_alloc+0x84>
 80028b4:	2307      	movs	r3, #7
 80028b6:	75fb      	strb	r3, [r7, #23]
	return res;
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	331a      	adds	r3, #26
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f955 	bl	8001b80 <ld_word>
 80028d6:	4603      	mov	r3, r0
 80028d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d109      	bne.n	80028f6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	3314      	adds	r3, #20
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f94a 	bl	8001b80 <ld_word>
 80028ec:	4603      	mov	r3, r0
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	331a      	adds	r3, #26
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	b292      	uxth	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f96d 	bl	8001bf6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d109      	bne.n	8002938 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f103 0214 	add.w	r2, r3, #20
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	b29b      	uxth	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff f95f 	bl	8001bf6 <st_word>
	}
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800294a:	2304      	movs	r3, #4
 800294c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8002954:	e03c      	b.n	80029d0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4619      	mov	r1, r3
 800295c:	6938      	ldr	r0, [r7, #16]
 800295e:	f7ff fa94 	bl	8001e8a <move_window>
 8002962:	4603      	mov	r3, r0
 8002964:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d136      	bne.n	80029da <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800297a:	2304      	movs	r3, #4
 800297c:	75fb      	strb	r3, [r7, #23]
 800297e:	e031      	b.n	80029e4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	330b      	adds	r3, #11
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800298c:	73bb      	strb	r3, [r7, #14]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7bba      	ldrb	r2, [r7, #14]
 8002992:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2be5      	cmp	r3, #229	; 0xe5
 8002998:	d011      	beq.n	80029be <dir_read+0x7e>
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b2e      	cmp	r3, #46	; 0x2e
 800299e:	d00e      	beq.n	80029be <dir_read+0x7e>
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	d00b      	beq.n	80029be <dir_read+0x7e>
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	f023 0320 	bic.w	r3, r3, #32
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00f      	beq.n	80029de <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fea1 	bl	8002708 <dir_next>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d108      	bne.n	80029e2 <dir_read+0xa2>
	while (dp->sect) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1be      	bne.n	8002956 <dir_read+0x16>
 80029d8:	e004      	b.n	80029e4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <dir_read+0xa4>
				break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80029e2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <dir_read+0xb0>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
	return res;
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fe01 	bl	8002612 <dir_sdi>
 8002a10:	4603      	mov	r3, r0
 8002a12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <dir_find+0x24>
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	e03e      	b.n	8002a9c <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6938      	ldr	r0, [r7, #16]
 8002a26:	f7ff fa30 	bl	8001e8a <move_window>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d12f      	bne.n	8002a94 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <dir_find+0x4e>
 8002a42:	2304      	movs	r3, #4
 8002a44:	75fb      	strb	r3, [r7, #23]
 8002a46:	e028      	b.n	8002a9a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	330b      	adds	r3, #11
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	330b      	adds	r3, #11
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <dir_find+0x86>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69d8      	ldr	r0, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3320      	adds	r3, #32
 8002a72:	220b      	movs	r2, #11
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7ff f940 	bl	8001cfa <mem_cmp>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8002a80:	2100      	movs	r1, #0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fe40 	bl	8002708 <dir_next>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0c5      	beq.n	8002a1e <dir_find+0x24>
 8002a92:	e002      	b.n	8002a9a <dir_find+0xa0>
		if (res != FR_OK) break;
 8002a94:	bf00      	nop
 8002a96:	e000      	b.n	8002a9a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002a98:	bf00      	nop

	return res;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff febd 	bl	8002834 <dir_alloc>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d11c      	bne.n	8002afe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68b8      	ldr	r0, [r7, #8]
 8002acc:	f7ff f9dd 	bl	8001e8a <move_window>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d111      	bne.n	8002afe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f8ef 	bl	8001cc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69d8      	ldr	r0, [r3, #28]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3320      	adds	r3, #32
 8002af0:	220b      	movs	r2, #11
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7ff f8c6 	bl	8001c84 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2201      	movs	r2, #1
 8002afc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d052      	beq.n	8002bc6 <get_fileinfo+0xbe>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 8002b28:	e021      	b.n	8002b6e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	1c59      	adds	r1, r3, #1
 8002b32:	6179      	str	r1, [r7, #20]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d100      	bne.n	8002b42 <get_fileinfo+0x3a>
 8002b40:	e015      	b.n	8002b6e <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d101      	bne.n	8002b4c <get_fileinfo+0x44>
 8002b48:	23e5      	movs	r3, #229	; 0xe5
 8002b4a:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b09      	cmp	r3, #9
 8002b50:	d106      	bne.n	8002b60 <get_fileinfo+0x58>
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	613a      	str	r2, [r7, #16]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	222e      	movs	r2, #46	; 0x2e
 8002b5e:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	613a      	str	r2, [r7, #16]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b0a      	cmp	r3, #10
 8002b72:	d9da      	bls.n	8002b2a <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3309      	adds	r3, #9
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	7ada      	ldrb	r2, [r3, #11]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	331c      	adds	r3, #28
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f80d 	bl	8001bb0 <ld_dword>
 8002b96:	4602      	mov	r2, r0
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	3316      	adds	r3, #22
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ffec 	bl	8001b80 <ld_word>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe ffe2 	bl	8001b80 <ld_word>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	809a      	strh	r2, [r3, #4]
 8002bc4:	e000      	b.n	8002bc8 <get_fileinfo+0xc0>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8002bc6:	bf00      	nop
}
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3320      	adds	r3, #32
 8002be4:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8002be6:	220b      	movs	r2, #11
 8002be8:	2120      	movs	r1, #32
 8002bea:	6938      	ldr	r0, [r7, #16]
 8002bec:	f7ff f86b 	bl	8001cc6 <mem_set>
	si = i = 0; ni = 8;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	61fa      	str	r2, [r7, #28]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d97c      	bls.n	8002d0e <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c18:	2b2f      	cmp	r3, #47	; 0x2f
 8002c1a:	d007      	beq.n	8002c2c <create_name+0x5c>
 8002c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c20:	2b5c      	cmp	r3, #92	; 0x5c
 8002c22:	d110      	bne.n	8002c46 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002c24:	e002      	b.n	8002c2c <create_name+0x5c>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b2f      	cmp	r3, #47	; 0x2f
 8002c36:	d0f6      	beq.n	8002c26 <create_name+0x56>
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b5c      	cmp	r3, #92	; 0x5c
 8002c42:	d0f0      	beq.n	8002c26 <create_name+0x56>
			break;
 8002c44:	e064      	b.n	8002d10 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c4c:	d003      	beq.n	8002c56 <create_name+0x86>
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d30d      	bcc.n	8002c72 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2b0b      	cmp	r3, #11
 8002c5a:	d003      	beq.n	8002c64 <create_name+0x94>
 8002c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c60:	2b2e      	cmp	r3, #46	; 0x2e
 8002c62:	d001      	beq.n	8002c68 <create_name+0x98>
 8002c64:	2306      	movs	r3, #6
 8002c66:	e06f      	b.n	8002d48 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8002c68:	2308      	movs	r3, #8
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	230b      	movs	r3, #11
 8002c6e:	623b      	str	r3, [r7, #32]
			continue;
 8002c70:	e04c      	b.n	8002d0c <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8002c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f881 	bl	8001d7e <dbc_1st>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	61fa      	str	r2, [r7, #28]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f893 	bl	8001dbe <dbc_2nd>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <create_name+0xd8>
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d301      	bcc.n	8002cac <create_name+0xdc>
 8002ca8:	2306      	movs	r3, #6
 8002caa:	e04d      	b.n	8002d48 <create_name+0x178>
			sfn[i++] = c;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	61ba      	str	r2, [r7, #24]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002cba:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	61ba      	str	r2, [r7, #24]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e797      	b.n	8002bfc <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	481f      	ldr	r0, [pc, #124]	; (8002d50 <create_name+0x180>)
 8002cd4:	f7ff f838 	bl	8001d48 <chk_chr>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <create_name+0x112>
 8002cde:	2306      	movs	r3, #6
 8002ce0:	e032      	b.n	8002d48 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce6:	2b60      	cmp	r3, #96	; 0x60
 8002ce8:	d908      	bls.n	8002cfc <create_name+0x12c>
 8002cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cee:	2b7a      	cmp	r3, #122	; 0x7a
 8002cf0:	d804      	bhi.n	8002cfc <create_name+0x12c>
 8002cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf6:	3b20      	subs	r3, #32
 8002cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	61ba      	str	r2, [r7, #24]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8002d0c:	e776      	b.n	8002bfc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002d0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	441a      	add	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <create_name+0x154>
 8002d20:	2306      	movs	r3, #6
 8002d22:	e011      	b.n	8002d48 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2be5      	cmp	r3, #229	; 0xe5
 8002d2a:	d102      	bne.n	8002d32 <create_name+0x162>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2205      	movs	r2, #5
 8002d30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d801      	bhi.n	8002d3e <create_name+0x16e>
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	e000      	b.n	8002d40 <create_name+0x170>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	330b      	adds	r3, #11
 8002d44:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8002d46:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	08009578 	.word	0x08009578

08002d54 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002d64:	e002      	b.n	8002d6c <follow_path+0x18>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b2f      	cmp	r3, #47	; 0x2f
 8002d72:	d0f8      	beq.n	8002d66 <follow_path+0x12>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b5c      	cmp	r3, #92	; 0x5c
 8002d7a:	d0f4      	beq.n	8002d66 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b1f      	cmp	r3, #31
 8002d88:	d80a      	bhi.n	8002da0 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002d92:	2100      	movs	r1, #0
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fc3c 	bl	8002612 <dir_sdi>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]
 8002d9e:	e043      	b.n	8002e28 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002da0:	463b      	mov	r3, r7
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff13 	bl	8002bd0 <create_name>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d134      	bne.n	8002e1e <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff fe20 	bl	80029fa <dir_find>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002dc4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d127      	bne.n	8002e22 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d122      	bne.n	8002e22 <follow_path+0xce>
 8002ddc:	2305      	movs	r3, #5
 8002dde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002de0:	e01f      	b.n	8002e22 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11c      	bne.n	8002e26 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	799b      	ldrb	r3, [r3, #6]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	75fb      	strb	r3, [r7, #23]
 8002dfc:	e014      	b.n	8002e28 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	4413      	add	r3, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6938      	ldr	r0, [r7, #16]
 8002e12:	f7ff fd56 	bl	80028c2 <ld_clust>
 8002e16:	4602      	mov	r2, r0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002e1c:	e7c0      	b.n	8002da0 <follow_path+0x4c>
			if (res != FR_OK) break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <follow_path+0xd4>
				break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002e26:	bf00      	nop
			}
		}
	}

	return res;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b089      	sub	sp, #36	; 0x24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <get_ldnumber+0x22>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	e02d      	b.n	8002eb0 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	61fa      	str	r2, [r7, #28]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d902      	bls.n	8002e6a <get_ldnumber+0x38>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b3a      	cmp	r3, #58	; 0x3a
 8002e68:	d1f4      	bne.n	8002e54 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b3a      	cmp	r3, #58	; 0x3a
 8002e6e:	d11c      	bne.n	8002eaa <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b2f      	cmp	r3, #47	; 0x2f
 8002e7a:	d90c      	bls.n	8002e96 <get_ldnumber+0x64>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b39      	cmp	r3, #57	; 0x39
 8002e82:	d808      	bhi.n	8002e96 <get_ldnumber+0x64>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	3302      	adds	r3, #2
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d103      	bne.n	8002e96 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dc04      	bgt.n	8002ea6 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	e002      	b.n	8002eb0 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002eae:	697b      	ldr	r3, [r7, #20]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3724      	adds	r7, #36	; 0x24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	70da      	strb	r2, [r3, #3]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe ffd7 	bl	8001e8a <move_window>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <check_fs+0x2a>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e038      	b.n	8002f58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3330      	adds	r3, #48	; 0x30
 8002eea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fe46 	bl	8001b80 <ld_word>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <check_fs+0x48>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e029      	b.n	8002f58 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f0a:	2be9      	cmp	r3, #233	; 0xe9
 8002f0c:	d009      	beq.n	8002f22 <check_fs+0x66>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f14:	2beb      	cmp	r3, #235	; 0xeb
 8002f16:	d004      	beq.n	8002f22 <check_fs+0x66>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f1e:	2be8      	cmp	r3, #232	; 0xe8
 8002f20:	d119      	bne.n	8002f56 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3330      	adds	r3, #48	; 0x30
 8002f26:	3336      	adds	r3, #54	; 0x36
 8002f28:	2203      	movs	r2, #3
 8002f2a:	490d      	ldr	r1, [pc, #52]	; (8002f60 <check_fs+0xa4>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fee4 	bl	8001cfa <mem_cmp>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <check_fs+0x80>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e00d      	b.n	8002f58 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3330      	adds	r3, #48	; 0x30
 8002f40:	3352      	adds	r3, #82	; 0x52
 8002f42:	2205      	movs	r2, #5
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <check_fs+0xa8>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fed7 	bl	8001cfa <mem_cmp>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <check_fs+0x9a>
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002f56:	2302      	movs	r3, #2
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	08009588 	.word	0x08009588
 8002f64:	0800958c 	.word	0x0800958c

08002f68 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b096      	sub	sp, #88	; 0x58
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff58 	bl	8002e32 <get_ldnumber>
 8002f82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da01      	bge.n	8002f8e <find_volume+0x26>
 8002f8a:	230b      	movs	r3, #11
 8002f8c:	e238      	b.n	8003400 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002f8e:	4aa8      	ldr	r2, [pc, #672]	; (8003230 <find_volume+0x2c8>)
 8002f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <find_volume+0x3a>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	e22e      	b.n	8003400 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01a      	beq.n	8002fee <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fb13 	bl	80015e8 <disk_status>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10c      	bne.n	8002fee <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <find_volume+0x82>
 8002fda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002fe6:	230a      	movs	r3, #10
 8002fe8:	e20a      	b.n	8003400 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002fea:	2300      	movs	r3, #0
 8002fec:	e208      	b.n	8003400 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe fa07 	bl	8001414 <disk_initialize>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800300c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003018:	2303      	movs	r3, #3
 800301a:	e1f1      	b.n	8003400 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <find_volume+0xca>
 8003022:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800302e:	230a      	movs	r3, #10
 8003030:	e1e6      	b.n	8003400 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003036:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800303a:	f7ff ff3f 	bl	8002ebc <check_fs>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003048:	2b02      	cmp	r3, #2
 800304a:	d14b      	bne.n	80030e4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800304c:	2300      	movs	r3, #0
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
 8003050:	e01f      	b.n	8003092 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003060:	4413      	add	r3, r2
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	3304      	adds	r3, #4
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <find_volume+0x114>
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	3308      	adds	r3, #8
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fd9c 	bl	8001bb0 <ld_dword>
 8003078:	4602      	mov	r2, r0
 800307a:	e000      	b.n	800307e <find_volume+0x116>
 800307c:	2200      	movs	r2, #0
 800307e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003086:	440b      	add	r3, r1
 8003088:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	3301      	adds	r3, #1
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
 8003092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003094:	2b03      	cmp	r3, #3
 8003096:	d9dc      	bls.n	8003052 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003098:	2300      	movs	r3, #0
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 800309c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <find_volume+0x140>
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	3b01      	subs	r3, #1
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80030a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030b0:	4413      	add	r3, r2
 80030b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80030b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80030b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <find_volume+0x162>
 80030be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030c2:	f7ff fefb 	bl	8002ebc <check_fs>
 80030c6:	4603      	mov	r3, r0
 80030c8:	e000      	b.n	80030cc <find_volume+0x164>
 80030ca:	2303      	movs	r3, #3
 80030cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80030d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d905      	bls.n	80030e4 <find_volume+0x17c>
 80030d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030da:	3301      	adds	r3, #1
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
 80030de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d9e1      	bls.n	80030a8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80030e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d101      	bne.n	80030f0 <find_volume+0x188>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e187      	b.n	8003400 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80030f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d901      	bls.n	80030fc <find_volume+0x194>
 80030f8:	230d      	movs	r3, #13
 80030fa:	e181      	b.n	8003400 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	3330      	adds	r3, #48	; 0x30
 8003100:	330b      	adds	r3, #11
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fd3c 	bl	8001b80 <ld_word>
 8003108:	4603      	mov	r3, r0
 800310a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310e:	d001      	beq.n	8003114 <find_volume+0x1ac>
 8003110:	230d      	movs	r3, #13
 8003112:	e175      	b.n	8003400 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	3330      	adds	r3, #48	; 0x30
 8003118:	3316      	adds	r3, #22
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fd30 	bl	8001b80 <ld_word>
 8003120:	4603      	mov	r3, r0
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <find_volume+0x1d0>
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fd3d 	bl	8001bb0 <ld_dword>
 8003136:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800313c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	789b      	ldrb	r3, [r3, #2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d005      	beq.n	800315c <find_volume+0x1f4>
 8003150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003152:	789b      	ldrb	r3, [r3, #2]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d001      	beq.n	800315c <find_volume+0x1f4>
 8003158:	230d      	movs	r3, #13
 800315a:	e151      	b.n	8003400 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	789b      	ldrb	r3, [r3, #2]
 8003160:	461a      	mov	r2, r3
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b29a      	uxth	r2, r3
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	895b      	ldrh	r3, [r3, #10]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <find_volume+0x228>
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	895b      	ldrh	r3, [r3, #10]
 8003182:	461a      	mov	r2, r3
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	895b      	ldrh	r3, [r3, #10]
 8003188:	3b01      	subs	r3, #1
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <find_volume+0x22c>
 8003190:	230d      	movs	r3, #13
 8003192:	e135      	b.n	8003400 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	3330      	adds	r3, #48	; 0x30
 8003198:	3311      	adds	r3, #17
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fcf0 	bl	8001b80 <ld_word>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	891b      	ldrh	r3, [r3, #8]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <find_volume+0x252>
 80031b6:	230d      	movs	r3, #13
 80031b8:	e122      	b.n	8003400 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	3330      	adds	r3, #48	; 0x30
 80031be:	3313      	adds	r3, #19
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fcdd 	bl	8001b80 <ld_word>
 80031c6:	4603      	mov	r3, r0
 80031c8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80031ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <find_volume+0x276>
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	3330      	adds	r3, #48	; 0x30
 80031d4:	3320      	adds	r3, #32
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fcea 	bl	8001bb0 <ld_dword>
 80031dc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	3330      	adds	r3, #48	; 0x30
 80031e2:	330e      	adds	r3, #14
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fccb 	bl	8001b80 <ld_word>
 80031ea:	4603      	mov	r3, r0
 80031ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80031ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <find_volume+0x290>
 80031f4:	230d      	movs	r3, #13
 80031f6:	e103      	b.n	8003400 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80031f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	4413      	add	r3, r2
 80031fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003200:	8912      	ldrh	r2, [r2, #8]
 8003202:	0912      	lsrs	r2, r2, #4
 8003204:	b292      	uxth	r2, r2
 8003206:	4413      	add	r3, r2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800320a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	429a      	cmp	r2, r3
 8003210:	d201      	bcs.n	8003216 <find_volume+0x2ae>
 8003212:	230d      	movs	r3, #13
 8003214:	e0f4      	b.n	8003400 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321e:	8952      	ldrh	r2, [r2, #10]
 8003220:	fbb3 f3f2 	udiv	r3, r3, r2
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <find_volume+0x2cc>
 800322c:	230d      	movs	r3, #13
 800322e:	e0e7      	b.n	8003400 <find_volume+0x498>
 8003230:	20000240 	.word	0x20000240
		fmt = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	4a72      	ldr	r2, [pc, #456]	; (8003408 <find_volume+0x4a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d802      	bhi.n	8003248 <find_volume+0x2e0>
 8003242:	2303      	movs	r3, #3
 8003244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800324e:	4293      	cmp	r3, r2
 8003250:	d802      	bhi.n	8003258 <find_volume+0x2f0>
 8003252:	2302      	movs	r3, #2
 8003254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800325e:	4293      	cmp	r3, r2
 8003260:	d802      	bhi.n	8003268 <find_volume+0x300>
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8003268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <find_volume+0x30c>
 8003270:	230d      	movs	r3, #13
 8003272:	e0c5      	b.n	8003400 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	1c9a      	adds	r2, r3, #2
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003280:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003282:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003286:	441a      	add	r2, r3
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800328c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	441a      	add	r2, r3
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800329a:	2b03      	cmp	r3, #3
 800329c:	d11e      	bne.n	80032dc <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	3330      	adds	r3, #48	; 0x30
 80032a2:	332a      	adds	r3, #42	; 0x2a
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fc6b 	bl	8001b80 <ld_word>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <find_volume+0x34c>
 80032b0:	230d      	movs	r3, #13
 80032b2:	e0a5      	b.n	8003400 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	891b      	ldrh	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <find_volume+0x358>
 80032bc:	230d      	movs	r3, #13
 80032be:	e09f      	b.n	8003400 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	3330      	adds	r3, #48	; 0x30
 80032c4:	332c      	adds	r3, #44	; 0x2c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fc72 	bl	8001bb0 <ld_dword>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	e01f      	b.n	800331c <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	891b      	ldrh	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <find_volume+0x380>
 80032e4:	230d      	movs	r3, #13
 80032e6:	e08b      	b.n	8003400 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ee:	441a      	add	r2, r3
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80032f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d103      	bne.n	8003304 <find_volume+0x39c>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	e00a      	b.n	800331a <find_volume+0x3b2>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	085a      	lsrs	r2, r3, #1
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003326:	0a5b      	lsrs	r3, r3, #9
 8003328:	429a      	cmp	r2, r3
 800332a:	d201      	bcs.n	8003330 <find_volume+0x3c8>
 800332c:	230d      	movs	r3, #13
 800332e:	e067      	b.n	8003400 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	611a      	str	r2, [r3, #16]
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8003346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800334a:	2b03      	cmp	r3, #3
 800334c:	d149      	bne.n	80033e2 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	3330      	adds	r3, #48	; 0x30
 8003352:	3330      	adds	r3, #48	; 0x30
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fc13 	bl	8001b80 <ld_word>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d140      	bne.n	80033e2 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003362:	3301      	adds	r3, #1
 8003364:	4619      	mov	r1, r3
 8003366:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003368:	f7fe fd8f 	bl	8001e8a <move_window>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d137      	bne.n	80033e2 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2200      	movs	r2, #0
 8003376:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	3330      	adds	r3, #48	; 0x30
 800337c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fbfd 	bl	8001b80 <ld_word>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800338e:	429a      	cmp	r2, r3
 8003390:	d127      	bne.n	80033e2 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	3330      	adds	r3, #48	; 0x30
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fc0a 	bl	8001bb0 <ld_dword>
 800339c:	4602      	mov	r2, r0
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <find_volume+0x4a4>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d11e      	bne.n	80033e2 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	3330      	adds	r3, #48	; 0x30
 80033a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe fbff 	bl	8001bb0 <ld_dword>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <find_volume+0x4a8>)
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d113      	bne.n	80033e2 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	3330      	adds	r3, #48	; 0x30
 80033be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fbf4 	bl	8001bb0 <ld_dword>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	3330      	adds	r3, #48	; 0x30
 80033d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fbea 	bl	8001bb0 <ld_dword>
 80033dc:	4602      	mov	r2, r0
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80033e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <find_volume+0x4ac>)
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <find_volume+0x4ac>)
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <find_volume+0x4ac>)
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3758      	adds	r7, #88	; 0x58
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	0ffffff5 	.word	0x0ffffff5
 800340c:	41615252 	.word	0x41615252
 8003410:	61417272 	.word	0x61417272
 8003414:	20000244 	.word	0x20000244

08003418 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003422:	2309      	movs	r3, #9
 8003424:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01c      	beq.n	8003466 <validate+0x4e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d018      	beq.n	8003466 <validate+0x4e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d013      	beq.n	8003466 <validate+0x4e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	889a      	ldrh	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	88db      	ldrh	r3, [r3, #6]
 8003448:	429a      	cmp	r2, r3
 800344a:	d10c      	bne.n	8003466 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe f8c8 	bl	80015e8 <disk_status>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <validate+0x4e>
			res = FR_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <validate+0x5a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	e000      	b.n	8003474 <validate+0x5c>
 8003472:	2300      	movs	r3, #0
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	6013      	str	r3, [r2, #0]
	return res;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003496:	f107 0310 	add.w	r3, r7, #16
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fcc9 	bl	8002e32 <get_ldnumber>
 80034a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da01      	bge.n	80034ac <f_mount+0x28>
 80034a8:	230b      	movs	r3, #11
 80034aa:	e025      	b.n	80034f8 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <f_mount+0x7c>)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <f_mount+0x7c>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <f_mount+0x5e>
 80034de:	2300      	movs	r3, #0
 80034e0:	e00a      	b.n	80034f8 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80034e2:	f107 010c 	add.w	r1, r7, #12
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	2200      	movs	r2, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fd3b 	bl	8002f68 <find_volume>
 80034f2:	4603      	mov	r3, r0
 80034f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000240 	.word	0x20000240

08003504 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b099      	sub	sp, #100	; 0x64
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <f_open+0x18>
 8003518:	2309      	movs	r3, #9
 800351a:	e172      	b.n	8003802 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003522:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003524:	79fa      	ldrb	r2, [r7, #7]
 8003526:	f107 0114 	add.w	r1, r7, #20
 800352a:	f107 0308 	add.w	r3, r7, #8
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fd1a 	bl	8002f68 <find_volume>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800353a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 8156 	bne.w	80037f0 <f_open+0x2ec>
		dj.obj.fs = fs;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	f107 0318 	add.w	r3, r7, #24
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fbff 	bl	8002d54 <follow_path>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800355c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003564:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003568:	b25b      	sxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	da02      	bge.n	8003574 <f_open+0x70>
				res = FR_INVALID_NAME;
 800356e:	2306      	movs	r3, #6
 8003570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 031c 	and.w	r3, r3, #28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d073      	beq.n	8003666 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 800357e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800358a:	2b04      	cmp	r3, #4
 800358c:	d107      	bne.n	800359e <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fa86 	bl	8002aa4 <dir_register>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	71fb      	strb	r3, [r7, #7]
 80035a6:	e010      	b.n	80035ca <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80035a8:	7fbb      	ldrb	r3, [r7, #30]
 80035aa:	f003 0311 	and.w	r3, r3, #17
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <f_open+0xb6>
					res = FR_DENIED;
 80035b2:	2307      	movs	r3, #7
 80035b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80035b8:	e007      	b.n	80035ca <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <f_open+0xc6>
 80035c4:	2308      	movs	r3, #8
 80035c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80035ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d163      	bne.n	800369a <f_open+0x196>
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05e      	beq.n	800369a <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f96d 	bl	80028c2 <ld_clust>
 80035e8:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80035ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ec:	f103 040e 	add.w	r4, r3, #14
 80035f0:	f7fe fabc 	bl	8001b6c <get_fattime>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4619      	mov	r1, r3
 80035f8:	4620      	mov	r0, r4
 80035fa:	f7fe fb17 	bl	8001c2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	330b      	adds	r3, #11
 8003602:	2220      	movs	r2, #32
 8003604:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800360a:	2200      	movs	r2, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff f977 	bl	8002900 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	331c      	adds	r3, #28
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe fb07 	bl	8001c2c <st_dword>
					fs->wflag = 1;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2201      	movs	r2, #1
 8003622:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003626:	2b00      	cmp	r3, #0
 8003628:	d037      	beq.n	800369a <f_open+0x196>
						dw = fs->winsect;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8003630:	f107 0318 	add.w	r3, r7, #24
 8003634:	2200      	movs	r2, #0
 8003636:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fe6c 	bl	8002316 <remove_chain>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003648:	2b00      	cmp	r3, #0
 800364a:	d126      	bne.n	800369a <f_open+0x196>
							res = move_window(fs, dw);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fc1a 	bl	8001e8a <move_window>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003660:	3a01      	subs	r2, #1
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	e019      	b.n	800369a <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8003666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800366a:	2b00      	cmp	r3, #0
 800366c:	d115      	bne.n	800369a <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800366e:	7fbb      	ldrb	r3, [r7, #30]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <f_open+0x17c>
					res = FR_NO_FILE;
 8003678:	2304      	movs	r3, #4
 800367a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800367e:	e00c      	b.n	800369a <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <f_open+0x196>
 800368a:	7fbb      	ldrb	r3, [r7, #30]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <f_open+0x196>
						res = FR_DENIED;
 8003694:	2307      	movs	r3, #7
 8003696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800369a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <f_open+0x1b0>
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80036bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80036c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8092 	bne.w	80037f0 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f8f5 	bl	80028c2 <ld_clust>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80036de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e0:	331c      	adds	r3, #28
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fa64 	bl	8001bb0 <ld_dword>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	88da      	ldrh	r2, [r3, #6]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	79fa      	ldrb	r2, [r7, #7]
 8003700:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3328      	adds	r3, #40	; 0x28
 8003718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fad1 	bl	8001cc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d060      	beq.n	80037f0 <f_open+0x2ec>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d05c      	beq.n	80037f0 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	895b      	ldrh	r3, [r3, #10]
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	657b      	str	r3, [r7, #84]	; 0x54
 8003752:	e016      	b.n	8003782 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fc50 	bl	8001ffe <get_fat>
 800375e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003762:	2b01      	cmp	r3, #1
 8003764:	d802      	bhi.n	800376c <f_open+0x268>
 8003766:	2302      	movs	r3, #2
 8003768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800376c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d102      	bne.n	800377a <f_open+0x276>
 8003774:	2301      	movs	r3, #1
 8003776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800377a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800377c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	657b      	str	r3, [r7, #84]	; 0x54
 8003782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <f_open+0x28e>
 800378a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800378c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378e:	429a      	cmp	r2, r3
 8003790:	d8e0      	bhi.n	8003754 <f_open+0x250>
				}
				fp->clust = clst;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003796:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800379c:	2b00      	cmp	r3, #0
 800379e:	d127      	bne.n	80037f0 <f_open+0x2ec>
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d022      	beq.n	80037f0 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fc06 	bl	8001fc0 <clst2sect>
 80037b4:	6478      	str	r0, [r7, #68]	; 0x44
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <f_open+0x2c0>
						res = FR_INT_ERR;
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80037c2:	e015      	b.n	80037f0 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80037c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c6:	0a5a      	lsrs	r2, r3, #9
 80037c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	7858      	ldrb	r0, [r3, #1]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	2301      	movs	r3, #1
 80037e0:	f7fd ff18 	bl	8001614 <disk_read>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <f_open+0x2ec>
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80037f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <f_open+0x2fa>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80037fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003802:	4618      	mov	r0, r3
 8003804:	3764      	adds	r7, #100	; 0x64
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b08e      	sub	sp, #56	; 0x38
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f107 0214 	add.w	r2, r7, #20
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fdf4 	bl	8003418 <validate>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <f_read+0x44>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	7c5b      	ldrb	r3, [r3, #17]
 8003842:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <f_read+0x4a>
 800384e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003852:	e109      	b.n	8003a68 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	7c1b      	ldrb	r3, [r3, #16]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <f_read+0x5a>
 8003860:	2307      	movs	r3, #7
 8003862:	e101      	b.n	8003a68 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	429a      	cmp	r2, r3
 8003876:	f240 80f2 	bls.w	8003a5e <f_read+0x254>
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 800387e:	e0ee      	b.n	8003a5e <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 80ba 	bne.w	8003a02 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	8952      	ldrh	r2, [r2, #10]
 8003898:	3a01      	subs	r2, #1
 800389a:	4013      	ands	r3, r2
 800389c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d123      	bne.n	80038ec <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
 80038b2:	e007      	b.n	80038c4 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f7fe fb9e 	bl	8001ffe <get_fat>
 80038c2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d804      	bhi.n	80038d4 <f_read+0xca>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2202      	movs	r2, #2
 80038ce:	745a      	strb	r2, [r3, #17]
 80038d0:	2302      	movs	r3, #2
 80038d2:	e0c9      	b.n	8003a68 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d104      	bne.n	80038e6 <f_read+0xdc>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	745a      	strb	r2, [r3, #17]
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0c0      	b.n	8003a68 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ea:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe fb63 	bl	8001fc0 <clst2sect>
 80038fa:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <f_read+0x102>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2202      	movs	r2, #2
 8003906:	745a      	strb	r2, [r3, #17]
 8003908:	2302      	movs	r3, #2
 800390a:	e0ad      	b.n	8003a68 <f_read+0x25e>
			sect += csect;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d039      	beq.n	8003994 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	4413      	add	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	8952      	ldrh	r2, [r2, #10]
 800392a:	4293      	cmp	r3, r2
 800392c:	d905      	bls.n	800393a <f_read+0x130>
					cc = fs->csize - csect;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	895b      	ldrh	r3, [r3, #10]
 8003932:	461a      	mov	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	7858      	ldrb	r0, [r3, #1]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003944:	f7fd fe66 	bl	8001614 <disk_read>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <f_read+0x14e>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	745a      	strb	r2, [r3, #17]
 8003954:	2301      	movs	r3, #1
 8003956:	e087      	b.n	8003a68 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	7c1b      	ldrb	r3, [r3, #16]
 800395c:	b25b      	sxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	da14      	bge.n	800398c <f_read+0x182>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396c:	429a      	cmp	r2, r3
 800396e:	d90d      	bls.n	800398c <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	025b      	lsls	r3, r3, #9
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	18d0      	adds	r0, r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3328      	adds	r3, #40	; 0x28
 8003982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003986:	4619      	mov	r1, r3
 8003988:	f7fe f97c 	bl	8001c84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	025b      	lsls	r3, r3, #9
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8003992:	e050      	b.n	8003a36 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	429a      	cmp	r2, r3
 800399c:	d02e      	beq.n	80039fc <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	7c1b      	ldrb	r3, [r3, #16]
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	da18      	bge.n	80039da <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	7858      	ldrb	r0, [r3, #1]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	2301      	movs	r3, #1
 80039b8:	f7fd fe96 	bl	80016e8 <disk_write>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <f_read+0x1c2>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	745a      	strb	r2, [r3, #17]
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04d      	b.n	8003a68 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	7c1b      	ldrb	r3, [r3, #16]
 80039d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	7858      	ldrb	r0, [r3, #1]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80039e4:	2301      	movs	r3, #1
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	f7fd fe14 	bl	8001614 <disk_read>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <f_read+0x1f2>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	745a      	strb	r2, [r3, #17]
 80039f8:	2301      	movs	r3, #1
 80039fa:	e035      	b.n	8003a68 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d901      	bls.n	8003a1c <f_read+0x212>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	4413      	add	r3, r2
 8003a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a32:	f7fe f927 	bl	8001c84 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	441a      	add	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	441a      	add	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f af0d 	bne.w	8003880 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3738      	adds	r7, #56	; 0x38
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	; 0x30
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f107 0210 	add.w	r2, r7, #16
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fcc1 	bl	8003418 <validate>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <f_write+0x44>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	7c5b      	ldrb	r3, [r3, #17]
 8003aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <f_write+0x4a>
 8003ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ab8:	e13f      	b.n	8003d3a <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	7c1b      	ldrb	r3, [r3, #16]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <f_write+0x5a>
 8003ac6:	2307      	movs	r3, #7
 8003ac8:	e137      	b.n	8003d3a <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	f080 8121 	bcs.w	8003d1e <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8003ae4:	e11b      	b.n	8003d1e <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 80d7 	bne.w	8003ca2 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	0a5b      	lsrs	r3, r3, #9
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	8952      	ldrh	r2, [r2, #10]
 8003afe:	3a01      	subs	r2, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d137      	bne.n	8003b7a <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10c      	bne.n	8003b2c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fc5c 	bl	80023e0 <create_chain>
 8003b28:	62b8      	str	r0, [r7, #40]	; 0x28
 8003b2a:	e007      	b.n	8003b3c <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7fe fc53 	bl	80023e0 <create_chain>
 8003b3a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80f2 	beq.w	8003d28 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d104      	bne.n	8003b54 <f_write+0xe4>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	745a      	strb	r2, [r3, #17]
 8003b50:	2302      	movs	r3, #2
 8003b52:	e0f2      	b.n	8003d3a <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d104      	bne.n	8003b66 <f_write+0xf6>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	745a      	strb	r2, [r3, #17]
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0e9      	b.n	8003d3a <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6a:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <f_write+0x10a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b78:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	7c1b      	ldrb	r3, [r3, #16]
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da18      	bge.n	8003bb6 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	7858      	ldrb	r0, [r3, #1]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	2301      	movs	r3, #1
 8003b94:	f7fd fda8 	bl	80016e8 <disk_write>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <f_write+0x138>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	745a      	strb	r2, [r3, #17]
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0c8      	b.n	8003d3a <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	7c1b      	ldrb	r3, [r3, #16]
 8003bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f7fe f9fe 	bl	8001fc0 <clst2sect>
 8003bc4:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <f_write+0x166>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	745a      	strb	r2, [r3, #17]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0b1      	b.n	8003d3a <f_write+0x2ca>
			sect += csect;
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	4413      	add	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0a5b      	lsrs	r3, r3, #9
 8003be2:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03c      	beq.n	8003c64 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	4413      	add	r3, r2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	8952      	ldrh	r2, [r2, #10]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d905      	bls.n	8003c04 <f_write+0x194>
					cc = fs->csize - csect;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	895b      	ldrh	r3, [r3, #10]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	7858      	ldrb	r0, [r3, #1]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	69f9      	ldr	r1, [r7, #28]
 8003c0e:	f7fd fd6b 	bl	80016e8 <disk_write>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <f_write+0x1b2>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	745a      	strb	r2, [r3, #17]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e08b      	b.n	8003d3a <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d915      	bls.n	8003c5c <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	025b      	lsls	r3, r3, #9
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fe f81b 	bl	8001c84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	7c1b      	ldrb	r3, [r3, #16]
 8003c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	025b      	lsls	r3, r3, #9
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8003c62:	e03f      	b.n	8003ce4 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d016      	beq.n	8003c9c <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d210      	bcs.n	8003c9c <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	7858      	ldrb	r0, [r3, #1]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003c84:	2301      	movs	r3, #1
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	f7fd fcc4 	bl	8001614 <disk_read>
 8003c8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	745a      	strb	r2, [r3, #17]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e04e      	b.n	8003d3a <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d901      	bls.n	8003cbc <f_write+0x24c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	4413      	add	r3, r2
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	69f9      	ldr	r1, [r7, #28]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd ffd7 	bl	8001c84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	7c1b      	ldrb	r3, [r3, #16]
 8003cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	441a      	add	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	4413      	add	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	615a      	str	r2, [r3, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf38      	it	cc
 8003d18:	461a      	movcc	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f47f aee0 	bne.w	8003ae6 <f_write+0x76>
 8003d26:	e000      	b.n	8003d2a <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003d28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	7c1b      	ldrb	r3, [r3, #16]
 8003d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3730      	adds	r7, #48	; 0x30
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f107 0208 	add.w	r2, r7, #8
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fb60 	bl	8003418 <validate>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d168      	bne.n	8003e34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7c1b      	ldrb	r3, [r3, #16]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d062      	beq.n	8003e34 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7c1b      	ldrb	r3, [r3, #16]
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da15      	bge.n	8003da4 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	7858      	ldrb	r0, [r3, #1]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	2301      	movs	r3, #1
 8003d88:	f7fd fcae 	bl	80016e8 <disk_write>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <f_sync+0x54>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e04f      	b.n	8003e36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7c1b      	ldrb	r3, [r3, #16]
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003da4:	f7fd fee2 	bl	8001b6c <get_fattime>
 8003da8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe f869 	bl	8001e8a <move_window>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d138      	bne.n	8003e34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	330b      	adds	r3, #11
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	330b      	adds	r3, #11
 8003dd2:	f042 0220 	orr.w	r2, r2, #32
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	f7fe fd8b 	bl	8002900 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f103 021c 	add.w	r2, r3, #28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fd ff18 	bl	8001c2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3316      	adds	r3, #22
 8003e00:	6939      	ldr	r1, [r7, #16]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd ff12 	bl	8001c2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3312      	adds	r3, #18
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fef1 	bl	8001bf6 <st_word>
					fs->wflag = 1;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2201      	movs	r2, #1
 8003e18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe f861 	bl	8001ee4 <sync_fs>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7c1b      	ldrb	r3, [r3, #16]
 8003e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff7b 	bl	8003d42 <f_sync>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10e      	bne.n	8003e74 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f107 0208 	add.w	r2, r7, #8
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fada 	bl	8003418 <validate>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b088      	sub	sp, #32
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f107 0208 	add.w	r2, r7, #8
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fac1 	bl	8003418 <validate>
 8003e96:	4603      	mov	r3, r0
 8003e98:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <f_lseek+0x28>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7c5b      	ldrb	r3, [r3, #17]
 8003ea4:	77fb      	strb	r3, [r7, #31]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <f_lseek+0x32>
 8003eac:	7ffb      	ldrb	r3, [r7, #31]
 8003eae:	e10f      	b.n	80040d0 <f_lseek+0x252>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d908      	bls.n	8003ecc <f_lseek+0x4e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7c1b      	ldrb	r3, [r3, #16]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	615a      	str	r2, [r3, #20]
		if (ofs > 0) {
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80a7 	beq.w	8004032 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	895b      	ldrh	r3, [r3, #10]
 8003ee8:	025b      	lsls	r3, r3, #9
 8003eea:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01b      	beq.n	8003f2a <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1e59      	subs	r1, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d30f      	bcc.n	8003f2a <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	425b      	negs	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	e022      	b.n	8003f70 <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fa50 	bl	80023e0 <create_chain>
 8003f40:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d104      	bne.n	8003f52 <f_lseek+0xd4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	745a      	strb	r2, [r3, #17]
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0be      	b.n	80040d0 <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d104      	bne.n	8003f64 <f_lseek+0xe6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	745a      	strb	r2, [r3, #17]
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0b5      	b.n	80040d0 <f_lseek+0x252>
					fp->obj.sclust = clst;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d05d      	beq.n	8004032 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 8003f76:	e03a      	b.n	8003fee <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	441a      	add	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7c1b      	ldrb	r3, [r3, #16]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <f_lseek+0x132>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fa1f 	bl	80023e0 <create_chain>
 8003fa2:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <f_lseek+0x13e>
							ofs = 0; break;
 8003faa:	2300      	movs	r3, #0
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	e022      	b.n	8003ff6 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe f822 	bl	8001ffe <get_fat>
 8003fba:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d104      	bne.n	8003fce <f_lseek+0x150>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	745a      	strb	r2, [r3, #17]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e080      	b.n	80040d0 <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d904      	bls.n	8003fde <f_lseek+0x160>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d304      	bcc.n	8003fe8 <f_lseek+0x16a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	745a      	strb	r2, [r3, #17]
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e073      	b.n	80040d0 <f_lseek+0x252>
					fp->clust = clst;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d8c0      	bhi.n	8003f78 <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <f_lseek+0x1b4>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd ffd5 	bl	8001fc0 <clst2sect>
 8004016:	6178      	str	r0, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <f_lseek+0x1aa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	745a      	strb	r2, [r3, #17]
 8004024:	2302      	movs	r3, #2
 8004026:	e053      	b.n	80040d0 <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	0a5b      	lsrs	r3, r3, #9
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4413      	add	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	429a      	cmp	r2, r3
 800403c:	d90a      	bls.n	8004054 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7c1b      	ldrb	r3, [r3, #16]
 800404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404e:	b2da      	uxtb	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405c:	2b00      	cmp	r3, #0
 800405e:	d036      	beq.n	80040ce <f_lseek+0x250>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	d031      	beq.n	80040ce <f_lseek+0x250>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7c1b      	ldrb	r3, [r3, #16]
 800406e:	b25b      	sxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	da18      	bge.n	80040a6 <f_lseek+0x228>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	7858      	ldrb	r0, [r3, #1]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	2301      	movs	r3, #1
 8004084:	f7fd fb30 	bl	80016e8 <disk_write>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <f_lseek+0x21a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	745a      	strb	r2, [r3, #17]
 8004094:	2301      	movs	r3, #1
 8004096:	e01b      	b.n	80040d0 <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	7c1b      	ldrb	r3, [r3, #16]
 800409c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	7858      	ldrb	r0, [r3, #1]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80040b0:	2301      	movs	r3, #1
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	f7fd faae 	bl	8001614 <disk_read>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <f_lseek+0x24a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	745a      	strb	r2, [r3, #17]
 80040c4:	2301      	movs	r3, #1
 80040c6:	e003      	b.n	80040d0 <f_lseek+0x252>
#endif
			fp->sect = nsect;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <f_opendir+0x14>
 80040e8:	2309      	movs	r3, #9
 80040ea:	e04a      	b.n	8004182 <f_opendir+0xaa>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80040ec:	f107 0108 	add.w	r1, r7, #8
 80040f0:	463b      	mov	r3, r7
 80040f2:	2200      	movs	r2, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe ff37 	bl	8002f68 <find_volume>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d137      	bne.n	8004174 <f_opendir+0x9c>
		dp->obj.fs = fs;
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fe20 	bl	8002d54 <follow_path>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d125      	bne.n	800416a <f_opendir+0x92>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004124:	b25b      	sxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	db12      	blt.n	8004150 <f_opendir+0x78>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	799b      	ldrb	r3, [r3, #6]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <f_opendir+0x74>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7fe fbbf 	bl	80028c2 <ld_clust>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	e001      	b.n	8004150 <f_opendir+0x78>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800414c:	2305      	movs	r3, #5
 800414e:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <f_opendir+0x92>
				dp->obj.id = fs->id;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	88da      	ldrh	r2, [r3, #6]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800415e:	2100      	movs	r1, #0
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fe fa56 	bl	8002612 <dir_sdi>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b04      	cmp	r3, #4
 800416e:	d101      	bne.n	8004174 <f_opendir+0x9c>
 8004170:	2305      	movs	r3, #5
 8004172:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <f_opendir+0xa8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f107 0208 	add.w	r2, r7, #8
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f93c 	bl	8003418 <validate>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <f_closedir+0x26>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f107 0208 	add.w	r2, r7, #8
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff f923 	bl	8003418 <validate>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d126      	bne.n	800422a <f_readdir+0x70>
		if (!fno) {
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80041e2:	2100      	movs	r1, #0
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fe fa14 	bl	8002612 <dir_sdi>
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e01c      	b.n	800422a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
 80041f0:	2100      	movs	r1, #0
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fe fba4 	bl	8002940 <dir_read>
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d101      	bne.n	8004206 <f_readdir+0x4c>
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10e      	bne.n	800422a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe fc7a 	bl	8002b08 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8004214:	2100      	movs	r1, #0
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fe fa76 	bl	8002708 <dir_next>
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b04      	cmp	r3, #4
 8004224:	d101      	bne.n	800422a <f_readdir+0x70>
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <GetNextFileName>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* GetNextFileName()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b090      	sub	sp, #64	; 0x40
 8004238:	af00      	add	r7, sp, #0
	 FRESULT res;
	 DIR dir;
	 static FILINFO fno;
	 char* path="/";
 800423a:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <GetNextFileName+0xa4>)
 800423c:	63bb      	str	r3, [r7, #56]	; 0x38

	 int ID=0;
 800423e:	2300      	movs	r3, #0
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c

	 res = f_opendir(&dir, path);                       /* Open the directory */
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ff46 	bl	80040d8 <f_opendir>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 if (res == FR_OK) {
 8004252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11f      	bne.n	800429a <GetNextFileName+0x66>
		 for (;;) {
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	491f      	ldr	r1, [pc, #124]	; (80042dc <GetNextFileName+0xa8>)
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ffab 	bl	80041ba <f_readdir>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800426a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <GetNextFileName+0x5e>
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <GetNextFileName+0xa8>)
 8004274:	7a5b      	ldrb	r3, [r3, #9]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <GetNextFileName+0x5e>
			 else {                                       /* It is a file. */
				 if (ID < atoi(fno.fname))
 800427a:	4819      	ldr	r0, [pc, #100]	; (80042e0 <GetNextFileName+0xac>)
 800427c:	f004 fc66 	bl	8008b4c <atoi>
 8004280:	4602      	mov	r2, r0
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	4293      	cmp	r3, r2
 8004286:	dae8      	bge.n	800425a <GetNextFileName+0x26>
				 {
					 ID = atoi(fno.fname);
 8004288:	4815      	ldr	r0, [pc, #84]	; (80042e0 <GetNextFileName+0xac>)
 800428a:	f004 fc5f 	bl	8008b4c <atoi>
 800428e:	63f8      	str	r0, [r7, #60]	; 0x3c
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004290:	e7e3      	b.n	800425a <GetNextFileName+0x26>
				 }
			 }
		 }
		 f_closedir(&dir);
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff78 	bl	800418a <f_closedir>
	 }

	 ID++;
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	3301      	adds	r3, #1
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
	 char *c;
	 c=malloc(8);
 80042a0:	2008      	movs	r0, #8
 80042a2:	f004 fc81 	bl	8008ba8 <malloc>
 80042a6:	4603      	mov	r3, r0
 80042a8:	633b      	str	r3, [r7, #48]	; 0x30
	 sprintf(c, "%d", ID);
 80042aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ac:	490d      	ldr	r1, [pc, #52]	; (80042e4 <GetNextFileName+0xb0>)
 80042ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b0:	f004 fd4a 	bl	8008d48 <siprintf>
	 strcat(c,".wav");
 80042b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b6:	f7fb ff8b 	bl	80001d0 <strlen>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	4413      	add	r3, r2
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <GetNextFileName+0xb4>)
 80042c4:	6810      	ldr	r0, [r2, #0]
 80042c6:	6018      	str	r0, [r3, #0]
 80042c8:	7912      	ldrb	r2, [r2, #4]
 80042ca:	711a      	strb	r2, [r3, #4]
	 return c;
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3740      	adds	r7, #64	; 0x40
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	08009594 	.word	0x08009594
 80042dc:	20000248 	.word	0x20000248
 80042e0:	20000251 	.word	0x20000251
 80042e4:	08009598 	.word	0x08009598
 80042e8:	0800959c 	.word	0x0800959c

080042ec <NextFile>:

char * NextFile(char* file_name)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b091      	sub	sp, #68	; 0x44
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	static FILINFO fno;
	char* path="/";
 80042f4:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <NextFile+0xb4>)
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
	char * prev;
	res = f_opendir(&dir, path);                       /* Open the directory */
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff feea 	bl	80040d8 <f_opendir>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 800430a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800430e:	2b00      	cmp	r3, #0
 8004310:	d141      	bne.n	8004396 <NextFile+0xaa>
		 for (;;) {
			 res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004312:	f107 0308 	add.w	r3, r7, #8
 8004316:	4923      	ldr	r1, [pc, #140]	; (80043a4 <NextFile+0xb8>)
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff4e 	bl	80041ba <f_readdir>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 if (res != FR_OK) break;  /* Break on error*/
 8004324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004328:	2b00      	cmp	r3, #0
 800432a:	d12e      	bne.n	800438a <NextFile+0x9e>
			 if (atoi(file_name)==atoi(fno.fname)){
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f004 fc0d 	bl	8008b4c <atoi>
 8004332:	4604      	mov	r4, r0
 8004334:	481c      	ldr	r0, [pc, #112]	; (80043a8 <NextFile+0xbc>)
 8004336:	f004 fc09 	bl	8008b4c <atoi>
 800433a:	4603      	mov	r3, r0
 800433c:	429c      	cmp	r4, r3
 800433e:	d1e8      	bne.n	8004312 <NextFile+0x26>
				 prev = malloc(strlen(fno.fname));
 8004340:	4819      	ldr	r0, [pc, #100]	; (80043a8 <NextFile+0xbc>)
 8004342:	f7fb ff45 	bl	80001d0 <strlen>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fc2d 	bl	8008ba8 <malloc>
 800434e:	4603      	mov	r3, r0
 8004350:	63fb      	str	r3, [r7, #60]	; 0x3c
				 strcpy(prev, fno.fname);
 8004352:	4915      	ldr	r1, [pc, #84]	; (80043a8 <NextFile+0xbc>)
 8004354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004356:	f004 fd17 	bl	8008d88 <strcpy>
				 res = f_readdir(&dir, &fno);
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4911      	ldr	r1, [pc, #68]	; (80043a4 <NextFile+0xb8>)
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff2a 	bl	80041ba <f_readdir>
 8004366:	4603      	mov	r3, r0
 8004368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				 if (res != FR_OK || fno.fname[0] == 0) break;
 800436c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <NextFile+0xa0>
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <NextFile+0xb8>)
 8004376:	7a5b      	ldrb	r3, [r3, #9]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <NextFile+0xa0>
				 f_closedir(&dir);
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff02 	bl	800418a <f_closedir>
				 return fno.fname;
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <NextFile+0xbc>)
 8004388:	e006      	b.n	8004398 <NextFile+0xac>
			 if (res != FR_OK) break;  /* Break on error*/
 800438a:	bf00      	nop
			 }
		 }
		 f_closedir(&dir);
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fefa 	bl	800418a <f_closedir>
	 }
	 return prev;
 8004396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004398:	4618      	mov	r0, r3
 800439a:	3744      	adds	r7, #68	; 0x44
 800439c:	46bd      	mov	sp, r7
 800439e:	bd90      	pop	{r4, r7, pc}
 80043a0:	08009594 	.word	0x08009594
 80043a4:	20000260 	.word	0x20000260
 80043a8:	20000269 	.word	0x20000269

080043ac <PreviousFile>:

char * PreviousFile(char* file_name) // to jeszcze do poprawki
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b091      	sub	sp, #68	; 0x44
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
   FRESULT res;
   DIR dir;
   static FILINFO fno;
   char* path="/";
 80043b4:	4b29      	ldr	r3, [pc, #164]	; (800445c <PreviousFile+0xb0>)
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
   char* previous_name = malloc(sizeof(char)*strlen(file_name));
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fb ff09 	bl	80001d0 <strlen>
 80043be:	4603      	mov	r3, r0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f004 fbf1 	bl	8008ba8 <malloc>
 80043c6:	4603      	mov	r3, r0
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   strcpy(previous_name,file_name);
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80043ce:	f004 fcdb 	bl	8008d88 <strcpy>

   res = f_opendir(&dir, path);                       /* Open the directory */
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fe7d 	bl	80040d8 <f_opendir>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   if (res == FR_OK) {
 80043e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d132      	bne.n	8004452 <PreviousFile+0xa6>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	491b      	ldr	r1, [pc, #108]	; (8004460 <PreviousFile+0xb4>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fee1 	bl	80041ba <f_readdir>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80043fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004402:	2b00      	cmp	r3, #0
 8004404:	d120      	bne.n	8004448 <PreviousFile+0x9c>
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <PreviousFile+0xb4>)
 8004408:	7a5b      	ldrb	r3, [r3, #9]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01c      	beq.n	8004448 <PreviousFile+0x9c>
            if (atoi(file_name)==atoi(fno.fname)){
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f004 fb9c 	bl	8008b4c <atoi>
 8004414:	4604      	mov	r4, r0
 8004416:	4813      	ldr	r0, [pc, #76]	; (8004464 <PreviousFile+0xb8>)
 8004418:	f004 fb98 	bl	8008b4c <atoi>
 800441c:	4603      	mov	r3, r0
 800441e:	429c      	cmp	r4, r3
 8004420:	d101      	bne.n	8004426 <PreviousFile+0x7a>

                return previous_name;
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	e016      	b.n	8004454 <PreviousFile+0xa8>
            }
            free(previous_name);
 8004426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004428:	f004 fbc6 	bl	8008bb8 <free>
            previous_name = malloc(strlen(file_name));
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fb fecf 	bl	80001d0 <strlen>
 8004432:	4603      	mov	r3, r0
 8004434:	4618      	mov	r0, r3
 8004436:	f004 fbb7 	bl	8008ba8 <malloc>
 800443a:	4603      	mov	r3, r0
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
            strcpy(previous_name,fno.fname);
 800443e:	4909      	ldr	r1, [pc, #36]	; (8004464 <PreviousFile+0xb8>)
 8004440:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004442:	f004 fca1 	bl	8008d88 <strcpy>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004446:	e7d1      	b.n	80043ec <PreviousFile+0x40>

        }
        f_closedir(&dir);
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fe9c 	bl	800418a <f_closedir>
    }
    return previous_name;
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004454:	4618      	mov	r0, r3
 8004456:	3744      	adds	r7, #68	; 0x44
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}
 800445c:	08009594 	.word	0x08009594
 8004460:	20000278 	.word	0x20000278
 8004464:	20000281 	.word	0x20000281

08004468 <OpenFileToRead>:
static void MX_TIM4_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
/*--------------------Otwarcie pliku do odtwarzania------------------------*/
void OpenFileToRead(char *file_name)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	FRESULT fr1;
	fr1=f_open(&file, file_name, FA_READ);
 8004470:	2201      	movs	r2, #1
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4809      	ldr	r0, [pc, #36]	; (800449c <OpenFileToRead+0x34>)
 8004476:	f7ff f845 	bl	8003504 <f_open>
 800447a:	4603      	mov	r3, r0
 800447c:	73fb      	strb	r3, [r7, #15]
	sample=44;
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <OpenFileToRead+0x38>)
 8004480:	222c      	movs	r2, #44	; 0x2c
 8004482:	601a      	str	r2, [r3, #0]
	file_size=f_size(&file);
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <OpenFileToRead+0x34>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <OpenFileToRead+0x3c>)
 800448a:	6013      	str	r3, [r2, #0]
	f_lseek(&file, 44);
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	4803      	ldr	r0, [pc, #12]	; (800449c <OpenFileToRead+0x34>)
 8004490:	f7ff fcf5 	bl	8003e7e <f_lseek>

}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200004e8 	.word	0x200004e8
 80044a0:	20000290 	.word	0x20000290
 80044a4:	200002a8 	.word	0x200002a8

080044a8 <CloseFileToRead>:
void CloseFileToRead(char *file_name)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	f_close(&file);
 80044b0:	4803      	ldr	r0, [pc, #12]	; (80044c0 <CloseFileToRead+0x18>)
 80044b2:	f7ff fcc4 	bl	8003e3e <f_close>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200004e8 	.word	0x200004e8

080044c4 <ReadChunk>:
	fresult = f_close(&file);

}
/*------------------------Odczyt jednego fragmentu danych------------*/
int ReadChunk(char* file_path, uint32_t sample)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	UINT br;
	f_read(&file, data_chunk, CHUNK_SIZE*2, &br);
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d6:	4907      	ldr	r1, [pc, #28]	; (80044f4 <ReadChunk+0x30>)
 80044d8:	4807      	ldr	r0, [pc, #28]	; (80044f8 <ReadChunk+0x34>)
 80044da:	f7ff f996 	bl	800380a <f_read>
	if (CHUNK_SIZE != br) return 1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e4:	d001      	beq.n	80044ea <ReadChunk+0x26>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <ReadChunk+0x28>
	return 0;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000990 	.word	0x20000990
 80044f8:	200004e8 	.word	0x200004e8

080044fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim) //2,5,4 timer wykorzystany 3 do diody1
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	/*--------------------Odczyt z mikrofonu------------------*/
	if(htim->Instance== TIM4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a52      	ldr	r2, [pc, #328]	; (8004654 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d13e      	bne.n	800458c <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		if (recording==1)
 800450e:	4b52      	ldr	r3, [pc, #328]	; (8004658 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d13a      	bne.n	800458c <HAL_TIM_PeriodElapsedCallback+0x90>
		{
		HAL_ADC_Start(&hadc1);
 8004516:	4851      	ldr	r0, [pc, #324]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004518:	f001 fca2 	bl	8005e60 <HAL_ADC_Start>
			  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800451c:	210a      	movs	r1, #10
 800451e:	484f      	ldr	r0, [pc, #316]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004520:	f001 fd64 	bl	8005fec <HAL_ADC_PollForConversion>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d130      	bne.n	800458c <HAL_TIM_PeriodElapsedCallback+0x90>
			  {
				  adc_value = HAL_ADC_GetValue(&hadc1);
 800452a:	484c      	ldr	r0, [pc, #304]	; (800465c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800452c:	f001 fde2 	bl	80060f4 <HAL_ADC_GetValue>
 8004530:	4603      	mov	r3, r0
 8004532:	b21a      	sxth	r2, r3
 8004534:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004536:	801a      	strh	r2, [r3, #0]
				  //x = /*(int16_t)*/((2.95/(double)4096) * adc_value);
				  if( adc_value >2200)
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800453a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800453e:	f640 0298 	movw	r2, #2200	; 0x898
 8004542:	4293      	cmp	r3, r2
 8004544:	dd05      	ble.n	8004552 <HAL_TIM_PeriodElapsedCallback+0x56>
				  { x = adc_value;}
 8004546:	4b46      	ldr	r3, [pc, #280]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004548:	f9b3 2000 	ldrsh.w	r2, [r3]
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	e002      	b.n	8004558 <HAL_TIM_PeriodElapsedCallback+0x5c>
				  else {x = 0;}
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004554:	2200      	movs	r2, #0
 8004556:	801a      	strh	r2, [r3, #0]


				  data_chunk[data_iterator]  = x;
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a41      	ldr	r2, [pc, #260]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800455e:	8812      	ldrh	r2, [r2, #0]
 8004560:	b211      	sxth	r1, r2
 8004562:	4a42      	ldr	r2, [pc, #264]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004564:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_iterator++;
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004570:	6013      	str	r3, [r2, #0]
				  if (data_iterator >= CHUNK_SIZE - 1)
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2bfe      	cmp	r3, #254	; 0xfe
 8004578:	dd08      	ble.n	800458c <HAL_TIM_PeriodElapsedCallback+0x90>
					  {
					  SaveChunk(file_name, data_chunk);
 800457a:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	493b      	ldr	r1, [pc, #236]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004580:	4618      	mov	r0, r3
 8004582:	f001 f84f 	bl	8005624 <SaveChunk>
					  data_iterator = 0;
 8004586:	4b38      	ldr	r3, [pc, #224]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
			  }
		}
	}

	/*--------------------Odwarzanie z glosniczka------------------*/
	if(htim->Instance== TIM5)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a38      	ldr	r2, [pc, #224]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d135      	bne.n	8004602 <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			if(playing)
 8004596:	4b38      	ldr	r3, [pc, #224]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d056      	beq.n	800464c <HAL_TIM_PeriodElapsedCallback+0x150>
			{
				if(sample <= file_size)
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d824      	bhi.n	80045f4 <HAL_TIM_PeriodElapsedCallback+0xf8>
				{
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, /*(int16_t)*/data_chunk[data_iterator]/**volume*/);
 80045aa:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2f      	ldr	r2, [pc, #188]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80045b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2110      	movs	r1, #16
 80045b8:	4832      	ldr	r0, [pc, #200]	; (8004684 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80045ba:	f002 f9ad 	bl	8006918 <HAL_DAC_SetValue>
					data_iterator++;
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80045c6:	6013      	str	r3, [r2, #0]
					if (data_iterator >= CHUNK_SIZE - 1)
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2bfe      	cmp	r3, #254	; 0xfe
 80045ce:	dd3d      	ble.n	800464c <HAL_TIM_PeriodElapsedCallback+0x150>
					{
						sample += 2*CHUNK_SIZE;
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80045da:	6013      	str	r3, [r2, #0]
						ReadChunk(file_name, sample);
 80045dc:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7ff ff6c 	bl	80044c4 <ReadChunk>
						data_iterator = 0;
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
					rgb2_set(255);
					TIM2->CCR1=2100-diode_state*200;
					if (diode_state < 5) diode_state++;
					else diode_state = 0;
			}
}
 80045f2:	e02b      	b.n	800464c <HAL_TIM_PeriodElapsedCallback+0x150>
					sample = 0;
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
					playing = 0;
 80045fa:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	e024      	b.n	800464c <HAL_TIM_PeriodElapsedCallback+0x150>
	else if(htim->Instance== TIM2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460a:	d11f      	bne.n	800464c <HAL_TIM_PeriodElapsedCallback+0x150>
					rgb2_set(255);
 800460c:	20ff      	movs	r0, #255	; 0xff
 800460e:	f000 f893 	bl	8004738 <rgb2_set>
					TIM2->CCR1=2100-diode_state*200;
 8004612:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 800461e:	fb03 f302 	mul.w	r3, r3, r2
 8004622:	f603 0234 	addw	r2, r3, #2100	; 0x834
 8004626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800462a:	635a      	str	r2, [r3, #52]	; 0x34
					if (diode_state < 5) diode_state++;
 800462c:	4b16      	ldr	r3, [pc, #88]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b04      	cmp	r3, #4
 8004634:	d807      	bhi.n	8004646 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3301      	adds	r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004642:	701a      	strb	r2, [r3, #0]
}
 8004644:	e002      	b.n	800464c <HAL_TIM_PeriodElapsedCallback+0x150>
					else diode_state = 0;
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40000800 	.word	0x40000800
 8004658:	200002ac 	.word	0x200002ac
 800465c:	20000830 	.word	0x20000830
 8004660:	2000082c 	.word	0x2000082c
 8004664:	200002b4 	.word	0x200002b4
 8004668:	20000710 	.word	0x20000710
 800466c:	20000990 	.word	0x20000990
 8004670:	20000018 	.word	0x20000018
 8004674:	40000c00 	.word	0x40000c00
 8004678:	200002a4 	.word	0x200002a4
 800467c:	20000290 	.word	0x20000290
 8004680:	200002a8 	.word	0x200002a8
 8004684:	2000087c 	.word	0x2000087c
 8004688:	200002a0 	.word	0x200002a0
 800468c:	00000000 	.word	0x00000000

08004690 <set_volume>:

/*--------------------Ustalanie glosnosci------------------*/
void set_volume()
{
 8004690:	b598      	push	{r3, r4, r7, lr}
 8004692:	af00      	add	r7, sp, #0

	V=2.95;
 8004694:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <set_volume+0x70>)
 8004696:	a418      	add	r4, pc, #96	; (adr r4, 80046f8 <set_volume+0x68>)
 8004698:	e9d4 3400 	ldrd	r3, r4, [r4]
 800469c:	e9c2 3400 	strd	r3, r4, [r2]
	  HAL_ADC_Start(&hadc2);
 80046a0:	4818      	ldr	r0, [pc, #96]	; (8004704 <set_volume+0x74>)
 80046a2:	f001 fbdd 	bl	8005e60 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 80046a6:	210a      	movs	r1, #10
 80046a8:	4816      	ldr	r0, [pc, #88]	; (8004704 <set_volume+0x74>)
 80046aa:	f001 fc9f 	bl	8005fec <HAL_ADC_PollForConversion>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11e      	bne.n	80046f2 <set_volume+0x62>
	  {
		  value = HAL_ADC_GetValue(&hadc2);
 80046b4:	4813      	ldr	r0, [pc, #76]	; (8004704 <set_volume+0x74>)
 80046b6:	f001 fd1d 	bl	80060f4 <HAL_ADC_GetValue>
 80046ba:	4603      	mov	r3, r0
 80046bc:	b29a      	uxth	r2, r3
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <set_volume+0x78>)
 80046c0:	801a      	strh	r2, [r3, #0]
		  volume = 0.5 + value/(double)4096;
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <set_volume+0x78>)
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fb ff2c 	bl	8000524 <__aeabi_i2d>
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <set_volume+0x7c>)
 80046d2:	f7fc f8bb 	bl	800084c <__aeabi_ddiv>
 80046d6:	4603      	mov	r3, r0
 80046d8:	460c      	mov	r4, r1
 80046da:	4618      	mov	r0, r3
 80046dc:	4621      	mov	r1, r4
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <set_volume+0x80>)
 80046e4:	f7fb fdd2 	bl	800028c <__adddf3>
 80046e8:	4603      	mov	r3, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <set_volume+0x84>)
 80046ee:	e9c2 3400 	strd	r3, r4, [r2]

	  }
}
 80046f2:	bf00      	nop
 80046f4:	bd98      	pop	{r3, r4, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	9999999a 	.word	0x9999999a
 80046fc:	40079999 	.word	0x40079999
 8004700:	20000008 	.word	0x20000008
 8004704:	20000764 	.word	0x20000764
 8004708:	20000c2e 	.word	0x20000c2e
 800470c:	40b00000 	.word	0x40b00000
 8004710:	3fe00000 	.word	0x3fe00000
 8004714:	20000298 	.word	0x20000298

08004718 <rgb1_set>:

/*-------------------Konfiguracja diody RGB1----------------------------*/
void rgb1_set(uint8_t red, uint8_t green, uint8_t blue)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	460b      	mov	r3, r1
 8004724:	71bb      	strb	r3, [r7, #6]
 8004726:	4613      	mov	r3, r2
 8004728:	717b      	strb	r3, [r7, #5]
	/*htim3.Instance->CCR1=red*2000;
	htim3.Instance->CCR2=green*2000;
	htim3.Instance->CCR3=blue*2000;*/
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <rgb2_set>:

/*-------------------Konfiguracja diody RGB2----------------------------*/

void rgb2_set(uint8_t red)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCR1=red*2000;
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004748:	fb02 f203 	mul.w	r2, r2, r3
 800474c:	4b04      	ldr	r3, [pc, #16]	; (8004760 <rgb2_set+0x28>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000bec 	.word	0x20000bec

08004764 <rgb2_set_intensity>:

/*-------Ustalenie jasnosci diody  RGB2 zaleznie od głosnosci lub czestotliwosci
 *  odbieranego dźwięku------*/
//do zrobienia
void rgb2_set_intensity()
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
	if (x<0)
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <rgb2_set_intensity+0x44>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b21b      	sxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	da03      	bge.n	800477a <rgb2_set_intensity+0x16>
	{
		rgb2_set(155);
 8004772:	209b      	movs	r0, #155	; 0x9b
 8004774:	f7ff ffe0 	bl	8004738 <rgb2_set>
	}
	else
	{
		rgb2_set(255);
	}
}
 8004778:	e014      	b.n	80047a4 <rgb2_set_intensity+0x40>
	else if ((x>=0)&&(x<256))
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <rgb2_set_intensity+0x44>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b21b      	sxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	db0c      	blt.n	800479e <rgb2_set_intensity+0x3a>
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <rgb2_set_intensity+0x44>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b21b      	sxth	r3, r3
 800478a:	2bff      	cmp	r3, #255	; 0xff
 800478c:	dc07      	bgt.n	800479e <rgb2_set_intensity+0x3a>
		rgb2_set(x);
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <rgb2_set_intensity+0x44>)
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b21b      	sxth	r3, r3
 8004794:	b2db      	uxtb	r3, r3
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ffce 	bl	8004738 <rgb2_set>
}
 800479c:	e002      	b.n	80047a4 <rgb2_set_intensity+0x40>
		rgb2_set(255);
 800479e:	20ff      	movs	r0, #255	; 0xff
 80047a0:	f7ff ffca 	bl	8004738 <rgb2_set>
}
 80047a4:	bf00      	nop
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	200002b4 	.word	0x200002b4

080047ac <select_button>:

void select_button(int selection)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	if (recording)
 80047b4:	4bb9      	ldr	r3, [pc, #740]	; (8004a9c <select_button+0x2f0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d037      	beq.n	800482c <select_button+0x80>
	{
		switch(selection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <select_button+0x1c>
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d014      	beq.n	80047f0 <select_button+0x44>
				recording=0;
				CloseFile(file_name);
				AddWaveHeader(file_name);
				break;
			}
		default: {break;}
 80047c6:	e165      	b.n	8004a94 <select_button+0x2e8>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80047c8:	2200      	movs	r2, #0
 80047ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047ce:	48b4      	ldr	r0, [pc, #720]	; (8004aa0 <select_button+0x2f4>)
 80047d0:	f002 fa7a 	bl	8006cc8 <HAL_GPIO_WritePin>
				rgb1_set(0, 0, 255);//niebieski
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	2100      	movs	r1, #0
 80047d8:	2000      	movs	r0, #0
 80047da:	f7ff ff9d 	bl	8004718 <rgb1_set>
				LCD1602_2ndLine();
 80047de:	f7fc fc3b 	bl	8001058 <LCD1602_2ndLine>
				LCD1602_print("pause recording");
 80047e2:	48b0      	ldr	r0, [pc, #704]	; (8004aa4 <select_button+0x2f8>)
 80047e4:	f7fc fbec 	bl	8000fc0 <LCD1602_print>
				recording=0;
 80047e8:	4bac      	ldr	r3, [pc, #688]	; (8004a9c <select_button+0x2f0>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
				break;
 80047ee:	e151      	b.n	8004a94 <select_button+0x2e8>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80047f0:	2200      	movs	r2, #0
 80047f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047f6:	48aa      	ldr	r0, [pc, #680]	; (8004aa0 <select_button+0x2f4>)
 80047f8:	f002 fa66 	bl	8006cc8 <HAL_GPIO_WritePin>
				rgb1_set(0, 0, 255);//niebieski
 80047fc:	22ff      	movs	r2, #255	; 0xff
 80047fe:	2100      	movs	r1, #0
 8004800:	2000      	movs	r0, #0
 8004802:	f7ff ff89 	bl	8004718 <rgb1_set>
				LCD1602_2ndLine();
 8004806:	f7fc fc27 	bl	8001058 <LCD1602_2ndLine>
				LCD1602_print("stop recording");
 800480a:	48a7      	ldr	r0, [pc, #668]	; (8004aa8 <select_button+0x2fc>)
 800480c:	f7fc fbd8 	bl	8000fc0 <LCD1602_print>
				recording=0;
 8004810:	4ba2      	ldr	r3, [pc, #648]	; (8004a9c <select_button+0x2f0>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
				CloseFile(file_name);
 8004816:	4ba5      	ldr	r3, [pc, #660]	; (8004aac <select_button+0x300>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 ff38 	bl	8005690 <CloseFile>
				AddWaveHeader(file_name);
 8004820:	4ba2      	ldr	r3, [pc, #648]	; (8004aac <select_button+0x300>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fdd0 	bl	80053ca <AddWaveHeader>
				break;
 800482a:	e133      	b.n	8004a94 <select_button+0x2e8>
		}
	}
	else if (playing)
 800482c:	4ba0      	ldr	r3, [pc, #640]	; (8004ab0 <select_button+0x304>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8083 	beq.w	800493c <select_button+0x190>
	{
		switch(selection)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b03      	cmp	r3, #3
 800483a:	f200 8124 	bhi.w	8004a86 <select_button+0x2da>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <select_button+0x98>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004855 	.word	0x08004855
 8004848:	080048a9 	.word	0x080048a9
 800484c:	08004903 	.word	0x08004903
 8004850:	08004935 	.word	0x08004935
		{
		//10 chwil do tyłu
		case 0:
			{
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8004854:	2201      	movs	r2, #1
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	4896      	ldr	r0, [pc, #600]	; (8004ab4 <select_button+0x308>)
 800485a:	f002 fa35 	bl	8006cc8 <HAL_GPIO_WritePin>
				  if (sample < 10 * SAMPLE_RATE)
 800485e:	4b96      	ldr	r3, [pc, #600]	; (8004ab8 <select_button+0x30c>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	461a      	mov	r2, r3
 800486c:	4b93      	ldr	r3, [pc, #588]	; (8004abc <select_button+0x310>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d903      	bls.n	800487c <select_button+0xd0>
					  {
						  sample = 0;
 8004874:	4b91      	ldr	r3, [pc, #580]	; (8004abc <select_button+0x310>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
					  {
					  sample -= 10 * SAMPLE_RATE;
					  LCD1602_2ndLine();
					  LCD1602_print("-10");
					  }
				break;
 800487a:	e106      	b.n	8004a8a <select_button+0x2de>
				  else if (sample==0)
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <select_button+0x310>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8102 	beq.w	8004a8a <select_button+0x2de>
					  sample -= 10 * SAMPLE_RATE;
 8004886:	4b8d      	ldr	r3, [pc, #564]	; (8004abc <select_button+0x310>)
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <select_button+0x30c>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	1acb      	subs	r3, r1, r3
 8004898:	4a88      	ldr	r2, [pc, #544]	; (8004abc <select_button+0x310>)
 800489a:	6013      	str	r3, [r2, #0]
					  LCD1602_2ndLine();
 800489c:	f7fc fbdc 	bl	8001058 <LCD1602_2ndLine>
					  LCD1602_print("-10");
 80048a0:	4887      	ldr	r0, [pc, #540]	; (8004ac0 <select_button+0x314>)
 80048a2:	f7fc fb8d 	bl	8000fc0 <LCD1602_print>
				break;
 80048a6:	e0f0      	b.n	8004a8a <select_button+0x2de>
			}
		//10 chwil do przodu
		case 1:
			{
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048ae:	487c      	ldr	r0, [pc, #496]	; (8004aa0 <select_button+0x2f4>)
 80048b0:	f002 fa0a 	bl	8006cc8 <HAL_GPIO_WritePin>
				 if (sample + 10 * SAMPLE_RATE > file_size)
 80048b4:	4b80      	ldr	r3, [pc, #512]	; (8004ab8 <select_button+0x30c>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	461a      	mov	r2, r3
 80048c2:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <select_button+0x310>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	441a      	add	r2, r3
 80048c8:	4b7e      	ldr	r3, [pc, #504]	; (8004ac4 <select_button+0x318>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d906      	bls.n	80048de <select_button+0x132>
				 {
					 sample=0;
 80048d0:	4b7a      	ldr	r3, [pc, #488]	; (8004abc <select_button+0x310>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
					 playing = 0;
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <select_button+0x304>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
				 {
					sample += 10 * SAMPLE_RATE;
					LCD1602_2ndLine();
					LCD1602_print("+10");
				 }
				 break;
 80048dc:	e0da      	b.n	8004a94 <select_button+0x2e8>
					sample += 10 * SAMPLE_RATE;
 80048de:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <select_button+0x30c>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b73      	ldr	r3, [pc, #460]	; (8004abc <select_button+0x310>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4413      	add	r3, r2
 80048f2:	4a72      	ldr	r2, [pc, #456]	; (8004abc <select_button+0x310>)
 80048f4:	6013      	str	r3, [r2, #0]
					LCD1602_2ndLine();
 80048f6:	f7fc fbaf 	bl	8001058 <LCD1602_2ndLine>
					LCD1602_print("+10");
 80048fa:	4873      	ldr	r0, [pc, #460]	; (8004ac8 <select_button+0x31c>)
 80048fc:	f7fc fb60 	bl	8000fc0 <LCD1602_print>
				 break;
 8004900:	e0c8      	b.n	8004a94 <select_button+0x2e8>
			}
		//zatrzymaj
		case 2:
			{
				//podczas zatrzymania
				playing=0;
 8004902:	4b6b      	ldr	r3, [pc, #428]	; (8004ab0 <select_button+0x304>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8004908:	2200      	movs	r2, #0
 800490a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800490e:	4869      	ldr	r0, [pc, #420]	; (8004ab4 <select_button+0x308>)
 8004910:	f002 f9da 	bl	8006cc8 <HAL_GPIO_WritePin>
				LCD1602_2ndLine();
 8004914:	f7fc fba0 	bl	8001058 <LCD1602_2ndLine>
				LCD1602_print("stop");
 8004918:	486c      	ldr	r0, [pc, #432]	; (8004acc <select_button+0x320>)
 800491a:	f7fc fb51 	bl	8000fc0 <LCD1602_print>
				rgb1_set(255, 255, 0); //pomaranczowy
 800491e:	2200      	movs	r2, #0
 8004920:	21ff      	movs	r1, #255	; 0xff
 8004922:	20ff      	movs	r0, #255	; 0xff
 8004924:	f7ff fef8 	bl	8004718 <rgb1_set>
				CloseFileToRead(file_name);
 8004928:	4b60      	ldr	r3, [pc, #384]	; (8004aac <select_button+0x300>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fdbb 	bl	80044a8 <CloseFileToRead>
				break;
 8004932:	e0af      	b.n	8004a94 <select_button+0x2e8>
			}
		//zakończ odtwarzanie
		case 3:
			{
				playing=0;
 8004934:	4b5e      	ldr	r3, [pc, #376]	; (8004ab0 <select_button+0x304>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
				break;
 800493a:	e0ab      	b.n	8004a94 <select_button+0x2e8>
		default: {break;}
		}
	}
	else
	{
	switch(selection)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b05      	cmp	r3, #5
 8004940:	f200 80a5 	bhi.w	8004a8e <select_button+0x2e2>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <select_button+0x1a0>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004965 	.word	0x08004965
 8004950:	08004995 	.word	0x08004995
 8004954:	080049b3 	.word	0x080049b3
 8004958:	080049eb 	.word	0x080049eb
 800495c:	08004a37 	.word	0x08004a37
 8004960:	08004a5f 	.word	0x08004a5f
		{
		//0 utwór do tyłu
			case 0:
			{
				if (atoi(file_name)>1)
 8004964:	4b51      	ldr	r3, [pc, #324]	; (8004aac <select_button+0x300>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f004 f8ef 	bl	8008b4c <atoi>
 800496e:	4603      	mov	r3, r0
 8004970:	2b01      	cmp	r3, #1
 8004972:	f340 808e 	ble.w	8004a92 <select_button+0x2e6>
				{
					file_name = PreviousFile(file_name);
 8004976:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <select_button+0x300>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fd16 	bl	80043ac <PreviousFile>
 8004980:	4602      	mov	r2, r0
 8004982:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <select_button+0x300>)
 8004984:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8004986:	2201      	movs	r2, #1
 8004988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800498c:	4844      	ldr	r0, [pc, #272]	; (8004aa0 <select_button+0x2f4>)
 800498e:	f002 f99b 	bl	8006cc8 <HAL_GPIO_WritePin>
				}
						break;
 8004992:	e07e      	b.n	8004a92 <select_button+0x2e6>
			}
			//utwór do przodu
			case 1:
			{
			file_name = NextFile(file_name);
 8004994:	4b45      	ldr	r3, [pc, #276]	; (8004aac <select_button+0x300>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fca7 	bl	80042ec <NextFile>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b42      	ldr	r3, [pc, #264]	; (8004aac <select_button+0x300>)
 80049a2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80049a4:	2200      	movs	r2, #0
 80049a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049aa:	483d      	ldr	r0, [pc, #244]	; (8004aa0 <select_button+0x2f4>)
 80049ac:	f002 f98c 	bl	8006cc8 <HAL_GPIO_WritePin>
			break;
 80049b0:	e070      	b.n	8004a94 <select_button+0x2e8>
			}
			//odtwórz aktualny utwór
			case 2:
			{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80049b2:	2201      	movs	r2, #1
 80049b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049b8:	4839      	ldr	r0, [pc, #228]	; (8004aa0 <select_button+0x2f4>)
 80049ba:	f002 f985 	bl	8006cc8 <HAL_GPIO_WritePin>
				  sample=0;
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <select_button+0x310>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
				  OpenFileToRead(file_name);
 80049c4:	4b39      	ldr	r3, [pc, #228]	; (8004aac <select_button+0x300>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fd4d 	bl	8004468 <OpenFileToRead>
				  playing=1;
 80049ce:	4b38      	ldr	r3, [pc, #224]	; (8004ab0 <select_button+0x304>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
				  LCD1602_2ndLine();
 80049d4:	f7fc fb40 	bl	8001058 <LCD1602_2ndLine>
				  LCD1602_print("start");
 80049d8:	483d      	ldr	r0, [pc, #244]	; (8004ad0 <select_button+0x324>)
 80049da:	f7fc faf1 	bl	8000fc0 <LCD1602_print>
				  rgb1_set(0, 255, 0); //zielony
 80049de:	2200      	movs	r2, #0
 80049e0:	21ff      	movs	r1, #255	; 0xff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff fe98 	bl	8004718 <rgb1_set>
				  break;
 80049e8:	e054      	b.n	8004a94 <select_button+0x2e8>
			}
			//nagraj nowy utwór
			case 3:
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049f0:	482b      	ldr	r0, [pc, #172]	; (8004aa0 <select_button+0x2f4>)
 80049f2:	f002 f969 	bl	8006cc8 <HAL_GPIO_WritePin>
				LCD1602_2ndLine();
 80049f6:	f7fc fb2f 	bl	8001058 <LCD1602_2ndLine>
				LCD1602_print("recording");
 80049fa:	4836      	ldr	r0, [pc, #216]	; (8004ad4 <select_button+0x328>)
 80049fc:	f7fc fae0 	bl	8000fc0 <LCD1602_print>
				rgb1_set(255, 0, 0);//czerwony
 8004a00:	2200      	movs	r2, #0
 8004a02:	2100      	movs	r1, #0
 8004a04:	20ff      	movs	r0, #255	; 0xff
 8004a06:	f7ff fe87 	bl	8004718 <rgb1_set>
				file_name = GetNextFileName();
 8004a0a:	f7ff fc13 	bl	8004234 <GetNextFileName>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b26      	ldr	r3, [pc, #152]	; (8004aac <select_button+0x300>)
 8004a12:	601a      	str	r2, [r3, #0]
				save_error=AddWaveHeader(file_name); // dodaje  nagłówek
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <select_button+0x300>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fcd6 	bl	80053ca <AddWaveHeader>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <select_button+0x32c>)
 8004a22:	601a      	str	r2, [r3, #0]
				OpenFile(file_name);
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <select_button+0x300>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fe1f 	bl	800566c <OpenFile>
				recording = 1;
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <select_button+0x2f0>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
				break;
 8004a34:	e02e      	b.n	8004a94 <select_button+0x2e8>
			}
			//kontynuacja odwarzania
			case 4:
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8004a36:	2201      	movs	r2, #1
 8004a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a3c:	4818      	ldr	r0, [pc, #96]	; (8004aa0 <select_button+0x2f4>)
 8004a3e:	f002 f943 	bl	8006cc8 <HAL_GPIO_WritePin>
				playing=1;
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <select_button+0x304>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
				LCD1602_2ndLine();
 8004a48:	f7fc fb06 	bl	8001058 <LCD1602_2ndLine>
				LCD1602_print("start");
 8004a4c:	4820      	ldr	r0, [pc, #128]	; (8004ad0 <select_button+0x324>)
 8004a4e:	f7fc fab7 	bl	8000fc0 <LCD1602_print>
				rgb1_set(0, 255, 0); //zielony
 8004a52:	2200      	movs	r2, #0
 8004a54:	21ff      	movs	r1, #255	; 0xff
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7ff fe5e 	bl	8004718 <rgb1_set>
				break;
 8004a5c:	e01a      	b.n	8004a94 <select_button+0x2e8>

			}
			case 5:
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a64:	480e      	ldr	r0, [pc, #56]	; (8004aa0 <select_button+0x2f4>)
 8004a66:	f002 f92f 	bl	8006cc8 <HAL_GPIO_WritePin>
				rgb1_set(255, 0, 0);//czerwony
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	20ff      	movs	r0, #255	; 0xff
 8004a70:	f7ff fe52 	bl	8004718 <rgb1_set>
				LCD1602_2ndLine();
 8004a74:	f7fc faf0 	bl	8001058 <LCD1602_2ndLine>
				LCD1602_print("recording");
 8004a78:	4816      	ldr	r0, [pc, #88]	; (8004ad4 <select_button+0x328>)
 8004a7a:	f7fc faa1 	bl	8000fc0 <LCD1602_print>
				recording=1;
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <select_button+0x2f0>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
				break;
 8004a84:	e006      	b.n	8004a94 <select_button+0x2e8>
		default: {break;}
 8004a86:	bf00      	nop
 8004a88:	e004      	b.n	8004a94 <select_button+0x2e8>
				break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <select_button+0x2e8>
			}
			default: {break;}
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <select_button+0x2e8>
						break;
 8004a92:	bf00      	nop
		}

	}


}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200002ac 	.word	0x200002ac
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	080095d8 	.word	0x080095d8
 8004aa8:	080095e8 	.word	0x080095e8
 8004aac:	20000018 	.word	0x20000018
 8004ab0:	200002a4 	.word	0x200002a4
 8004ab4:	40020400 	.word	0x40020400
 8004ab8:	08009630 	.word	0x08009630
 8004abc:	20000290 	.word	0x20000290
 8004ac0:	080095f8 	.word	0x080095f8
 8004ac4:	200002a8 	.word	0x200002a8
 8004ac8:	080095fc 	.word	0x080095fc
 8004acc:	08009600 	.word	0x08009600
 8004ad0:	08009608 	.word	0x08009608
 8004ad4:	08009610 	.word	0x08009610
 8004ad8:	200002b0 	.word	0x200002b0

08004adc <read_buttons>:
//}


/*----------Czytanie z przyciskow---------------*/
void read_buttons()
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
		rgb2_set_intensity();
 8004ae0:	f7ff fe40 	bl	8004764 <rgb2_set_intensity>
	  	 if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==GPIO_PIN_RESET)
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	4830      	ldr	r0, [pc, #192]	; (8004ba8 <read_buttons+0xcc>)
 8004ae8:	f002 f8d6 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <read_buttons+0x1c>
	  	 	  	 			  	  	{selection=0;}
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <read_buttons+0xd0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==GPIO_PIN_RESET)
 8004af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004afc:	482a      	ldr	r0, [pc, #168]	; (8004ba8 <read_buttons+0xcc>)
 8004afe:	f002 f8cb 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <read_buttons+0x32>
	  	 	  	  	 			  	{selection=1;}
 8004b08:	4b28      	ldr	r3, [pc, #160]	; (8004bac <read_buttons+0xd0>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2)==GPIO_PIN_RESET)
 8004b0e:	2104      	movs	r1, #4
 8004b10:	4827      	ldr	r0, [pc, #156]	; (8004bb0 <read_buttons+0xd4>)
 8004b12:	f002 f8c1 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <read_buttons+0x46>
	  		  	  	  	  	 		{selection=2;}
 8004b1c:	4b23      	ldr	r3, [pc, #140]	; (8004bac <read_buttons+0xd0>)
 8004b1e:	2202      	movs	r2, #2
 8004b20:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)==GPIO_PIN_RESET)
 8004b22:	2108      	movs	r1, #8
 8004b24:	4822      	ldr	r0, [pc, #136]	; (8004bb0 <read_buttons+0xd4>)
 8004b26:	f002 f8b7 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <read_buttons+0x5a>
	  		  	  	  	  	  	  	  {selection=3;}
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <read_buttons+0xd0>)
 8004b32:	2203      	movs	r2, #3
 8004b34:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)==GPIO_PIN_RESET)
 8004b36:	2110      	movs	r1, #16
 8004b38:	481d      	ldr	r0, [pc, #116]	; (8004bb0 <read_buttons+0xd4>)
 8004b3a:	f002 f8ad 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <read_buttons+0x6e>
	  	  	  	  	  	 			{selection=4;}
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <read_buttons+0xd0>)
 8004b46:	2204      	movs	r2, #4
 8004b48:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)==GPIO_PIN_RESET)
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	4818      	ldr	r0, [pc, #96]	; (8004bb0 <read_buttons+0xd4>)
 8004b4e:	f002 f8a3 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <read_buttons+0x82>
	  	  	  	 	  	  	 		{selection=5;}
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <read_buttons+0xd0>)
 8004b5a:	2205      	movs	r2, #5
 8004b5c:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==GPIO_PIN_RESET)
 8004b5e:	2140      	movs	r1, #64	; 0x40
 8004b60:	4813      	ldr	r0, [pc, #76]	; (8004bb0 <read_buttons+0xd4>)
 8004b62:	f002 f899 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <read_buttons+0x96>
	  	  	  		  	  	  	  	 {selection=6;}
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <read_buttons+0xd0>)
 8004b6e:	2206      	movs	r2, #6
 8004b70:	601a      	str	r2, [r3, #0]
	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)==GPIO_PIN_RESET)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	480e      	ldr	r0, [pc, #56]	; (8004bb0 <read_buttons+0xd4>)
 8004b76:	f002 f88f 	bl	8006c98 <HAL_GPIO_ReadPin>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <read_buttons+0xaa>
	  	  	  		  	  	 	  	 {selection=7;}
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <read_buttons+0xd0>)
 8004b82:	2207      	movs	r2, #7
 8004b84:	601a      	str	r2, [r3, #0]
	  	 if (selection == last_selection)
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <read_buttons+0xd0>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <read_buttons+0xd8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d104      	bne.n	8004b9c <read_buttons+0xc0>
	  	 {
	  		 select_button(selection);
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <read_buttons+0xd0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fe08 	bl	80047ac <select_button>
	  	 }
	  	 last_selection = selection;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <read_buttons+0xd0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <read_buttons+0xd8>)
 8004ba2:	6013      	str	r3, [r2, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40020400 	.word	0x40020400
 8004bac:	20000010 	.word	0x20000010
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	20000014 	.word	0x20000014

08004bb8 <petla>:

void petla()
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
		//HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,2048);
			 	//writeSD(); //dziala
			 	//readSD(); // dziala
				HAL_Delay(100);
 8004bbc:	2064      	movs	r0, #100	; 0x64
 8004bbe:	f001 f8e9 	bl	8005d94 <HAL_Delay>
			 	set_volume();
 8004bc2:	f7ff fd65 	bl	8004690 <set_volume>
				//LCD1602_1stLine();
		 	 	//LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
				//LCD1602_1stLine();
				LCD1602_print("sprawdzam");
 8004bc6:	4803      	ldr	r0, [pc, #12]	; (8004bd4 <petla+0x1c>)
 8004bc8:	f7fc f9fa 	bl	8000fc0 <LCD1602_print>
				//rgb2_set(255);
			 	read_buttons();
 8004bcc:	f7ff ff86 	bl	8004adc <read_buttons>
	}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	0800961c 	.word	0x0800961c

08004bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bdc:	f001 f868 	bl	8005cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004be0:	f000 f85c 	bl	8004c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004be4:	f000 fb12 	bl	800520c <MX_GPIO_Init>
  MX_TIM2_Init();
 8004be8:	f000 f9d0 	bl	8004f8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004bec:	f000 fa28 	bl	8005040 <MX_TIM3_Init>
  MX_SPI1_Init();
 8004bf0:	f000 f996 	bl	8004f20 <MX_SPI1_Init>
  MX_DAC_Init();
 8004bf4:	f000 f960 	bl	8004eb8 <MX_DAC_Init>
  MX_TIM5_Init();
 8004bf8:	f000 fabc 	bl	8005174 <MX_TIM5_Init>
  MX_ADC1_Init();
 8004bfc:	f000 f8b8 	bl	8004d70 <MX_ADC1_Init>
  MX_TIM4_Init();
 8004c00:	f000 fa6c 	bl	80050dc <MX_TIM4_Init>
  MX_ADC2_Init();
 8004c04:	f000 f906 	bl	8004e14 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8004c08:	2110      	movs	r1, #16
 8004c0a:	4818      	ldr	r0, [pc, #96]	; (8004c6c <main+0x94>)
 8004c0c:	f001 fdd1 	bl	80067b2 <HAL_DAC_Start>
/*  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);*/
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004c10:	2100      	movs	r1, #0
 8004c12:	4817      	ldr	r0, [pc, #92]	; (8004c70 <main+0x98>)
 8004c14:	f003 f90e 	bl	8007e34 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8004c18:	4816      	ldr	r0, [pc, #88]	; (8004c74 <main+0x9c>)
 8004c1a:	f003 f8bc 	bl	8007d96 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8004c1e:	4816      	ldr	r0, [pc, #88]	; (8004c78 <main+0xa0>)
 8004c20:	f003 f8b9 	bl	8007d96 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8004c24:	4815      	ldr	r0, [pc, #84]	; (8004c7c <main+0xa4>)
 8004c26:	f003 f8b6 	bl	8007d96 <HAL_TIM_Base_Start_IT>

  	//LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
	LCD1602_1stLine();
 8004c2a:	f7fc fa0d 	bl	8001048 <LCD1602_1stLine>
	LCD1602_OneLine();
 8004c2e:	f7fc fa1b 	bl	8001068 <LCD1602_OneLine>
	LCD1602_display();
 8004c32:	f7fc fa2b 	bl	800108c <LCD1602_display>
	LCD1602_print("xx");
 8004c36:	4812      	ldr	r0, [pc, #72]	; (8004c80 <main+0xa8>)
 8004c38:	f7fc f9c2 	bl	8000fc0 <LCD1602_print>


  HAL_ADC_Start(&hadc1);
 8004c3c:	4811      	ldr	r0, [pc, #68]	; (8004c84 <main+0xac>)
 8004c3e:	f001 f90f 	bl	8005e60 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004c42:	4811      	ldr	r0, [pc, #68]	; (8004c88 <main+0xb0>)
 8004c44:	f001 f90c 	bl	8005e60 <HAL_ADC_Start>
  fresult = f_mount(&FatFs, "", 0);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4910      	ldr	r1, [pc, #64]	; (8004c8c <main+0xb4>)
 8004c4c:	4810      	ldr	r0, [pc, #64]	; (8004c90 <main+0xb8>)
 8004c4e:	f7fe fc19 	bl	8003484 <f_mount>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <main+0xbc>)
 8004c58:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c60:	480d      	ldr	r0, [pc, #52]	; (8004c98 <main+0xc0>)
 8004c62:	f002 f831 	bl	8006cc8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 petla();
 8004c66:	f7ff ffa7 	bl	8004bb8 <petla>
 8004c6a:	e7fc      	b.n	8004c66 <main+0x8e>
 8004c6c:	2000087c 	.word	0x2000087c
 8004c70:	20000bec 	.word	0x20000bec
 8004c74:	200007ac 	.word	0x200007ac
 8004c78:	20000724 	.word	0x20000724
 8004c7c:	200007ec 	.word	0x200007ec
 8004c80:	08009628 	.word	0x08009628
 8004c84:	20000830 	.word	0x20000830
 8004c88:	20000764 	.word	0x20000764
 8004c8c:	0800962c 	.word	0x0800962c
 8004c90:	200002b8 	.word	0x200002b8
 8004c94:	20000b90 	.word	0x20000b90
 8004c98:	40020800 	.word	0x40020800

08004c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b094      	sub	sp, #80	; 0x50
 8004ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ca2:	f107 0320 	add.w	r3, r7, #32
 8004ca6:	2230      	movs	r2, #48	; 0x30
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 ff8c 	bl	8008bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cb0:	f107 030c 	add.w	r3, r7, #12
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <SystemClock_Config+0xcc>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <SystemClock_Config+0xcc>)
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <SystemClock_Config+0xcc>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cdc:	2300      	movs	r3, #0
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <SystemClock_Config+0xd0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <SystemClock_Config+0xd0>)
 8004ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <SystemClock_Config+0xd0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d02:	2302      	movs	r3, #2
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004d10:	23a8      	movs	r3, #168	; 0xa8
 8004d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d14:	2302      	movs	r3, #2
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d18:	2304      	movs	r3, #4
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d1c:	f107 0320 	add.w	r3, r7, #32
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 ffeb 	bl	8006cfc <HAL_RCC_OscConfig>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004d2c:	f000 fb46 	bl	80053bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d30:	230f      	movs	r3, #15
 8004d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d34:	2302      	movs	r3, #2
 8004d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d48:	f107 030c 	add.w	r3, r7, #12
 8004d4c:	2105      	movs	r1, #5
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f002 fa44 	bl	80071dc <HAL_RCC_ClockConfig>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004d5a:	f000 fb2f 	bl	80053bc <Error_Handler>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3750      	adds	r7, #80	; 0x50
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40007000 	.word	0x40007000

08004d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004d76:	463b      	mov	r3, r7
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <MX_ADC1_Init+0x9c>)
 8004d86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004d88:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004d90:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004da2:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004daa:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004db2:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <MX_ADC1_Init+0xa0>)
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004dd0:	480d      	ldr	r0, [pc, #52]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004dd2:	f001 f801 	bl	8005dd8 <HAL_ADC_Init>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004ddc:	f000 faee 	bl	80053bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004de0:	230f      	movs	r3, #15
 8004de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004de4:	2301      	movs	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004dec:	463b      	mov	r3, r7
 8004dee:	4619      	mov	r1, r3
 8004df0:	4805      	ldr	r0, [pc, #20]	; (8004e08 <MX_ADC1_Init+0x98>)
 8004df2:	f001 f98d 	bl	8006110 <HAL_ADC_ConfigChannel>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004dfc:	f000 fade 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000830 	.word	0x20000830
 8004e0c:	40012000 	.word	0x40012000
 8004e10:	0f000001 	.word	0x0f000001

08004e14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <MX_ADC2_Init+0x9c>)
 8004e2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e32:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004e34:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004e3a:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004e40:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e4e:	4b17      	ldr	r3, [pc, #92]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <MX_ADC2_Init+0xa0>)
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e5a:	4b14      	ldr	r3, [pc, #80]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004e74:	480d      	ldr	r0, [pc, #52]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e76:	f000 ffaf 	bl	8005dd8 <HAL_ADC_Init>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004e80:	f000 fa9c 	bl	80053bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004e84:	2306      	movs	r3, #6
 8004e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e90:	463b      	mov	r3, r7
 8004e92:	4619      	mov	r1, r3
 8004e94:	4805      	ldr	r0, [pc, #20]	; (8004eac <MX_ADC2_Init+0x98>)
 8004e96:	f001 f93b 	bl	8006110 <HAL_ADC_ConfigChannel>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004ea0:	f000 fa8c 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000764 	.word	0x20000764
 8004eb0:	40012100 	.word	0x40012100
 8004eb4:	0f000001 	.word	0x0f000001

08004eb8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <MX_DAC_Init+0x60>)
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <MX_DAC_Init+0x64>)
 8004eca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004ecc:	4812      	ldr	r0, [pc, #72]	; (8004f18 <MX_DAC_Init+0x60>)
 8004ece:	f001 fc4e 	bl	800676e <HAL_DAC_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004ed8:	f000 fa70 	bl	80053bc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480b      	ldr	r0, [pc, #44]	; (8004f18 <MX_DAC_Init+0x60>)
 8004eec:	f001 fcc7 	bl	800687e <HAL_DAC_ConfigChannel>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8004ef6:	f000 fa61 	bl	80053bc <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004efa:	463b      	mov	r3, r7
 8004efc:	2210      	movs	r2, #16
 8004efe:	4619      	mov	r1, r3
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <MX_DAC_Init+0x60>)
 8004f02:	f001 fcbc 	bl	800687e <HAL_DAC_ConfigChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8004f0c:	f000 fa56 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000087c 	.word	0x2000087c
 8004f1c:	40007400 	.word	0x40007400

08004f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f24:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <MX_SPI1_Init+0x68>)
 8004f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f54:	2218      	movs	r2, #24
 8004f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f6c:	220a      	movs	r2, #10
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f70:	4804      	ldr	r0, [pc, #16]	; (8004f84 <MX_SPI1_Init+0x64>)
 8004f72:	f002 faf1 	bl	8007558 <HAL_SPI_Init>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004f7c:	f000 fa1e 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f80:	bf00      	nop
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000b94 	.word	0x20000b94
 8004f88:	40013000 	.word	0x40013000

08004f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f92:	f107 0320 	add.w	r3, r7, #32
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	615a      	str	r2, [r3, #20]
 8004fac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 8004fb6:	4b21      	ldr	r3, [pc, #132]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fb8:	f245 2207 	movw	r2, #20999	; 0x5207
 8004fbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fc6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004fd8:	4818      	ldr	r0, [pc, #96]	; (800503c <MX_TIM2_Init+0xb0>)
 8004fda:	f002 ff00 	bl	8007dde <HAL_TIM_PWM_Init>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004fe4:	f000 f9ea 	bl	80053bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ff0:	f107 0320 	add.w	r3, r7, #32
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4811      	ldr	r0, [pc, #68]	; (800503c <MX_TIM2_Init+0xb0>)
 8004ff8:	f003 fd18 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8005002:	f000 f9db 	bl	80053bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005006:	2360      	movs	r3, #96	; 0x60
 8005008:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	2200      	movs	r2, #0
 800501a:	4619      	mov	r1, r3
 800501c:	4807      	ldr	r0, [pc, #28]	; (800503c <MX_TIM2_Init+0xb0>)
 800501e:	f003 f84f 	bl	80080c0 <HAL_TIM_PWM_ConfigChannel>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8005028:	f000 f9c8 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <MX_TIM2_Init+0xb0>)
 800502e:	f000 fd4d 	bl	8005acc <HAL_TIM_MspPostInit>

}
 8005032:	bf00      	nop
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000bec 	.word	0x20000bec

08005040 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005054:	463b      	mov	r3, r7
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <MX_TIM3_Init+0x94>)
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <MX_TIM3_Init+0x98>)
 8005060:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <MX_TIM3_Init+0x94>)
 8005064:	2253      	movs	r2, #83	; 0x53
 8005066:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <MX_TIM3_Init+0x94>)
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <MX_TIM3_Init+0x94>)
 8005070:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005074:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <MX_TIM3_Init+0x94>)
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <MX_TIM3_Init+0x94>)
 800507e:	2200      	movs	r2, #0
 8005080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005082:	4814      	ldr	r0, [pc, #80]	; (80050d4 <MX_TIM3_Init+0x94>)
 8005084:	f002 fe5c 	bl	8007d40 <HAL_TIM_Base_Init>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800508e:	f000 f995 	bl	80053bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005096:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005098:	f107 0308 	add.w	r3, r7, #8
 800509c:	4619      	mov	r1, r3
 800509e:	480d      	ldr	r0, [pc, #52]	; (80050d4 <MX_TIM3_Init+0x94>)
 80050a0:	f003 f8d4 	bl	800824c <HAL_TIM_ConfigClockSource>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80050aa:	f000 f987 	bl	80053bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050b6:	463b      	mov	r3, r7
 80050b8:	4619      	mov	r1, r3
 80050ba:	4806      	ldr	r0, [pc, #24]	; (80050d4 <MX_TIM3_Init+0x94>)
 80050bc:	f003 fcb6 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80050c6:	f000 f979 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200007ec 	.word	0x200007ec
 80050d8:	40000400 	.word	0x40000400

080050dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f0:	463b      	mov	r3, r7
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050f8:	4b1c      	ldr	r3, [pc, #112]	; (800516c <MX_TIM4_Init+0x90>)
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <MX_TIM4_Init+0x94>)
 80050fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 80050fe:	4b1b      	ldr	r3, [pc, #108]	; (800516c <MX_TIM4_Init+0x90>)
 8005100:	2231      	movs	r2, #49	; 0x31
 8005102:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <MX_TIM4_Init+0x90>)
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 209;
 800510a:	4b18      	ldr	r3, [pc, #96]	; (800516c <MX_TIM4_Init+0x90>)
 800510c:	22d1      	movs	r2, #209	; 0xd1
 800510e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <MX_TIM4_Init+0x90>)
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <MX_TIM4_Init+0x90>)
 8005118:	2200      	movs	r2, #0
 800511a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800511c:	4813      	ldr	r0, [pc, #76]	; (800516c <MX_TIM4_Init+0x90>)
 800511e:	f002 fe0f 	bl	8007d40 <HAL_TIM_Base_Init>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8005128:	f000 f948 	bl	80053bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800512c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005132:	f107 0308 	add.w	r3, r7, #8
 8005136:	4619      	mov	r1, r3
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <MX_TIM4_Init+0x90>)
 800513a:	f003 f887 	bl	800824c <HAL_TIM_ConfigClockSource>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8005144:	f000 f93a 	bl	80053bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005148:	2300      	movs	r3, #0
 800514a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800514c:	2300      	movs	r3, #0
 800514e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005150:	463b      	mov	r3, r7
 8005152:	4619      	mov	r1, r3
 8005154:	4805      	ldr	r0, [pc, #20]	; (800516c <MX_TIM4_Init+0x90>)
 8005156:	f003 fc69 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8005160:	f000 f92c 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000724 	.word	0x20000724
 8005170:	40000800 	.word	0x40000800

08005174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	609a      	str	r2, [r3, #8]
 8005186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005188:	463b      	mov	r3, r7
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005190:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <MX_TIM5_Init+0x90>)
 8005192:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <MX_TIM5_Init+0x94>)
 8005194:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49;
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <MX_TIM5_Init+0x90>)
 8005198:	2231      	movs	r2, #49	; 0x31
 800519a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <MX_TIM5_Init+0x90>)
 800519e:	2200      	movs	r2, #0
 80051a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 209;
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <MX_TIM5_Init+0x90>)
 80051a4:	22d1      	movs	r2, #209	; 0xd1
 80051a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <MX_TIM5_Init+0x90>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <MX_TIM5_Init+0x90>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80051b4:	4813      	ldr	r0, [pc, #76]	; (8005204 <MX_TIM5_Init+0x90>)
 80051b6:	f002 fdc3 	bl	8007d40 <HAL_TIM_Base_Init>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80051c0:	f000 f8fc 	bl	80053bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	4619      	mov	r1, r3
 80051d0:	480c      	ldr	r0, [pc, #48]	; (8005204 <MX_TIM5_Init+0x90>)
 80051d2:	f003 f83b 	bl	800824c <HAL_TIM_ConfigClockSource>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80051dc:	f000 f8ee 	bl	80053bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051e0:	2300      	movs	r3, #0
 80051e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80051e8:	463b      	mov	r3, r7
 80051ea:	4619      	mov	r1, r3
 80051ec:	4805      	ldr	r0, [pc, #20]	; (8005204 <MX_TIM5_Init+0x90>)
 80051ee:	f003 fc1d 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80051f8:	f000 f8e0 	bl	80053bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80051fc:	bf00      	nop
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	200007ac 	.word	0x200007ac
 8005208:	40000c00 	.word	0x40000c00

0800520c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005212:	f107 031c 	add.w	r3, r7, #28
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	60da      	str	r2, [r3, #12]
 8005220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	4b60      	ldr	r3, [pc, #384]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	4a5f      	ldr	r2, [pc, #380]	; (80053a8 <MX_GPIO_Init+0x19c>)
 800522c:	f043 0310 	orr.w	r3, r3, #16
 8005230:	6313      	str	r3, [r2, #48]	; 0x30
 8005232:	4b5d      	ldr	r3, [pc, #372]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4a58      	ldr	r2, [pc, #352]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524c:	6313      	str	r3, [r2, #48]	; 0x30
 800524e:	4b56      	ldr	r3, [pc, #344]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	4b52      	ldr	r3, [pc, #328]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	4a51      	ldr	r2, [pc, #324]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6313      	str	r3, [r2, #48]	; 0x30
 800526a:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <MX_GPIO_Init+0x19c>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <MX_GPIO_Init+0x19c>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	4a4a      	ldr	r2, [pc, #296]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005280:	f043 0304 	orr.w	r3, r3, #4
 8005284:	6313      	str	r3, [r2, #48]	; 0x30
 8005286:	4b48      	ldr	r3, [pc, #288]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <MX_GPIO_Init+0x19c>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	4a43      	ldr	r2, [pc, #268]	; (80053a8 <MX_GPIO_Init+0x19c>)
 800529c:	f043 0302 	orr.w	r3, r3, #2
 80052a0:	6313      	str	r3, [r2, #48]	; 0x30
 80052a2:	4b41      	ldr	r3, [pc, #260]	; (80053a8 <MX_GPIO_Init+0x19c>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <MX_GPIO_Init+0x19c>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <MX_GPIO_Init+0x19c>)
 80052b8:	f043 0308 	orr.w	r3, r3, #8
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <MX_GPIO_Init+0x19c>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 80052ca:	2200      	movs	r2, #0
 80052cc:	f44f 4171 	mov.w	r1, #61696	; 0xf100
 80052d0:	4836      	ldr	r0, [pc, #216]	; (80053ac <MX_GPIO_Init+0x1a0>)
 80052d2:	f001 fcf9 	bl	8006cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80052d6:	2200      	movs	r2, #0
 80052d8:	f64f 7180 	movw	r1, #65408	; 0xff80
 80052dc:	4834      	ldr	r0, [pc, #208]	; (80053b0 <MX_GPIO_Init+0x1a4>)
 80052de:	f001 fcf3 	bl	8006cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80052e2:	2200      	movs	r2, #0
 80052e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e8:	4832      	ldr	r0, [pc, #200]	; (80053b4 <MX_GPIO_Init+0x1a8>)
 80052ea:	f001 fced 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 80052ee:	2200      	movs	r2, #0
 80052f0:	2103      	movs	r1, #3
 80052f2:	4831      	ldr	r0, [pc, #196]	; (80053b8 <MX_GPIO_Init+0x1ac>)
 80052f4:	f001 fce8 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80052f8:	23fc      	movs	r3, #252	; 0xfc
 80052fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052fc:	2300      	movs	r3, #0
 80052fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005300:	2301      	movs	r3, #1
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005304:	f107 031c 	add.w	r3, r7, #28
 8005308:	4619      	mov	r1, r3
 800530a:	482b      	ldr	r0, [pc, #172]	; (80053b8 <MX_GPIO_Init+0x1ac>)
 800530c:	f001 fb2a 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin 
                           PB8 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 8005310:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8005314:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005316:	2301      	movs	r3, #1
 8005318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531e:	2300      	movs	r3, #0
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005322:	f107 031c 	add.w	r3, r7, #28
 8005326:	4619      	mov	r1, r3
 8005328:	4820      	ldr	r0, [pc, #128]	; (80053ac <MX_GPIO_Init+0x1a0>)
 800532a:	f001 fb1b 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           PD12 PD13 PD14 PD15 
                           PD7 */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800532e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005332:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005334:	2301      	movs	r3, #1
 8005336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533c:	2300      	movs	r3, #0
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005340:	f107 031c 	add.w	r3, r7, #28
 8005344:	4619      	mov	r1, r3
 8005346:	481a      	ldr	r0, [pc, #104]	; (80053b0 <MX_GPIO_Init+0x1a4>)
 8005348:	f001 fb0c 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800534c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005352:	2301      	movs	r3, #1
 8005354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535a:	2300      	movs	r3, #0
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	4619      	mov	r1, r3
 8005364:	4813      	ldr	r0, [pc, #76]	; (80053b4 <MX_GPIO_Init+0x1a8>)
 8005366:	f001 fafd 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800536a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800536e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005370:	2300      	movs	r3, #0
 8005372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005374:	2301      	movs	r3, #1
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005378:	f107 031c 	add.w	r3, r7, #28
 800537c:	4619      	mov	r1, r3
 800537e:	480b      	ldr	r0, [pc, #44]	; (80053ac <MX_GPIO_Init+0x1a0>)
 8005380:	f001 faf0 	bl	8006964 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8005384:	2303      	movs	r3, #3
 8005386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005388:	2301      	movs	r3, #1
 800538a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538c:	2300      	movs	r3, #0
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005390:	2300      	movs	r3, #0
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005394:	f107 031c 	add.w	r3, r7, #28
 8005398:	4619      	mov	r1, r3
 800539a:	4807      	ldr	r0, [pc, #28]	; (80053b8 <MX_GPIO_Init+0x1ac>)
 800539c:	f001 fae2 	bl	8006964 <HAL_GPIO_Init>

}
 80053a0:	bf00      	nop
 80053a2:	3730      	adds	r7, #48	; 0x30
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40020400 	.word	0x40020400
 80053b0:	40020c00 	.word	0x40020c00
 80053b4:	40020800 	.word	0x40020800
 80053b8:	40021000 	.word	0x40021000

080053bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <AddWaveHeader>:
FIL file;

//funkcja musi być uruchomiona na początku i na końcu nagrania żeby przygotować miejsce na nagłowek
// oraz nadpisać go odpoweidnimi danymi
int AddWaveHeader(char* file_path)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	6018      	str	r0, [r3, #0]
	FIL f;
	FRESULT fr;
	//uint8_t* wave_header= (uint8_t)malloc(sizeof(uint8_t)*44);
	uint8_t wave_header[44];

	fr=f_open(&f, file_path, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80053dc:	2213      	movs	r2, #19
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	f7fe f890 	bl	8003504 <f_open>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	if (fr)
 80053ea:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <AddWaveHeader+0x2c>
	{

		// błąd otwarcia pliku
		return 1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e111      	b.n	800561a <AddWaveHeader+0x250>
	}


	// sprawdzenie rozmiaru pliku
	uint32_t data_size = f_size(&f) - (uint32_t)44;
 80053f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	3b2c      	subs	r3, #44	; 0x2c
 80053fe:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	/* write chunkID, must be 'RIFF'  ------------------------------------------*/
	  wave_header[0] = 'R';
 8005402:	f107 030c 	add.w	r3, r7, #12
 8005406:	2252      	movs	r2, #82	; 0x52
 8005408:	701a      	strb	r2, [r3, #0]
	  wave_header[1] = 'I';
 800540a:	f107 030c 	add.w	r3, r7, #12
 800540e:	2249      	movs	r2, #73	; 0x49
 8005410:	705a      	strb	r2, [r3, #1]
	  wave_header[2] = 'F';
 8005412:	f107 030c 	add.w	r3, r7, #12
 8005416:	2246      	movs	r2, #70	; 0x46
 8005418:	709a      	strb	r2, [r3, #2]
	  wave_header[3] = 'F';
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	2246      	movs	r2, #70	; 0x46
 8005420:	70da      	strb	r2, [r3, #3]

	  /*CHUNK_SIZE - Write the file length */
	  uint32_t ChunkSize = data_size + (uint32_t)36;
 8005422:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8005426:	3324      	adds	r3, #36	; 0x24
 8005428:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	  wave_header[4]  = (uint8_t)((ChunkSize & 0xFF));
 800542c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8005430:	b2da      	uxtb	r2, r3
 8005432:	f107 030c 	add.w	r3, r7, #12
 8005436:	711a      	strb	r2, [r3, #4]
	  wave_header[5]  = (uint8_t)((ChunkSize >> 8) & 0xFF);
 8005438:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	b2da      	uxtb	r2, r3
 8005440:	f107 030c 	add.w	r3, r7, #12
 8005444:	715a      	strb	r2, [r3, #5]
	  wave_header[6]  = (uint8_t)((ChunkSize >> 16) & 0xFF);
 8005446:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	b2da      	uxtb	r2, r3
 800544e:	f107 030c 	add.w	r3, r7, #12
 8005452:	719a      	strb	r2, [r3, #6]
	  wave_header[7]  = (uint8_t)((ChunkSize >> 24) & 0xFF);
 8005454:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	b2da      	uxtb	r2, r3
 800545c:	f107 030c 	add.w	r3, r7, #12
 8005460:	71da      	strb	r2, [r3, #7]


	  /*FORMAT - Write the file format, must be 'WAVE' */
	  wave_header[8]  = 'W';
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	2257      	movs	r2, #87	; 0x57
 8005468:	721a      	strb	r2, [r3, #8]
	  wave_header[9]  = 'A';
 800546a:	f107 030c 	add.w	r3, r7, #12
 800546e:	2241      	movs	r2, #65	; 0x41
 8005470:	725a      	strb	r2, [r3, #9]
	  wave_header[10] = 'V';
 8005472:	f107 030c 	add.w	r3, r7, #12
 8005476:	2256      	movs	r2, #86	; 0x56
 8005478:	729a      	strb	r2, [r3, #10]
	  wave_header[11] = 'E';
 800547a:	f107 030c 	add.w	r3, r7, #12
 800547e:	2245      	movs	r2, #69	; 0x45
 8005480:	72da      	strb	r2, [r3, #11]

	  /*SUBCHUNK_1_ID - Write the format chunk, must be'fmt ' */
	  wave_header[12]  = 'f';
 8005482:	f107 030c 	add.w	r3, r7, #12
 8005486:	2266      	movs	r2, #102	; 0x66
 8005488:	731a      	strb	r2, [r3, #12]
	  wave_header[13]  = 'm';
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	226d      	movs	r2, #109	; 0x6d
 8005490:	735a      	strb	r2, [r3, #13]
	  wave_header[14]  = 't';
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	2274      	movs	r2, #116	; 0x74
 8005498:	739a      	strb	r2, [r3, #14]
	  wave_header[15]  = ' ';
 800549a:	f107 030c 	add.w	r3, r7, #12
 800549e:	2220      	movs	r2, #32
 80054a0:	73da      	strb	r2, [r3, #15]

	  /*SUBCHUN_1_SIZE - Write the length of the 'fmt' data, must be 0x10 */
	  wave_header[16]  = 0x10;
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	2210      	movs	r2, #16
 80054a8:	741a      	strb	r2, [r3, #16]
	  wave_header[17]  = 0x00;
 80054aa:	f107 030c 	add.w	r3, r7, #12
 80054ae:	2200      	movs	r2, #0
 80054b0:	745a      	strb	r2, [r3, #17]
	  wave_header[18]  = 0x00;
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	2200      	movs	r2, #0
 80054b8:	749a      	strb	r2, [r3, #18]
	  wave_header[19]  = 0x00;
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	2200      	movs	r2, #0
 80054c0:	74da      	strb	r2, [r3, #19]

	  /*AUDIO_FORMAT -  Write the audio format, must be 0x01 (PCM) */
	  wave_header[20]  = 0x01;
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	2201      	movs	r2, #1
 80054c8:	751a      	strb	r2, [r3, #20]
	  wave_header[21]  = 0x00;
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	2200      	movs	r2, #0
 80054d0:	755a      	strb	r2, [r3, #21]

	  /*NUM_CHANNELS Write the number of channels, must be 0x01 (Mono) or 0x02 (Stereo) */
	  wave_header[22]  = 0x01;
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	2201      	movs	r2, #1
 80054d8:	759a      	strb	r2, [r3, #22]
	  wave_header[23]  = 0x00;
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	2200      	movs	r2, #0
 80054e0:	75da      	strb	r2, [r3, #23]

	  /*SAMPLE_RATE Write the Sample Rate 8000 Hz */
	  wave_header[24]  = (uint8_t)((SAMPLE_RATE  & 0xFF));
 80054e2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	761a      	strb	r2, [r3, #24]
	  wave_header[25]  = (uint8_t)((SAMPLE_RATE  >> 8) & 0xFF);
 80054ee:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	765a      	strb	r2, [r3, #25]
	  wave_header[26]  = (uint8_t)((SAMPLE_RATE >> 16) & 0xFF);
 80054fc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	b2da      	uxtb	r2, r3
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	769a      	strb	r2, [r3, #26]
	  wave_header[27]  = (uint8_t)((SAMPLE_RATE >> 24) & 0xFF);
 800550a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800550e:	0e1b      	lsrs	r3, r3, #24
 8005510:	b2da      	uxtb	r2, r3
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	76da      	strb	r2, [r3, #27]

	  /*BYTE_RATE Write the Byte Rate ( == SampleRate * NumChannels * BitsPerSample/8)*/
	  int byte_rate = SAMPLE_RATE * BITS_PER_SAMPLE / 8;
 8005518:	2310      	movs	r3, #16
 800551a:	461a      	mov	r2, r3
 800551c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005520:	fb03 f302 	mul.w	r3, r3, r2
 8005524:	08db      	lsrs	r3, r3, #3
 8005526:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	  wave_header[28]  = (uint8_t)((byte_rate & 0xFF));
 800552a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800552e:	b2da      	uxtb	r2, r3
 8005530:	f107 030c 	add.w	r3, r7, #12
 8005534:	771a      	strb	r2, [r3, #28]
	  wave_header[29]  = (uint8_t)((byte_rate >> 8) & 0xFF);
 8005536:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800553a:	121b      	asrs	r3, r3, #8
 800553c:	b2da      	uxtb	r2, r3
 800553e:	f107 030c 	add.w	r3, r7, #12
 8005542:	775a      	strb	r2, [r3, #29]
	  wave_header[30]  = (uint8_t)((byte_rate >> 16) & 0xFF);
 8005544:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8005548:	141b      	asrs	r3, r3, #16
 800554a:	b2da      	uxtb	r2, r3
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	779a      	strb	r2, [r3, #30]
	  wave_header[31]  = (uint8_t)((byte_rate >> 24) & 0xFF);
 8005552:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8005556:	161b      	asrs	r3, r3, #24
 8005558:	b2da      	uxtb	r2, r3
 800555a:	f107 030c 	add.w	r3, r7, #12
 800555e:	77da      	strb	r2, [r3, #31]

	  /* Write the block alignment  == NumChannels * BitsPerSample/8*/
	  wave_header[32]  = 0x02;
 8005560:	f107 030c 	add.w	r3, r7, #12
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2020 	strb.w	r2, [r3, #32]
	  wave_header[33]  = 0x00;
 800556a:	f107 030c 	add.w	r3, r7, #12
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	  /* Write the number of bits per sample */
	  wave_header[34]  = 0x10;
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	2210      	movs	r2, #16
 800557a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	  wave_header[35]  = 0x00;
 800557e:	f107 030c 	add.w	r3, r7, #12
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	  /* Write the Data chunk, must be 'data' */
	  wave_header[36]  = 'd';
 8005588:	f107 030c 	add.w	r3, r7, #12
 800558c:	2264      	movs	r2, #100	; 0x64
 800558e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  wave_header[37]  = 'a';
 8005592:	f107 030c 	add.w	r3, r7, #12
 8005596:	2261      	movs	r2, #97	; 0x61
 8005598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  wave_header[38]  = 't';
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	2274      	movs	r2, #116	; 0x74
 80055a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  wave_header[39]  = 'a';
 80055a6:	f107 030c 	add.w	r3, r7, #12
 80055aa:	2261      	movs	r2, #97	; 0x61
 80055ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  /* Write the number of sample data */
	  wave_header[40]  = (uint8_t)((data_size & 0xFF));
 80055b0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	  wave_header[41]  = (uint8_t)((data_size >> 8) & 0xFF);
 80055be:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	f107 030c 	add.w	r3, r7, #12
 80055ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	  wave_header[42]  = (uint8_t)((data_size >> 16) & 0xFF);
 80055ce:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	  wave_header[43]  = (uint8_t)((data_size >> 24) & 0xFF);
 80055de:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80055e2:	0e1b      	lsrs	r3, r3, #24
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	f107 030c 	add.w	r3, r7, #12
 80055ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	  UINT bw;




	f_write(&f, wave_header, 44, &bw);
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	f107 010c 	add.w	r1, r7, #12
 80055f6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80055fa:	222c      	movs	r2, #44	; 0x2c
 80055fc:	f7fe fa38 	bl	8003a70 <f_write>
	 /* for (int i=0; i<44; i++)
	  {
		  f_write(&f, wave_header[i], 1, &bw);
	  }*/
	  f_close(&f);
 8005600:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fc1a 	bl	8003e3e <f_close>
	  if (bw!=44) return 1;
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b2c      	cmp	r3, #44	; 0x2c
 8005612:	d001      	beq.n	8005618 <AddWaveHeader+0x24e>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <AddWaveHeader+0x250>
	  return 0;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <SaveChunk>:

int SaveChunk(char* file_path, int16_t *data)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	FRESULT fr;
	UINT bw;
	fr=f_write(&file, data, (uint16_t)CHUNK_SIZE*2, &bw);
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <SaveChunk+0x40>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	461a      	mov	r2, r3
 8005638:	f107 0308 	add.w	r3, r7, #8
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	480a      	ldr	r0, [pc, #40]	; (8005668 <SaveChunk+0x44>)
 8005640:	f7fe fa16 	bl	8003a70 <f_write>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]
	if (CHUNK_SIZE!=bw) return 1;
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <SaveChunk+0x40>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <SaveChunk+0x34>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <SaveChunk+0x36>
	return 0;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	2000001c 	.word	0x2000001c
 8005668:	20000c30 	.word	0x20000c30

0800566c <OpenFile>:

void OpenFile(char * file_path)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr=f_open(&file, file_path, FA_OPEN_APPEND | FA_WRITE);
 8005674:	2232      	movs	r2, #50	; 0x32
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4804      	ldr	r0, [pc, #16]	; (800568c <OpenFile+0x20>)
 800567a:	f7fd ff43 	bl	8003504 <f_open>
 800567e:	4603      	mov	r3, r0
 8005680:	73fb      	strb	r3, [r7, #15]
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000c30 	.word	0x20000c30

08005690 <CloseFile>:

void CloseFile(char * file_path)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr=f_close(&file);
 8005698:	4804      	ldr	r0, [pc, #16]	; (80056ac <CloseFile+0x1c>)
 800569a:	f7fe fbd0 	bl	8003e3e <f_close>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000c30 	.word	0x20000c30

080056b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_MspInit+0x4c>)
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	4a0f      	ldr	r2, [pc, #60]	; (80056fc <HAL_MspInit+0x4c>)
 80056c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c4:	6453      	str	r3, [r2, #68]	; 0x44
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <HAL_MspInit+0x4c>)
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_MspInit+0x4c>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4a08      	ldr	r2, [pc, #32]	; (80056fc <HAL_MspInit+0x4c>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6413      	str	r3, [r2, #64]	; 0x40
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_MspInit+0x4c>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800

08005700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08c      	sub	sp, #48	; 0x30
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005708:	f107 031c 	add.w	r3, r7, #28
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3b      	ldr	r2, [pc, #236]	; (800580c <HAL_ADC_MspInit+0x10c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d142      	bne.n	80057a8 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	4a39      	ldr	r2, [pc, #228]	; (8005810 <HAL_ADC_MspInit+0x110>)
 800572c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005730:	6453      	str	r3, [r2, #68]	; 0x44
 8005732:	4b37      	ldr	r3, [pc, #220]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	4a32      	ldr	r2, [pc, #200]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	6313      	str	r3, [r2, #48]	; 0x30
 800574e:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	4b2c      	ldr	r3, [pc, #176]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <HAL_ADC_MspInit+0x110>)
 8005764:	f043 0304 	orr.w	r3, r3, #4
 8005768:	6313      	str	r3, [r2, #48]	; 0x30
 800576a:	4b29      	ldr	r3, [pc, #164]	; (8005810 <HAL_ADC_MspInit+0x110>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005776:	2303      	movs	r3, #3
 8005778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800577a:	2303      	movs	r3, #3
 800577c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005782:	f107 031c 	add.w	r3, r7, #28
 8005786:	4619      	mov	r1, r3
 8005788:	4822      	ldr	r0, [pc, #136]	; (8005814 <HAL_ADC_MspInit+0x114>)
 800578a:	f001 f8eb 	bl	8006964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800578e:	2320      	movs	r3, #32
 8005790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005792:	2303      	movs	r3, #3
 8005794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800579a:	f107 031c 	add.w	r3, r7, #28
 800579e:	4619      	mov	r1, r3
 80057a0:	481d      	ldr	r0, [pc, #116]	; (8005818 <HAL_ADC_MspInit+0x118>)
 80057a2:	f001 f8df 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80057a6:	e02c      	b.n	8005802 <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <HAL_ADC_MspInit+0x11c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d127      	bne.n	8005802 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <HAL_ADC_MspInit+0x110>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <HAL_ADC_MspInit+0x110>)
 80057bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057c0:	6453      	str	r3, [r2, #68]	; 0x44
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <HAL_ADC_MspInit+0x110>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_ADC_MspInit+0x110>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	4a0e      	ldr	r2, [pc, #56]	; (8005810 <HAL_ADC_MspInit+0x110>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6313      	str	r3, [r2, #48]	; 0x30
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <HAL_ADC_MspInit+0x110>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057ee:	2303      	movs	r3, #3
 80057f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f6:	f107 031c 	add.w	r3, r7, #28
 80057fa:	4619      	mov	r1, r3
 80057fc:	4805      	ldr	r0, [pc, #20]	; (8005814 <HAL_ADC_MspInit+0x114>)
 80057fe:	f001 f8b1 	bl	8006964 <HAL_GPIO_Init>
}
 8005802:	bf00      	nop
 8005804:	3730      	adds	r7, #48	; 0x30
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40012000 	.word	0x40012000
 8005810:	40023800 	.word	0x40023800
 8005814:	40020000 	.word	0x40020000
 8005818:	40020800 	.word	0x40020800
 800581c:	40012100 	.word	0x40012100

08005820 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	; 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 0314 	add.w	r3, r7, #20
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <HAL_DAC_MspInit+0x7c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d127      	bne.n	8005892 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_DAC_MspInit+0x80>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <HAL_DAC_MspInit+0x80>)
 800584c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
 8005852:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_DAC_MspInit+0x80>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <HAL_DAC_MspInit+0x80>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <HAL_DAC_MspInit+0x80>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6313      	str	r3, [r2, #48]	; 0x30
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_DAC_MspInit+0x80>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800587a:	2330      	movs	r3, #48	; 0x30
 800587c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800587e:	2303      	movs	r3, #3
 8005880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005886:	f107 0314 	add.w	r3, r7, #20
 800588a:	4619      	mov	r1, r3
 800588c:	4805      	ldr	r0, [pc, #20]	; (80058a4 <HAL_DAC_MspInit+0x84>)
 800588e:	f001 f869 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005892:	bf00      	nop
 8005894:	3728      	adds	r7, #40	; 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40007400 	.word	0x40007400
 80058a0:	40023800 	.word	0x40023800
 80058a4:	40020000 	.word	0x40020000

080058a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b0:	f107 0314 	add.w	r3, r7, #20
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_SPI_MspInit+0x84>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d12b      	bne.n	8005922 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	4b18      	ldr	r3, [pc, #96]	; (8005930 <HAL_SPI_MspInit+0x88>)
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <HAL_SPI_MspInit+0x88>)
 80058d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058d8:	6453      	str	r3, [r2, #68]	; 0x44
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <HAL_SPI_MspInit+0x88>)
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <HAL_SPI_MspInit+0x88>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a10      	ldr	r2, [pc, #64]	; (8005930 <HAL_SPI_MspInit+0x88>)
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_SPI_MspInit+0x88>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005902:	2338      	movs	r3, #56	; 0x38
 8005904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005906:	2302      	movs	r3, #2
 8005908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800590e:	2303      	movs	r3, #3
 8005910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005912:	2305      	movs	r3, #5
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	4619      	mov	r1, r3
 800591c:	4805      	ldr	r0, [pc, #20]	; (8005934 <HAL_SPI_MspInit+0x8c>)
 800591e:	f001 f821 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005922:	bf00      	nop
 8005924:	3728      	adds	r7, #40	; 0x28
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40013000 	.word	0x40013000
 8005930:	40023800 	.word	0x40023800
 8005934:	40020400 	.word	0x40020400

08005938 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005948:	d115      	bne.n	8005976 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <HAL_TIM_PWM_MspInit+0x48>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <HAL_TIM_PWM_MspInit+0x48>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6413      	str	r3, [r2, #64]	; 0x40
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_TIM_PWM_MspInit+0x48>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005966:	2200      	movs	r2, #0
 8005968:	2100      	movs	r1, #0
 800596a:	201c      	movs	r0, #28
 800596c:	f000 fec9 	bl	8006702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005970:	201c      	movs	r0, #28
 8005972:	f000 fee2 	bl	800673a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800

08005984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08c      	sub	sp, #48	; 0x30
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598c:	f107 031c 	add.w	r3, r7, #28
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a44      	ldr	r2, [pc, #272]	; (8005ab4 <HAL_TIM_Base_MspInit+0x130>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d14a      	bne.n	8005a3c <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	4b43      	ldr	r3, [pc, #268]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	4a42      	ldr	r2, [pc, #264]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	6413      	str	r3, [r2, #64]	; 0x40
 80059b6:	4b40      	ldr	r3, [pc, #256]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	4b3c      	ldr	r3, [pc, #240]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	4a3b      	ldr	r2, [pc, #236]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	6313      	str	r3, [r2, #48]	; 0x30
 80059d2:	4b39      	ldr	r3, [pc, #228]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	6313      	str	r3, [r2, #48]	; 0x30
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80059fa:	2301      	movs	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fe:	2302      	movs	r3, #2
 8005a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a0e:	f107 031c 	add.w	r3, r7, #28
 8005a12:	4619      	mov	r1, r3
 8005a14:	4829      	ldr	r0, [pc, #164]	; (8005abc <HAL_TIM_Base_MspInit+0x138>)
 8005a16:	f000 ffa5 	bl	8006964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a1a:	23c0      	movs	r3, #192	; 0xc0
 8005a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a26:	2300      	movs	r3, #0
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a2e:	f107 031c 	add.w	r3, r7, #28
 8005a32:	4619      	mov	r1, r3
 8005a34:	4822      	ldr	r0, [pc, #136]	; (8005ac0 <HAL_TIM_Base_MspInit+0x13c>)
 8005a36:	f000 ff95 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005a3a:	e036      	b.n	8005aaa <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_TIM_Base_MspInit+0x140>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d116      	bne.n	8005a74 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6413      	str	r3, [r2, #64]	; 0x40
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2100      	movs	r1, #0
 8005a66:	201e      	movs	r0, #30
 8005a68:	f000 fe4b 	bl	8006702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005a6c:	201e      	movs	r0, #30
 8005a6e:	f000 fe64 	bl	800673a <HAL_NVIC_EnableIRQ>
}
 8005a72:	e01a      	b.n	8005aaa <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <HAL_TIM_Base_MspInit+0x144>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d115      	bne.n	8005aaa <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <HAL_TIM_Base_MspInit+0x134>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2032      	movs	r0, #50	; 0x32
 8005aa0:	f000 fe2f 	bl	8006702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005aa4:	2032      	movs	r0, #50	; 0x32
 8005aa6:	f000 fe48 	bl	800673a <HAL_NVIC_EnableIRQ>
}
 8005aaa:	bf00      	nop
 8005aac:	3730      	adds	r7, #48	; 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40020400 	.word	0x40020400
 8005ac0:	40020800 	.word	0x40020800
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00

08005acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad4:	f107 030c 	add.w	r3, r7, #12
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aec:	d11e      	bne.n	8005b2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_TIM_MspPostInit+0x68>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <HAL_TIM_MspPostInit+0x68>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	6313      	str	r3, [r2, #48]	; 0x30
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_TIM_MspPostInit+0x68>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b10:	2302      	movs	r3, #2
 8005b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	4619      	mov	r1, r3
 8005b26:	4804      	ldr	r0, [pc, #16]	; (8005b38 <HAL_TIM_MspPostInit+0x6c>)
 8005b28:	f000 ff1c 	bl	8006964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005b2c:	bf00      	nop
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40020000 	.word	0x40020000

08005b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b4e:	e7fe      	b.n	8005b4e <HardFault_Handler+0x4>

08005b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b54:	e7fe      	b.n	8005b54 <MemManage_Handler+0x4>

08005b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b56:	b480      	push	{r7}
 8005b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b5a:	e7fe      	b.n	8005b5a <BusFault_Handler+0x4>

08005b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b60:	e7fe      	b.n	8005b60 <UsageFault_Handler+0x4>

08005b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8005b90:	f7fb ffd4 	bl	8001b3c <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b94:	f000 f8de 	bl	8005d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b98:	bf00      	nop
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ba0:	4802      	ldr	r0, [pc, #8]	; (8005bac <TIM2_IRQHandler+0x10>)
 8005ba2:	f002 f985 	bl	8007eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000bec 	.word	0x20000bec

08005bb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <TIM4_IRQHandler+0x10>)
 8005bb6:	f002 f97b 	bl	8007eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000724 	.word	0x20000724

08005bc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005bc8:	4802      	ldr	r0, [pc, #8]	; (8005bd4 <TIM5_IRQHandler+0x10>)
 8005bca:	f002 f971 	bl	8007eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200007ac 	.word	0x200007ac

08005bd8 <_sbrk>:
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <_sbrk+0x50>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <_sbrk+0x16>
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <_sbrk+0x50>)
 8005bea:	4a10      	ldr	r2, [pc, #64]	; (8005c2c <_sbrk+0x54>)
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <_sbrk+0x50>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <_sbrk+0x50>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	466a      	mov	r2, sp
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d907      	bls.n	8005c12 <_sbrk+0x3a>
 8005c02:	f002 ffa7 	bl	8008b54 <__errno>
 8005c06:	4602      	mov	r2, r0
 8005c08:	230c      	movs	r3, #12
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c10:	e006      	b.n	8005c20 <_sbrk+0x48>
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <_sbrk+0x50>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	4a03      	ldr	r2, [pc, #12]	; (8005c28 <_sbrk+0x50>)
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000714 	.word	0x20000714
 8005c2c:	20000e60 	.word	0x20000e60

08005c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c34:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <SystemInit+0x28>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	4a07      	ldr	r2, [pc, #28]	; (8005c58 <SystemInit+0x28>)
 8005c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <SystemInit+0x28>)
 8005c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <Reset_Handler>:
 8005c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c94 <LoopFillZerobss+0x14>
 8005c60:	2100      	movs	r1, #0
 8005c62:	e003      	b.n	8005c6c <LoopCopyDataInit>

08005c64 <CopyDataInit>:
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <LoopFillZerobss+0x18>)
 8005c66:	585b      	ldr	r3, [r3, r1]
 8005c68:	5043      	str	r3, [r0, r1]
 8005c6a:	3104      	adds	r1, #4

08005c6c <LoopCopyDataInit>:
 8005c6c:	480b      	ldr	r0, [pc, #44]	; (8005c9c <LoopFillZerobss+0x1c>)
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <LoopFillZerobss+0x20>)
 8005c70:	1842      	adds	r2, r0, r1
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3f6      	bcc.n	8005c64 <CopyDataInit>
 8005c76:	4a0b      	ldr	r2, [pc, #44]	; (8005ca4 <LoopFillZerobss+0x24>)
 8005c78:	e002      	b.n	8005c80 <LoopFillZerobss>

08005c7a <FillZerobss>:
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f842 3b04 	str.w	r3, [r2], #4

08005c80 <LoopFillZerobss>:
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <LoopFillZerobss+0x28>)
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d3f9      	bcc.n	8005c7a <FillZerobss>
 8005c86:	f7ff ffd3 	bl	8005c30 <SystemInit>
 8005c8a:	f002 ff69 	bl	8008b60 <__libc_init_array>
 8005c8e:	f7fe ffa3 	bl	8004bd8 <main>
 8005c92:	4770      	bx	lr
 8005c94:	20020000 	.word	0x20020000
 8005c98:	08009794 	.word	0x08009794
 8005c9c:	20000000 	.word	0x20000000
 8005ca0:	200001fc 	.word	0x200001fc
 8005ca4:	20000200 	.word	0x20000200
 8005ca8:	20000e60 	.word	0x20000e60

08005cac <ADC_IRQHandler>:
 8005cac:	e7fe      	b.n	8005cac <ADC_IRQHandler>
	...

08005cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <HAL_Init+0x40>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a0d      	ldr	r2, [pc, #52]	; (8005cf0 <HAL_Init+0x40>)
 8005cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <HAL_Init+0x40>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_Init+0x40>)
 8005cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <HAL_Init+0x40>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a07      	ldr	r2, [pc, #28]	; (8005cf0 <HAL_Init+0x40>)
 8005cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cd8:	2003      	movs	r0, #3
 8005cda:	f000 fd07 	bl	80066ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f000 f808 	bl	8005cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ce4:	f7ff fce4 	bl	80056b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40023c00 	.word	0x40023c00

08005cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cfc:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <HAL_InitTick+0x54>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <HAL_InitTick+0x58>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	4619      	mov	r1, r3
 8005d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd1f 	bl	8006756 <HAL_SYSTICK_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e00e      	b.n	8005d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b0f      	cmp	r3, #15
 8005d26:	d80a      	bhi.n	8005d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d28:	2200      	movs	r2, #0
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	f000 fce7 	bl	8006702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d34:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <HAL_InitTick+0x5c>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e000      	b.n	8005d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000020 	.word	0x20000020
 8005d4c:	20000028 	.word	0x20000028
 8005d50:	20000024 	.word	0x20000024

08005d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_IncTick+0x20>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <HAL_IncTick+0x24>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4413      	add	r3, r2
 8005d64:	4a04      	ldr	r2, [pc, #16]	; (8005d78 <HAL_IncTick+0x24>)
 8005d66:	6013      	str	r3, [r2, #0]
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000028 	.word	0x20000028
 8005d78:	20000e58 	.word	0x20000e58

08005d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <HAL_GetTick+0x14>)
 8005d82:	681b      	ldr	r3, [r3, #0]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000e58 	.word	0x20000e58

08005d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d9c:	f7ff ffee 	bl	8005d7c <HAL_GetTick>
 8005da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d005      	beq.n	8005dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_Delay+0x40>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005dba:	bf00      	nop
 8005dbc:	f7ff ffde 	bl	8005d7c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d8f7      	bhi.n	8005dbc <HAL_Delay+0x28>
  {
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000028 	.word	0x20000028

08005dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e033      	b.n	8005e56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fc82 	bl	8005700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d118      	bne.n	8005e48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e1e:	f023 0302 	bic.w	r3, r3, #2
 8005e22:	f043 0202 	orr.w	r2, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa92 	bl	8006354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	f043 0201 	orr.w	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
 8005e46:	e001      	b.n	8005e4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_ADC_Start+0x1a>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0a5      	b.n	8005fc6 <HAL_ADC_Start+0x166>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d018      	beq.n	8005ec2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ea0:	4b4c      	ldr	r3, [pc, #304]	; (8005fd4 <HAL_ADC_Start+0x174>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a4c      	ldr	r2, [pc, #304]	; (8005fd8 <HAL_ADC_Start+0x178>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0c9a      	lsrs	r2, r3, #18
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005eb4:	e002      	b.n	8005ebc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f9      	bne.n	8005eb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d179      	bne.n	8005fc4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005efa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d106      	bne.n	8005f1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	f023 0206 	bic.w	r2, r3, #6
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
 8005f1c:	e002      	b.n	8005f24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f2c:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <HAL_ADC_Start+0x17c>)
 8005f2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005f38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d12a      	bne.n	8005f9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <HAL_ADC_Start+0x180>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d015      	beq.n	8005f7c <HAL_ADC_Start+0x11c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <HAL_ADC_Start+0x184>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d105      	bne.n	8005f66 <HAL_ADC_Start+0x106>
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <HAL_ADC_Start+0x17c>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <HAL_ADC_Start+0x188>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d129      	bne.n	8005fc4 <HAL_ADC_Start+0x164>
 8005f70:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <HAL_ADC_Start+0x17c>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	2b0f      	cmp	r3, #15
 8005f7a:	d823      	bhi.n	8005fc4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11c      	bne.n	8005fc4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f98:	609a      	str	r2, [r3, #8]
 8005f9a:	e013      	b.n	8005fc4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0f      	ldr	r2, [pc, #60]	; (8005fe0 <HAL_ADC_Start+0x180>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_ADC_Start+0x164>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d107      	bne.n	8005fc4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fc2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000020 	.word	0x20000020
 8005fd8:	431bde83 	.word	0x431bde83
 8005fdc:	40012300 	.word	0x40012300
 8005fe0:	40012000 	.word	0x40012000
 8005fe4:	40012100 	.word	0x40012100
 8005fe8:	40012200 	.word	0x40012200

08005fec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d113      	bne.n	8006032 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006018:	d10b      	bne.n	8006032 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e05c      	b.n	80060ec <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006032:	f7ff fea3 	bl	8005d7c <HAL_GetTick>
 8006036:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006038:	e01a      	b.n	8006070 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d016      	beq.n	8006070 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_ADC_PollForConversion+0x6c>
 8006048:	f7ff fe98 	bl	8005d7c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d20b      	bcs.n	8006070 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f043 0204 	orr.w	r2, r3, #4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e03d      	b.n	80060ec <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d1dd      	bne.n	800603a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f06f 0212 	mvn.w	r2, #18
 8006086:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d123      	bne.n	80060ea <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11f      	bne.n	80060ea <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d006      	beq.n	80060c6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d111      	bne.n	80060ea <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_ADC_ConfigChannel+0x1c>
 8006128:	2302      	movs	r3, #2
 800612a:	e105      	b.n	8006338 <HAL_ADC_ConfigChannel+0x228>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b09      	cmp	r3, #9
 800613a:	d925      	bls.n	8006188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68d9      	ldr	r1, [r3, #12]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	4613      	mov	r3, r2
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	4413      	add	r3, r2
 8006150:	3b1e      	subs	r3, #30
 8006152:	2207      	movs	r2, #7
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43da      	mvns	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	400a      	ands	r2, r1
 8006160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	4618      	mov	r0, r3
 8006174:	4603      	mov	r3, r0
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4403      	add	r3, r0
 800617a:	3b1e      	subs	r3, #30
 800617c:	409a      	lsls	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	e022      	b.n	80061ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6919      	ldr	r1, [r3, #16]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	2207      	movs	r2, #7
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43da      	mvns	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	400a      	ands	r2, r1
 80061aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6919      	ldr	r1, [r3, #16]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	4618      	mov	r0, r3
 80061be:	4603      	mov	r3, r0
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4403      	add	r3, r0
 80061c4:	409a      	lsls	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d824      	bhi.n	8006220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	3b05      	subs	r3, #5
 80061e8:	221f      	movs	r2, #31
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43da      	mvns	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	400a      	ands	r2, r1
 80061f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	4618      	mov	r0, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	3b05      	subs	r3, #5
 8006212:	fa00 f203 	lsl.w	r2, r0, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	635a      	str	r2, [r3, #52]	; 0x34
 800621e:	e04c      	b.n	80062ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b0c      	cmp	r3, #12
 8006226:	d824      	bhi.n	8006272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	3b23      	subs	r3, #35	; 0x23
 800623a:	221f      	movs	r2, #31
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	43da      	mvns	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	400a      	ands	r2, r1
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	4618      	mov	r0, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	3b23      	subs	r3, #35	; 0x23
 8006264:	fa00 f203 	lsl.w	r2, r0, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
 8006270:	e023      	b.n	80062ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	3b41      	subs	r3, #65	; 0x41
 8006284:	221f      	movs	r2, #31
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43da      	mvns	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	400a      	ands	r2, r1
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	4618      	mov	r0, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	3b41      	subs	r3, #65	; 0x41
 80062ae:	fa00 f203 	lsl.w	r2, r0, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062ba:	4b22      	ldr	r3, [pc, #136]	; (8006344 <HAL_ADC_ConfigChannel+0x234>)
 80062bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a21      	ldr	r2, [pc, #132]	; (8006348 <HAL_ADC_ConfigChannel+0x238>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d109      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x1cc>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b12      	cmp	r3, #18
 80062ce:	d105      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <HAL_ADC_ConfigChannel+0x238>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d123      	bne.n	800632e <HAL_ADC_ConfigChannel+0x21e>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d003      	beq.n	80062f6 <HAL_ADC_ConfigChannel+0x1e6>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b11      	cmp	r3, #17
 80062f4:	d11b      	bne.n	800632e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b10      	cmp	r3, #16
 8006308:	d111      	bne.n	800632e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <HAL_ADC_ConfigChannel+0x23c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <HAL_ADC_ConfigChannel+0x240>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	0c9a      	lsrs	r2, r3, #18
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006320:	e002      	b.n	8006328 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	3b01      	subs	r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f9      	bne.n	8006322 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40012300 	.word	0x40012300
 8006348:	40012000 	.word	0x40012000
 800634c:	20000020 	.word	0x20000020
 8006350:	431bde83 	.word	0x431bde83

08006354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800635c:	4b79      	ldr	r3, [pc, #484]	; (8006544 <ADC_Init+0x1f0>)
 800635e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	431a      	orrs	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	021a      	lsls	r2, r3, #8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80063ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6859      	ldr	r1, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6899      	ldr	r1, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	4a58      	ldr	r2, [pc, #352]	; (8006548 <ADC_Init+0x1f4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6899      	ldr	r1, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800641c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6899      	ldr	r1, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	e00f      	b.n	8006452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0202 	bic.w	r2, r2, #2
 8006460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	7e1b      	ldrb	r3, [r3, #24]
 800646c:	005a      	lsls	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01b      	beq.n	80064b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800648e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800649e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	3b01      	subs	r3, #1
 80064ac:	035a      	lsls	r2, r3, #13
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	e007      	b.n	80064c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	051a      	lsls	r2, r3, #20
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6899      	ldr	r1, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800650a:	025a      	lsls	r2, r3, #9
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6899      	ldr	r1, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	029a      	lsls	r2, r3, #10
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	609a      	str	r2, [r3, #8]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	40012300 	.word	0x40012300
 8006548:	0f000001 	.word	0x0f000001

0800654c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <__NVIC_SetPriorityGrouping+0x44>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006568:	4013      	ands	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800657e:	4a04      	ldr	r2, [pc, #16]	; (8006590 <__NVIC_SetPriorityGrouping+0x44>)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	60d3      	str	r3, [r2, #12]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	e000ed00 	.word	0xe000ed00

08006594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <__NVIC_GetPriorityGrouping+0x18>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	0a1b      	lsrs	r3, r3, #8
 800659e:	f003 0307 	and.w	r3, r3, #7
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	e000ed00 	.word	0xe000ed00

080065b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	db0b      	blt.n	80065da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	f003 021f 	and.w	r2, r3, #31
 80065c8:	4907      	ldr	r1, [pc, #28]	; (80065e8 <__NVIC_EnableIRQ+0x38>)
 80065ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2001      	movs	r0, #1
 80065d2:	fa00 f202 	lsl.w	r2, r0, r2
 80065d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	e000e100 	.word	0xe000e100

080065ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	db0a      	blt.n	8006616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	490c      	ldr	r1, [pc, #48]	; (8006638 <__NVIC_SetPriority+0x4c>)
 8006606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660a:	0112      	lsls	r2, r2, #4
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	440b      	add	r3, r1
 8006610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006614:	e00a      	b.n	800662c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4908      	ldr	r1, [pc, #32]	; (800663c <__NVIC_SetPriority+0x50>)
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	3b04      	subs	r3, #4
 8006624:	0112      	lsls	r2, r2, #4
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	440b      	add	r3, r1
 800662a:	761a      	strb	r2, [r3, #24]
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	e000e100 	.word	0xe000e100
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	; 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f1c3 0307 	rsb	r3, r3, #7
 800665a:	2b04      	cmp	r3, #4
 800665c:	bf28      	it	cs
 800665e:	2304      	movcs	r3, #4
 8006660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3304      	adds	r3, #4
 8006666:	2b06      	cmp	r3, #6
 8006668:	d902      	bls.n	8006670 <NVIC_EncodePriority+0x30>
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3b03      	subs	r3, #3
 800666e:	e000      	b.n	8006672 <NVIC_EncodePriority+0x32>
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43da      	mvns	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	401a      	ands	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006688:	f04f 31ff 	mov.w	r1, #4294967295
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	43d9      	mvns	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006698:	4313      	orrs	r3, r2
         );
}
 800669a:	4618      	mov	r0, r3
 800669c:	3724      	adds	r7, #36	; 0x24
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066b8:	d301      	bcc.n	80066be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066ba:	2301      	movs	r3, #1
 80066bc:	e00f      	b.n	80066de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066be:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <SysTick_Config+0x40>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066c6:	210f      	movs	r1, #15
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	f7ff ff8e 	bl	80065ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <SysTick_Config+0x40>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066d6:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <SysTick_Config+0x40>)
 80066d8:	2207      	movs	r2, #7
 80066da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	e000e010 	.word	0xe000e010

080066ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ff29 	bl	800654c <__NVIC_SetPriorityGrouping>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006702:	b580      	push	{r7, lr}
 8006704:	b086      	sub	sp, #24
 8006706:	af00      	add	r7, sp, #0
 8006708:	4603      	mov	r3, r0
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006714:	f7ff ff3e 	bl	8006594 <__NVIC_GetPriorityGrouping>
 8006718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	6978      	ldr	r0, [r7, #20]
 8006720:	f7ff ff8e 	bl	8006640 <NVIC_EncodePriority>
 8006724:	4602      	mov	r2, r0
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672a:	4611      	mov	r1, r2
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff ff5d 	bl	80065ec <__NVIC_SetPriority>
}
 8006732:	bf00      	nop
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	4603      	mov	r3, r0
 8006742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff ff31 	bl	80065b0 <__NVIC_EnableIRQ>
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ffa2 	bl	80066a8 <SysTick_Config>
 8006764:	4603      	mov	r3, r0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e014      	b.n	80067aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff f845 	bl	8005820 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	2300      	movs	r3, #0
 80067c2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	795b      	ldrb	r3, [r3, #5]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_DAC_Start+0x1e>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e050      	b.n	8006872 <HAL_DAC_Start+0xc0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	409a      	lsls	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d11a      	bne.n	800682c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b04      	cmp	r3, #4
 8006812:	d127      	bne.n	8006864 <HAL_DAC_Start+0xb2>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b38      	cmp	r3, #56	; 0x38
 8006818:	d124      	bne.n	8006864 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0201 	orr.w	r2, r2, #1
 8006828:	605a      	str	r2, [r3, #4]
 800682a:	e01b      	b.n	8006864 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006836:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006842:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800684a:	d10b      	bne.n	8006864 <HAL_DAC_Start+0xb2>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8006852:	d107      	bne.n	8006864 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0202 	orr.w	r2, r2, #2
 8006862:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	795b      	ldrb	r3, [r3, #5]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_DAC_ConfigChannel+0x20>
 800689a:	2302      	movs	r3, #2
 800689c:	e036      	b.n	800690c <HAL_DAC_ConfigChannel+0x8e>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2202      	movs	r2, #2
 80068a8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80068b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4013      	ands	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6819      	ldr	r1, [r3, #0]
 80068ec:	22c0      	movs	r2, #192	; 0xc0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	43da      	mvns	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	400a      	ands	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3308      	adds	r3, #8
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e004      	b.n	800694c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	3314      	adds	r3, #20
 800694a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	461a      	mov	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006976:	2300      	movs	r3, #0
 8006978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	e16b      	b.n	8006c58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006980:	2201      	movs	r2, #1
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4013      	ands	r3, r2
 8006992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	429a      	cmp	r2, r3
 800699a:	f040 815a 	bne.w	8006c52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d00b      	beq.n	80069be <HAL_GPIO_Init+0x5a>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d007      	beq.n	80069be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069b2:	2b11      	cmp	r3, #17
 80069b4:	d003      	beq.n	80069be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b12      	cmp	r3, #18
 80069bc:	d130      	bne.n	8006a20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	2203      	movs	r2, #3
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069f4:	2201      	movs	r2, #1
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	43db      	mvns	r3, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	f003 0201 	and.w	r2, r3, #1
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	43db      	mvns	r3, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4013      	ands	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d003      	beq.n	8006a60 <HAL_GPIO_Init+0xfc>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b12      	cmp	r3, #18
 8006a5e:	d123      	bne.n	8006aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	08da      	lsrs	r2, r3, #3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3208      	adds	r2, #8
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	220f      	movs	r2, #15
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	4013      	ands	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	08da      	lsrs	r2, r3, #3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3208      	adds	r2, #8
 8006aa2:	69b9      	ldr	r1, [r7, #24]
 8006aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	4013      	ands	r3, r2
 8006abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 0203 	and.w	r2, r3, #3
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80b4 	beq.w	8006c52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	4b5f      	ldr	r3, [pc, #380]	; (8006c6c <HAL_GPIO_Init+0x308>)
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	4a5e      	ldr	r2, [pc, #376]	; (8006c6c <HAL_GPIO_Init+0x308>)
 8006af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006af8:	6453      	str	r3, [r2, #68]	; 0x44
 8006afa:	4b5c      	ldr	r3, [pc, #368]	; (8006c6c <HAL_GPIO_Init+0x308>)
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b06:	4a5a      	ldr	r2, [pc, #360]	; (8006c70 <HAL_GPIO_Init+0x30c>)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	089b      	lsrs	r3, r3, #2
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	220f      	movs	r2, #15
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a51      	ldr	r2, [pc, #324]	; (8006c74 <HAL_GPIO_Init+0x310>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d02b      	beq.n	8006b8a <HAL_GPIO_Init+0x226>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a50      	ldr	r2, [pc, #320]	; (8006c78 <HAL_GPIO_Init+0x314>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d025      	beq.n	8006b86 <HAL_GPIO_Init+0x222>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a4f      	ldr	r2, [pc, #316]	; (8006c7c <HAL_GPIO_Init+0x318>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01f      	beq.n	8006b82 <HAL_GPIO_Init+0x21e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a4e      	ldr	r2, [pc, #312]	; (8006c80 <HAL_GPIO_Init+0x31c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d019      	beq.n	8006b7e <HAL_GPIO_Init+0x21a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a4d      	ldr	r2, [pc, #308]	; (8006c84 <HAL_GPIO_Init+0x320>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_GPIO_Init+0x216>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a4c      	ldr	r2, [pc, #304]	; (8006c88 <HAL_GPIO_Init+0x324>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00d      	beq.n	8006b76 <HAL_GPIO_Init+0x212>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a4b      	ldr	r2, [pc, #300]	; (8006c8c <HAL_GPIO_Init+0x328>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d007      	beq.n	8006b72 <HAL_GPIO_Init+0x20e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a4a      	ldr	r2, [pc, #296]	; (8006c90 <HAL_GPIO_Init+0x32c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d101      	bne.n	8006b6e <HAL_GPIO_Init+0x20a>
 8006b6a:	2307      	movs	r3, #7
 8006b6c:	e00e      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b6e:	2308      	movs	r3, #8
 8006b70:	e00c      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b72:	2306      	movs	r3, #6
 8006b74:	e00a      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b76:	2305      	movs	r3, #5
 8006b78:	e008      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	e006      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e004      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e002      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <HAL_GPIO_Init+0x228>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	f002 0203 	and.w	r2, r2, #3
 8006b92:	0092      	lsls	r2, r2, #2
 8006b94:	4093      	lsls	r3, r2
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b9c:	4934      	ldr	r1, [pc, #208]	; (8006c70 <HAL_GPIO_Init+0x30c>)
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	3302      	adds	r3, #2
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006baa:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	43db      	mvns	r3, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bce:	4a31      	ldr	r2, [pc, #196]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bd4:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4013      	ands	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bfe:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	43db      	mvns	r3, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c22:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4013      	ands	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <HAL_GPIO_Init+0x330>)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	3301      	adds	r3, #1
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	f67f ae90 	bls.w	8006980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c60:	bf00      	nop
 8006c62:	3724      	adds	r7, #36	; 0x24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40013800 	.word	0x40013800
 8006c74:	40020000 	.word	0x40020000
 8006c78:	40020400 	.word	0x40020400
 8006c7c:	40020800 	.word	0x40020800
 8006c80:	40020c00 	.word	0x40020c00
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40021400 	.word	0x40021400
 8006c8c:	40021800 	.word	0x40021800
 8006c90:	40021c00 	.word	0x40021c00
 8006c94:	40013c00 	.word	0x40013c00

08006c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	887b      	ldrh	r3, [r7, #2]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e001      	b.n	8006cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cd8:	787b      	ldrb	r3, [r7, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cde:	887a      	ldrh	r2, [r7, #2]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ce4:	e003      	b.n	8006cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	041a      	lsls	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	619a      	str	r2, [r3, #24]
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e25b      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d075      	beq.n	8006e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d1a:	4ba3      	ldr	r3, [pc, #652]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 030c 	and.w	r3, r3, #12
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d00c      	beq.n	8006d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d26:	4ba0      	ldr	r3, [pc, #640]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d112      	bne.n	8006d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d32:	4b9d      	ldr	r3, [pc, #628]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d3e:	d10b      	bne.n	8006d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d40:	4b99      	ldr	r3, [pc, #612]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d05b      	beq.n	8006e04 <HAL_RCC_OscConfig+0x108>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d157      	bne.n	8006e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e236      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d60:	d106      	bne.n	8006d70 <HAL_RCC_OscConfig+0x74>
 8006d62:	4b91      	ldr	r3, [pc, #580]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a90      	ldr	r2, [pc, #576]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	e01d      	b.n	8006dac <HAL_RCC_OscConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d78:	d10c      	bne.n	8006d94 <HAL_RCC_OscConfig+0x98>
 8006d7a:	4b8b      	ldr	r3, [pc, #556]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a8a      	ldr	r2, [pc, #552]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	4b88      	ldr	r3, [pc, #544]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a87      	ldr	r2, [pc, #540]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e00b      	b.n	8006dac <HAL_RCC_OscConfig+0xb0>
 8006d94:	4b84      	ldr	r3, [pc, #528]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a83      	ldr	r2, [pc, #524]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4b81      	ldr	r3, [pc, #516]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a80      	ldr	r2, [pc, #512]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d013      	beq.n	8006ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db4:	f7fe ffe2 	bl	8005d7c <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dbc:	f7fe ffde 	bl	8005d7c <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b64      	cmp	r3, #100	; 0x64
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e1fb      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dce:	4b76      	ldr	r3, [pc, #472]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCC_OscConfig+0xc0>
 8006dda:	e014      	b.n	8006e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ddc:	f7fe ffce 	bl	8005d7c <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de4:	f7fe ffca 	bl	8005d7c <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b64      	cmp	r3, #100	; 0x64
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e1e7      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006df6:	4b6c      	ldr	r3, [pc, #432]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0xe8>
 8006e02:	e000      	b.n	8006e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d063      	beq.n	8006eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e12:	4b65      	ldr	r3, [pc, #404]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 030c 	and.w	r3, r3, #12
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e1e:	4b62      	ldr	r3, [pc, #392]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d11c      	bne.n	8006e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e2a:	4b5f      	ldr	r3, [pc, #380]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d116      	bne.n	8006e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e36:	4b5c      	ldr	r3, [pc, #368]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_RCC_OscConfig+0x152>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d001      	beq.n	8006e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e1bb      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4e:	4b56      	ldr	r3, [pc, #344]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4952      	ldr	r1, [pc, #328]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e62:	e03a      	b.n	8006eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d020      	beq.n	8006eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e6c:	4b4f      	ldr	r3, [pc, #316]	; (8006fac <HAL_RCC_OscConfig+0x2b0>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fe ff83 	bl	8005d7c <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e7a:	f7fe ff7f 	bl	8005d7c <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e19c      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8c:	4b46      	ldr	r3, [pc, #280]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e98:	4b43      	ldr	r3, [pc, #268]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	4940      	ldr	r1, [pc, #256]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	600b      	str	r3, [r1, #0]
 8006eac:	e015      	b.n	8006eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eae:	4b3f      	ldr	r3, [pc, #252]	; (8006fac <HAL_RCC_OscConfig+0x2b0>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fe ff62 	bl	8005d7c <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ebc:	f7fe ff5e 	bl	8005d7c <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e17b      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ece:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f0      	bne.n	8006ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d030      	beq.n	8006f48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d016      	beq.n	8006f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eee:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <HAL_RCC_OscConfig+0x2b4>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef4:	f7fe ff42 	bl	8005d7c <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006efc:	f7fe ff3e 	bl	8005d7c <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e15b      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f0e:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0x200>
 8006f1a:	e015      	b.n	8006f48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f1c:	4b24      	ldr	r3, [pc, #144]	; (8006fb0 <HAL_RCC_OscConfig+0x2b4>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f22:	f7fe ff2b 	bl	8005d7c <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f2a:	f7fe ff27 	bl	8005d7c <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e144      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f3c:	4b1a      	ldr	r3, [pc, #104]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f0      	bne.n	8006f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80a0 	beq.w	8007096 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f56:	2300      	movs	r3, #0
 8006f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f66:	2300      	movs	r3, #0
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	4a0e      	ldr	r2, [pc, #56]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f74:	6413      	str	r3, [r2, #64]	; 0x40
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <HAL_RCC_OscConfig+0x2b8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d121      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <HAL_RCC_OscConfig+0x2b8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <HAL_RCC_OscConfig+0x2b8>)
 8006f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f9e:	f7fe feed 	bl	8005d7c <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa4:	e011      	b.n	8006fca <HAL_RCC_OscConfig+0x2ce>
 8006fa6:	bf00      	nop
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	42470000 	.word	0x42470000
 8006fb0:	42470e80 	.word	0x42470e80
 8006fb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb8:	f7fe fee0 	bl	8005d7c <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e0fd      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fca:	4b81      	ldr	r3, [pc, #516]	; (80071d0 <HAL_RCC_OscConfig+0x4d4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d106      	bne.n	8006fec <HAL_RCC_OscConfig+0x2f0>
 8006fde:	4b7d      	ldr	r3, [pc, #500]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a7c      	ldr	r2, [pc, #496]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fea:	e01c      	b.n	8007026 <HAL_RCC_OscConfig+0x32a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d10c      	bne.n	800700e <HAL_RCC_OscConfig+0x312>
 8006ff4:	4b77      	ldr	r3, [pc, #476]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	4a76      	ldr	r2, [pc, #472]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8006ffa:	f043 0304 	orr.w	r3, r3, #4
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8007000:	4b74      	ldr	r3, [pc, #464]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	4a73      	ldr	r2, [pc, #460]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	6713      	str	r3, [r2, #112]	; 0x70
 800700c:	e00b      	b.n	8007026 <HAL_RCC_OscConfig+0x32a>
 800700e:	4b71      	ldr	r3, [pc, #452]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007012:	4a70      	ldr	r2, [pc, #448]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	6713      	str	r3, [r2, #112]	; 0x70
 800701a:	4b6e      	ldr	r3, [pc, #440]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	4a6d      	ldr	r2, [pc, #436]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007020:	f023 0304 	bic.w	r3, r3, #4
 8007024:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d015      	beq.n	800705a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702e:	f7fe fea5 	bl	8005d7c <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007034:	e00a      	b.n	800704c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fe fea1 	bl	8005d7c <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f241 3288 	movw	r2, #5000	; 0x1388
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e0bc      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704c:	4b61      	ldr	r3, [pc, #388]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0ee      	beq.n	8007036 <HAL_RCC_OscConfig+0x33a>
 8007058:	e014      	b.n	8007084 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705a:	f7fe fe8f 	bl	8005d7c <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007060:	e00a      	b.n	8007078 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007062:	f7fe fe8b 	bl	8005d7c <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007070:	4293      	cmp	r3, r2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e0a6      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007078:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ee      	bne.n	8007062 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d105      	bne.n	8007096 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800708a:	4b52      	ldr	r3, [pc, #328]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	4a51      	ldr	r2, [pc, #324]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007094:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 8092 	beq.w	80071c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070a0:	4b4c      	ldr	r3, [pc, #304]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d05c      	beq.n	8007166 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d141      	bne.n	8007138 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b4:	4b48      	ldr	r3, [pc, #288]	; (80071d8 <HAL_RCC_OscConfig+0x4dc>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ba:	f7fe fe5f 	bl	8005d7c <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c2:	f7fe fe5b 	bl	8005d7c <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e078      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d4:	4b3f      	ldr	r3, [pc, #252]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f0      	bne.n	80070c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	019b      	lsls	r3, r3, #6
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	3b01      	subs	r3, #1
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	4933      	ldr	r1, [pc, #204]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007106:	4313      	orrs	r3, r2
 8007108:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800710a:	4b33      	ldr	r3, [pc, #204]	; (80071d8 <HAL_RCC_OscConfig+0x4dc>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007110:	f7fe fe34 	bl	8005d7c <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007118:	f7fe fe30 	bl	8005d7c <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e04d      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712a:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <HAL_RCC_OscConfig+0x41c>
 8007136:	e045      	b.n	80071c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007138:	4b27      	ldr	r3, [pc, #156]	; (80071d8 <HAL_RCC_OscConfig+0x4dc>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713e:	f7fe fe1d 	bl	8005d7c <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007146:	f7fe fe19 	bl	8005d7c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e036      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007158:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f0      	bne.n	8007146 <HAL_RCC_OscConfig+0x44a>
 8007164:	e02e      	b.n	80071c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e029      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <HAL_RCC_OscConfig+0x4d8>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	429a      	cmp	r2, r3
 8007184:	d11c      	bne.n	80071c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007190:	429a      	cmp	r2, r3
 8007192:	d115      	bne.n	80071c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800719a:	4013      	ands	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d10d      	bne.n	80071c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d106      	bne.n	80071c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80071bc:	429a      	cmp	r2, r3
 80071be:	d001      	beq.n	80071c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40007000 	.word	0x40007000
 80071d4:	40023800 	.word	0x40023800
 80071d8:	42470060 	.word	0x42470060

080071dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0cc      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071f0:	4b68      	ldr	r3, [pc, #416]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d90c      	bls.n	8007218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fe:	4b65      	ldr	r3, [pc, #404]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007206:	4b63      	ldr	r3, [pc, #396]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d001      	beq.n	8007218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0b8      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d020      	beq.n	8007266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007230:	4b59      	ldr	r3, [pc, #356]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	4a58      	ldr	r2, [pc, #352]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800723a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007248:	4b53      	ldr	r3, [pc, #332]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4a52      	ldr	r2, [pc, #328]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007254:	4b50      	ldr	r3, [pc, #320]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	494d      	ldr	r1, [pc, #308]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	4313      	orrs	r3, r2
 8007264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d044      	beq.n	80072fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d107      	bne.n	800728a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727a:	4b47      	ldr	r3, [pc, #284]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d119      	bne.n	80072ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e07f      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d003      	beq.n	800729a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007296:	2b03      	cmp	r3, #3
 8007298:	d107      	bne.n	80072aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800729a:	4b3f      	ldr	r3, [pc, #252]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e06f      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072aa:	4b3b      	ldr	r3, [pc, #236]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e067      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ba:	4b37      	ldr	r3, [pc, #220]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f023 0203 	bic.w	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4934      	ldr	r1, [pc, #208]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072cc:	f7fe fd56 	bl	8005d7c <HAL_GetTick>
 80072d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072d2:	e00a      	b.n	80072ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d4:	f7fe fd52 	bl	8005d7c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e04f      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ea:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 020c 	and.w	r2, r3, #12
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d1eb      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d20c      	bcs.n	8007324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007312:	4b20      	ldr	r3, [pc, #128]	; (8007394 <HAL_RCC_ClockConfig+0x1b8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e032      	b.n	800738a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007330:	4b19      	ldr	r3, [pc, #100]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4916      	ldr	r1, [pc, #88]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800733e:	4313      	orrs	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	490e      	ldr	r1, [pc, #56]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	4313      	orrs	r3, r2
 8007360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007362:	f000 f821 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8007366:	4601      	mov	r1, r0
 8007368:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <HAL_RCC_ClockConfig+0x1bc>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	091b      	lsrs	r3, r3, #4
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	4a0a      	ldr	r2, [pc, #40]	; (800739c <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	5cd3      	ldrb	r3, [r2, r3]
 8007376:	fa21 f303 	lsr.w	r3, r1, r3
 800737a:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <HAL_RCC_ClockConfig+0x1c4>)
 800737c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fcb6 	bl	8005cf4 <HAL_InitTick>

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40023c00 	.word	0x40023c00
 8007398:	40023800 	.word	0x40023800
 800739c:	08009634 	.word	0x08009634
 80073a0:	20000020 	.word	0x20000020
 80073a4:	20000024 	.word	0x20000024

080073a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	2300      	movs	r3, #0
 80073b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073be:	4b63      	ldr	r3, [pc, #396]	; (800754c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d007      	beq.n	80073da <HAL_RCC_GetSysClockFreq+0x32>
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d008      	beq.n	80073e0 <HAL_RCC_GetSysClockFreq+0x38>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 80b4 	bne.w	800753c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073d4:	4b5e      	ldr	r3, [pc, #376]	; (8007550 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80073d6:	60bb      	str	r3, [r7, #8]
       break;
 80073d8:	e0b3      	b.n	8007542 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073da:	4b5e      	ldr	r3, [pc, #376]	; (8007554 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80073dc:	60bb      	str	r3, [r7, #8]
      break;
 80073de:	e0b0      	b.n	8007542 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073e0:	4b5a      	ldr	r3, [pc, #360]	; (800754c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073ea:	4b58      	ldr	r3, [pc, #352]	; (800754c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04a      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073f6:	4b55      	ldr	r3, [pc, #340]	; (800754c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	099b      	lsrs	r3, r3, #6
 80073fc:	f04f 0400 	mov.w	r4, #0
 8007400:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	ea03 0501 	and.w	r5, r3, r1
 800740c:	ea04 0602 	and.w	r6, r4, r2
 8007410:	4629      	mov	r1, r5
 8007412:	4632      	mov	r2, r6
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	f04f 0400 	mov.w	r4, #0
 800741c:	0154      	lsls	r4, r2, #5
 800741e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007422:	014b      	lsls	r3, r1, #5
 8007424:	4619      	mov	r1, r3
 8007426:	4622      	mov	r2, r4
 8007428:	1b49      	subs	r1, r1, r5
 800742a:	eb62 0206 	sbc.w	r2, r2, r6
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	f04f 0400 	mov.w	r4, #0
 8007436:	0194      	lsls	r4, r2, #6
 8007438:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800743c:	018b      	lsls	r3, r1, #6
 800743e:	1a5b      	subs	r3, r3, r1
 8007440:	eb64 0402 	sbc.w	r4, r4, r2
 8007444:	f04f 0100 	mov.w	r1, #0
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	00e2      	lsls	r2, r4, #3
 800744e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007452:	00d9      	lsls	r1, r3, #3
 8007454:	460b      	mov	r3, r1
 8007456:	4614      	mov	r4, r2
 8007458:	195b      	adds	r3, r3, r5
 800745a:	eb44 0406 	adc.w	r4, r4, r6
 800745e:	f04f 0100 	mov.w	r1, #0
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	0262      	lsls	r2, r4, #9
 8007468:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800746c:	0259      	lsls	r1, r3, #9
 800746e:	460b      	mov	r3, r1
 8007470:	4614      	mov	r4, r2
 8007472:	4618      	mov	r0, r3
 8007474:	4621      	mov	r1, r4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f04f 0400 	mov.w	r4, #0
 800747c:	461a      	mov	r2, r3
 800747e:	4623      	mov	r3, r4
 8007480:	f7f9 facc 	bl	8000a1c <__aeabi_uldivmod>
 8007484:	4603      	mov	r3, r0
 8007486:	460c      	mov	r4, r1
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	e049      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800748c:	4b2f      	ldr	r3, [pc, #188]	; (800754c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	099b      	lsrs	r3, r3, #6
 8007492:	f04f 0400 	mov.w	r4, #0
 8007496:	f240 11ff 	movw	r1, #511	; 0x1ff
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	ea03 0501 	and.w	r5, r3, r1
 80074a2:	ea04 0602 	and.w	r6, r4, r2
 80074a6:	4629      	mov	r1, r5
 80074a8:	4632      	mov	r2, r6
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	f04f 0400 	mov.w	r4, #0
 80074b2:	0154      	lsls	r4, r2, #5
 80074b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80074b8:	014b      	lsls	r3, r1, #5
 80074ba:	4619      	mov	r1, r3
 80074bc:	4622      	mov	r2, r4
 80074be:	1b49      	subs	r1, r1, r5
 80074c0:	eb62 0206 	sbc.w	r2, r2, r6
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	f04f 0400 	mov.w	r4, #0
 80074cc:	0194      	lsls	r4, r2, #6
 80074ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80074d2:	018b      	lsls	r3, r1, #6
 80074d4:	1a5b      	subs	r3, r3, r1
 80074d6:	eb64 0402 	sbc.w	r4, r4, r2
 80074da:	f04f 0100 	mov.w	r1, #0
 80074de:	f04f 0200 	mov.w	r2, #0
 80074e2:	00e2      	lsls	r2, r4, #3
 80074e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80074e8:	00d9      	lsls	r1, r3, #3
 80074ea:	460b      	mov	r3, r1
 80074ec:	4614      	mov	r4, r2
 80074ee:	195b      	adds	r3, r3, r5
 80074f0:	eb44 0406 	adc.w	r4, r4, r6
 80074f4:	f04f 0100 	mov.w	r1, #0
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	02a2      	lsls	r2, r4, #10
 80074fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007502:	0299      	lsls	r1, r3, #10
 8007504:	460b      	mov	r3, r1
 8007506:	4614      	mov	r4, r2
 8007508:	4618      	mov	r0, r3
 800750a:	4621      	mov	r1, r4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f04f 0400 	mov.w	r4, #0
 8007512:	461a      	mov	r2, r3
 8007514:	4623      	mov	r3, r4
 8007516:	f7f9 fa81 	bl	8000a1c <__aeabi_uldivmod>
 800751a:	4603      	mov	r3, r0
 800751c:	460c      	mov	r4, r1
 800751e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	0c1b      	lsrs	r3, r3, #16
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	3301      	adds	r3, #1
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	fbb2 f3f3 	udiv	r3, r2, r3
 8007538:	60bb      	str	r3, [r7, #8]
      break;
 800753a:	e002      	b.n	8007542 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800753e:	60bb      	str	r3, [r7, #8]
      break;
 8007540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007542:	68bb      	ldr	r3, [r7, #8]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754c:	40023800 	.word	0x40023800
 8007550:	00f42400 	.word	0x00f42400
 8007554:	007a1200 	.word	0x007a1200

08007558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e056      	b.n	8007618 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fe f98f 	bl	80058a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	ea42 0103 	orr.w	r1, r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	f003 0104 	and.w	r1, r3, #4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007606:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_SPI_Transmit+0x22>
 800763e:	2302      	movs	r3, #2
 8007640:	e11e      	b.n	8007880 <HAL_SPI_Transmit+0x260>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800764a:	f7fe fb97 	bl	8005d7c <HAL_GetTick>
 800764e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b01      	cmp	r3, #1
 800765e:	d002      	beq.n	8007666 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007660:	2302      	movs	r3, #2
 8007662:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007664:	e103      	b.n	800786e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_SPI_Transmit+0x52>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007676:	e0fa      	b.n	800786e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2203      	movs	r2, #3
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076be:	d107      	bne.n	80076d0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d007      	beq.n	80076ee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f6:	d14b      	bne.n	8007790 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_Transmit+0xe6>
 8007700:	8afb      	ldrh	r3, [r7, #22]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d13e      	bne.n	8007784 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	1c9a      	adds	r2, r3, #2
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800772a:	e02b      	b.n	8007784 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d112      	bne.n	8007760 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	881a      	ldrh	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	1c9a      	adds	r2, r3, #2
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	86da      	strh	r2, [r3, #54]	; 0x36
 800775e:	e011      	b.n	8007784 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007760:	f7fe fb0c 	bl	8005d7c <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d803      	bhi.n	8007778 <HAL_SPI_Transmit+0x158>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	d102      	bne.n	800777e <HAL_SPI_Transmit+0x15e>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007782:	e074      	b.n	800786e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1ce      	bne.n	800772c <HAL_SPI_Transmit+0x10c>
 800778e:	e04c      	b.n	800782a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_SPI_Transmit+0x17e>
 8007798:	8afb      	ldrh	r3, [r7, #22]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d140      	bne.n	8007820 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	330c      	adds	r3, #12
 80077a8:	7812      	ldrb	r2, [r2, #0]
 80077aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077c4:	e02c      	b.n	8007820 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d113      	bne.n	80077fc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	7812      	ldrb	r2, [r2, #0]
 80077e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80077fa:	e011      	b.n	8007820 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fc:	f7fe fabe 	bl	8005d7c <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d803      	bhi.n	8007814 <HAL_SPI_Transmit+0x1f4>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d102      	bne.n	800781a <HAL_SPI_Transmit+0x1fa>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800781e:	e026      	b.n	800786e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1cd      	bne.n	80077c6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fa44 	bl	8007cbc <SPI_EndRxTxTransaction>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e000      	b.n	800786e <HAL_SPI_Transmit+0x24e>
  }

error:
 800786c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800787e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	; 0x30
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007896:	2301      	movs	r3, #1
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x26>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e18a      	b.n	8007bc4 <HAL_SPI_TransmitReceive+0x33c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b6:	f7fe fa61 	bl	8005d7c <HAL_GetTick>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078cc:	887b      	ldrh	r3, [r7, #2]
 80078ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d00f      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x70>
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078de:	d107      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x68>
 80078e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d003      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078f6:	e15b      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_SPI_TransmitReceive+0x82>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_SPI_TransmitReceive+0x82>
 8007904:	887b      	ldrh	r3, [r7, #2]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007910:	e14e      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b04      	cmp	r3, #4
 800791c:	d003      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2205      	movs	r2, #5
 8007922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	887a      	ldrh	r2, [r7, #2]
 8007936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	887a      	ldrh	r2, [r7, #2]
 800793c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	887a      	ldrh	r2, [r7, #2]
 8007948:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	887a      	ldrh	r2, [r7, #2]
 800794e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d007      	beq.n	800797a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d178      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x10a>
 800798c:	8b7b      	ldrh	r3, [r7, #26]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d166      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	881a      	ldrh	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	1c9a      	adds	r2, r3, #2
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079b6:	e053      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d11b      	bne.n	80079fe <HAL_SPI_TransmitReceive+0x176>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d016      	beq.n	80079fe <HAL_SPI_TransmitReceive+0x176>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d113      	bne.n	80079fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	881a      	ldrh	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	1c9a      	adds	r2, r3, #2
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d119      	bne.n	8007a40 <HAL_SPI_TransmitReceive+0x1b8>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d014      	beq.n	8007a40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	b292      	uxth	r2, r2
 8007a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	1c9a      	adds	r2, r3, #2
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a40:	f7fe f99c 	bl	8005d7c <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d807      	bhi.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	d003      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a5e:	e0a7      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1a6      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x130>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1a1      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x130>
 8007a74:	e07c      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x1fc>
 8007a7e:	8b7b      	ldrh	r3, [r7, #26]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d16b      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aaa:	e057      	b.n	8007b5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d11c      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x26c>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d017      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x26c>
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d114      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d119      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x2ae>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d014      	beq.n	8007b36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b32:	2301      	movs	r3, #1
 8007b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b36:	f7fe f921 	bl	8005d7c <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d803      	bhi.n	8007b4e <HAL_SPI_TransmitReceive+0x2c6>
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d102      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x2cc>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b5a:	e029      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1a2      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x224>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d19d      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f8a1 	bl	8007cbc <SPI_EndRxTxTransaction>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b8c:	e010      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	e000      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3730      	adds	r7, #48	; 0x30
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bda:	b2db      	uxtb	r3, r3
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bf8:	e04c      	b.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d048      	beq.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007c02:	f7fe f8bb 	bl	8005d7c <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d902      	bls.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d13d      	bne.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c30:	d111      	bne.n	8007c56 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3a:	d004      	beq.n	8007c46 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c44:	d107      	bne.n	8007c56 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5e:	d10f      	bne.n	8007c80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e00f      	b.n	8007cb4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2301      	moveq	r3, #1
 8007ca6:	2300      	movne	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d1a3      	bne.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cc8:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <SPI_EndRxTxTransaction+0x7c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <SPI_EndRxTxTransaction+0x80>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	0d5b      	lsrs	r3, r3, #21
 8007cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ce6:	d112      	bne.n	8007d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2180      	movs	r1, #128	; 0x80
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff ff78 	bl	8007be8 <SPI_WaitFlagStateUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d016      	beq.n	8007d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f043 0220 	orr.w	r2, r3, #32
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e00f      	b.n	8007d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b80      	cmp	r3, #128	; 0x80
 8007d26:	d0f2      	beq.n	8007d0e <SPI_EndRxTxTransaction+0x52>
 8007d28:	e000      	b.n	8007d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8007d2a:	bf00      	nop
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000020 	.word	0x20000020
 8007d3c:	165e9f81 	.word	0x165e9f81

08007d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e01d      	b.n	8007d8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fd fe0c 	bl	8005984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f000 fb44 	bl	800840c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b06      	cmp	r3, #6
 8007dbe:	d007      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e01d      	b.n	8007e2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fd fd97 	bl	8005938 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	f000 faf5 	bl	800840c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2201      	movs	r2, #1
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fdca 	bl	80089e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <HAL_TIM_PWM_Start+0x74>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_TIM_PWM_Start+0x2c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a14      	ldr	r2, [pc, #80]	; (8007eac <HAL_TIM_PWM_Start+0x78>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d101      	bne.n	8007e64 <HAL_TIM_PWM_Start+0x30>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <HAL_TIM_PWM_Start+0x32>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b06      	cmp	r3, #6
 8007e8a:	d007      	beq.n	8007e9c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40010400 	.word	0x40010400

08007eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d122      	bne.n	8007f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d11b      	bne.n	8007f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0202 	mvn.w	r2, #2
 8007edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa6b 	bl	80083ce <HAL_TIM_IC_CaptureCallback>
 8007ef8:	e005      	b.n	8007f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa5d 	bl	80083ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa6e 	bl	80083e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d122      	bne.n	8007f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d11b      	bne.n	8007f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0204 	mvn.w	r2, #4
 8007f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa41 	bl	80083ce <HAL_TIM_IC_CaptureCallback>
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa33 	bl	80083ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fa44 	bl	80083e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d122      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d11b      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0208 	mvn.w	r2, #8
 8007f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2204      	movs	r2, #4
 8007f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa17 	bl	80083ce <HAL_TIM_IC_CaptureCallback>
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa09 	bl	80083ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fa1a 	bl	80083e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0210 	mvn.w	r2, #16
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9ed 	bl	80083ce <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9df 	bl	80083ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9f0 	bl	80083e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b01      	cmp	r3, #1
 8008014:	d10e      	bne.n	8008034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d107      	bne.n	8008034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0201 	mvn.w	r2, #1
 800802c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fc fa64 	bl	80044fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d10e      	bne.n	8008060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d107      	bne.n	8008060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fd6c 	bl	8008b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d10e      	bne.n	800808c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d107      	bne.n	800808c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f9b5 	bl	80083f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b20      	cmp	r3, #32
 8008098:	d10e      	bne.n	80080b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d107      	bne.n	80080b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0220 	mvn.w	r2, #32
 80080b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fd36 	bl	8008b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e0b4      	b.n	8008244 <HAL_TIM_PWM_ConfigChannel+0x184>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b0c      	cmp	r3, #12
 80080ee:	f200 809f 	bhi.w	8008230 <HAL_TIM_PWM_ConfigChannel+0x170>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	0800812d 	.word	0x0800812d
 80080fc:	08008231 	.word	0x08008231
 8008100:	08008231 	.word	0x08008231
 8008104:	08008231 	.word	0x08008231
 8008108:	0800816d 	.word	0x0800816d
 800810c:	08008231 	.word	0x08008231
 8008110:	08008231 	.word	0x08008231
 8008114:	08008231 	.word	0x08008231
 8008118:	080081af 	.word	0x080081af
 800811c:	08008231 	.word	0x08008231
 8008120:	08008231 	.word	0x08008231
 8008124:	08008231 	.word	0x08008231
 8008128:	080081ef 	.word	0x080081ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fa0a 	bl	800854c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0208 	orr.w	r2, r2, #8
 8008146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0204 	bic.w	r2, r2, #4
 8008156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6999      	ldr	r1, [r3, #24]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	619a      	str	r2, [r3, #24]
      break;
 800816a:	e062      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fa5a 	bl	800862c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6999      	ldr	r1, [r3, #24]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	021a      	lsls	r2, r3, #8
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	619a      	str	r2, [r3, #24]
      break;
 80081ac:	e041      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 faaf 	bl	8008718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69da      	ldr	r2, [r3, #28]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0208 	orr.w	r2, r2, #8
 80081c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0204 	bic.w	r2, r2, #4
 80081d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69d9      	ldr	r1, [r3, #28]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	61da      	str	r2, [r3, #28]
      break;
 80081ec:	e021      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fb03 	bl	8008800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69d9      	ldr	r1, [r3, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	021a      	lsls	r2, r3, #8
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	61da      	str	r2, [r3, #28]
      break;
 800822e:	e000      	b.n	8008232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008230:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_TIM_ConfigClockSource+0x18>
 8008260:	2302      	movs	r3, #2
 8008262:	e0a6      	b.n	80083b2 <HAL_TIM_ConfigClockSource+0x166>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800828a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d067      	beq.n	800836c <HAL_TIM_ConfigClockSource+0x120>
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d80b      	bhi.n	80082b8 <HAL_TIM_ConfigClockSource+0x6c>
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d073      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d802      	bhi.n	80082ae <HAL_TIM_ConfigClockSource+0x62>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d06f      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80082ac:	e078      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d06c      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
 80082b2:	2b30      	cmp	r3, #48	; 0x30
 80082b4:	d06a      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80082b6:	e073      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082b8:	2b70      	cmp	r3, #112	; 0x70
 80082ba:	d00d      	beq.n	80082d8 <HAL_TIM_ConfigClockSource+0x8c>
 80082bc:	2b70      	cmp	r3, #112	; 0x70
 80082be:	d804      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x7e>
 80082c0:	2b50      	cmp	r3, #80	; 0x50
 80082c2:	d033      	beq.n	800832c <HAL_TIM_ConfigClockSource+0xe0>
 80082c4:	2b60      	cmp	r3, #96	; 0x60
 80082c6:	d041      	beq.n	800834c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80082c8:	e06a      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	d066      	beq.n	800839e <HAL_TIM_ConfigClockSource+0x152>
 80082d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d4:	d017      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80082d6:	e063      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	6899      	ldr	r1, [r3, #8]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f000 fb5a 	bl	80089a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	609a      	str	r2, [r3, #8]
      break;
 8008304:	e04c      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f000 fb43 	bl	80089a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008328:	609a      	str	r2, [r3, #8]
      break;
 800832a:	e039      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	6859      	ldr	r1, [r3, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	461a      	mov	r2, r3
 800833a:	f000 fab7 	bl	80088ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2150      	movs	r1, #80	; 0x50
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fb10 	bl	800896a <TIM_ITRx_SetConfig>
      break;
 800834a:	e029      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6859      	ldr	r1, [r3, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	461a      	mov	r2, r3
 800835a:	f000 fad6 	bl	800890a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2160      	movs	r1, #96	; 0x60
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fb00 	bl	800896a <TIM_ITRx_SetConfig>
      break;
 800836a:	e019      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6859      	ldr	r1, [r3, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	461a      	mov	r2, r3
 800837a:	f000 fa97 	bl	80088ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2140      	movs	r1, #64	; 0x40
 8008384:	4618      	mov	r0, r3
 8008386:	f000 faf0 	bl	800896a <TIM_ITRx_SetConfig>
      break;
 800838a:	e009      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f000 fae7 	bl	800896a <TIM_ITRx_SetConfig>
      break;
 800839c:	e000      	b.n	80083a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800839e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a40      	ldr	r2, [pc, #256]	; (8008520 <TIM_Base_SetConfig+0x114>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d00f      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a3d      	ldr	r2, [pc, #244]	; (8008524 <TIM_Base_SetConfig+0x118>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00b      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a3c      	ldr	r2, [pc, #240]	; (8008528 <TIM_Base_SetConfig+0x11c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d007      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a3b      	ldr	r2, [pc, #236]	; (800852c <TIM_Base_SetConfig+0x120>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a3a      	ldr	r2, [pc, #232]	; (8008530 <TIM_Base_SetConfig+0x124>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d108      	bne.n	800845e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a2f      	ldr	r2, [pc, #188]	; (8008520 <TIM_Base_SetConfig+0x114>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d02b      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846c:	d027      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a2c      	ldr	r2, [pc, #176]	; (8008524 <TIM_Base_SetConfig+0x118>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d023      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a2b      	ldr	r2, [pc, #172]	; (8008528 <TIM_Base_SetConfig+0x11c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d01f      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a2a      	ldr	r2, [pc, #168]	; (800852c <TIM_Base_SetConfig+0x120>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d01b      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a29      	ldr	r2, [pc, #164]	; (8008530 <TIM_Base_SetConfig+0x124>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d017      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a28      	ldr	r2, [pc, #160]	; (8008534 <TIM_Base_SetConfig+0x128>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d013      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a27      	ldr	r2, [pc, #156]	; (8008538 <TIM_Base_SetConfig+0x12c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00f      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a26      	ldr	r2, [pc, #152]	; (800853c <TIM_Base_SetConfig+0x130>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00b      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a25      	ldr	r2, [pc, #148]	; (8008540 <TIM_Base_SetConfig+0x134>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d007      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a24      	ldr	r2, [pc, #144]	; (8008544 <TIM_Base_SetConfig+0x138>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_Base_SetConfig+0xb2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a23      	ldr	r2, [pc, #140]	; (8008548 <TIM_Base_SetConfig+0x13c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d108      	bne.n	80084d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <TIM_Base_SetConfig+0x114>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_Base_SetConfig+0xf8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a0c      	ldr	r2, [pc, #48]	; (8008530 <TIM_Base_SetConfig+0x124>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d103      	bne.n	800850c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	615a      	str	r2, [r3, #20]
}
 8008512:	bf00      	nop
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	40010000 	.word	0x40010000
 8008524:	40000400 	.word	0x40000400
 8008528:	40000800 	.word	0x40000800
 800852c:	40000c00 	.word	0x40000c00
 8008530:	40010400 	.word	0x40010400
 8008534:	40014000 	.word	0x40014000
 8008538:	40014400 	.word	0x40014400
 800853c:	40014800 	.word	0x40014800
 8008540:	40001800 	.word	0x40001800
 8008544:	40001c00 	.word	0x40001c00
 8008548:	40002000 	.word	0x40002000

0800854c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f023 0302 	bic.w	r3, r3, #2
 8008594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a20      	ldr	r2, [pc, #128]	; (8008624 <TIM_OC1_SetConfig+0xd8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d003      	beq.n	80085b0 <TIM_OC1_SetConfig+0x64>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a1f      	ldr	r2, [pc, #124]	; (8008628 <TIM_OC1_SetConfig+0xdc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10c      	bne.n	80085ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f023 0308 	bic.w	r3, r3, #8
 80085b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 0304 	bic.w	r3, r3, #4
 80085c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a15      	ldr	r2, [pc, #84]	; (8008624 <TIM_OC1_SetConfig+0xd8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d003      	beq.n	80085da <TIM_OC1_SetConfig+0x8e>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a14      	ldr	r2, [pc, #80]	; (8008628 <TIM_OC1_SetConfig+0xdc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d111      	bne.n	80085fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	621a      	str	r2, [r3, #32]
}
 8008618:	bf00      	nop
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	40010000 	.word	0x40010000
 8008628:	40010400 	.word	0x40010400

0800862c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f023 0210 	bic.w	r2, r3, #16
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800865a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0320 	bic.w	r3, r3, #32
 8008676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a22      	ldr	r2, [pc, #136]	; (8008710 <TIM_OC2_SetConfig+0xe4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_OC2_SetConfig+0x68>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a21      	ldr	r2, [pc, #132]	; (8008714 <TIM_OC2_SetConfig+0xe8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d10d      	bne.n	80086b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a17      	ldr	r2, [pc, #92]	; (8008710 <TIM_OC2_SetConfig+0xe4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_OC2_SetConfig+0x94>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a16      	ldr	r2, [pc, #88]	; (8008714 <TIM_OC2_SetConfig+0xe8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d113      	bne.n	80086e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40010000 	.word	0x40010000
 8008714:	40010400 	.word	0x40010400

08008718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a21      	ldr	r2, [pc, #132]	; (80087f8 <TIM_OC3_SetConfig+0xe0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d003      	beq.n	800877e <TIM_OC3_SetConfig+0x66>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a20      	ldr	r2, [pc, #128]	; (80087fc <TIM_OC3_SetConfig+0xe4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d10d      	bne.n	800879a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <TIM_OC3_SetConfig+0xe0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC3_SetConfig+0x92>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a15      	ldr	r2, [pc, #84]	; (80087fc <TIM_OC3_SetConfig+0xe4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d113      	bne.n	80087d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400

08008800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800884a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	031b      	lsls	r3, r3, #12
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a12      	ldr	r2, [pc, #72]	; (80088a4 <TIM_OC4_SetConfig+0xa4>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_OC4_SetConfig+0x68>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a11      	ldr	r2, [pc, #68]	; (80088a8 <TIM_OC4_SetConfig+0xa8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d109      	bne.n	800887c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800886e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	019b      	lsls	r3, r3, #6
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40010000 	.word	0x40010000
 80088a8:	40010400 	.word	0x40010400

080088ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f023 0201 	bic.w	r2, r3, #1
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f023 030a 	bic.w	r3, r3, #10
 80088e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800890a:	b480      	push	{r7}
 800890c:	b087      	sub	sp, #28
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	f023 0210 	bic.w	r2, r3, #16
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	031b      	lsls	r3, r3, #12
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	621a      	str	r2, [r3, #32]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4313      	orrs	r3, r2
 8008988:	f043 0307 	orr.w	r3, r3, #7
 800898c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	609a      	str	r2, [r3, #8]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	021a      	lsls	r2, r3, #8
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	609a      	str	r2, [r3, #8]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	2201      	movs	r2, #1
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1a      	ldr	r2, [r3, #32]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	401a      	ands	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a1a      	ldr	r2, [r3, #32]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
	...

08008a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e05a      	b.n	8008afa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d022      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a90:	d01d      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d018      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1b      	ldr	r2, [pc, #108]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d013      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1a      	ldr	r2, [pc, #104]	; (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00e      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a18      	ldr	r2, [pc, #96]	; (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d009      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a17      	ldr	r2, [pc, #92]	; (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d004      	beq.n	8008ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d10c      	bne.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40010000 	.word	0x40010000
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40000800 	.word	0x40000800
 8008b14:	40000c00 	.word	0x40000c00
 8008b18:	40010400 	.word	0x40010400
 8008b1c:	40014000 	.word	0x40014000
 8008b20:	40001800 	.word	0x40001800

08008b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <atoi>:
 8008b4c:	220a      	movs	r2, #10
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f000 b99e 	b.w	8008e90 <strtol>

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	; (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	2000002c 	.word	0x2000002c

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4e0d      	ldr	r6, [pc, #52]	; (8008b98 <__libc_init_array+0x38>)
 8008b64:	4c0d      	ldr	r4, [pc, #52]	; (8008b9c <__libc_init_array+0x3c>)
 8008b66:	1ba4      	subs	r4, r4, r6
 8008b68:	10a4      	asrs	r4, r4, #2
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	42a5      	cmp	r5, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	4e0b      	ldr	r6, [pc, #44]	; (8008ba0 <__libc_init_array+0x40>)
 8008b72:	4c0c      	ldr	r4, [pc, #48]	; (8008ba4 <__libc_init_array+0x44>)
 8008b74:	f000 fcf4 	bl	8009560 <_init>
 8008b78:	1ba4      	subs	r4, r4, r6
 8008b7a:	10a4      	asrs	r4, r4, #2
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	42a5      	cmp	r5, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b88:	4798      	blx	r3
 8008b8a:	3501      	adds	r5, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b92:	4798      	blx	r3
 8008b94:	3501      	adds	r5, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	0800978c 	.word	0x0800978c
 8008b9c:	0800978c 	.word	0x0800978c
 8008ba0:	0800978c 	.word	0x0800978c
 8008ba4:	08009790 	.word	0x08009790

08008ba8 <malloc>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <malloc+0xc>)
 8008baa:	4601      	mov	r1, r0
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f000 b861 	b.w	8008c74 <_malloc_r>
 8008bb2:	bf00      	nop
 8008bb4:	2000002c 	.word	0x2000002c

08008bb8 <free>:
 8008bb8:	4b02      	ldr	r3, [pc, #8]	; (8008bc4 <free+0xc>)
 8008bba:	4601      	mov	r1, r0
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	f000 b80b 	b.w	8008bd8 <_free_r>
 8008bc2:	bf00      	nop
 8008bc4:	2000002c 	.word	0x2000002c

08008bc8 <memset>:
 8008bc8:	4402      	add	r2, r0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d100      	bne.n	8008bd2 <memset+0xa>
 8008bd0:	4770      	bx	lr
 8008bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd6:	e7f9      	b.n	8008bcc <memset+0x4>

08008bd8 <_free_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4605      	mov	r5, r0
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d045      	beq.n	8008c6c <_free_r+0x94>
 8008be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be4:	1f0c      	subs	r4, r1, #4
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bfb8      	it	lt
 8008bea:	18e4      	addlt	r4, r4, r3
 8008bec:	f000 f97b 	bl	8008ee6 <__malloc_lock>
 8008bf0:	4a1f      	ldr	r2, [pc, #124]	; (8008c70 <_free_r+0x98>)
 8008bf2:	6813      	ldr	r3, [r2, #0]
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	b933      	cbnz	r3, 8008c06 <_free_r+0x2e>
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	6014      	str	r4, [r2, #0]
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c02:	f000 b971 	b.w	8008ee8 <__malloc_unlock>
 8008c06:	42a3      	cmp	r3, r4
 8008c08:	d90c      	bls.n	8008c24 <_free_r+0x4c>
 8008c0a:	6821      	ldr	r1, [r4, #0]
 8008c0c:	1862      	adds	r2, r4, r1
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bf04      	itt	eq
 8008c12:	681a      	ldreq	r2, [r3, #0]
 8008c14:	685b      	ldreq	r3, [r3, #4]
 8008c16:	6063      	str	r3, [r4, #4]
 8008c18:	bf04      	itt	eq
 8008c1a:	1852      	addeq	r2, r2, r1
 8008c1c:	6022      	streq	r2, [r4, #0]
 8008c1e:	6004      	str	r4, [r0, #0]
 8008c20:	e7ec      	b.n	8008bfc <_free_r+0x24>
 8008c22:	4613      	mov	r3, r2
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	b10a      	cbz	r2, 8008c2c <_free_r+0x54>
 8008c28:	42a2      	cmp	r2, r4
 8008c2a:	d9fa      	bls.n	8008c22 <_free_r+0x4a>
 8008c2c:	6819      	ldr	r1, [r3, #0]
 8008c2e:	1858      	adds	r0, r3, r1
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d10b      	bne.n	8008c4c <_free_r+0x74>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	4401      	add	r1, r0
 8008c38:	1858      	adds	r0, r3, r1
 8008c3a:	4282      	cmp	r2, r0
 8008c3c:	6019      	str	r1, [r3, #0]
 8008c3e:	d1dd      	bne.n	8008bfc <_free_r+0x24>
 8008c40:	6810      	ldr	r0, [r2, #0]
 8008c42:	6852      	ldr	r2, [r2, #4]
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	4401      	add	r1, r0
 8008c48:	6019      	str	r1, [r3, #0]
 8008c4a:	e7d7      	b.n	8008bfc <_free_r+0x24>
 8008c4c:	d902      	bls.n	8008c54 <_free_r+0x7c>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	e7d3      	b.n	8008bfc <_free_r+0x24>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	1821      	adds	r1, r4, r0
 8008c58:	428a      	cmp	r2, r1
 8008c5a:	bf04      	itt	eq
 8008c5c:	6811      	ldreq	r1, [r2, #0]
 8008c5e:	6852      	ldreq	r2, [r2, #4]
 8008c60:	6062      	str	r2, [r4, #4]
 8008c62:	bf04      	itt	eq
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	605c      	str	r4, [r3, #4]
 8008c6a:	e7c7      	b.n	8008bfc <_free_r+0x24>
 8008c6c:	bd38      	pop	{r3, r4, r5, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000718 	.word	0x20000718

08008c74 <_malloc_r>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	1ccd      	adds	r5, r1, #3
 8008c78:	f025 0503 	bic.w	r5, r5, #3
 8008c7c:	3508      	adds	r5, #8
 8008c7e:	2d0c      	cmp	r5, #12
 8008c80:	bf38      	it	cc
 8008c82:	250c      	movcc	r5, #12
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	4606      	mov	r6, r0
 8008c88:	db01      	blt.n	8008c8e <_malloc_r+0x1a>
 8008c8a:	42a9      	cmp	r1, r5
 8008c8c:	d903      	bls.n	8008c96 <_malloc_r+0x22>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	2000      	movs	r0, #0
 8008c94:	bd70      	pop	{r4, r5, r6, pc}
 8008c96:	f000 f926 	bl	8008ee6 <__malloc_lock>
 8008c9a:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <_malloc_r+0xac>)
 8008c9c:	6814      	ldr	r4, [r2, #0]
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	b991      	cbnz	r1, 8008cc8 <_malloc_r+0x54>
 8008ca2:	4c20      	ldr	r4, [pc, #128]	; (8008d24 <_malloc_r+0xb0>)
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	b91b      	cbnz	r3, 8008cb0 <_malloc_r+0x3c>
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f000 f83d 	bl	8008d28 <_sbrk_r>
 8008cae:	6020      	str	r0, [r4, #0]
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f000 f838 	bl	8008d28 <_sbrk_r>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d124      	bne.n	8008d06 <_malloc_r+0x92>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f000 f911 	bl	8008ee8 <__malloc_unlock>
 8008cc6:	e7e4      	b.n	8008c92 <_malloc_r+0x1e>
 8008cc8:	680b      	ldr	r3, [r1, #0]
 8008cca:	1b5b      	subs	r3, r3, r5
 8008ccc:	d418      	bmi.n	8008d00 <_malloc_r+0x8c>
 8008cce:	2b0b      	cmp	r3, #11
 8008cd0:	d90f      	bls.n	8008cf2 <_malloc_r+0x7e>
 8008cd2:	600b      	str	r3, [r1, #0]
 8008cd4:	50cd      	str	r5, [r1, r3]
 8008cd6:	18cc      	adds	r4, r1, r3
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 f905 	bl	8008ee8 <__malloc_unlock>
 8008cde:	f104 000b 	add.w	r0, r4, #11
 8008ce2:	1d23      	adds	r3, r4, #4
 8008ce4:	f020 0007 	bic.w	r0, r0, #7
 8008ce8:	1ac3      	subs	r3, r0, r3
 8008cea:	d0d3      	beq.n	8008c94 <_malloc_r+0x20>
 8008cec:	425a      	negs	r2, r3
 8008cee:	50e2      	str	r2, [r4, r3]
 8008cf0:	e7d0      	b.n	8008c94 <_malloc_r+0x20>
 8008cf2:	428c      	cmp	r4, r1
 8008cf4:	684b      	ldr	r3, [r1, #4]
 8008cf6:	bf16      	itet	ne
 8008cf8:	6063      	strne	r3, [r4, #4]
 8008cfa:	6013      	streq	r3, [r2, #0]
 8008cfc:	460c      	movne	r4, r1
 8008cfe:	e7eb      	b.n	8008cd8 <_malloc_r+0x64>
 8008d00:	460c      	mov	r4, r1
 8008d02:	6849      	ldr	r1, [r1, #4]
 8008d04:	e7cc      	b.n	8008ca0 <_malloc_r+0x2c>
 8008d06:	1cc4      	adds	r4, r0, #3
 8008d08:	f024 0403 	bic.w	r4, r4, #3
 8008d0c:	42a0      	cmp	r0, r4
 8008d0e:	d005      	beq.n	8008d1c <_malloc_r+0xa8>
 8008d10:	1a21      	subs	r1, r4, r0
 8008d12:	4630      	mov	r0, r6
 8008d14:	f000 f808 	bl	8008d28 <_sbrk_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d0cf      	beq.n	8008cbc <_malloc_r+0x48>
 8008d1c:	6025      	str	r5, [r4, #0]
 8008d1e:	e7db      	b.n	8008cd8 <_malloc_r+0x64>
 8008d20:	20000718 	.word	0x20000718
 8008d24:	2000071c 	.word	0x2000071c

08008d28 <_sbrk_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4c06      	ldr	r4, [pc, #24]	; (8008d44 <_sbrk_r+0x1c>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4605      	mov	r5, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	f7fc ff50 	bl	8005bd8 <_sbrk>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_sbrk_r+0x1a>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_sbrk_r+0x1a>
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000e5c 	.word	0x20000e5c

08008d48 <siprintf>:
 8008d48:	b40e      	push	{r1, r2, r3}
 8008d4a:	b500      	push	{lr}
 8008d4c:	b09c      	sub	sp, #112	; 0x70
 8008d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d50:	9002      	str	r0, [sp, #8]
 8008d52:	9006      	str	r0, [sp, #24]
 8008d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d58:	4809      	ldr	r0, [pc, #36]	; (8008d80 <siprintf+0x38>)
 8008d5a:	9107      	str	r1, [sp, #28]
 8008d5c:	9104      	str	r1, [sp, #16]
 8008d5e:	4909      	ldr	r1, [pc, #36]	; (8008d84 <siprintf+0x3c>)
 8008d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d64:	9105      	str	r1, [sp, #20]
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	a902      	add	r1, sp, #8
 8008d6c:	f000 f918 	bl	8008fa0 <_svfiprintf_r>
 8008d70:	9b02      	ldr	r3, [sp, #8]
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	b01c      	add	sp, #112	; 0x70
 8008d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d7c:	b003      	add	sp, #12
 8008d7e:	4770      	bx	lr
 8008d80:	2000002c 	.word	0x2000002c
 8008d84:	ffff0208 	.word	0xffff0208

08008d88 <strcpy>:
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8e:	f803 2b01 	strb.w	r2, [r3], #1
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	d1f9      	bne.n	8008d8a <strcpy+0x2>
 8008d96:	4770      	bx	lr

08008d98 <_strtol_l.isra.0>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4689      	mov	r9, r1
 8008da0:	4692      	mov	sl, r2
 8008da2:	461e      	mov	r6, r3
 8008da4:	460f      	mov	r7, r1
 8008da6:	463d      	mov	r5, r7
 8008da8:	9808      	ldr	r0, [sp, #32]
 8008daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dae:	f000 f885 	bl	8008ebc <__locale_ctype_ptr_l>
 8008db2:	4420      	add	r0, r4
 8008db4:	7843      	ldrb	r3, [r0, #1]
 8008db6:	f013 0308 	ands.w	r3, r3, #8
 8008dba:	d132      	bne.n	8008e22 <_strtol_l.isra.0+0x8a>
 8008dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8008dbe:	d132      	bne.n	8008e26 <_strtol_l.isra.0+0x8e>
 8008dc0:	787c      	ldrb	r4, [r7, #1]
 8008dc2:	1cbd      	adds	r5, r7, #2
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	d05d      	beq.n	8008e86 <_strtol_l.isra.0+0xee>
 8008dca:	2e10      	cmp	r6, #16
 8008dcc:	d109      	bne.n	8008de2 <_strtol_l.isra.0+0x4a>
 8008dce:	2c30      	cmp	r4, #48	; 0x30
 8008dd0:	d107      	bne.n	8008de2 <_strtol_l.isra.0+0x4a>
 8008dd2:	782b      	ldrb	r3, [r5, #0]
 8008dd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008dd8:	2b58      	cmp	r3, #88	; 0x58
 8008dda:	d14f      	bne.n	8008e7c <_strtol_l.isra.0+0xe4>
 8008ddc:	786c      	ldrb	r4, [r5, #1]
 8008dde:	2610      	movs	r6, #16
 8008de0:	3502      	adds	r5, #2
 8008de2:	2a00      	cmp	r2, #0
 8008de4:	bf14      	ite	ne
 8008de6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008dea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008dee:	2700      	movs	r7, #0
 8008df0:	fbb1 fcf6 	udiv	ip, r1, r6
 8008df4:	4638      	mov	r0, r7
 8008df6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008dfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008dfe:	2b09      	cmp	r3, #9
 8008e00:	d817      	bhi.n	8008e32 <_strtol_l.isra.0+0x9a>
 8008e02:	461c      	mov	r4, r3
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	dd23      	ble.n	8008e50 <_strtol_l.isra.0+0xb8>
 8008e08:	1c7b      	adds	r3, r7, #1
 8008e0a:	d007      	beq.n	8008e1c <_strtol_l.isra.0+0x84>
 8008e0c:	4584      	cmp	ip, r0
 8008e0e:	d31c      	bcc.n	8008e4a <_strtol_l.isra.0+0xb2>
 8008e10:	d101      	bne.n	8008e16 <_strtol_l.isra.0+0x7e>
 8008e12:	45a6      	cmp	lr, r4
 8008e14:	db19      	blt.n	8008e4a <_strtol_l.isra.0+0xb2>
 8008e16:	fb00 4006 	mla	r0, r0, r6, r4
 8008e1a:	2701      	movs	r7, #1
 8008e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e20:	e7eb      	b.n	8008dfa <_strtol_l.isra.0+0x62>
 8008e22:	462f      	mov	r7, r5
 8008e24:	e7bf      	b.n	8008da6 <_strtol_l.isra.0+0xe>
 8008e26:	2c2b      	cmp	r4, #43	; 0x2b
 8008e28:	bf04      	itt	eq
 8008e2a:	1cbd      	addeq	r5, r7, #2
 8008e2c:	787c      	ldrbeq	r4, [r7, #1]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	e7c9      	b.n	8008dc6 <_strtol_l.isra.0+0x2e>
 8008e32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008e36:	2b19      	cmp	r3, #25
 8008e38:	d801      	bhi.n	8008e3e <_strtol_l.isra.0+0xa6>
 8008e3a:	3c37      	subs	r4, #55	; 0x37
 8008e3c:	e7e2      	b.n	8008e04 <_strtol_l.isra.0+0x6c>
 8008e3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008e42:	2b19      	cmp	r3, #25
 8008e44:	d804      	bhi.n	8008e50 <_strtol_l.isra.0+0xb8>
 8008e46:	3c57      	subs	r4, #87	; 0x57
 8008e48:	e7dc      	b.n	8008e04 <_strtol_l.isra.0+0x6c>
 8008e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e4e:	e7e5      	b.n	8008e1c <_strtol_l.isra.0+0x84>
 8008e50:	1c7b      	adds	r3, r7, #1
 8008e52:	d108      	bne.n	8008e66 <_strtol_l.isra.0+0xce>
 8008e54:	2322      	movs	r3, #34	; 0x22
 8008e56:	f8c8 3000 	str.w	r3, [r8]
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	f1ba 0f00 	cmp.w	sl, #0
 8008e60:	d107      	bne.n	8008e72 <_strtol_l.isra.0+0xda>
 8008e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e66:	b102      	cbz	r2, 8008e6a <_strtol_l.isra.0+0xd2>
 8008e68:	4240      	negs	r0, r0
 8008e6a:	f1ba 0f00 	cmp.w	sl, #0
 8008e6e:	d0f8      	beq.n	8008e62 <_strtol_l.isra.0+0xca>
 8008e70:	b10f      	cbz	r7, 8008e76 <_strtol_l.isra.0+0xde>
 8008e72:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e76:	f8ca 9000 	str.w	r9, [sl]
 8008e7a:	e7f2      	b.n	8008e62 <_strtol_l.isra.0+0xca>
 8008e7c:	2430      	movs	r4, #48	; 0x30
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	d1af      	bne.n	8008de2 <_strtol_l.isra.0+0x4a>
 8008e82:	2608      	movs	r6, #8
 8008e84:	e7ad      	b.n	8008de2 <_strtol_l.isra.0+0x4a>
 8008e86:	2c30      	cmp	r4, #48	; 0x30
 8008e88:	d0a3      	beq.n	8008dd2 <_strtol_l.isra.0+0x3a>
 8008e8a:	260a      	movs	r6, #10
 8008e8c:	e7a9      	b.n	8008de2 <_strtol_l.isra.0+0x4a>
	...

08008e90 <strtol>:
 8008e90:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <strtol+0x24>)
 8008e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e94:	681c      	ldr	r4, [r3, #0]
 8008e96:	4d08      	ldr	r5, [pc, #32]	; (8008eb8 <strtol+0x28>)
 8008e98:	6a23      	ldr	r3, [r4, #32]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bf08      	it	eq
 8008e9e:	462b      	moveq	r3, r5
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f7ff ff75 	bl	8008d98 <_strtol_l.isra.0>
 8008eae:	b003      	add	sp, #12
 8008eb0:	bd30      	pop	{r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000002c 	.word	0x2000002c
 8008eb8:	20000090 	.word	0x20000090

08008ebc <__locale_ctype_ptr_l>:
 8008ebc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008ec0:	4770      	bx	lr

08008ec2 <__ascii_mbtowc>:
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	b901      	cbnz	r1, 8008ec8 <__ascii_mbtowc+0x6>
 8008ec6:	a901      	add	r1, sp, #4
 8008ec8:	b142      	cbz	r2, 8008edc <__ascii_mbtowc+0x1a>
 8008eca:	b14b      	cbz	r3, 8008ee0 <__ascii_mbtowc+0x1e>
 8008ecc:	7813      	ldrb	r3, [r2, #0]
 8008ece:	600b      	str	r3, [r1, #0]
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	1c10      	adds	r0, r2, #0
 8008ed4:	bf18      	it	ne
 8008ed6:	2001      	movne	r0, #1
 8008ed8:	b002      	add	sp, #8
 8008eda:	4770      	bx	lr
 8008edc:	4610      	mov	r0, r2
 8008ede:	e7fb      	b.n	8008ed8 <__ascii_mbtowc+0x16>
 8008ee0:	f06f 0001 	mvn.w	r0, #1
 8008ee4:	e7f8      	b.n	8008ed8 <__ascii_mbtowc+0x16>

08008ee6 <__malloc_lock>:
 8008ee6:	4770      	bx	lr

08008ee8 <__malloc_unlock>:
 8008ee8:	4770      	bx	lr

08008eea <__ssputs_r>:
 8008eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eee:	688e      	ldr	r6, [r1, #8]
 8008ef0:	429e      	cmp	r6, r3
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	4690      	mov	r8, r2
 8008ef8:	4699      	mov	r9, r3
 8008efa:	d837      	bhi.n	8008f6c <__ssputs_r+0x82>
 8008efc:	898a      	ldrh	r2, [r1, #12]
 8008efe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f02:	d031      	beq.n	8008f68 <__ssputs_r+0x7e>
 8008f04:	6825      	ldr	r5, [r4, #0]
 8008f06:	6909      	ldr	r1, [r1, #16]
 8008f08:	1a6f      	subs	r7, r5, r1
 8008f0a:	6965      	ldr	r5, [r4, #20]
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f12:	fb95 f5f3 	sdiv	r5, r5, r3
 8008f16:	f109 0301 	add.w	r3, r9, #1
 8008f1a:	443b      	add	r3, r7
 8008f1c:	429d      	cmp	r5, r3
 8008f1e:	bf38      	it	cc
 8008f20:	461d      	movcc	r5, r3
 8008f22:	0553      	lsls	r3, r2, #21
 8008f24:	d530      	bpl.n	8008f88 <__ssputs_r+0x9e>
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7ff fea4 	bl	8008c74 <_malloc_r>
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	b950      	cbnz	r0, 8008f46 <__ssputs_r+0x5c>
 8008f30:	230c      	movs	r3, #12
 8008f32:	f8ca 3000 	str.w	r3, [sl]
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	463a      	mov	r2, r7
 8008f48:	6921      	ldr	r1, [r4, #16]
 8008f4a:	f000 fab6 	bl	80094ba <memcpy>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	6126      	str	r6, [r4, #16]
 8008f5c:	6165      	str	r5, [r4, #20]
 8008f5e:	443e      	add	r6, r7
 8008f60:	1bed      	subs	r5, r5, r7
 8008f62:	6026      	str	r6, [r4, #0]
 8008f64:	60a5      	str	r5, [r4, #8]
 8008f66:	464e      	mov	r6, r9
 8008f68:	454e      	cmp	r6, r9
 8008f6a:	d900      	bls.n	8008f6e <__ssputs_r+0x84>
 8008f6c:	464e      	mov	r6, r9
 8008f6e:	4632      	mov	r2, r6
 8008f70:	4641      	mov	r1, r8
 8008f72:	6820      	ldr	r0, [r4, #0]
 8008f74:	f000 faac 	bl	80094d0 <memmove>
 8008f78:	68a3      	ldr	r3, [r4, #8]
 8008f7a:	1b9b      	subs	r3, r3, r6
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	441e      	add	r6, r3
 8008f82:	6026      	str	r6, [r4, #0]
 8008f84:	2000      	movs	r0, #0
 8008f86:	e7dc      	b.n	8008f42 <__ssputs_r+0x58>
 8008f88:	462a      	mov	r2, r5
 8008f8a:	f000 faba 	bl	8009502 <_realloc_r>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d1e2      	bne.n	8008f5a <__ssputs_r+0x70>
 8008f94:	6921      	ldr	r1, [r4, #16]
 8008f96:	4650      	mov	r0, sl
 8008f98:	f7ff fe1e 	bl	8008bd8 <_free_r>
 8008f9c:	e7c8      	b.n	8008f30 <__ssputs_r+0x46>
	...

08008fa0 <_svfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	461d      	mov	r5, r3
 8008fa6:	898b      	ldrh	r3, [r1, #12]
 8008fa8:	061f      	lsls	r7, r3, #24
 8008faa:	b09d      	sub	sp, #116	; 0x74
 8008fac:	4680      	mov	r8, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	4616      	mov	r6, r2
 8008fb2:	d50f      	bpl.n	8008fd4 <_svfiprintf_r+0x34>
 8008fb4:	690b      	ldr	r3, [r1, #16]
 8008fb6:	b96b      	cbnz	r3, 8008fd4 <_svfiprintf_r+0x34>
 8008fb8:	2140      	movs	r1, #64	; 0x40
 8008fba:	f7ff fe5b 	bl	8008c74 <_malloc_r>
 8008fbe:	6020      	str	r0, [r4, #0]
 8008fc0:	6120      	str	r0, [r4, #16]
 8008fc2:	b928      	cbnz	r0, 8008fd0 <_svfiprintf_r+0x30>
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	f8c8 3000 	str.w	r3, [r8]
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295
 8008fce:	e0c8      	b.n	8009162 <_svfiprintf_r+0x1c2>
 8008fd0:	2340      	movs	r3, #64	; 0x40
 8008fd2:	6163      	str	r3, [r4, #20]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fde:	2330      	movs	r3, #48	; 0x30
 8008fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fe4:	9503      	str	r5, [sp, #12]
 8008fe6:	f04f 0b01 	mov.w	fp, #1
 8008fea:	4637      	mov	r7, r6
 8008fec:	463d      	mov	r5, r7
 8008fee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ff2:	b10b      	cbz	r3, 8008ff8 <_svfiprintf_r+0x58>
 8008ff4:	2b25      	cmp	r3, #37	; 0x25
 8008ff6:	d13e      	bne.n	8009076 <_svfiprintf_r+0xd6>
 8008ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ffc:	d00b      	beq.n	8009016 <_svfiprintf_r+0x76>
 8008ffe:	4653      	mov	r3, sl
 8009000:	4632      	mov	r2, r6
 8009002:	4621      	mov	r1, r4
 8009004:	4640      	mov	r0, r8
 8009006:	f7ff ff70 	bl	8008eea <__ssputs_r>
 800900a:	3001      	adds	r0, #1
 800900c:	f000 80a4 	beq.w	8009158 <_svfiprintf_r+0x1b8>
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	4453      	add	r3, sl
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	783b      	ldrb	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 809d 	beq.w	8009158 <_svfiprintf_r+0x1b8>
 800901e:	2300      	movs	r3, #0
 8009020:	f04f 32ff 	mov.w	r2, #4294967295
 8009024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009030:	931a      	str	r3, [sp, #104]	; 0x68
 8009032:	462f      	mov	r7, r5
 8009034:	2205      	movs	r2, #5
 8009036:	f817 1b01 	ldrb.w	r1, [r7], #1
 800903a:	4850      	ldr	r0, [pc, #320]	; (800917c <_svfiprintf_r+0x1dc>)
 800903c:	f7f7 f8d0 	bl	80001e0 <memchr>
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	b9d0      	cbnz	r0, 800907a <_svfiprintf_r+0xda>
 8009044:	06d9      	lsls	r1, r3, #27
 8009046:	bf44      	itt	mi
 8009048:	2220      	movmi	r2, #32
 800904a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800904e:	071a      	lsls	r2, r3, #28
 8009050:	bf44      	itt	mi
 8009052:	222b      	movmi	r2, #43	; 0x2b
 8009054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009058:	782a      	ldrb	r2, [r5, #0]
 800905a:	2a2a      	cmp	r2, #42	; 0x2a
 800905c:	d015      	beq.n	800908a <_svfiprintf_r+0xea>
 800905e:	9a07      	ldr	r2, [sp, #28]
 8009060:	462f      	mov	r7, r5
 8009062:	2000      	movs	r0, #0
 8009064:	250a      	movs	r5, #10
 8009066:	4639      	mov	r1, r7
 8009068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906c:	3b30      	subs	r3, #48	; 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d94d      	bls.n	800910e <_svfiprintf_r+0x16e>
 8009072:	b1b8      	cbz	r0, 80090a4 <_svfiprintf_r+0x104>
 8009074:	e00f      	b.n	8009096 <_svfiprintf_r+0xf6>
 8009076:	462f      	mov	r7, r5
 8009078:	e7b8      	b.n	8008fec <_svfiprintf_r+0x4c>
 800907a:	4a40      	ldr	r2, [pc, #256]	; (800917c <_svfiprintf_r+0x1dc>)
 800907c:	1a80      	subs	r0, r0, r2
 800907e:	fa0b f000 	lsl.w	r0, fp, r0
 8009082:	4318      	orrs	r0, r3
 8009084:	9004      	str	r0, [sp, #16]
 8009086:	463d      	mov	r5, r7
 8009088:	e7d3      	b.n	8009032 <_svfiprintf_r+0x92>
 800908a:	9a03      	ldr	r2, [sp, #12]
 800908c:	1d11      	adds	r1, r2, #4
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	9103      	str	r1, [sp, #12]
 8009092:	2a00      	cmp	r2, #0
 8009094:	db01      	blt.n	800909a <_svfiprintf_r+0xfa>
 8009096:	9207      	str	r2, [sp, #28]
 8009098:	e004      	b.n	80090a4 <_svfiprintf_r+0x104>
 800909a:	4252      	negs	r2, r2
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	9207      	str	r2, [sp, #28]
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	783b      	ldrb	r3, [r7, #0]
 80090a6:	2b2e      	cmp	r3, #46	; 0x2e
 80090a8:	d10c      	bne.n	80090c4 <_svfiprintf_r+0x124>
 80090aa:	787b      	ldrb	r3, [r7, #1]
 80090ac:	2b2a      	cmp	r3, #42	; 0x2a
 80090ae:	d133      	bne.n	8009118 <_svfiprintf_r+0x178>
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	9203      	str	r2, [sp, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bfb8      	it	lt
 80090bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090c0:	3702      	adds	r7, #2
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	4d2e      	ldr	r5, [pc, #184]	; (8009180 <_svfiprintf_r+0x1e0>)
 80090c6:	7839      	ldrb	r1, [r7, #0]
 80090c8:	2203      	movs	r2, #3
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7f7 f888 	bl	80001e0 <memchr>
 80090d0:	b138      	cbz	r0, 80090e2 <_svfiprintf_r+0x142>
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	1b40      	subs	r0, r0, r5
 80090d6:	fa03 f000 	lsl.w	r0, r3, r0
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	4303      	orrs	r3, r0
 80090de:	3701      	adds	r7, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	7839      	ldrb	r1, [r7, #0]
 80090e4:	4827      	ldr	r0, [pc, #156]	; (8009184 <_svfiprintf_r+0x1e4>)
 80090e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ea:	2206      	movs	r2, #6
 80090ec:	1c7e      	adds	r6, r7, #1
 80090ee:	f7f7 f877 	bl	80001e0 <memchr>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d038      	beq.n	8009168 <_svfiprintf_r+0x1c8>
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <_svfiprintf_r+0x1e8>)
 80090f8:	bb13      	cbnz	r3, 8009140 <_svfiprintf_r+0x1a0>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	3308      	adds	r3, #8
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009108:	444b      	add	r3, r9
 800910a:	9309      	str	r3, [sp, #36]	; 0x24
 800910c:	e76d      	b.n	8008fea <_svfiprintf_r+0x4a>
 800910e:	fb05 3202 	mla	r2, r5, r2, r3
 8009112:	2001      	movs	r0, #1
 8009114:	460f      	mov	r7, r1
 8009116:	e7a6      	b.n	8009066 <_svfiprintf_r+0xc6>
 8009118:	2300      	movs	r3, #0
 800911a:	3701      	adds	r7, #1
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	4619      	mov	r1, r3
 8009120:	250a      	movs	r5, #10
 8009122:	4638      	mov	r0, r7
 8009124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009128:	3a30      	subs	r2, #48	; 0x30
 800912a:	2a09      	cmp	r2, #9
 800912c:	d903      	bls.n	8009136 <_svfiprintf_r+0x196>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0c8      	beq.n	80090c4 <_svfiprintf_r+0x124>
 8009132:	9105      	str	r1, [sp, #20]
 8009134:	e7c6      	b.n	80090c4 <_svfiprintf_r+0x124>
 8009136:	fb05 2101 	mla	r1, r5, r1, r2
 800913a:	2301      	movs	r3, #1
 800913c:	4607      	mov	r7, r0
 800913e:	e7f0      	b.n	8009122 <_svfiprintf_r+0x182>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4622      	mov	r2, r4
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <_svfiprintf_r+0x1ec>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4640      	mov	r0, r8
 800914c:	f3af 8000 	nop.w
 8009150:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009154:	4681      	mov	r9, r0
 8009156:	d1d6      	bne.n	8009106 <_svfiprintf_r+0x166>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af35 	bmi.w	8008fca <_svfiprintf_r+0x2a>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	b01d      	add	sp, #116	; 0x74
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	4622      	mov	r2, r4
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <_svfiprintf_r+0x1ec>)
 8009170:	a904      	add	r1, sp, #16
 8009172:	4640      	mov	r0, r8
 8009174:	f000 f882 	bl	800927c <_printf_i>
 8009178:	e7ea      	b.n	8009150 <_svfiprintf_r+0x1b0>
 800917a:	bf00      	nop
 800917c:	0800964e 	.word	0x0800964e
 8009180:	08009654 	.word	0x08009654
 8009184:	08009658 	.word	0x08009658
 8009188:	00000000 	.word	0x00000000
 800918c:	08008eeb 	.word	0x08008eeb

08009190 <_printf_common>:
 8009190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	4691      	mov	r9, r2
 8009196:	461f      	mov	r7, r3
 8009198:	688a      	ldr	r2, [r1, #8]
 800919a:	690b      	ldr	r3, [r1, #16]
 800919c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091a0:	4293      	cmp	r3, r2
 80091a2:	bfb8      	it	lt
 80091a4:	4613      	movlt	r3, r2
 80091a6:	f8c9 3000 	str.w	r3, [r9]
 80091aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091ae:	4606      	mov	r6, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	b112      	cbz	r2, 80091ba <_printf_common+0x2a>
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c9 3000 	str.w	r3, [r9]
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	0699      	lsls	r1, r3, #26
 80091be:	bf42      	ittt	mi
 80091c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80091c4:	3302      	addmi	r3, #2
 80091c6:	f8c9 3000 	strmi.w	r3, [r9]
 80091ca:	6825      	ldr	r5, [r4, #0]
 80091cc:	f015 0506 	ands.w	r5, r5, #6
 80091d0:	d107      	bne.n	80091e2 <_printf_common+0x52>
 80091d2:	f104 0a19 	add.w	sl, r4, #25
 80091d6:	68e3      	ldr	r3, [r4, #12]
 80091d8:	f8d9 2000 	ldr.w	r2, [r9]
 80091dc:	1a9b      	subs	r3, r3, r2
 80091de:	42ab      	cmp	r3, r5
 80091e0:	dc28      	bgt.n	8009234 <_printf_common+0xa4>
 80091e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	3300      	adds	r3, #0
 80091ea:	bf18      	it	ne
 80091ec:	2301      	movne	r3, #1
 80091ee:	0692      	lsls	r2, r2, #26
 80091f0:	d42d      	bmi.n	800924e <_printf_common+0xbe>
 80091f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091f6:	4639      	mov	r1, r7
 80091f8:	4630      	mov	r0, r6
 80091fa:	47c0      	blx	r8
 80091fc:	3001      	adds	r0, #1
 80091fe:	d020      	beq.n	8009242 <_printf_common+0xb2>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	68e5      	ldr	r5, [r4, #12]
 8009204:	f8d9 2000 	ldr.w	r2, [r9]
 8009208:	f003 0306 	and.w	r3, r3, #6
 800920c:	2b04      	cmp	r3, #4
 800920e:	bf08      	it	eq
 8009210:	1aad      	subeq	r5, r5, r2
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	6922      	ldr	r2, [r4, #16]
 8009216:	bf0c      	ite	eq
 8009218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800921c:	2500      	movne	r5, #0
 800921e:	4293      	cmp	r3, r2
 8009220:	bfc4      	itt	gt
 8009222:	1a9b      	subgt	r3, r3, r2
 8009224:	18ed      	addgt	r5, r5, r3
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	341a      	adds	r4, #26
 800922c:	454d      	cmp	r5, r9
 800922e:	d11a      	bne.n	8009266 <_printf_common+0xd6>
 8009230:	2000      	movs	r0, #0
 8009232:	e008      	b.n	8009246 <_printf_common+0xb6>
 8009234:	2301      	movs	r3, #1
 8009236:	4652      	mov	r2, sl
 8009238:	4639      	mov	r1, r7
 800923a:	4630      	mov	r0, r6
 800923c:	47c0      	blx	r8
 800923e:	3001      	adds	r0, #1
 8009240:	d103      	bne.n	800924a <_printf_common+0xba>
 8009242:	f04f 30ff 	mov.w	r0, #4294967295
 8009246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924a:	3501      	adds	r5, #1
 800924c:	e7c3      	b.n	80091d6 <_printf_common+0x46>
 800924e:	18e1      	adds	r1, r4, r3
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	2030      	movs	r0, #48	; 0x30
 8009254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009258:	4422      	add	r2, r4
 800925a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800925e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009262:	3302      	adds	r3, #2
 8009264:	e7c5      	b.n	80091f2 <_printf_common+0x62>
 8009266:	2301      	movs	r3, #1
 8009268:	4622      	mov	r2, r4
 800926a:	4639      	mov	r1, r7
 800926c:	4630      	mov	r0, r6
 800926e:	47c0      	blx	r8
 8009270:	3001      	adds	r0, #1
 8009272:	d0e6      	beq.n	8009242 <_printf_common+0xb2>
 8009274:	f109 0901 	add.w	r9, r9, #1
 8009278:	e7d8      	b.n	800922c <_printf_common+0x9c>
	...

0800927c <_printf_i>:
 800927c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009284:	460c      	mov	r4, r1
 8009286:	7e09      	ldrb	r1, [r1, #24]
 8009288:	b085      	sub	sp, #20
 800928a:	296e      	cmp	r1, #110	; 0x6e
 800928c:	4617      	mov	r7, r2
 800928e:	4606      	mov	r6, r0
 8009290:	4698      	mov	r8, r3
 8009292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009294:	f000 80b3 	beq.w	80093fe <_printf_i+0x182>
 8009298:	d822      	bhi.n	80092e0 <_printf_i+0x64>
 800929a:	2963      	cmp	r1, #99	; 0x63
 800929c:	d036      	beq.n	800930c <_printf_i+0x90>
 800929e:	d80a      	bhi.n	80092b6 <_printf_i+0x3a>
 80092a0:	2900      	cmp	r1, #0
 80092a2:	f000 80b9 	beq.w	8009418 <_printf_i+0x19c>
 80092a6:	2958      	cmp	r1, #88	; 0x58
 80092a8:	f000 8083 	beq.w	80093b2 <_printf_i+0x136>
 80092ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80092b4:	e032      	b.n	800931c <_printf_i+0xa0>
 80092b6:	2964      	cmp	r1, #100	; 0x64
 80092b8:	d001      	beq.n	80092be <_printf_i+0x42>
 80092ba:	2969      	cmp	r1, #105	; 0x69
 80092bc:	d1f6      	bne.n	80092ac <_printf_i+0x30>
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	6813      	ldr	r3, [r2, #0]
 80092c2:	0605      	lsls	r5, r0, #24
 80092c4:	f103 0104 	add.w	r1, r3, #4
 80092c8:	d52a      	bpl.n	8009320 <_printf_i+0xa4>
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	da03      	bge.n	80092da <_printf_i+0x5e>
 80092d2:	222d      	movs	r2, #45	; 0x2d
 80092d4:	425b      	negs	r3, r3
 80092d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80092da:	486f      	ldr	r0, [pc, #444]	; (8009498 <_printf_i+0x21c>)
 80092dc:	220a      	movs	r2, #10
 80092de:	e039      	b.n	8009354 <_printf_i+0xd8>
 80092e0:	2973      	cmp	r1, #115	; 0x73
 80092e2:	f000 809d 	beq.w	8009420 <_printf_i+0x1a4>
 80092e6:	d808      	bhi.n	80092fa <_printf_i+0x7e>
 80092e8:	296f      	cmp	r1, #111	; 0x6f
 80092ea:	d020      	beq.n	800932e <_printf_i+0xb2>
 80092ec:	2970      	cmp	r1, #112	; 0x70
 80092ee:	d1dd      	bne.n	80092ac <_printf_i+0x30>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	f043 0320 	orr.w	r3, r3, #32
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	e003      	b.n	8009302 <_printf_i+0x86>
 80092fa:	2975      	cmp	r1, #117	; 0x75
 80092fc:	d017      	beq.n	800932e <_printf_i+0xb2>
 80092fe:	2978      	cmp	r1, #120	; 0x78
 8009300:	d1d4      	bne.n	80092ac <_printf_i+0x30>
 8009302:	2378      	movs	r3, #120	; 0x78
 8009304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009308:	4864      	ldr	r0, [pc, #400]	; (800949c <_printf_i+0x220>)
 800930a:	e055      	b.n	80093b8 <_printf_i+0x13c>
 800930c:	6813      	ldr	r3, [r2, #0]
 800930e:	1d19      	adds	r1, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6011      	str	r1, [r2, #0]
 8009314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800931c:	2301      	movs	r3, #1
 800931e:	e08c      	b.n	800943a <_printf_i+0x1be>
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6011      	str	r1, [r2, #0]
 8009324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009328:	bf18      	it	ne
 800932a:	b21b      	sxthne	r3, r3
 800932c:	e7cf      	b.n	80092ce <_printf_i+0x52>
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	6825      	ldr	r5, [r4, #0]
 8009332:	1d18      	adds	r0, r3, #4
 8009334:	6010      	str	r0, [r2, #0]
 8009336:	0628      	lsls	r0, r5, #24
 8009338:	d501      	bpl.n	800933e <_printf_i+0xc2>
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	e002      	b.n	8009344 <_printf_i+0xc8>
 800933e:	0668      	lsls	r0, r5, #25
 8009340:	d5fb      	bpl.n	800933a <_printf_i+0xbe>
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	4854      	ldr	r0, [pc, #336]	; (8009498 <_printf_i+0x21c>)
 8009346:	296f      	cmp	r1, #111	; 0x6f
 8009348:	bf14      	ite	ne
 800934a:	220a      	movne	r2, #10
 800934c:	2208      	moveq	r2, #8
 800934e:	2100      	movs	r1, #0
 8009350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009354:	6865      	ldr	r5, [r4, #4]
 8009356:	60a5      	str	r5, [r4, #8]
 8009358:	2d00      	cmp	r5, #0
 800935a:	f2c0 8095 	blt.w	8009488 <_printf_i+0x20c>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	f021 0104 	bic.w	r1, r1, #4
 8009364:	6021      	str	r1, [r4, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d13d      	bne.n	80093e6 <_printf_i+0x16a>
 800936a:	2d00      	cmp	r5, #0
 800936c:	f040 808e 	bne.w	800948c <_printf_i+0x210>
 8009370:	4665      	mov	r5, ip
 8009372:	2a08      	cmp	r2, #8
 8009374:	d10b      	bne.n	800938e <_printf_i+0x112>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	07db      	lsls	r3, r3, #31
 800937a:	d508      	bpl.n	800938e <_printf_i+0x112>
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	6862      	ldr	r2, [r4, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	bfde      	ittt	le
 8009384:	2330      	movle	r3, #48	; 0x30
 8009386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800938a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800938e:	ebac 0305 	sub.w	r3, ip, r5
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	f8cd 8000 	str.w	r8, [sp]
 8009398:	463b      	mov	r3, r7
 800939a:	aa03      	add	r2, sp, #12
 800939c:	4621      	mov	r1, r4
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff fef6 	bl	8009190 <_printf_common>
 80093a4:	3001      	adds	r0, #1
 80093a6:	d14d      	bne.n	8009444 <_printf_i+0x1c8>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	b005      	add	sp, #20
 80093ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b2:	4839      	ldr	r0, [pc, #228]	; (8009498 <_printf_i+0x21c>)
 80093b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80093b8:	6813      	ldr	r3, [r2, #0]
 80093ba:	6821      	ldr	r1, [r4, #0]
 80093bc:	1d1d      	adds	r5, r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6015      	str	r5, [r2, #0]
 80093c2:	060a      	lsls	r2, r1, #24
 80093c4:	d50b      	bpl.n	80093de <_printf_i+0x162>
 80093c6:	07ca      	lsls	r2, r1, #31
 80093c8:	bf44      	itt	mi
 80093ca:	f041 0120 	orrmi.w	r1, r1, #32
 80093ce:	6021      	strmi	r1, [r4, #0]
 80093d0:	b91b      	cbnz	r3, 80093da <_printf_i+0x15e>
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	f022 0220 	bic.w	r2, r2, #32
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	2210      	movs	r2, #16
 80093dc:	e7b7      	b.n	800934e <_printf_i+0xd2>
 80093de:	064d      	lsls	r5, r1, #25
 80093e0:	bf48      	it	mi
 80093e2:	b29b      	uxthmi	r3, r3
 80093e4:	e7ef      	b.n	80093c6 <_printf_i+0x14a>
 80093e6:	4665      	mov	r5, ip
 80093e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ec:	fb02 3311 	mls	r3, r2, r1, r3
 80093f0:	5cc3      	ldrb	r3, [r0, r3]
 80093f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093f6:	460b      	mov	r3, r1
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d1f5      	bne.n	80093e8 <_printf_i+0x16c>
 80093fc:	e7b9      	b.n	8009372 <_printf_i+0xf6>
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	6961      	ldr	r1, [r4, #20]
 8009404:	1d18      	adds	r0, r3, #4
 8009406:	6010      	str	r0, [r2, #0]
 8009408:	0628      	lsls	r0, r5, #24
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	d501      	bpl.n	8009412 <_printf_i+0x196>
 800940e:	6019      	str	r1, [r3, #0]
 8009410:	e002      	b.n	8009418 <_printf_i+0x19c>
 8009412:	066a      	lsls	r2, r5, #25
 8009414:	d5fb      	bpl.n	800940e <_printf_i+0x192>
 8009416:	8019      	strh	r1, [r3, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	4665      	mov	r5, ip
 800941e:	e7b9      	b.n	8009394 <_printf_i+0x118>
 8009420:	6813      	ldr	r3, [r2, #0]
 8009422:	1d19      	adds	r1, r3, #4
 8009424:	6011      	str	r1, [r2, #0]
 8009426:	681d      	ldr	r5, [r3, #0]
 8009428:	6862      	ldr	r2, [r4, #4]
 800942a:	2100      	movs	r1, #0
 800942c:	4628      	mov	r0, r5
 800942e:	f7f6 fed7 	bl	80001e0 <memchr>
 8009432:	b108      	cbz	r0, 8009438 <_printf_i+0x1bc>
 8009434:	1b40      	subs	r0, r0, r5
 8009436:	6060      	str	r0, [r4, #4]
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	2300      	movs	r3, #0
 800943e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009442:	e7a7      	b.n	8009394 <_printf_i+0x118>
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	462a      	mov	r2, r5
 8009448:	4639      	mov	r1, r7
 800944a:	4630      	mov	r0, r6
 800944c:	47c0      	blx	r8
 800944e:	3001      	adds	r0, #1
 8009450:	d0aa      	beq.n	80093a8 <_printf_i+0x12c>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	079b      	lsls	r3, r3, #30
 8009456:	d413      	bmi.n	8009480 <_printf_i+0x204>
 8009458:	68e0      	ldr	r0, [r4, #12]
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	4298      	cmp	r0, r3
 800945e:	bfb8      	it	lt
 8009460:	4618      	movlt	r0, r3
 8009462:	e7a3      	b.n	80093ac <_printf_i+0x130>
 8009464:	2301      	movs	r3, #1
 8009466:	464a      	mov	r2, r9
 8009468:	4639      	mov	r1, r7
 800946a:	4630      	mov	r0, r6
 800946c:	47c0      	blx	r8
 800946e:	3001      	adds	r0, #1
 8009470:	d09a      	beq.n	80093a8 <_printf_i+0x12c>
 8009472:	3501      	adds	r5, #1
 8009474:	68e3      	ldr	r3, [r4, #12]
 8009476:	9a03      	ldr	r2, [sp, #12]
 8009478:	1a9b      	subs	r3, r3, r2
 800947a:	42ab      	cmp	r3, r5
 800947c:	dcf2      	bgt.n	8009464 <_printf_i+0x1e8>
 800947e:	e7eb      	b.n	8009458 <_printf_i+0x1dc>
 8009480:	2500      	movs	r5, #0
 8009482:	f104 0919 	add.w	r9, r4, #25
 8009486:	e7f5      	b.n	8009474 <_printf_i+0x1f8>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1ac      	bne.n	80093e6 <_printf_i+0x16a>
 800948c:	7803      	ldrb	r3, [r0, #0]
 800948e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009496:	e76c      	b.n	8009372 <_printf_i+0xf6>
 8009498:	0800965f 	.word	0x0800965f
 800949c:	08009670 	.word	0x08009670

080094a0 <__ascii_wctomb>:
 80094a0:	b149      	cbz	r1, 80094b6 <__ascii_wctomb+0x16>
 80094a2:	2aff      	cmp	r2, #255	; 0xff
 80094a4:	bf85      	ittet	hi
 80094a6:	238a      	movhi	r3, #138	; 0x8a
 80094a8:	6003      	strhi	r3, [r0, #0]
 80094aa:	700a      	strbls	r2, [r1, #0]
 80094ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80094b0:	bf98      	it	ls
 80094b2:	2001      	movls	r0, #1
 80094b4:	4770      	bx	lr
 80094b6:	4608      	mov	r0, r1
 80094b8:	4770      	bx	lr

080094ba <memcpy>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	1e43      	subs	r3, r0, #1
 80094be:	440a      	add	r2, r1
 80094c0:	4291      	cmp	r1, r2
 80094c2:	d100      	bne.n	80094c6 <memcpy+0xc>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ce:	e7f7      	b.n	80094c0 <memcpy+0x6>

080094d0 <memmove>:
 80094d0:	4288      	cmp	r0, r1
 80094d2:	b510      	push	{r4, lr}
 80094d4:	eb01 0302 	add.w	r3, r1, r2
 80094d8:	d807      	bhi.n	80094ea <memmove+0x1a>
 80094da:	1e42      	subs	r2, r0, #1
 80094dc:	4299      	cmp	r1, r3
 80094de:	d00a      	beq.n	80094f6 <memmove+0x26>
 80094e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094e8:	e7f8      	b.n	80094dc <memmove+0xc>
 80094ea:	4283      	cmp	r3, r0
 80094ec:	d9f5      	bls.n	80094da <memmove+0xa>
 80094ee:	1881      	adds	r1, r0, r2
 80094f0:	1ad2      	subs	r2, r2, r3
 80094f2:	42d3      	cmn	r3, r2
 80094f4:	d100      	bne.n	80094f8 <memmove+0x28>
 80094f6:	bd10      	pop	{r4, pc}
 80094f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009500:	e7f7      	b.n	80094f2 <memmove+0x22>

08009502 <_realloc_r>:
 8009502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009504:	4607      	mov	r7, r0
 8009506:	4614      	mov	r4, r2
 8009508:	460e      	mov	r6, r1
 800950a:	b921      	cbnz	r1, 8009516 <_realloc_r+0x14>
 800950c:	4611      	mov	r1, r2
 800950e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009512:	f7ff bbaf 	b.w	8008c74 <_malloc_r>
 8009516:	b922      	cbnz	r2, 8009522 <_realloc_r+0x20>
 8009518:	f7ff fb5e 	bl	8008bd8 <_free_r>
 800951c:	4625      	mov	r5, r4
 800951e:	4628      	mov	r0, r5
 8009520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009522:	f000 f814 	bl	800954e <_malloc_usable_size_r>
 8009526:	42a0      	cmp	r0, r4
 8009528:	d20f      	bcs.n	800954a <_realloc_r+0x48>
 800952a:	4621      	mov	r1, r4
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff fba1 	bl	8008c74 <_malloc_r>
 8009532:	4605      	mov	r5, r0
 8009534:	2800      	cmp	r0, #0
 8009536:	d0f2      	beq.n	800951e <_realloc_r+0x1c>
 8009538:	4631      	mov	r1, r6
 800953a:	4622      	mov	r2, r4
 800953c:	f7ff ffbd 	bl	80094ba <memcpy>
 8009540:	4631      	mov	r1, r6
 8009542:	4638      	mov	r0, r7
 8009544:	f7ff fb48 	bl	8008bd8 <_free_r>
 8009548:	e7e9      	b.n	800951e <_realloc_r+0x1c>
 800954a:	4635      	mov	r5, r6
 800954c:	e7e7      	b.n	800951e <_realloc_r+0x1c>

0800954e <_malloc_usable_size_r>:
 800954e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009552:	1f18      	subs	r0, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfbc      	itt	lt
 8009558:	580b      	ldrlt	r3, [r1, r0]
 800955a:	18c0      	addlt	r0, r0, r3
 800955c:	4770      	bx	lr
	...

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
