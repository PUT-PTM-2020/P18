
ptm_dyktafon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006844  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a78  08006a78  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  20000014  08006a94  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000960  08006a94  00020960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001015e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002143  00000000  00000000  000301a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  000332d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003577  00000000  00000000  000341c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd67  00000000  00000000  00037737  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3749  00000000  00000000  0004349e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  00116c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069b4 	.word	0x080069b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080069b4 	.word	0x080069b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <DESELECT>:

static
inline void DESELECT(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80004ee:	bf00      	nop
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <xmit_spi+0x30>)
 80004f2:	f005 fa73 	bl	80059dc <HAL_SPI_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d1f9      	bne.n	80004f0 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80004fc:	1df9      	adds	r1, r7, #7
 80004fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000502:	2201      	movs	r2, #1
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <xmit_spi+0x30>)
 8000506:	f004 ff93 	bl	8005430 <HAL_SPI_Transmit>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200008c0 	.word	0x200008c0

08000518 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800051e:	23ff      	movs	r3, #255	; 0xff
 8000520:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000526:	bf00      	nop
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <rcvr_spi+0x38>)
 800052a:	f005 fa57 	bl	80059dc <HAL_SPI_GetState>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d1f9      	bne.n	8000528 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000534:	1dba      	adds	r2, r7, #6
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	f241 3388 	movw	r3, #5000	; 0x1388
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <rcvr_spi+0x38>)
 8000542:	f005 f8a9 	bl	8005698 <HAL_SPI_TransmitReceive>

	return Data;
 8000546:	79bb      	ldrb	r3, [r7, #6]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200008c0 	.word	0x200008c0

08000554 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800055c:	f7ff ffdc 	bl	8000518 <rcvr_spi>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	701a      	strb	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <wait_ready+0x34>)
 8000578:	2232      	movs	r2, #50	; 0x32
 800057a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800057c:	f7ff ffcc 	bl	8000518 <rcvr_spi>
	do
		res = rcvr_spi();
 8000580:	f7ff ffca 	bl	8000518 <rcvr_spi>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2bff      	cmp	r3, #255	; 0xff
 800058c:	d004      	beq.n	8000598 <wait_ready+0x28>
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <wait_ready+0x34>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f3      	bne.n	8000580 <wait_ready+0x10>

	return res;
 8000598:	79fb      	ldrb	r3, [r7, #7]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000031 	.word	0x20000031

080005a8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80005ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005b2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80005b4:	f7ff ff8f 	bl	80004d6 <DESELECT>

	for (i = 0; i < 10; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e005      	b.n	80005ca <power_on+0x22>
		xmit_spi(0xFF);
 80005be:	20ff      	movs	r0, #255	; 0xff
 80005c0:	f7ff ff90 	bl	80004e4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	3301      	adds	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	d9f6      	bls.n	80005be <power_on+0x16>

	SELECT();
 80005d0:	f7ff ff7a 	bl	80004c8 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80005e8:	2395      	movs	r3, #149	; 0x95
 80005ea:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	e00b      	b.n	800060a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f107 0210 	add.w	r2, r7, #16
 80005f8:	4413      	add	r3, r2
 80005fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff70 	bl	80004e4 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	3301      	adds	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b05      	cmp	r3, #5
 800060e:	d9f0      	bls.n	80005f2 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000610:	e002      	b.n	8000618 <power_on+0x70>
		Count--;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3b01      	subs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000618:	f7ff ff7e 	bl	8000518 <rcvr_spi>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d002      	beq.n	8000628 <power_on+0x80>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f4      	bne.n	8000612 <power_on+0x6a>

	DESELECT();
 8000628:	f7ff ff55 	bl	80004d6 <DESELECT>
	xmit_spi(0XFF);
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	f7ff ff59 	bl	80004e4 <xmit_spi>

	PowerFlag = 1;
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <power_on+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000033 	.word	0x20000033

08000644 <power_off>:

static
void power_off(void) {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <power_off+0x14>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000033 	.word	0x20000033

0800065c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <chk_power+0x14>)
 8000662:	781b      	ldrb	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000033 	.word	0x20000033

08000674 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <rcvr_datablock+0x68>)
 8000680:	220a      	movs	r2, #10
 8000682:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000684:	f7ff ff48 	bl	8000518 <rcvr_spi>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d104      	bne.n	800069c <rcvr_datablock+0x28>
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <rcvr_datablock+0x68>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f3      	bne.n	8000684 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2bfe      	cmp	r3, #254	; 0xfe
 80006a0:	d001      	beq.n	80006a6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80006a2:	2300      	movs	r3, #0
 80006a4:	e016      	b.n	80006d4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff51 	bl	8000554 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff4b 	bl	8000554 <rcvr_spi_m>
	} while (btr -= 2);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	3b02      	subs	r3, #2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1ed      	bne.n	80006a6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80006ca:	f7ff ff25 	bl	8000518 <rcvr_spi>
	rcvr_spi();
 80006ce:	f7ff ff23 	bl	8000518 <rcvr_spi>

	return TRUE; /* Return with success */
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000030 	.word	0x20000030

080006e0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80006f0:	f7ff ff3e 	bl	8000570 <wait_ready>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2bff      	cmp	r3, #255	; 0xff
 80006f8:	d001      	beq.n	80006fe <xmit_datablock+0x1e>
		return FALSE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e040      	b.n	8000780 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff feef 	bl	80004e4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2bfd      	cmp	r3, #253	; 0xfd
 800070a:	d031      	beq.n	8000770 <xmit_datablock+0x90>
		wc = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fee3 	bl	80004e4 <xmit_spi>
			xmit_spi(*buff++);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fedc 	bl	80004e4 <xmit_spi>
		} while (--wc);
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	3b01      	subs	r3, #1
 8000730:	73bb      	strb	r3, [r7, #14]
 8000732:	7bbb      	ldrb	r3, [r7, #14]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1eb      	bne.n	8000710 <xmit_datablock+0x30>

		rcvr_spi();
 8000738:	f7ff feee 	bl	8000518 <rcvr_spi>
		rcvr_spi();
 800073c:	f7ff feec 	bl	8000518 <rcvr_spi>

		while (i <= 64) {
 8000740:	e00b      	b.n	800075a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000742:	f7ff fee9 	bl	8000518 <rcvr_spi>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	2b05      	cmp	r3, #5
 8000752:	d006      	beq.n	8000762 <xmit_datablock+0x82>
				break;
			i++;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	3301      	adds	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2b40      	cmp	r3, #64	; 0x40
 800075e:	d9f0      	bls.n	8000742 <xmit_datablock+0x62>
 8000760:	e000      	b.n	8000764 <xmit_datablock+0x84>
				break;
 8000762:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000764:	bf00      	nop
 8000766:	f7ff fed7 	bl	8000518 <rcvr_spi>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0fa      	beq.n	8000766 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	2b05      	cmp	r3, #5
 8000778:	d101      	bne.n	800077e <xmit_datablock+0x9e>
		return TRUE;
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <xmit_datablock+0xa0>
	else
		return FALSE;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000794:	f7ff feec 	bl	8000570 <wait_ready>
 8000798:	4603      	mov	r3, r0
 800079a:	2bff      	cmp	r3, #255	; 0xff
 800079c:	d001      	beq.n	80007a2 <send_cmd+0x1a>
		return 0xFF;
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	e040      	b.n	8000824 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fe9d 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	0e1b      	lsrs	r3, r3, #24
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe97 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe91 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe8b 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe86 	bl	80004e4 <xmit_spi>
	n = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b40      	cmp	r3, #64	; 0x40
 80007e0:	d101      	bne.n	80007e6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80007e2:	2395      	movs	r3, #149	; 0x95
 80007e4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b48      	cmp	r3, #72	; 0x48
 80007ea:	d101      	bne.n	80007f0 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80007ec:	2387      	movs	r3, #135	; 0x87
 80007ee:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe76 	bl	80004e4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b4c      	cmp	r3, #76	; 0x4c
 80007fc:	d101      	bne.n	8000802 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80007fe:	f7ff fe8b 	bl	8000518 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000802:	230a      	movs	r3, #10
 8000804:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000806:	f7ff fe87 	bl	8000518 <rcvr_spi>
 800080a:	4603      	mov	r3, r0
 800080c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800080e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da05      	bge.n	8000822 <send_cmd+0x9a>
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3b01      	subs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f1      	bne.n	8000806 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000822:	7bbb      	ldrb	r3, [r7, #14]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800083c:	2301      	movs	r3, #1
 800083e:	e0d5      	b.n	80009ec <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000840:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <disk_initialize+0x1c8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800084e:	4b69      	ldr	r3, [pc, #420]	; (80009f4 <disk_initialize+0x1c8>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	e0ca      	b.n	80009ec <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000856:	f7ff fea7 	bl	80005a8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800085a:	f7ff fe35 	bl	80004c8 <SELECT>
	ty = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000862:	2100      	movs	r1, #0
 8000864:	2040      	movs	r0, #64	; 0x40
 8000866:	f7ff ff8f 	bl	8000788 <send_cmd>
 800086a:	4603      	mov	r3, r0
 800086c:	2b01      	cmp	r3, #1
 800086e:	f040 80a5 	bne.w	80009bc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <disk_initialize+0x1cc>)
 8000874:	2264      	movs	r2, #100	; 0x64
 8000876:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000878:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800087c:	2048      	movs	r0, #72	; 0x48
 800087e:	f7ff ff83 	bl	8000788 <send_cmd>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d158      	bne.n	800093a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e00c      	b.n	80008a8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800088e:	7bfc      	ldrb	r4, [r7, #15]
 8000890:	f7ff fe42 	bl	8000518 <rcvr_spi>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4423      	add	r3, r4
 800089e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d9ef      	bls.n	800088e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80008ae:	7abb      	ldrb	r3, [r7, #10]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	f040 8083 	bne.w	80009bc <disk_initialize+0x190>
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	2baa      	cmp	r3, #170	; 0xaa
 80008ba:	d17f      	bne.n	80009bc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80008bc:	2100      	movs	r1, #0
 80008be:	2077      	movs	r0, #119	; 0x77
 80008c0:	f7ff ff62 	bl	8000788 <send_cmd>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d807      	bhi.n	80008da <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80008ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008ce:	2069      	movs	r0, #105	; 0x69
 80008d0:	f7ff ff5a 	bl	8000788 <send_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <disk_initialize+0x1cc>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1eb      	bne.n	80008bc <disk_initialize+0x90>
 80008e4:	e000      	b.n	80008e8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80008e6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80008e8:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <disk_initialize+0x1cc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d064      	beq.n	80009bc <disk_initialize+0x190>
 80008f2:	2100      	movs	r1, #0
 80008f4:	207a      	movs	r0, #122	; 0x7a
 80008f6:	f7ff ff47 	bl	8000788 <send_cmd>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d15d      	bne.n	80009bc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e00c      	b.n	8000920 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000906:	7bfc      	ldrb	r4, [r7, #15]
 8000908:	f7ff fe06 	bl	8000518 <rcvr_spi>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4423      	add	r3, r4
 8000916:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3301      	adds	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d9ef      	bls.n	8000906 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <disk_initialize+0x108>
 8000930:	2306      	movs	r3, #6
 8000932:	e000      	b.n	8000936 <disk_initialize+0x10a>
 8000934:	2302      	movs	r3, #2
 8000936:	73bb      	strb	r3, [r7, #14]
 8000938:	e040      	b.n	80009bc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800093a:	2100      	movs	r1, #0
 800093c:	2077      	movs	r0, #119	; 0x77
 800093e:	f7ff ff23 	bl	8000788 <send_cmd>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d808      	bhi.n	800095a <disk_initialize+0x12e>
 8000948:	2100      	movs	r1, #0
 800094a:	2069      	movs	r0, #105	; 0x69
 800094c:	f7ff ff1c 	bl	8000788 <send_cmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d801      	bhi.n	800095a <disk_initialize+0x12e>
 8000956:	2302      	movs	r3, #2
 8000958:	e000      	b.n	800095c <disk_initialize+0x130>
 800095a:	2301      	movs	r3, #1
 800095c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d10e      	bne.n	8000982 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000964:	2100      	movs	r1, #0
 8000966:	2077      	movs	r0, #119	; 0x77
 8000968:	f7ff ff0e 	bl	8000788 <send_cmd>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d80e      	bhi.n	8000990 <disk_initialize+0x164>
 8000972:	2100      	movs	r1, #0
 8000974:	2069      	movs	r0, #105	; 0x69
 8000976:	f7ff ff07 	bl	8000788 <send_cmd>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000980:	e00d      	b.n	800099e <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000982:	2100      	movs	r1, #0
 8000984:	2041      	movs	r0, #65	; 0x41
 8000986:	f7ff feff 	bl	8000788 <send_cmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d005      	beq.n	800099c <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <disk_initialize+0x1cc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1e1      	bne.n	800095e <disk_initialize+0x132>
 800099a:	e000      	b.n	800099e <disk_initialize+0x172>
						break; /* CMD1 */
 800099c:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <disk_initialize+0x1cc>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d007      	beq.n	80009b8 <disk_initialize+0x18c>
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	2050      	movs	r0, #80	; 0x50
 80009ae:	f7ff feeb 	bl	8000788 <send_cmd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <disk_initialize+0x190>
				ty = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80009bc:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <disk_initialize+0x1d0>)
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80009c2:	f7ff fd88 	bl	80004d6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80009c6:	f7ff fda7 	bl	8000518 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d008      	beq.n	80009e2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <disk_initialize+0x1c8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f023 0301 	bic.w	r3, r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <disk_initialize+0x1c8>)
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	e001      	b.n	80009e6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80009e2:	f7ff fe2f 	bl	8000644 <power_off>

	return Stat;
 80009e6:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <disk_initialize+0x1c8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000030 	.word	0x20000030
 80009fc:	20000032 	.word	0x20000032

08000a00 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000a10:	2301      	movs	r3, #1
 8000a12:	e002      	b.n	8000a1a <disk_status+0x1a>
	return Stat;
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <disk_status+0x28>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000000 	.word	0x20000000

08000a2c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <disk_read+0x1c>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <disk_read+0x20>
		return RES_PARERR;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	e051      	b.n	8000af0 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <disk_read+0xcc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <disk_read+0x32>
		return RES_NOTRDY;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e048      	b.n	8000af0 <disk_read+0xc4>

	if (!(CardType & 4))
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <disk_read+0xd0>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000a70:	f7ff fd2a 	bl	80004c8 <SELECT>

	if (count == 1) { /* Single block read */
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d111      	bne.n	8000a9e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2051      	movs	r0, #81	; 0x51
 8000a7e:	f7ff fe83 	bl	8000788 <send_cmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d129      	bne.n	8000adc <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	68b8      	ldr	r0, [r7, #8]
 8000a8e:	f7ff fdf1 	bl	8000674 <rcvr_datablock>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d021      	beq.n	8000adc <disk_read+0xb0>
			count = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	e01e      	b.n	8000adc <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2052      	movs	r0, #82	; 0x52
 8000aa2:	f7ff fe71 	bl	8000788 <send_cmd>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d117      	bne.n	8000adc <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	68b8      	ldr	r0, [r7, #8]
 8000ab2:	f7ff fddf 	bl	8000674 <rcvr_datablock>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00a      	beq.n	8000ad2 <disk_read+0xa6>
					break;
				buff += 512;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ac2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1ed      	bne.n	8000aac <disk_read+0x80>
 8000ad0:	e000      	b.n	8000ad4 <disk_read+0xa8>
					break;
 8000ad2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	204c      	movs	r0, #76	; 0x4c
 8000ad8:	f7ff fe56 	bl	8000788 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000adc:	f7ff fcfb 	bl	80004d6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000ae0:	f7ff fd1a 	bl	8000518 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000032 	.word	0x20000032

08000b00 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <disk_write+0x1c>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <disk_write+0x20>
		return RES_PARERR;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	e06b      	b.n	8000bf8 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <disk_write+0x100>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <disk_write+0x32>
		return RES_NOTRDY;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e062      	b.n	8000bf8 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <disk_write+0x100>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <disk_write+0x44>
		return RES_WRPRT;
 8000b40:	2302      	movs	r3, #2
 8000b42:	e059      	b.n	8000bf8 <disk_write+0xf8>

	if (!(CardType & 4))
 8000b44:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <disk_write+0x104>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	025b      	lsls	r3, r3, #9
 8000b54:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b56:	f7ff fcb7 	bl	80004c8 <SELECT>

	if (count == 1) { /* Single block write */
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d110      	bne.n	8000b82 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	2058      	movs	r0, #88	; 0x58
 8000b64:	f7ff fe10 	bl	8000788 <send_cmd>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d13a      	bne.n	8000be4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000b6e:	21fe      	movs	r1, #254	; 0xfe
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f7ff fdb5 	bl	80006e0 <xmit_datablock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d033      	beq.n	8000be4 <disk_write+0xe4>
			count = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	e030      	b.n	8000be4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <disk_write+0x104>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2077      	movs	r0, #119	; 0x77
 8000b92:	f7ff fdf9 	bl	8000788 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	2057      	movs	r0, #87	; 0x57
 8000b9a:	f7ff fdf5 	bl	8000788 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2059      	movs	r0, #89	; 0x59
 8000ba2:	f7ff fdf1 	bl	8000788 <send_cmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000bac:	21fc      	movs	r1, #252	; 0xfc
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f7ff fd96 	bl	80006e0 <xmit_datablock>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00a      	beq.n	8000bd0 <disk_write+0xd0>
					break;
				buff += 512;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1ee      	bne.n	8000bac <disk_write+0xac>
 8000bce:	e000      	b.n	8000bd2 <disk_write+0xd2>
					break;
 8000bd0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000bd2:	21fd      	movs	r1, #253	; 0xfd
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fd83 	bl	80006e0 <xmit_datablock>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <disk_write+0xe4>
				count = 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000be4:	f7ff fc77 	bl	80004d6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000be8:	f7ff fc96 	bl	8000518 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000032 	.word	0x20000032

08000c08 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	603a      	str	r2, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	460b      	mov	r3, r1
 8000c16:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <disk_ioctl+0x1e>
		return RES_PARERR;
 8000c22:	2304      	movs	r3, #4
 8000c24:	e16a      	b.n	8000efc <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	d127      	bne.n	8000c82 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d00e      	beq.n	8000c58 <disk_ioctl+0x50>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d012      	beq.n	8000c64 <disk_ioctl+0x5c>
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d11b      	bne.n	8000c7a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000c42:	f7ff fd0b 	bl	800065c <chk_power>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000c4c:	f7ff fcfa 	bl	8000644 <power_off>
			res = RES_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c56:	e14f      	b.n	8000ef8 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000c58:	f7ff fca6 	bl	80005a8 <power_on>
			res = RES_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c62:	e149      	b.n	8000ef8 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000c64:	f7ff fcfa 	bl	800065c <chk_power>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c78:	e13e      	b.n	8000ef8 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c80:	e13a      	b.n	8000ef8 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000c82:	4ba0      	ldr	r3, [pc, #640]	; (8000f04 <disk_ioctl+0x2fc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e133      	b.n	8000efc <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000c94:	f7ff fc18 	bl	80004c8 <SELECT>

		switch (ctrl) {
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b35      	cmp	r3, #53	; 0x35
 8000c9c:	f200 811d 	bhi.w	8000eda <disk_ioctl+0x2d2>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <disk_ioctl+0xa0>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000e43 	.word	0x08000e43
 8000cac:	08000d81 	.word	0x08000d81
 8000cb0:	08000e33 	.word	0x08000e33
 8000cb4:	08000edb 	.word	0x08000edb
 8000cb8:	08000edb 	.word	0x08000edb
 8000cbc:	08000edb 	.word	0x08000edb
 8000cc0:	08000edb 	.word	0x08000edb
 8000cc4:	08000edb 	.word	0x08000edb
 8000cc8:	08000edb 	.word	0x08000edb
 8000ccc:	08000edb 	.word	0x08000edb
 8000cd0:	08000edb 	.word	0x08000edb
 8000cd4:	08000edb 	.word	0x08000edb
 8000cd8:	08000edb 	.word	0x08000edb
 8000cdc:	08000edb 	.word	0x08000edb
 8000ce0:	08000edb 	.word	0x08000edb
 8000ce4:	08000edb 	.word	0x08000edb
 8000ce8:	08000edb 	.word	0x08000edb
 8000cec:	08000edb 	.word	0x08000edb
 8000cf0:	08000edb 	.word	0x08000edb
 8000cf4:	08000edb 	.word	0x08000edb
 8000cf8:	08000edb 	.word	0x08000edb
 8000cfc:	08000edb 	.word	0x08000edb
 8000d00:	08000edb 	.word	0x08000edb
 8000d04:	08000edb 	.word	0x08000edb
 8000d08:	08000edb 	.word	0x08000edb
 8000d0c:	08000edb 	.word	0x08000edb
 8000d10:	08000edb 	.word	0x08000edb
 8000d14:	08000edb 	.word	0x08000edb
 8000d18:	08000edb 	.word	0x08000edb
 8000d1c:	08000edb 	.word	0x08000edb
 8000d20:	08000edb 	.word	0x08000edb
 8000d24:	08000edb 	.word	0x08000edb
 8000d28:	08000edb 	.word	0x08000edb
 8000d2c:	08000edb 	.word	0x08000edb
 8000d30:	08000edb 	.word	0x08000edb
 8000d34:	08000edb 	.word	0x08000edb
 8000d38:	08000edb 	.word	0x08000edb
 8000d3c:	08000edb 	.word	0x08000edb
 8000d40:	08000edb 	.word	0x08000edb
 8000d44:	08000edb 	.word	0x08000edb
 8000d48:	08000edb 	.word	0x08000edb
 8000d4c:	08000edb 	.word	0x08000edb
 8000d50:	08000edb 	.word	0x08000edb
 8000d54:	08000edb 	.word	0x08000edb
 8000d58:	08000edb 	.word	0x08000edb
 8000d5c:	08000edb 	.word	0x08000edb
 8000d60:	08000edb 	.word	0x08000edb
 8000d64:	08000edb 	.word	0x08000edb
 8000d68:	08000edb 	.word	0x08000edb
 8000d6c:	08000edb 	.word	0x08000edb
 8000d70:	08000edb 	.word	0x08000edb
 8000d74:	08000e55 	.word	0x08000e55
 8000d78:	08000e79 	.word	0x08000e79
 8000d7c:	08000e9d 	.word	0x08000e9d
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000d80:	2100      	movs	r1, #0
 8000d82:	2049      	movs	r0, #73	; 0x49
 8000d84:	f7ff fd00 	bl	8000788 <send_cmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80a9 	bne.w	8000ee2 <disk_ioctl+0x2da>
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2110      	movs	r1, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fc6c 	bl	8000674 <rcvr_datablock>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 809f 	beq.w	8000ee2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	099b      	lsrs	r3, r3, #6
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10e      	bne.n	8000dcc <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	7d3b      	ldrb	r3, [r7, #20]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dc2:	8bfb      	ldrh	r3, [r7, #30]
 8000dc4:	029a      	lsls	r2, r3, #10
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e02e      	b.n	8000e2a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	09db      	lsrs	r3, r3, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0306 	and.w	r3, r3, #6
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dee:	3302      	adds	r3, #2
 8000df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000df4:	7d3b      	ldrb	r3, [r7, #20]
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e18:	3301      	adds	r3, #1
 8000e1a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e1c:	8bfa      	ldrh	r2, [r7, #30]
 8000e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e22:	3b09      	subs	r3, #9
 8000e24:	409a      	lsls	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e30:	e057      	b.n	8000ee2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e40:	e056      	b.n	8000ef0 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000e42:	f7ff fb95 	bl	8000570 <wait_ready>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d14c      	bne.n	8000ee6 <disk_ioctl+0x2de>
				res = RES_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e52:	e048      	b.n	8000ee6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000e54:	2100      	movs	r1, #0
 8000e56:	2049      	movs	r0, #73	; 0x49
 8000e58:	f7ff fc96 	bl	8000788 <send_cmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d143      	bne.n	8000eea <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000e62:	2110      	movs	r1, #16
 8000e64:	6a38      	ldr	r0, [r7, #32]
 8000e66:	f7ff fc05 	bl	8000674 <rcvr_datablock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03c      	beq.n	8000eea <disk_ioctl+0x2e2>
				res = RES_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e76:	e038      	b.n	8000eea <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000e78:	2100      	movs	r1, #0
 8000e7a:	204a      	movs	r0, #74	; 0x4a
 8000e7c:	f7ff fc84 	bl	8000788 <send_cmd>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d133      	bne.n	8000eee <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000e86:	2110      	movs	r1, #16
 8000e88:	6a38      	ldr	r0, [r7, #32]
 8000e8a:	f7ff fbf3 	bl	8000674 <rcvr_datablock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02c      	beq.n	8000eee <disk_ioctl+0x2e6>
				res = RES_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9a:	e028      	b.n	8000eee <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	207a      	movs	r0, #122	; 0x7a
 8000ea0:	f7ff fc72 	bl	8000788 <send_cmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d117      	bne.n	8000eda <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb0:	e00b      	b.n	8000eca <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000eb2:	6a3c      	ldr	r4, [r7, #32]
 8000eb4:	1c63      	adds	r3, r4, #1
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	f7ff fb2e 	bl	8000518 <rcvr_spi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d9ef      	bls.n	8000eb2 <disk_ioctl+0x2aa>
				res = RES_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ed8:	e00a      	b.n	8000ef0 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000eda:	2304      	movs	r3, #4
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee0:	e006      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000ee2:	bf00      	nop
 8000ee4:	e004      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000ee6:	bf00      	nop
 8000ee8:	e002      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000eee:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000ef0:	f7ff faf1 	bl	80004d6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000ef4:	f7ff fb10 	bl	8000518 <rcvr_spi>
	}

	return res;
 8000ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	20000000 	.word	0x20000000

08000f08 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <disk_timerproc+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <disk_timerproc+0x44>)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <disk_timerproc+0x48>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <disk_timerproc+0x36>
		Timer2 = --n;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <disk_timerproc+0x48>)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	7013      	strb	r3, [r2, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000030 	.word	0x20000030
 8000f50:	20000031 	.word	0x20000031

08000f54 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f64:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	2b09      	cmp	r3, #9
 8000f6e:	d904      	bls.n	8000f7a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000f76:	f7ff ffc7 	bl	8000f08 <disk_timerproc>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000278 	.word	0x20000278

08000f84 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	36c55cc0 	.word	0x36c55cc0

08000f98 <ld_word>:
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	81fb      	strh	r3, [r7, #14]
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <ld_dword>:
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	3202      	adds	r2, #2
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3201      	adds	r2, #1
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <st_word>:
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <st_dword>:
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <mem_cpy>:
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <mem_cpy+0x36>
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	1c53      	adds	r3, r2, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	1c59      	adds	r1, r3, #1
 80010c0:	6179      	str	r1, [r7, #20]
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f1      	bne.n	80010b6 <mem_cpy+0x1a>
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <mem_set>:
 80010de:	b480      	push	{r7}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	617a      	str	r2, [r7, #20]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f3      	bne.n	80010ee <mem_set+0x10>
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <mem_cmp>:
 8001112:	b480      	push	{r7}
 8001114:	b089      	sub	sp, #36	; 0x24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	61fa      	str	r2, [r7, #28]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	61ba      	str	r2, [r7, #24]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	1acb      	subs	r3, r1, r3
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <mem_cmp+0x40>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0eb      	beq.n	800112a <mem_cmp+0x18>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	4618      	mov	r0, r3
 8001156:	3724      	adds	r7, #36	; 0x24
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <chk_chr>:
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	e002      	b.n	8001172 <chk_chr+0x12>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <chk_chr+0x26>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4293      	cmp	r3, r2
 8001184:	d1f2      	bne.n	800116c <chk_chr+0xc>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <dbc_1st>:
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	2281      	movs	r2, #129	; 0x81
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d30f      	bcc.n	80011c8 <dbc_1st+0x32>
 80011a8:	229f      	movs	r2, #159	; 0x9f
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d801      	bhi.n	80011b4 <dbc_1st+0x1e>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00a      	b.n	80011ca <dbc_1st+0x34>
 80011b4:	22e0      	movs	r2, #224	; 0xe0
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d305      	bcc.n	80011c8 <dbc_1st+0x32>
 80011bc:	22fc      	movs	r2, #252	; 0xfc
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d801      	bhi.n	80011c8 <dbc_1st+0x32>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <dbc_1st+0x34>
 80011c8:	2300      	movs	r3, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <dbc_2nd>:
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d319      	bcc.n	800121c <dbc_2nd+0x46>
 80011e8:	227e      	movs	r2, #126	; 0x7e
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d801      	bhi.n	80011f4 <dbc_2nd+0x1e>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e014      	b.n	800121e <dbc_2nd+0x48>
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d305      	bcc.n	8001208 <dbc_2nd+0x32>
 80011fc:	22fc      	movs	r2, #252	; 0xfc
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4293      	cmp	r3, r2
 8001202:	d801      	bhi.n	8001208 <dbc_2nd+0x32>
 8001204:	2301      	movs	r3, #1
 8001206:	e00a      	b.n	800121e <dbc_2nd+0x48>
 8001208:	2200      	movs	r2, #0
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4293      	cmp	r3, r2
 800120e:	d305      	bcc.n	800121c <dbc_2nd+0x46>
 8001210:	2200      	movs	r2, #0
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4293      	cmp	r3, r2
 8001216:	d801      	bhi.n	800121c <dbc_2nd+0x46>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <dbc_2nd+0x48>
 800121c:	2300      	movs	r3, #0
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <sync_window>:
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d02c      	beq.n	8001298 <sync_window+0x6e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7858      	ldrb	r0, [r3, #1]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	2301      	movs	r3, #1
 800124e:	f7ff fc57 	bl	8000b00 <disk_write>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d11d      	bne.n	8001294 <sync_window+0x6a>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	70da      	strb	r2, [r3, #3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	429a      	cmp	r2, r3
 800126e:	d213      	bcs.n	8001298 <sync_window+0x6e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d10f      	bne.n	8001298 <sync_window+0x6e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7858      	ldrb	r0, [r3, #1]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	441a      	add	r2, r3
 800128c:	2301      	movs	r3, #1
 800128e:	f7ff fc37 	bl	8000b00 <disk_write>
 8001292:	e001      	b.n	8001298 <sync_window+0x6e>
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <move_window>:
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d01b      	beq.n	80012f2 <move_window+0x50>
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb5 	bl	800122a <sync_window>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d113      	bne.n	80012f2 <move_window+0x50>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7858      	ldrb	r0, [r3, #1]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80012d4:	2301      	movs	r3, #1
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	f7ff fba8 	bl	8000a2c <disk_read>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <move_window+0x4a>
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <sync_fs>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff90 	bl	800122a <sync_window>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d158      	bne.n	80013c6 <sync_fs+0xca>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d148      	bne.n	80013ae <sync_fs+0xb2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d144      	bne.n	80013ae <sync_fs+0xb2>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fed5 	bl	80010de <mem_set>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800133c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe64 	bl	800100e <st_word>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3330      	adds	r3, #48	; 0x30
 800134a:	4921      	ldr	r1, [pc, #132]	; (80013d0 <sync_fs+0xd4>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe79 	bl	8001044 <st_dword>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3330      	adds	r3, #48	; 0x30
 8001356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800135a:	491e      	ldr	r1, [pc, #120]	; (80013d4 <sync_fs+0xd8>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe71 	bl	8001044 <st_dword>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fe67 	bl	8001044 <st_dword>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3330      	adds	r3, #48	; 0x30
 800137a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f7ff fe5d 	bl	8001044 <st_dword>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7858      	ldrb	r0, [r3, #1]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	2301      	movs	r3, #1
 80013a4:	f7ff fbac 	bl	8000b00 <disk_write>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	711a      	strb	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc26 	bl	8000c08 <disk_ioctl>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <sync_fs+0xca>
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	41615252 	.word	0x41615252
 80013d4:	61417272 	.word	0x61417272

080013d8 <clst2sect>:
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3b02      	subs	r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	3b02      	subs	r3, #2
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d301      	bcc.n	80013f8 <clst2sect+0x20>
 80013f4:	2300      	movs	r3, #0
 80013f6:	e008      	b.n	800140a <clst2sect+0x32>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	895b      	ldrh	r3, [r3, #10]
 8001400:	4619      	mov	r1, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	fb03 f301 	mul.w	r3, r3, r1
 8001408:	4413      	add	r3, r2
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <get_fat>:
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d904      	bls.n	8001436 <get_fat+0x20>
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d302      	bcc.n	800143c <get_fat+0x26>
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e08c      	b.n	8001556 <get_fat+0x140>
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d045      	beq.n	80014d6 <get_fat+0xc0>
 800144a:	2b03      	cmp	r3, #3
 800144c:	d05d      	beq.n	800150a <get_fat+0xf4>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d177      	bne.n	8001542 <get_fat+0x12c>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4413      	add	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	0a5b      	lsrs	r3, r3, #9
 8001468:	4413      	add	r3, r2
 800146a:	4619      	mov	r1, r3
 800146c:	6938      	ldr	r0, [r7, #16]
 800146e:	f7ff ff18 	bl	80012a2 <move_window>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d167      	bne.n	8001548 <get_fat+0x132>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60fa      	str	r2, [r7, #12]
 800147e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4413      	add	r3, r2
 8001486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6a1a      	ldr	r2, [r3, #32]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0a5b      	lsrs	r3, r3, #9
 8001494:	4413      	add	r3, r2
 8001496:	4619      	mov	r1, r3
 8001498:	6938      	ldr	r0, [r7, #16]
 800149a:	f7ff ff02 	bl	80012a2 <move_window>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d153      	bne.n	800154c <get_fat+0x136>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	461a      	mov	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <get_fat+0xb6>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	e002      	b.n	80014d2 <get_fat+0xbc>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e03f      	b.n	8001556 <get_fat+0x140>
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	4413      	add	r3, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	6938      	ldr	r0, [r7, #16]
 80014e4:	f7ff fedd 	bl	80012a2 <move_window>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d130      	bne.n	8001550 <get_fat+0x13a>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd4a 	bl	8000f98 <ld_word>
 8001504:	4603      	mov	r3, r0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e025      	b.n	8001556 <get_fat+0x140>
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	09db      	lsrs	r3, r3, #7
 8001512:	4413      	add	r3, r2
 8001514:	4619      	mov	r1, r3
 8001516:	6938      	ldr	r0, [r7, #16]
 8001518:	f7ff fec3 	bl	80012a2 <move_window>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <get_fat+0x13e>
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001530:	4413      	add	r3, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd48 	bl	8000fc8 <ld_dword>
 8001538:	4603      	mov	r3, r0
 800153a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e009      	b.n	8001556 <get_fat+0x140>
 8001542:	2301      	movs	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e006      	b.n	8001556 <get_fat+0x140>
 8001548:	bf00      	nop
 800154a:	e004      	b.n	8001556 <get_fat+0x140>
 800154c:	bf00      	nop
 800154e:	e002      	b.n	8001556 <get_fat+0x140>
 8001550:	bf00      	nop
 8001552:	e000      	b.n	8001556 <get_fat+0x140>
 8001554:	bf00      	nop
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <put_fat>:
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	2302      	movs	r3, #2
 800156e:	77fb      	strb	r3, [r7, #31]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	f240 80d6 	bls.w	8001724 <put_fat+0x1c4>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	429a      	cmp	r2, r3
 8001580:	f080 80d0 	bcs.w	8001724 <put_fat+0x1c4>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d073      	beq.n	8001674 <put_fat+0x114>
 800158c:	2b03      	cmp	r3, #3
 800158e:	f000 8091 	beq.w	80016b4 <put_fat+0x154>
 8001592:	2b01      	cmp	r3, #1
 8001594:	f040 80c6 	bne.w	8001724 <put_fat+0x1c4>
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4413      	add	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a1a      	ldr	r2, [r3, #32]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	0a5b      	lsrs	r3, r3, #9
 80015ae:	4413      	add	r3, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fe75 	bl	80012a2 <move_window>
 80015b8:	4603      	mov	r3, r0
 80015ba:	77fb      	strb	r3, [r7, #31]
 80015bc:	7ffb      	ldrb	r3, [r7, #31]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 80a9 	bne.w	8001716 <put_fat+0x1b6>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1c59      	adds	r1, r3, #1
 80015ce:	61b9      	str	r1, [r7, #24]
 80015d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00d      	beq.n	80015fe <put_fat+0x9e>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	e001      	b.n	8001602 <put_fat+0xa2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	7013      	strb	r3, [r2, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	70da      	strb	r2, [r3, #3]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	0a5b      	lsrs	r3, r3, #9
 8001614:	4413      	add	r3, r2
 8001616:	4619      	mov	r1, r3
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff fe42 	bl	80012a2 <move_window>
 800161e:	4603      	mov	r3, r0
 8001620:	77fb      	strb	r3, [r7, #31]
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d178      	bne.n	800171a <put_fat+0x1ba>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <put_fat+0xea>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	b2db      	uxtb	r3, r3
 8001648:	e00e      	b.n	8001668 <put_fat+0x108>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f023 030f 	bic.w	r3, r3, #15
 8001654:	b25a      	sxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b25b      	sxtb	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	7013      	strb	r3, [r2, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	70da      	strb	r2, [r3, #3]
 8001672:	e057      	b.n	8001724 <put_fat+0x1c4>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	4413      	add	r3, r2
 800167e:	4619      	mov	r1, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff fe0e 	bl	80012a2 <move_window>
 8001686:	4603      	mov	r3, r0
 8001688:	77fb      	strb	r3, [r7, #31]
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d146      	bne.n	800171e <put_fat+0x1be>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800169e:	4413      	add	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	b292      	uxth	r2, r2
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fcb1 	bl	800100e <st_word>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	70da      	strb	r2, [r3, #3]
 80016b2:	e037      	b.n	8001724 <put_fat+0x1c4>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	09db      	lsrs	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fdee 	bl	80012a2 <move_window>
 80016c6:	4603      	mov	r3, r0
 80016c8:	77fb      	strb	r3, [r7, #31]
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d128      	bne.n	8001722 <put_fat+0x1c2>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80016e4:	4413      	add	r3, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc6e 	bl	8000fc8 <ld_dword>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016f2:	4323      	orrs	r3, r4
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001704:	4413      	add	r3, r2
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fc9b 	bl	8001044 <st_dword>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	70da      	strb	r2, [r3, #3]
 8001714:	e006      	b.n	8001724 <put_fat+0x1c4>
 8001716:	bf00      	nop
 8001718:	e004      	b.n	8001724 <put_fat+0x1c4>
 800171a:	bf00      	nop
 800171c:	e002      	b.n	8001724 <put_fat+0x1c4>
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <put_fat+0x1c4>
 8001722:	bf00      	nop
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}

0800172e <remove_chain>:
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	2300      	movs	r3, #0
 800173c:	77fb      	strb	r3, [r7, #31]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d904      	bls.n	8001754 <remove_chain+0x26>
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d301      	bcc.n	8001758 <remove_chain+0x2a>
 8001754:	2302      	movs	r3, #2
 8001756:	e04b      	b.n	80017f0 <remove_chain+0xc2>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <remove_chain+0x4a>
 800175e:	f04f 32ff 	mov.w	r2, #4294967295
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	69b8      	ldr	r0, [r7, #24]
 8001766:	f7ff fefb 	bl	8001560 <put_fat>
 800176a:	4603      	mov	r3, r0
 800176c:	77fb      	strb	r3, [r7, #31]
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <remove_chain+0x4a>
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	e03b      	b.n	80017f0 <remove_chain+0xc2>
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff fe4b 	bl	8001416 <get_fat>
 8001780:	6178      	str	r0, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d031      	beq.n	80017ec <remove_chain+0xbe>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <remove_chain+0x64>
 800178e:	2302      	movs	r3, #2
 8001790:	e02e      	b.n	80017f0 <remove_chain+0xc2>
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d101      	bne.n	800179e <remove_chain+0x70>
 800179a:	2301      	movs	r3, #1
 800179c:	e028      	b.n	80017f0 <remove_chain+0xc2>
 800179e:	2200      	movs	r2, #0
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	69b8      	ldr	r0, [r7, #24]
 80017a4:	f7ff fedc 	bl	8001560 <put_fat>
 80017a8:	4603      	mov	r3, r0
 80017aa:	77fb      	strb	r3, [r7, #31]
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <remove_chain+0x88>
 80017b2:	7ffb      	ldrb	r3, [r7, #31]
 80017b4:	e01c      	b.n	80017f0 <remove_chain+0xc2>
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	3b02      	subs	r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d20b      	bcs.n	80017dc <remove_chain+0xae>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	711a      	strb	r2, [r3, #4]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d3c6      	bcc.n	8001778 <remove_chain+0x4a>
 80017ea:	e000      	b.n	80017ee <remove_chain+0xc0>
 80017ec:	bf00      	nop
 80017ee:	2300      	movs	r3, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <create_chain>:
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <create_chain+0x32>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <create_chain+0x2c>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	429a      	cmp	r2, r3
 8001822:	d31b      	bcc.n	800185c <create_chain+0x64>
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	e018      	b.n	800185c <create_chain+0x64>
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fdf2 	bl	8001416 <get_fat>
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d801      	bhi.n	800183e <create_chain+0x46>
 800183a:	2301      	movs	r3, #1
 800183c:	e0a9      	b.n	8001992 <create_chain+0x19a>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d101      	bne.n	800184a <create_chain+0x52>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	e0a3      	b.n	8001992 <create_chain+0x19a>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d201      	bcs.n	8001858 <create_chain+0x60>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	e09c      	b.n	8001992 <create_chain+0x19a>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <create_chain+0x70>
 8001864:	2300      	movs	r3, #0
 8001866:	e094      	b.n	8001992 <create_chain+0x19a>
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d129      	bne.n	80018c8 <create_chain+0xd0>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	3301      	adds	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	d301      	bcc.n	8001888 <create_chain+0x90>
 8001884:	2302      	movs	r3, #2
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69f9      	ldr	r1, [r7, #28]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fdc3 	bl	8001416 <get_fat>
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <create_chain+0xa8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d101      	bne.n	80018a4 <create_chain+0xac>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	e076      	b.n	8001992 <create_chain+0x19a>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <create_chain+0xd0>
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d906      	bls.n	80018c4 <create_chain+0xcc>
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d201      	bcs.n	80018c4 <create_chain+0xcc>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d129      	bne.n	8001922 <create_chain+0x12a>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d307      	bcc.n	80018f2 <create_chain+0xfa>
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d901      	bls.n	80018f2 <create_chain+0xfa>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e04f      	b.n	8001992 <create_chain+0x19a>
 80018f2:	69f9      	ldr	r1, [r7, #28]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fd8e 	bl	8001416 <get_fat>
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00e      	beq.n	8001920 <create_chain+0x128>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d003      	beq.n	8001910 <create_chain+0x118>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d101      	bne.n	8001914 <create_chain+0x11c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	e03e      	b.n	8001992 <create_chain+0x19a>
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	429a      	cmp	r2, r3
 800191a:	d1da      	bne.n	80018d2 <create_chain+0xda>
 800191c:	2300      	movs	r3, #0
 800191e:	e038      	b.n	8001992 <create_chain+0x19a>
 8001920:	bf00      	nop
 8001922:	f04f 32ff 	mov.w	r2, #4294967295
 8001926:	69f9      	ldr	r1, [r7, #28]
 8001928:	6938      	ldr	r0, [r7, #16]
 800192a:	f7ff fe19 	bl	8001560 <put_fat>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <create_chain+0x154>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <create_chain+0x154>
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	6938      	ldr	r0, [r7, #16]
 8001944:	f7ff fe0c 	bl	8001560 <put_fat>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <create_chain+0x188>
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	3b02      	subs	r3, #2
 8001962:	429a      	cmp	r2, r3
 8001964:	d804      	bhi.n	8001970 <create_chain+0x178>
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	791b      	ldrb	r3, [r3, #4]
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	711a      	strb	r2, [r3, #4]
 800197e:	e007      	b.n	8001990 <create_chain+0x198>
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d102      	bne.n	800198c <create_chain+0x194>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e000      	b.n	800198e <create_chain+0x196>
 800198c:	2301      	movs	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4618      	mov	r0, r3
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <dir_clear>:
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fc40 	bl	800122a <sync_window>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <dir_clear+0x1a>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e036      	b.n	8001a22 <dir_clear+0x88>
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fd0e 	bl	80013d8 <clst2sect>
 80019bc:	6138      	str	r0, [r7, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb85 	bl	80010de <mem_set>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	2301      	movs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e003      	b.n	80019ec <dir_clear+0x52>
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	895b      	ldrh	r3, [r3, #10]
 80019f0:	461a      	mov	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d20b      	bcs.n	8001a10 <dir_clear+0x76>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7858      	ldrb	r0, [r3, #1]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	441a      	add	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	f7ff f87b 	bl	8000b00 <disk_write>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0e9      	beq.n	80019e4 <dir_clear+0x4a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	895b      	ldrh	r3, [r3, #10]
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <dir_sdi>:
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a40:	d204      	bcs.n	8001a4c <dir_sdi+0x22>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <dir_sdi+0x26>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e063      	b.n	8001b18 <dir_sdi+0xee>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <dir_sdi+0x46>
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d902      	bls.n	8001a70 <dir_sdi+0x46>
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <dir_sdi+0x66>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	8912      	ldrh	r2, [r2, #8]
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d301      	bcc.n	8001a86 <dir_sdi+0x5c>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e048      	b.n	8001b18 <dir_sdi+0xee>
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
 8001a8e:	e029      	b.n	8001ae4 <dir_sdi+0xba>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	895b      	ldrh	r3, [r3, #10]
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e019      	b.n	8001ace <dir_sdi+0xa4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fcb9 	bl	8001416 <get_fat>
 8001aa4:	6178      	str	r0, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d101      	bne.n	8001ab2 <dir_sdi+0x88>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e032      	b.n	8001b18 <dir_sdi+0xee>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d904      	bls.n	8001ac2 <dir_sdi+0x98>
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d301      	bcc.n	8001ac6 <dir_sdi+0x9c>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e028      	b.n	8001b18 <dir_sdi+0xee>
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d2e1      	bcs.n	8001a9a <dir_sdi+0x70>
 8001ad6:	6979      	ldr	r1, [r7, #20]
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f7ff fc7d 	bl	80013d8 <clst2sect>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <dir_sdi+0xcc>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e010      	b.n	8001b18 <dir_sdi+0xee>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	0a5b      	lsrs	r3, r3, #9
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	61da      	str	r2, [r3, #28]
 8001b16:	2300      	movs	r3, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <dir_next>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	3320      	adds	r3, #32
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b3e:	d302      	bcc.n	8001b46 <dir_next+0x26>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <dir_next+0x32>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e078      	b.n	8001c44 <dir_next+0x124>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d166      	bne.n	8001c2a <dir_next+0x10a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10a      	bne.n	8001b84 <dir_next+0x64>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	8912      	ldrh	r2, [r2, #8]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d357      	bcc.n	8001c2a <dir_next+0x10a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	2304      	movs	r3, #4
 8001b82:	e05f      	b.n	8001c44 <dir_next+0x124>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	8952      	ldrh	r2, [r2, #10]
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d14a      	bne.n	8001c2a <dir_next+0x10a>
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff fc3a 	bl	8001416 <get_fat>
 8001ba2:	6178      	str	r0, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d801      	bhi.n	8001bae <dir_next+0x8e>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e04a      	b.n	8001c44 <dir_next+0x124>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d101      	bne.n	8001bba <dir_next+0x9a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e044      	b.n	8001c44 <dir_next+0x124>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d328      	bcc.n	8001c16 <dir_next+0xf6>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <dir_next+0xb4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e037      	b.n	8001c44 <dir_next+0x124>
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f7ff fe0b 	bl	80017f8 <create_chain>
 8001be2:	6178      	str	r0, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <dir_next+0xce>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e02a      	b.n	8001c44 <dir_next+0x124>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <dir_next+0xd8>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e025      	b.n	8001c44 <dir_next+0x124>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d101      	bne.n	8001c04 <dir_next+0xe4>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01f      	b.n	8001c44 <dir_next+0x124>
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	6938      	ldr	r0, [r7, #16]
 8001c08:	f7ff fec7 	bl	800199a <dir_clear>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <dir_next+0xf6>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e016      	b.n	8001c44 <dir_next+0x124>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	6979      	ldr	r1, [r7, #20]
 8001c1e:	6938      	ldr	r0, [r7, #16]
 8001c20:	f7ff fbda 	bl	80013d8 <clst2sect>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	441a      	add	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	61da      	str	r2, [r3, #28]
 8001c42:	2300      	movs	r3, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <dir_alloc>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fee3 	bl	8001a2a <dir_sdi>
 8001c64:	4603      	mov	r3, r0
 8001c66:	75fb      	strb	r3, [r7, #23]
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d12b      	bne.n	8001cc6 <dir_alloc+0x7a>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4619      	mov	r1, r3
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fb12 	bl	80012a2 <move_window>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11d      	bne.n	8001cc4 <dir_alloc+0x78>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2be5      	cmp	r3, #229	; 0xe5
 8001c90:	d004      	beq.n	8001c9c <dir_alloc+0x50>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <dir_alloc+0x60>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d102      	bne.n	8001cb0 <dir_alloc+0x64>
 8001caa:	e00c      	b.n	8001cc6 <dir_alloc+0x7a>
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff34 	bl	8001b20 <dir_next>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0d7      	beq.n	8001c72 <dir_alloc+0x26>
 8001cc2:	e000      	b.n	8001cc6 <dir_alloc+0x7a>
 8001cc4:	bf00      	nop
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d101      	bne.n	8001cd0 <dir_alloc+0x84>
 8001ccc:	2307      	movs	r3, #7
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <ld_clust>:
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	331a      	adds	r3, #26
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f955 	bl	8000f98 <ld_word>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d109      	bne.n	8001d0e <ld_clust+0x34>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3314      	adds	r3, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f94a 	bl	8000f98 <ld_word>
 8001d04:	4603      	mov	r3, r0
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <st_clust>:
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331a      	adds	r3, #26
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f96d 	bl	800100e <st_word>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d109      	bne.n	8001d50 <st_clust+0x38>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f103 0214 	add.w	r2, r3, #20
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff f95f 	bl	800100e <st_word>
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <dir_find>:
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	2100      	movs	r1, #0
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fe5e 	bl	8001a2a <dir_sdi>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	75fb      	strb	r3, [r7, #23]
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <dir_find+0x24>
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	e03e      	b.n	8001dfa <dir_find+0xa2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4619      	mov	r1, r3
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	f7ff fa8d 	bl	80012a2 <move_window>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	75fb      	strb	r3, [r7, #23]
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12f      	bne.n	8001df2 <dir_find+0x9a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <dir_find+0x4e>
 8001da0:	2304      	movs	r3, #4
 8001da2:	75fb      	strb	r3, [r7, #23]
 8001da4:	e028      	b.n	8001df8 <dir_find+0xa0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	330b      	adds	r3, #11
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	719a      	strb	r2, [r3, #6]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	330b      	adds	r3, #11
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <dir_find+0x86>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69d8      	ldr	r0, [r3, #28]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3320      	adds	r3, #32
 8001dd0:	220b      	movs	r2, #11
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff f99d 	bl	8001112 <mem_cmp>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <dir_find+0x9e>
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fe9d 	bl	8001b20 <dir_next>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0c5      	beq.n	8001d7c <dir_find+0x24>
 8001df0:	e002      	b.n	8001df8 <dir_find+0xa0>
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <dir_find+0xa0>
 8001df6:	bf00      	nop
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <dir_register>:
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	2101      	movs	r1, #1
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff1a 	bl	8001c4c <dir_alloc>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11c      	bne.n	8001e5c <dir_register+0x5a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4619      	mov	r1, r3
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	f7ff fa3a 	bl	80012a2 <move_window>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <dir_register+0x5a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f94c 	bl	80010de <mem_set>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69d8      	ldr	r0, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3320      	adds	r3, #32
 8001e4e:	220b      	movs	r2, #11
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7ff f923 	bl	800109c <mem_cpy>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	70da      	strb	r2, [r3, #3]
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <create_name>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	220b      	movs	r2, #11
 8001e80:	2120      	movs	r1, #32
 8001e82:	6938      	ldr	r0, [r7, #16]
 8001e84:	f7ff f92b 	bl	80010de <mem_set>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	61fa      	str	r2, [r7, #28]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d97c      	bls.n	8001fa6 <create_name+0x13e>
 8001eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8001eb2:	d007      	beq.n	8001ec4 <create_name+0x5c>
 8001eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb8:	2b5c      	cmp	r3, #92	; 0x5c
 8001eba:	d110      	bne.n	8001ede <create_name+0x76>
 8001ebc:	e002      	b.n	8001ec4 <create_name+0x5c>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b2f      	cmp	r3, #47	; 0x2f
 8001ece:	d0f6      	beq.n	8001ebe <create_name+0x56>
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8001eda:	d0f0      	beq.n	8001ebe <create_name+0x56>
 8001edc:	e064      	b.n	8001fa8 <create_name+0x140>
 8001ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ee4:	d003      	beq.n	8001eee <create_name+0x86>
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d30d      	bcc.n	8001f0a <create_name+0xa2>
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b0b      	cmp	r3, #11
 8001ef2:	d003      	beq.n	8001efc <create_name+0x94>
 8001ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8001efa:	d001      	beq.n	8001f00 <create_name+0x98>
 8001efc:	2306      	movs	r3, #6
 8001efe:	e06f      	b.n	8001fe0 <create_name+0x178>
 8001f00:	2308      	movs	r3, #8
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	230b      	movs	r3, #11
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	e04c      	b.n	8001fa4 <create_name+0x13c>
 8001f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f941 	bl	8001196 <dbc_1st>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <create_name+0xfc>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	61fa      	str	r2, [r7, #28]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f953 	bl	80011d6 <dbc_2nd>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <create_name+0xd8>
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d301      	bcc.n	8001f44 <create_name+0xdc>
 8001f40:	2306      	movs	r3, #6
 8001f42:	e04d      	b.n	8001fe0 <create_name+0x178>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	61ba      	str	r2, [r7, #24]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	61ba      	str	r2, [r7, #24]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e797      	b.n	8001e94 <create_name+0x2c>
 8001f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f68:	4619      	mov	r1, r3
 8001f6a:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <create_name+0x180>)
 8001f6c:	f7ff f8f8 	bl	8001160 <chk_chr>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <create_name+0x112>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e032      	b.n	8001fe0 <create_name+0x178>
 8001f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7e:	2b60      	cmp	r3, #96	; 0x60
 8001f80:	d908      	bls.n	8001f94 <create_name+0x12c>
 8001f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f86:	2b7a      	cmp	r3, #122	; 0x7a
 8001f88:	d804      	bhi.n	8001f94 <create_name+0x12c>
 8001f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f8e:	3b20      	subs	r3, #32
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	61ba      	str	r2, [r7, #24]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e776      	b.n	8001e94 <create_name+0x2c>
 8001fa6:	bf00      	nop
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	441a      	add	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <create_name+0x154>
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e011      	b.n	8001fe0 <create_name+0x178>
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2be5      	cmp	r3, #229	; 0xe5
 8001fc2:	d102      	bne.n	8001fca <create_name+0x162>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d801      	bhi.n	8001fd6 <create_name+0x16e>
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	e000      	b.n	8001fd8 <create_name+0x170>
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	330b      	adds	r3, #11
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	080069cc 	.word	0x080069cc

08001fec <follow_path>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e002      	b.n	8002004 <follow_path+0x18>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b2f      	cmp	r3, #47	; 0x2f
 800200a:	d0f8      	beq.n	8001ffe <follow_path+0x12>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b5c      	cmp	r3, #92	; 0x5c
 8002012:	d0f4      	beq.n	8001ffe <follow_path+0x12>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b1f      	cmp	r3, #31
 8002020:	d80a      	bhi.n	8002038 <follow_path+0x4c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fcfc 	bl	8001a2a <dir_sdi>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
 8002036:	e043      	b.n	80020c0 <follow_path+0xd4>
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff13 	bl	8001e68 <create_name>
 8002042:	4603      	mov	r3, r0
 8002044:	75fb      	strb	r3, [r7, #23]
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d134      	bne.n	80020b6 <follow_path+0xca>
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fe83 	bl	8001d58 <dir_find>
 8002052:	4603      	mov	r3, r0
 8002054:	75fb      	strb	r3, [r7, #23]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <follow_path+0x8e>
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d127      	bne.n	80020ba <follow_path+0xce>
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d122      	bne.n	80020ba <follow_path+0xce>
 8002074:	2305      	movs	r3, #5
 8002076:	75fb      	strb	r3, [r7, #23]
 8002078:	e01f      	b.n	80020ba <follow_path+0xce>
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11c      	bne.n	80020be <follow_path+0xd2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	799b      	ldrb	r3, [r3, #6]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <follow_path+0xaa>
 8002090:	2305      	movs	r3, #5
 8002092:	75fb      	strb	r3, [r7, #23]
 8002094:	e014      	b.n	80020c0 <follow_path+0xd4>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	4413      	add	r3, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	6938      	ldr	r0, [r7, #16]
 80020aa:	f7ff fe16 	bl	8001cda <ld_clust>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e7c0      	b.n	8002038 <follow_path+0x4c>
 80020b6:	bf00      	nop
 80020b8:	e002      	b.n	80020c0 <follow_path+0xd4>
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <follow_path+0xd4>
 80020be:	bf00      	nop
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <get_ldnumber>:
 80020ca:	b480      	push	{r7}
 80020cc:	b089      	sub	sp, #36	; 0x24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <get_ldnumber+0x22>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	e02d      	b.n	8002148 <get_ldnumber+0x7e>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	61fa      	str	r2, [r7, #28]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d902      	bls.n	8002102 <get_ldnumber+0x38>
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b3a      	cmp	r3, #58	; 0x3a
 8002100:	d1f4      	bne.n	80020ec <get_ldnumber+0x22>
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b3a      	cmp	r3, #58	; 0x3a
 8002106:	d11c      	bne.n	8002142 <get_ldnumber+0x78>
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b2f      	cmp	r3, #47	; 0x2f
 8002112:	d90c      	bls.n	800212e <get_ldnumber+0x64>
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b39      	cmp	r3, #57	; 0x39
 800211a:	d808      	bhi.n	800212e <get_ldnumber+0x64>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	3302      	adds	r3, #2
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	429a      	cmp	r2, r3
 8002124:	d103      	bne.n	800212e <get_ldnumber+0x64>
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3b30      	subs	r3, #48	; 0x30
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	dc04      	bgt.n	800213e <get_ldnumber+0x74>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	e002      	b.n	8002148 <get_ldnumber+0x7e>
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4618      	mov	r0, r3
 800214a:	3724      	adds	r7, #36	; 0x24
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <check_fs>:
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	70da      	strb	r2, [r3, #3]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f04f 32ff 	mov.w	r2, #4294967295
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff f897 	bl	80012a2 <move_window>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <check_fs+0x2a>
 800217a:	2304      	movs	r3, #4
 800217c:	e038      	b.n	80021f0 <check_fs+0x9c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3330      	adds	r3, #48	; 0x30
 8002182:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ff06 	bl	8000f98 <ld_word>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <check_fs+0x48>
 8002198:	2303      	movs	r3, #3
 800219a:	e029      	b.n	80021f0 <check_fs+0x9c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a2:	2be9      	cmp	r3, #233	; 0xe9
 80021a4:	d009      	beq.n	80021ba <check_fs+0x66>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ac:	2beb      	cmp	r3, #235	; 0xeb
 80021ae:	d004      	beq.n	80021ba <check_fs+0x66>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b6:	2be8      	cmp	r3, #232	; 0xe8
 80021b8:	d119      	bne.n	80021ee <check_fs+0x9a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3330      	adds	r3, #48	; 0x30
 80021be:	3336      	adds	r3, #54	; 0x36
 80021c0:	2203      	movs	r2, #3
 80021c2:	490d      	ldr	r1, [pc, #52]	; (80021f8 <check_fs+0xa4>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe ffa4 	bl	8001112 <mem_cmp>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <check_fs+0x80>
 80021d0:	2300      	movs	r3, #0
 80021d2:	e00d      	b.n	80021f0 <check_fs+0x9c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3330      	adds	r3, #48	; 0x30
 80021d8:	3352      	adds	r3, #82	; 0x52
 80021da:	2205      	movs	r2, #5
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <check_fs+0xa8>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe ff97 	bl	8001112 <mem_cmp>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <check_fs+0x9a>
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <check_fs+0x9c>
 80021ee:	2302      	movs	r3, #2
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	080069dc 	.word	0x080069dc
 80021fc:	080069e0 	.word	0x080069e0

08002200 <find_volume>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b096      	sub	sp, #88	; 0x58
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff ff58 	bl	80020ca <get_ldnumber>
 800221a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	2b00      	cmp	r3, #0
 8002220:	da01      	bge.n	8002226 <find_volume+0x26>
 8002222:	230b      	movs	r3, #11
 8002224:	e238      	b.n	8002698 <find_volume+0x498>
 8002226:	4aa8      	ldr	r2, [pc, #672]	; (80024c8 <find_volume+0x2c8>)
 8002228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <find_volume+0x3a>
 8002236:	230c      	movs	r3, #12
 8002238:	e22e      	b.n	8002698 <find_volume+0x498>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01a      	beq.n	8002286 <find_volume+0x86>
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fbd3 	bl	8000a00 <disk_status>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <find_volume+0x86>
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <find_volume+0x82>
 8002272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <find_volume+0x82>
 800227e:	230a      	movs	r3, #10
 8002280:	e20a      	b.n	8002698 <find_volume+0x498>
 8002282:	2300      	movs	r3, #0
 8002284:	e208      	b.n	8002698 <find_volume+0x498>
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228e:	b2da      	uxtb	r2, r3
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	705a      	strb	r2, [r3, #1]
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	785b      	ldrb	r3, [r3, #1]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fac7 	bl	800082c <disk_initialize>
 800229e:	4603      	mov	r3, r0
 80022a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <find_volume+0xb4>
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1f1      	b.n	8002698 <find_volume+0x498>
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <find_volume+0xca>
 80022ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <find_volume+0xca>
 80022c6:	230a      	movs	r3, #10
 80022c8:	e1e6      	b.n	8002698 <find_volume+0x498>
 80022ca:	2300      	movs	r3, #0
 80022cc:	653b      	str	r3, [r7, #80]	; 0x50
 80022ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022d2:	f7ff ff3f 	bl	8002154 <check_fs>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80022dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d14b      	bne.n	800237c <find_volume+0x17c>
 80022e4:	2300      	movs	r3, #0
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
 80022e8:	e01f      	b.n	800232a <find_volume+0x12a>
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80022f8:	4413      	add	r3, r2
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	3304      	adds	r3, #4
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <find_volume+0x114>
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	3308      	adds	r3, #8
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fe5c 	bl	8000fc8 <ld_dword>
 8002310:	4602      	mov	r2, r0
 8002312:	e000      	b.n	8002316 <find_volume+0x116>
 8002314:	2200      	movs	r2, #0
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800231e:	440b      	add	r3, r1
 8002320:	f843 2c44 	str.w	r2, [r3, #-68]
 8002324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002326:	3301      	adds	r3, #1
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	2b03      	cmp	r3, #3
 800232e:	d9dc      	bls.n	80022ea <find_volume+0xea>
 8002330:	2300      	movs	r3, #0
 8002332:	643b      	str	r3, [r7, #64]	; 0x40
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <find_volume+0x140>
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	3b01      	subs	r3, #1
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
 8002340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002348:	4413      	add	r3, r2
 800234a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
 8002350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <find_volume+0x162>
 8002356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800235a:	f7ff fefb 	bl	8002154 <check_fs>
 800235e:	4603      	mov	r3, r0
 8002360:	e000      	b.n	8002364 <find_volume+0x164>
 8002362:	2303      	movs	r3, #3
 8002364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800236c:	2b01      	cmp	r3, #1
 800236e:	d905      	bls.n	800237c <find_volume+0x17c>
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	3301      	adds	r3, #1
 8002374:	643b      	str	r3, [r7, #64]	; 0x40
 8002376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002378:	2b03      	cmp	r3, #3
 800237a:	d9e1      	bls.n	8002340 <find_volume+0x140>
 800237c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002380:	2b04      	cmp	r3, #4
 8002382:	d101      	bne.n	8002388 <find_volume+0x188>
 8002384:	2301      	movs	r3, #1
 8002386:	e187      	b.n	8002698 <find_volume+0x498>
 8002388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800238c:	2b01      	cmp	r3, #1
 800238e:	d901      	bls.n	8002394 <find_volume+0x194>
 8002390:	230d      	movs	r3, #13
 8002392:	e181      	b.n	8002698 <find_volume+0x498>
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	3330      	adds	r3, #48	; 0x30
 8002398:	330b      	adds	r3, #11
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fdfc 	bl	8000f98 <ld_word>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a6:	d001      	beq.n	80023ac <find_volume+0x1ac>
 80023a8:	230d      	movs	r3, #13
 80023aa:	e175      	b.n	8002698 <find_volume+0x498>
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	3330      	adds	r3, #48	; 0x30
 80023b0:	3316      	adds	r3, #22
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fdf0 	bl	8000f98 <ld_word>
 80023b8:	4603      	mov	r3, r0
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <find_volume+0x1d0>
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	3330      	adds	r3, #48	; 0x30
 80023c6:	3324      	adds	r3, #36	; 0x24
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fdfd 	bl	8000fc8 <ld_dword>
 80023ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 80023d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d4:	619a      	str	r2, [r3, #24]
 80023d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	709a      	strb	r2, [r3, #2]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	789b      	ldrb	r3, [r3, #2]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d005      	beq.n	80023f4 <find_volume+0x1f4>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	789b      	ldrb	r3, [r3, #2]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d001      	beq.n	80023f4 <find_volume+0x1f4>
 80023f0:	230d      	movs	r3, #13
 80023f2:	e151      	b.n	8002698 <find_volume+0x498>
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	461a      	mov	r2, r3
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b29a      	uxth	r2, r3
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	815a      	strh	r2, [r3, #10]
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	895b      	ldrh	r3, [r3, #10]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <find_volume+0x228>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	895b      	ldrh	r3, [r3, #10]
 800241a:	461a      	mov	r2, r3
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	895b      	ldrh	r3, [r3, #10]
 8002420:	3b01      	subs	r3, #1
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <find_volume+0x22c>
 8002428:	230d      	movs	r3, #13
 800242a:	e135      	b.n	8002698 <find_volume+0x498>
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	3330      	adds	r3, #48	; 0x30
 8002430:	3311      	adds	r3, #17
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fdb0 	bl	8000f98 <ld_word>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	811a      	strh	r2, [r3, #8]
 8002440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002442:	891b      	ldrh	r3, [r3, #8]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <find_volume+0x252>
 800244e:	230d      	movs	r3, #13
 8002450:	e122      	b.n	8002698 <find_volume+0x498>
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	3330      	adds	r3, #48	; 0x30
 8002456:	3313      	adds	r3, #19
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fd9d 	bl	8000f98 <ld_word>
 800245e:	4603      	mov	r3, r0
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <find_volume+0x276>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	3320      	adds	r3, #32
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fdaa 	bl	8000fc8 <ld_dword>
 8002474:	64b8      	str	r0, [r7, #72]	; 0x48
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	3330      	adds	r3, #48	; 0x30
 800247a:	330e      	adds	r3, #14
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fd8b 	bl	8000f98 <ld_word>
 8002482:	4603      	mov	r3, r0
 8002484:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002486:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <find_volume+0x290>
 800248c:	230d      	movs	r3, #13
 800248e:	e103      	b.n	8002698 <find_volume+0x498>
 8002490:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002494:	4413      	add	r3, r2
 8002496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002498:	8912      	ldrh	r2, [r2, #8]
 800249a:	0912      	lsrs	r2, r2, #4
 800249c:	b292      	uxth	r2, r2
 800249e:	4413      	add	r3, r2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d201      	bcs.n	80024ae <find_volume+0x2ae>
 80024aa:	230d      	movs	r3, #13
 80024ac:	e0f4      	b.n	8002698 <find_volume+0x498>
 80024ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b6:	8952      	ldrh	r2, [r2, #10]
 80024b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <find_volume+0x2cc>
 80024c4:	230d      	movs	r3, #13
 80024c6:	e0e7      	b.n	8002698 <find_volume+0x498>
 80024c8:	20000034 	.word	0x20000034
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <find_volume+0x4a0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d802      	bhi.n	80024e0 <find_volume+0x2e0>
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d802      	bhi.n	80024f0 <find_volume+0x2f0>
 80024ea:	2302      	movs	r3, #2
 80024ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <find_volume+0x300>
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <find_volume+0x30c>
 8002508:	230d      	movs	r3, #13
 800250a:	e0c5      	b.n	8002698 <find_volume+0x498>
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	1c9a      	adds	r2, r3, #2
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002518:	61da      	str	r2, [r3, #28]
 800251a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	441a      	add	r2, r3
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	621a      	str	r2, [r3, #32]
 8002524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	441a      	add	r2, r3
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
 800252e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002532:	2b03      	cmp	r3, #3
 8002534:	d11e      	bne.n	8002574 <find_volume+0x374>
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	332a      	adds	r3, #42	; 0x2a
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fd2b 	bl	8000f98 <ld_word>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <find_volume+0x34c>
 8002548:	230d      	movs	r3, #13
 800254a:	e0a5      	b.n	8002698 <find_volume+0x498>
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	891b      	ldrh	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <find_volume+0x358>
 8002554:	230d      	movs	r3, #13
 8002556:	e09f      	b.n	8002698 <find_volume+0x498>
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	3330      	adds	r3, #48	; 0x30
 800255c:	332c      	adds	r3, #44	; 0x2c
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fd32 	bl	8000fc8 <ld_dword>
 8002564:	4602      	mov	r2, r0
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
 8002572:	e01f      	b.n	80025b4 <find_volume+0x3b4>
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	891b      	ldrh	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <find_volume+0x380>
 800257c:	230d      	movs	r3, #13
 800257e:	e08b      	b.n	8002698 <find_volume+0x498>
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	441a      	add	r2, r3
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
 800258c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002590:	2b02      	cmp	r3, #2
 8002592:	d103      	bne.n	800259c <find_volume+0x39c>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	e00a      	b.n	80025b2 <find_volume+0x3b2>
 800259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	085a      	lsrs	r2, r3, #1
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d201      	bcs.n	80025c8 <find_volume+0x3c8>
 80025c4:	230d      	movs	r3, #13
 80025c6:	e067      	b.n	8002698 <find_volume+0x498>
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	f04f 32ff 	mov.w	r2, #4294967295
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	711a      	strb	r2, [r3, #4]
 80025de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d149      	bne.n	800267a <find_volume+0x47a>
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	3330      	adds	r3, #48	; 0x30
 80025ea:	3330      	adds	r3, #48	; 0x30
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fcd3 	bl	8000f98 <ld_word>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d140      	bne.n	800267a <find_volume+0x47a>
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	3301      	adds	r3, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002600:	f7fe fe4f 	bl	80012a2 <move_window>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d137      	bne.n	800267a <find_volume+0x47a>
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2200      	movs	r2, #0
 800260e:	711a      	strb	r2, [r3, #4]
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	3330      	adds	r3, #48	; 0x30
 8002614:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fcbd 	bl	8000f98 <ld_word>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002626:	429a      	cmp	r2, r3
 8002628:	d127      	bne.n	800267a <find_volume+0x47a>
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	3330      	adds	r3, #48	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fcca 	bl	8000fc8 <ld_dword>
 8002634:	4602      	mov	r2, r0
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <find_volume+0x4a4>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d11e      	bne.n	800267a <find_volume+0x47a>
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fcbf 	bl	8000fc8 <ld_dword>
 800264a:	4602      	mov	r2, r0
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <find_volume+0x4a8>)
 800264e:	429a      	cmp	r2, r3
 8002650:	d113      	bne.n	800267a <find_volume+0x47a>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	3330      	adds	r3, #48	; 0x30
 8002656:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fcb4 	bl	8000fc8 <ld_dword>
 8002660:	4602      	mov	r2, r0
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	3330      	adds	r3, #48	; 0x30
 800266a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fcaa 	bl	8000fc8 <ld_dword>
 8002674:	4602      	mov	r2, r0
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <find_volume+0x4ac>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <find_volume+0x4ac>)
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <find_volume+0x4ac>)
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	80da      	strh	r2, [r3, #6]
 8002696:	2300      	movs	r3, #0
 8002698:	4618      	mov	r0, r3
 800269a:	3758      	adds	r7, #88	; 0x58
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	0ffffff5 	.word	0x0ffffff5
 80026a4:	41615252 	.word	0x41615252
 80026a8:	61417272 	.word	0x61417272
 80026ac:	20000038 	.word	0x20000038

080026b0 <validate>:
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	2309      	movs	r3, #9
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <validate+0x4e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d018      	beq.n	80026fe <validate+0x4e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d013      	beq.n	80026fe <validate+0x4e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	889a      	ldrh	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	88db      	ldrh	r3, [r3, #6]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10c      	bne.n	80026fe <validate+0x4e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f988 	bl	8000a00 <disk_status>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <validate+0x4e>
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <validate+0x5a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	e000      	b.n	800270c <validate+0x5c>
 800270a:	2300      	movs	r3, #0
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <f_mount>:
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fcc9 	bl	80020ca <get_ldnumber>
 8002738:	61f8      	str	r0, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	da01      	bge.n	8002744 <f_mount+0x28>
 8002740:	230b      	movs	r3, #11
 8002742:	e025      	b.n	8002790 <f_mount+0x74>
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <f_mount+0x7c>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <f_mount+0x3e>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <f_mount+0x4a>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <f_mount+0x7c>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <f_mount+0x5e>
 8002776:	2300      	movs	r3, #0
 8002778:	e00a      	b.n	8002790 <f_mount+0x74>
 800277a:	f107 010c 	add.w	r1, r7, #12
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	2200      	movs	r2, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fd3b 	bl	8002200 <find_volume>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000034 	.word	0x20000034

0800279c <f_open>:
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b099      	sub	sp, #100	; 0x64
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <f_open+0x18>
 80027b0:	2309      	movs	r3, #9
 80027b2:	e172      	b.n	8002a9a <f_open+0x2fe>
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	f107 0114 	add.w	r1, r7, #20
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd1a 	bl	8002200 <find_volume>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 8156 	bne.w	8002a88 <f_open+0x2ec>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fbff 	bl	8001fec <follow_path>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <f_open+0x70>
 80027fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002800:	b25b      	sxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	da02      	bge.n	800280c <f_open+0x70>
 8002806:	2306      	movs	r3, #6
 8002808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 031c 	and.w	r3, r3, #28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d073      	beq.n	80028fe <f_open+0x162>
 8002816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <f_open+0xa4>
 800281e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002822:	2b04      	cmp	r3, #4
 8002824:	d107      	bne.n	8002836 <f_open+0x9a>
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fae9 	bl	8001e02 <dir_register>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	e010      	b.n	8002862 <f_open+0xc6>
 8002840:	7fbb      	ldrb	r3, [r7, #30]
 8002842:	f003 0311 	and.w	r3, r3, #17
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <f_open+0xb6>
 800284a:	2307      	movs	r3, #7
 800284c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002850:	e007      	b.n	8002862 <f_open+0xc6>
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <f_open+0xc6>
 800285c:	2308      	movs	r3, #8
 800285e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002866:	2b00      	cmp	r3, #0
 8002868:	d163      	bne.n	8002932 <f_open+0x196>
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05e      	beq.n	8002932 <f_open+0x196>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fa2d 	bl	8001cda <ld_clust>
 8002880:	6538      	str	r0, [r7, #80]	; 0x50
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	f103 040e 	add.w	r4, r3, #14
 8002888:	f7fe fb7c 	bl	8000f84 <get_fattime>
 800288c:	4603      	mov	r3, r0
 800288e:	4619      	mov	r1, r3
 8002890:	4620      	mov	r0, r4
 8002892:	f7fe fbd7 	bl	8001044 <st_dword>
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	330b      	adds	r3, #11
 800289a:	2220      	movs	r2, #32
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028a2:	2200      	movs	r2, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fa37 	bl	8001d18 <st_clust>
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	331c      	adds	r3, #28
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fbc7 	bl	8001044 <st_dword>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2201      	movs	r2, #1
 80028ba:	70da      	strb	r2, [r3, #3]
 80028bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d037      	beq.n	8002932 <f_open+0x196>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c8:	f107 0318 	add.w	r3, r7, #24
 80028cc:	2200      	movs	r2, #0
 80028ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe ff2c 	bl	800172e <remove_chain>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80028dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d126      	bne.n	8002932 <f_open+0x196>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fcda 	bl	80012a2 <move_window>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028f8:	3a01      	subs	r2, #1
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e019      	b.n	8002932 <f_open+0x196>
 80028fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <f_open+0x196>
 8002906:	7fbb      	ldrb	r3, [r7, #30]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <f_open+0x17c>
 8002910:	2304      	movs	r3, #4
 8002912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002916:	e00c      	b.n	8002932 <f_open+0x196>
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <f_open+0x196>
 8002922:	7fbb      	ldrb	r3, [r7, #30]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <f_open+0x196>
 800292c:	2307      	movs	r3, #7
 800292e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <f_open+0x1be>
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <f_open+0x1b0>
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
 800295a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8092 	bne.w	8002a88 <f_open+0x2ec>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f9b5 	bl	8001cda <ld_clust>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	331c      	adds	r3, #28
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fb24 	bl	8000fc8 <ld_dword>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	88da      	ldrh	r2, [r3, #6]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	809a      	strh	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	79fa      	ldrb	r2, [r7, #7]
 8002998:	741a      	strb	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	745a      	strb	r2, [r3, #17]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	615a      	str	r2, [r3, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3328      	adds	r3, #40	; 0x28
 80029b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fb91 	bl	80010de <mem_set>
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d060      	beq.n	8002a88 <f_open+0x2ec>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d05c      	beq.n	8002a88 <f_open+0x2ec>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	895b      	ldrh	r3, [r3, #10]
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ea:	e016      	b.n	8002a1a <f_open+0x27e>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fd10 	bl	8001416 <get_fat>
 80029f6:	65b8      	str	r0, [r7, #88]	; 0x58
 80029f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d802      	bhi.n	8002a04 <f_open+0x268>
 80029fe:	2302      	movs	r3, #2
 8002a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d102      	bne.n	8002a12 <f_open+0x276>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
 8002a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <f_open+0x28e>
 8002a22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d8e0      	bhi.n	80029ec <f_open+0x250>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d127      	bne.n	8002a88 <f_open+0x2ec>
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d022      	beq.n	8002a88 <f_open+0x2ec>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fcc6 	bl	80013d8 <clst2sect>
 8002a4c:	6478      	str	r0, [r7, #68]	; 0x44
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <f_open+0x2c0>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a5a:	e015      	b.n	8002a88 <f_open+0x2ec>
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	0a5a      	lsrs	r2, r3, #9
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	61da      	str	r2, [r3, #28]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	7858      	ldrb	r0, [r3, #1]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	2301      	movs	r3, #1
 8002a78:	f7fd ffd8 	bl	8000a2c <disk_read>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <f_open+0x2ec>
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <f_open+0x2fa>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3764      	adds	r7, #100	; 0x64
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}

08002aa2 <f_write>:
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08c      	sub	sp, #48	; 0x30
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f107 0210 	add.w	r2, r7, #16
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fdf4 	bl	80026b0 <validate>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <f_write+0x44>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	7c5b      	ldrb	r3, [r3, #17]
 8002ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <f_write+0x4a>
 8002ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aea:	e13f      	b.n	8002d6c <f_write+0x2ca>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	7c1b      	ldrb	r3, [r3, #16]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <f_write+0x5a>
 8002af8:	2307      	movs	r3, #7
 8002afa:	e137      	b.n	8002d6c <f_write+0x2ca>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	441a      	add	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f080 8121 	bcs.w	8002d50 <f_write+0x2ae>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	e11b      	b.n	8002d50 <f_write+0x2ae>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 80d7 	bne.w	8002cd4 <f_write+0x232>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	8952      	ldrh	r2, [r2, #10]
 8002b30:	3a01      	subs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d137      	bne.n	8002bac <f_write+0x10a>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10c      	bne.n	8002b5e <f_write+0xbc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10e      	bne.n	8002b6e <f_write+0xcc>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fe4f 	bl	80017f8 <create_chain>
 8002b5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8002b5c:	e007      	b.n	8002b6e <f_write+0xcc>
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f7fe fe46 	bl	80017f8 <create_chain>
 8002b6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80f2 	beq.w	8002d5a <f_write+0x2b8>
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d104      	bne.n	8002b86 <f_write+0xe4>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	745a      	strb	r2, [r3, #17]
 8002b82:	2302      	movs	r3, #2
 8002b84:	e0f2      	b.n	8002d6c <f_write+0x2ca>
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d104      	bne.n	8002b98 <f_write+0xf6>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	745a      	strb	r2, [r3, #17]
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0e9      	b.n	8002d6c <f_write+0x2ca>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9c:	619a      	str	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <f_write+0x10a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7c1b      	ldrb	r3, [r3, #16]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da18      	bge.n	8002be8 <f_write+0x146>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	7858      	ldrb	r0, [r3, #1]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f7fd ff9b 	bl	8000b00 <disk_write>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <f_write+0x138>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	745a      	strb	r2, [r3, #17]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0c8      	b.n	8002d6c <f_write+0x2ca>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	7c1b      	ldrb	r3, [r3, #16]
 8002bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	741a      	strb	r2, [r3, #16]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7fe fbf1 	bl	80013d8 <clst2sect>
 8002bf6:	6178      	str	r0, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <f_write+0x166>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2202      	movs	r2, #2
 8002c02:	745a      	strb	r2, [r3, #17]
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0b1      	b.n	8002d6c <f_write+0x2ca>
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0a5b      	lsrs	r3, r3, #9
 8002c14:	623b      	str	r3, [r7, #32]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d03c      	beq.n	8002c96 <f_write+0x1f4>
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	4413      	add	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	8952      	ldrh	r2, [r2, #10]
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d905      	bls.n	8002c36 <f_write+0x194>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	895b      	ldrh	r3, [r3, #10]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	7858      	ldrb	r0, [r3, #1]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	69f9      	ldr	r1, [r7, #28]
 8002c40:	f7fd ff5e 	bl	8000b00 <disk_write>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <f_write+0x1b2>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	745a      	strb	r2, [r3, #17]
 8002c50:	2301      	movs	r3, #1
 8002c52:	e08b      	b.n	8002d6c <f_write+0x2ca>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d915      	bls.n	8002c8e <f_write+0x1ec>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fe fa0e 	bl	800109c <mem_cpy>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	7c1b      	ldrb	r3, [r3, #16]
 8002c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	741a      	strb	r2, [r3, #16]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	025b      	lsls	r3, r3, #9
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e03f      	b.n	8002d16 <f_write+0x274>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d016      	beq.n	8002cce <f_write+0x22c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d210      	bcs.n	8002cce <f_write+0x22c>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	7858      	ldrb	r0, [r3, #1]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	f7fd feb7 	bl	8000a2c <disk_read>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <f_write+0x22c>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	745a      	strb	r2, [r3, #17]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e04e      	b.n	8002d6c <f_write+0x2ca>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cdc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d901      	bls.n	8002cee <f_write+0x24c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	4413      	add	r3, r2
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	69f9      	ldr	r1, [r7, #28]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f9ca 	bl	800109c <mem_cpy>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	7c1b      	ldrb	r3, [r3, #16]
 8002d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	741a      	strb	r2, [r3, #16]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	441a      	add	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	4413      	add	r3, r2
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	441a      	add	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	615a      	str	r2, [r3, #20]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	bf38      	it	cc
 8002d4a:	461a      	movcc	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f47f aee0 	bne.w	8002b18 <f_write+0x76>
 8002d58:	e000      	b.n	8002d5c <f_write+0x2ba>
 8002d5a:	bf00      	nop
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	7c1b      	ldrb	r3, [r3, #16]
 8002d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	741a      	strb	r2, [r3, #16]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3730      	adds	r7, #48	; 0x30
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <f_sync>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fc93 	bl	80026b0 <validate>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d168      	bne.n	8002e66 <f_sync+0xf2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7c1b      	ldrb	r3, [r3, #16]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d062      	beq.n	8002e66 <f_sync+0xf2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7c1b      	ldrb	r3, [r3, #16]
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da15      	bge.n	8002dd6 <f_sync+0x62>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	7858      	ldrb	r0, [r3, #1]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	2301      	movs	r3, #1
 8002dba:	f7fd fea1 	bl	8000b00 <disk_write>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <f_sync+0x54>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04f      	b.n	8002e68 <f_sync+0xf4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7c1b      	ldrb	r3, [r3, #16]
 8002dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	741a      	strb	r2, [r3, #16]
 8002dd6:	f7fe f8d5 	bl	8000f84 <get_fattime>
 8002dda:	6138      	str	r0, [r7, #16]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7fe fa5c 	bl	80012a2 <move_window>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d138      	bne.n	8002e66 <f_sync+0xf2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	330b      	adds	r3, #11
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	330b      	adds	r3, #11
 8002e04:	f042 0220 	orr.w	r2, r2, #32
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	f7fe ff7e 	bl	8001d18 <st_clust>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f103 021c 	add.w	r2, r3, #28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f7fe f90b 	bl	8001044 <st_dword>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3316      	adds	r3, #22
 8002e32:	6939      	ldr	r1, [r7, #16]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe f905 	bl	8001044 <st_dword>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3312      	adds	r3, #18
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe f8e4 	bl	800100e <st_word>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	70da      	strb	r2, [r3, #3]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fa54 	bl	80012fc <sync_fs>
 8002e54:	4603      	mov	r3, r0
 8002e56:	75fb      	strb	r3, [r7, #23]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7c1b      	ldrb	r3, [r3, #16]
 8002e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	741a      	strb	r2, [r3, #16]
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <f_close>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff7b 	bl	8002d74 <f_sync>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	73fb      	strb	r3, [r7, #15]
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10e      	bne.n	8002ea6 <f_close+0x36>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f107 0208 	add.w	r2, r7, #8
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fc0d 	bl	80026b0 <validate>
 8002e96:	4603      	mov	r3, r0
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <f_close+0x36>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <writeSD>:
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

/*---------------------Zapis na karte SD-----------------------*/
void writeSD()
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
	fresult = f_mount(&FatFs, "", 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	4918      	ldr	r1, [pc, #96]	; (8002f1c <writeSD+0x6c>)
 8002eba:	4819      	ldr	r0, [pc, #100]	; (8002f20 <writeSD+0x70>)
 8002ebc:	f7ff fc2e 	bl	800271c <f_mount>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <writeSD+0x74>)
 8002ec6:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&file, "sprawdzam.txt", FA_OPEN_ALWAYS | FA_CREATE_ALWAYS | FA_WRITE);
 8002ec8:	221a      	movs	r2, #26
 8002eca:	4917      	ldr	r1, [pc, #92]	; (8002f28 <writeSD+0x78>)
 8002ecc:	4817      	ldr	r0, [pc, #92]	; (8002f2c <writeSD+0x7c>)
 8002ece:	f7ff fc65 	bl	800279c <f_open>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <writeSD+0x74>)
 8002ed8:	701a      	strb	r2, [r3, #0]
	int len = sprintf( buffer, "Hello PTM!\r\n");
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <writeSD+0x80>)
 8002edc:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <writeSD+0x84>)
 8002ede:	4614      	mov	r4, r2
 8002ee0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ee2:	6020      	str	r0, [r4, #0]
 8002ee4:	6061      	str	r1, [r4, #4]
 8002ee6:	60a2      	str	r2, [r4, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	7323      	strb	r3, [r4, #12]
 8002eec:	230c      	movs	r3, #12
 8002eee:	607b      	str	r3, [r7, #4]
	fresult = f_write(&file, buffer, len, &bytes_written);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <writeSD+0x88>)
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <writeSD+0x80>)
 8002ef6:	480d      	ldr	r0, [pc, #52]	; (8002f2c <writeSD+0x7c>)
 8002ef8:	f7ff fdd3 	bl	8002aa2 <f_write>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <writeSD+0x74>)
 8002f02:	701a      	strb	r2, [r3, #0]
	fresult = f_close (&file);
 8002f04:	4809      	ldr	r0, [pc, #36]	; (8002f2c <writeSD+0x7c>)
 8002f06:	f7ff ffb3 	bl	8002e70 <f_close>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <writeSD+0x74>)
 8002f10:	701a      	strb	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	080069f0 	.word	0x080069f0
 8002f20:	20000048 	.word	0x20000048
 8002f24:	200008bc 	.word	0x200008bc
 8002f28:	080069f4 	.word	0x080069f4
 8002f2c:	20000340 	.word	0x20000340
 8002f30:	200005c8 	.word	0x200005c8
 8002f34:	08006a04 	.word	0x08006a04
 8002f38:	20000958 	.word	0x20000958

08002f3c <HAL_TIM_PeriodElapsedCallback>:



/*--------------------Odczyt z mikrofonu------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM4)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d12e      	bne.n	8002fac <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		if (recording)
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d02a      	beq.n	8002fac <HAL_TIM_PeriodElapsedCallback+0x70>
		{
		HAL_ADC_Start(&hadc1);
 8002f56:	4819      	ldr	r0, [pc, #100]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f58:	f000 ff2e 	bl	8003db8 <HAL_ADC_Start>
			  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	4817      	ldr	r0, [pc, #92]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f60:	f000 fff0 	bl	8003f44 <HAL_ADC_PollForConversion>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d120      	bne.n	8002fac <HAL_TIM_PeriodElapsedCallback+0x70>
			  {
				  adc_value = HAL_ADC_GetValue(&hadc1);
 8002f6a:	4814      	ldr	r0, [pc, #80]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f6c:	f001 f86e 	bl	800404c <HAL_ADC_GetValue>
 8002f70:	4603      	mov	r3, r0
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f76:	801a      	strh	r2, [r3, #0]
				  x = (int16_t)(2.95/(double)4096) * adc_value;
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	801a      	strh	r2, [r3, #0]
				  data_chunk[data_iterator] = x;
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002f84:	8812      	ldrh	r2, [r2, #0]
 8002f86:	b211      	sxth	r1, r2
 8002f88:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_iterator++;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002f96:	6013      	str	r3, [r2, #0]
				  if (data_iterator == 250)
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2bfa      	cmp	r3, #250	; 0xfa
 8002f9e:	d105      	bne.n	8002fac <HAL_TIM_PeriodElapsedCallback+0x70>
					  {
					  SaveChunk(file_name, data_chunk);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4909      	ldr	r1, [pc, #36]	; (8002fcc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fb8d 	bl	80036c6 <SaveChunk>
					  }
			  }
		}
	}
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	2000003c 	.word	0x2000003c
 8002fbc:	20000568 	.word	0x20000568
 8002fc0:	2000033c 	.word	0x2000033c
 8002fc4:	20000044 	.word	0x20000044
 8002fc8:	20000040 	.word	0x20000040
 8002fcc:	200006c8 	.word	0x200006c8
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd8:	f000 fe38 	bl	8003c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fdc:	f000 f82c 	bl	8003038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe0:	f000 faa8 	bl	8003534 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002fe4:	f000 f944 	bl	8003270 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fe8:	f000 f99c 	bl	8003324 <MX_TIM3_Init>
  MX_SPI1_Init();
 8002fec:	f000 f90a 	bl	8003204 <MX_SPI1_Init>
  MX_DAC_Init();
 8002ff0:	f000 f8de 	bl	80031b0 <MX_DAC_Init>
  MX_TIM5_Init();
 8002ff4:	f000 fa52 	bl	800349c <MX_TIM5_Init>
  MX_ADC1_Init();
 8002ff8:	f000 f888 	bl	800310c <MX_ADC1_Init>
  MX_TIM4_Init();
 8002ffc:	f000 fa02 	bl	8003404 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003000:	2100      	movs	r1, #0
 8003002:	480a      	ldr	r0, [pc, #40]	; (800302c <main+0x58>)
 8003004:	f002 fe1e 	bl	8005c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003008:	2104      	movs	r1, #4
 800300a:	4808      	ldr	r0, [pc, #32]	; (800302c <main+0x58>)
 800300c:	f002 fe1a 	bl	8005c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003010:	2108      	movs	r1, #8
 8003012:	4806      	ldr	r0, [pc, #24]	; (800302c <main+0x58>)
 8003014:	f002 fe16 	bl	8005c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003018:	2100      	movs	r1, #0
 800301a:	4805      	ldr	r0, [pc, #20]	; (8003030 <main+0x5c>)
 800301c:	f002 fe12 	bl	8005c44 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <main+0x60>)
 8003022:	f002 fdc0 	bl	8005ba6 <HAL_TIM_Base_Start_IT>
  //HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
  //HAL_ADC_Start(&hadc1);
  //HAL_ADC_Start(&hadc2);

  writeSD();
 8003026:	f7ff ff43 	bl	8002eb0 <writeSD>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800302a:	e7fe      	b.n	800302a <main+0x56>
 800302c:	200002fc 	.word	0x200002fc
 8003030:	20000918 	.word	0x20000918
 8003034:	200002bc 	.word	0x200002bc

08003038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b094      	sub	sp, #80	; 0x50
 800303c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800303e:	f107 0320 	add.w	r3, r7, #32
 8003042:	2230      	movs	r2, #48	; 0x30
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fcac 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <SystemClock_Config+0xcc>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <SystemClock_Config+0xcc>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6413      	str	r3, [r2, #64]	; 0x40
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <SystemClock_Config+0xcc>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003078:	2300      	movs	r3, #0
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <SystemClock_Config+0xd0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a21      	ldr	r2, [pc, #132]	; (8003108 <SystemClock_Config+0xd0>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <SystemClock_Config+0xd0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003094:	2301      	movs	r3, #1
 8003096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800309e:	2302      	movs	r3, #2
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030a8:	2304      	movs	r3, #4
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80030ac:	23a8      	movs	r3, #168	; 0xa8
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030b0:	2302      	movs	r3, #2
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030b4:	2304      	movs	r3, #4
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b8:	f107 0320 	add.w	r3, r7, #32
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fd25 	bl	8004b0c <HAL_RCC_OscConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80030c8:	f000 faf6 	bl	80036b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030cc:	230f      	movs	r3, #15
 80030ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030d0:	2302      	movs	r3, #2
 80030d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	2105      	movs	r1, #5
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 ff7e 	bl	8004fec <HAL_RCC_ClockConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80030f6:	f000 fadf 	bl	80036b8 <Error_Handler>
  }
}
 80030fa:	bf00      	nop
 80030fc:	3750      	adds	r7, #80	; 0x50
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	40007000 	.word	0x40007000

0800310c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003112:	463b      	mov	r3, r7
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003120:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <MX_ADC1_Init+0x9c>)
 8003122:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800312a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <MX_ADC1_Init+0x98>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <MX_ADC1_Init+0x98>)
 800313a:	2200      	movs	r2, #0
 800313c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003148:	2200      	movs	r2, #0
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <MX_ADC1_Init+0x98>)
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <MX_ADC1_Init+0xa0>)
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <MX_ADC1_Init+0x98>)
 800315a:	2201      	movs	r2, #1
 800315c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <MX_ADC1_Init+0x98>)
 8003168:	2201      	movs	r2, #1
 800316a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800316c:	480d      	ldr	r0, [pc, #52]	; (80031a4 <MX_ADC1_Init+0x98>)
 800316e:	f000 fddf 	bl	8003d30 <HAL_ADC_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003178:	f000 fa9e 	bl	80036b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800317c:	230f      	movs	r3, #15
 800317e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003180:	2301      	movs	r3, #1
 8003182:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003188:	463b      	mov	r3, r7
 800318a:	4619      	mov	r1, r3
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_ADC1_Init+0x98>)
 800318e:	f000 ff6b 	bl	8004068 <HAL_ADC_ConfigChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003198:	f000 fa8e 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000568 	.word	0x20000568
 80031a8:	40012000 	.word	0x40012000
 80031ac:	0f000001 	.word	0x0f000001

080031b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80031b6:	463b      	mov	r3, r7
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <MX_DAC_Init+0x4c>)
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <MX_DAC_Init+0x50>)
 80031c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80031c4:	480d      	ldr	r0, [pc, #52]	; (80031fc <MX_DAC_Init+0x4c>)
 80031c6:	f001 fa7e 	bl	80046c6 <HAL_DAC_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80031d0:	f000 fa72 	bl	80036b8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80031dc:	463b      	mov	r3, r7
 80031de:	2200      	movs	r2, #0
 80031e0:	4619      	mov	r1, r3
 80031e2:	4806      	ldr	r0, [pc, #24]	; (80031fc <MX_DAC_Init+0x4c>)
 80031e4:	f001 fa91 	bl	800470a <HAL_DAC_ConfigChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80031ee:	f000 fa63 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200005b4 	.word	0x200005b4
 8003200:	40007400 	.word	0x40007400

08003204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <MX_SPI1_Init+0x64>)
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <MX_SPI1_Init+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <MX_SPI1_Init+0x64>)
 8003210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <MX_SPI1_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <MX_SPI1_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <MX_SPI1_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MX_SPI1_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_SPI1_Init+0x64>)
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MX_SPI1_Init+0x64>)
 8003238:	2218      	movs	r2, #24
 800323a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <MX_SPI1_Init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <MX_SPI1_Init+0x64>)
 8003244:	2200      	movs	r2, #0
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <MX_SPI1_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_SPI1_Init+0x64>)
 8003250:	220a      	movs	r2, #10
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003254:	4804      	ldr	r0, [pc, #16]	; (8003268 <MX_SPI1_Init+0x64>)
 8003256:	f002 f887 	bl	8005368 <HAL_SPI_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003260:	f000 fa2a 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200008c0 	.word	0x200008c0
 800326c:	40013000 	.word	0x40013000

08003270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003276:	f107 0320 	add.w	r3, r7, #32
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003292:	4b23      	ldr	r3, [pc, #140]	; (8003320 <MX_TIM2_Init+0xb0>)
 8003294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003298:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <MX_TIM2_Init+0xb0>)
 800329c:	f245 2207 	movw	r2, #20999	; 0x5207
 80032a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <MX_TIM2_Init+0xb0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <MX_TIM2_Init+0xb0>)
 80032aa:	f640 729f 	movw	r2, #3999	; 0xf9f
 80032ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <MX_TIM2_Init+0xb0>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <MX_TIM2_Init+0xb0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032bc:	4818      	ldr	r0, [pc, #96]	; (8003320 <MX_TIM2_Init+0xb0>)
 80032be:	f002 fc96 	bl	8005bee <HAL_TIM_PWM_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80032c8:	f000 f9f6 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032d4:	f107 0320 	add.w	r3, r7, #32
 80032d8:	4619      	mov	r1, r3
 80032da:	4811      	ldr	r0, [pc, #68]	; (8003320 <MX_TIM2_Init+0xb0>)
 80032dc:	f003 faae 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80032e6:	f000 f9e7 	bl	80036b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ea:	2360      	movs	r3, #96	; 0x60
 80032ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	2200      	movs	r2, #0
 80032fe:	4619      	mov	r1, r3
 8003300:	4807      	ldr	r0, [pc, #28]	; (8003320 <MX_TIM2_Init+0xb0>)
 8003302:	f002 fde5 	bl	8005ed0 <HAL_TIM_PWM_ConfigChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800330c:	f000 f9d4 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003310:	4803      	ldr	r0, [pc, #12]	; (8003320 <MX_TIM2_Init+0xb0>)
 8003312:	f000 fb8d 	bl	8003a30 <HAL_TIM_MspPostInit>

}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000918 	.word	0x20000918

08003324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332a:	f107 0320 	add.w	r3, r7, #32
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	615a      	str	r2, [r3, #20]
 8003344:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003346:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <MX_TIM3_Init+0xd8>)
 8003348:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <MX_TIM3_Init+0xdc>)
 800334a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <MX_TIM3_Init+0xd8>)
 800334e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <MX_TIM3_Init+0xd8>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <MX_TIM3_Init+0xd8>)
 800335c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <MX_TIM3_Init+0xd8>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003368:	4b24      	ldr	r3, [pc, #144]	; (80033fc <MX_TIM3_Init+0xd8>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800336e:	4823      	ldr	r0, [pc, #140]	; (80033fc <MX_TIM3_Init+0xd8>)
 8003370:	f002 fc3d 	bl	8005bee <HAL_TIM_PWM_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800337a:	f000 f99d 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003386:	f107 0320 	add.w	r3, r7, #32
 800338a:	4619      	mov	r1, r3
 800338c:	481b      	ldr	r0, [pc, #108]	; (80033fc <MX_TIM3_Init+0xd8>)
 800338e:	f003 fa55 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003398:	f000 f98e 	bl	80036b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800339c:	2360      	movs	r3, #96	; 0x60
 800339e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	2200      	movs	r2, #0
 80033b0:	4619      	mov	r1, r3
 80033b2:	4812      	ldr	r0, [pc, #72]	; (80033fc <MX_TIM3_Init+0xd8>)
 80033b4:	f002 fd8c 	bl	8005ed0 <HAL_TIM_PWM_ConfigChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80033be:	f000 f97b 	bl	80036b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2204      	movs	r2, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	480c      	ldr	r0, [pc, #48]	; (80033fc <MX_TIM3_Init+0xd8>)
 80033ca:	f002 fd81 	bl	8005ed0 <HAL_TIM_PWM_ConfigChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80033d4:	f000 f970 	bl	80036b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	2208      	movs	r2, #8
 80033dc:	4619      	mov	r1, r3
 80033de:	4807      	ldr	r0, [pc, #28]	; (80033fc <MX_TIM3_Init+0xd8>)
 80033e0:	f002 fd76 	bl	8005ed0 <HAL_TIM_PWM_ConfigChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80033ea:	f000 f965 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033ee:	4803      	ldr	r0, [pc, #12]	; (80033fc <MX_TIM3_Init+0xd8>)
 80033f0:	f000 fb1e 	bl	8003a30 <HAL_TIM_MspPostInit>

}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200002fc 	.word	0x200002fc
 8003400:	40000400 	.word	0x40000400

08003404 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340a:	f107 0308 	add.w	r3, r7, #8
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003418:	463b      	mov	r3, r7
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003420:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <MX_TIM4_Init+0x90>)
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <MX_TIM4_Init+0x94>)
 8003424:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <MX_TIM4_Init+0x90>)
 8003428:	2231      	movs	r2, #49	; 0x31
 800342a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <MX_TIM4_Init+0x90>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 209;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <MX_TIM4_Init+0x90>)
 8003434:	22d1      	movs	r2, #209	; 0xd1
 8003436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <MX_TIM4_Init+0x90>)
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <MX_TIM4_Init+0x90>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003444:	4813      	ldr	r0, [pc, #76]	; (8003494 <MX_TIM4_Init+0x90>)
 8003446:	f002 fb83 	bl	8005b50 <HAL_TIM_Base_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003450:	f000 f932 	bl	80036b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	4619      	mov	r1, r3
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <MX_TIM4_Init+0x90>)
 8003462:	f002 fdfb 	bl	800605c <HAL_TIM_ConfigClockSource>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800346c:	f000 f924 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003478:	463b      	mov	r3, r7
 800347a:	4619      	mov	r1, r3
 800347c:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_TIM4_Init+0x90>)
 800347e:	f003 f9dd 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003488:	f000 f916 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	2000027c 	.word	0x2000027c
 8003498:	40000800 	.word	0x40000800

0800349c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b0:	463b      	mov	r3, r7
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_TIM5_Init+0x90>)
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <MX_TIM5_Init+0x94>)
 80034bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <MX_TIM5_Init+0x90>)
 80034c0:	2231      	movs	r2, #49	; 0x31
 80034c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <MX_TIM5_Init+0x90>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 104;
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <MX_TIM5_Init+0x90>)
 80034cc:	2268      	movs	r2, #104	; 0x68
 80034ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <MX_TIM5_Init+0x90>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_TIM5_Init+0x90>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80034dc:	4813      	ldr	r0, [pc, #76]	; (800352c <MX_TIM5_Init+0x90>)
 80034de:	f002 fb37 	bl	8005b50 <HAL_TIM_Base_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80034e8:	f000 f8e6 	bl	80036b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	4619      	mov	r1, r3
 80034f8:	480c      	ldr	r0, [pc, #48]	; (800352c <MX_TIM5_Init+0x90>)
 80034fa:	f002 fdaf 	bl	800605c <HAL_TIM_ConfigClockSource>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003504:	f000 f8d8 	bl	80036b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003510:	463b      	mov	r3, r7
 8003512:	4619      	mov	r1, r3
 8003514:	4805      	ldr	r0, [pc, #20]	; (800352c <MX_TIM5_Init+0x90>)
 8003516:	f003 f991 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003520:	f000 f8ca 	bl	80036b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200002bc 	.word	0x200002bc
 8003530:	40000c00 	.word	0x40000c00

08003534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08c      	sub	sp, #48	; 0x30
 8003538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <MX_GPIO_Init+0x174>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a55      	ldr	r2, [pc, #340]	; (80036a8 <MX_GPIO_Init+0x174>)
 8003554:	f043 0310 	orr.w	r3, r3, #16
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <MX_GPIO_Init+0x174>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <MX_GPIO_Init+0x174>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a4e      	ldr	r2, [pc, #312]	; (80036a8 <MX_GPIO_Init+0x174>)
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <MX_GPIO_Init+0x174>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <MX_GPIO_Init+0x174>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <MX_GPIO_Init+0x174>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <MX_GPIO_Init+0x174>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a40      	ldr	r2, [pc, #256]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a39      	ldr	r2, [pc, #228]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a32      	ldr	r2, [pc, #200]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035e0:	f043 0308 	orr.w	r3, r3, #8
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <MX_GPIO_Init+0x174>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 80035f2:	2200      	movs	r2, #0
 80035f4:	f44f 4171 	mov.w	r1, #61696	; 0xf100
 80035f8:	482c      	ldr	r0, [pc, #176]	; (80036ac <MX_GPIO_Init+0x178>)
 80035fa:	f001 fa6d 	bl	8004ad8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80035fe:	2200      	movs	r2, #0
 8003600:	f64f 7180 	movw	r1, #65408	; 0xff80
 8003604:	482a      	ldr	r0, [pc, #168]	; (80036b0 <MX_GPIO_Init+0x17c>)
 8003606:	f001 fa67 	bl	8004ad8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|E_Pin, GPIO_PIN_RESET);
 800360a:	2200      	movs	r2, #0
 800360c:	2103      	movs	r1, #3
 800360e:	4829      	ldr	r0, [pc, #164]	; (80036b4 <MX_GPIO_Init+0x180>)
 8003610:	f001 fa62 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003614:	23fc      	movs	r3, #252	; 0xfc
 8003616:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003618:	2300      	movs	r3, #0
 800361a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800361c:	2301      	movs	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	4619      	mov	r1, r3
 8003626:	4823      	ldr	r0, [pc, #140]	; (80036b4 <MX_GPIO_Init+0x180>)
 8003628:	f001 f8bc 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin 
                           PB8 */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 800362c:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8003630:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003632:	2301      	movs	r3, #1
 8003634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	4819      	ldr	r0, [pc, #100]	; (80036ac <MX_GPIO_Init+0x178>)
 8003646:	f001 f8ad 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           PD12 PD13 PD14 PD15 
                           PD7 */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800364a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800364e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003650:	2301      	movs	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4619      	mov	r1, r3
 8003662:	4813      	ldr	r0, [pc, #76]	; (80036b0 <MX_GPIO_Init+0x17c>)
 8003664:	f001 f89e 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003668:	f44f 7320 	mov.w	r3, #640	; 0x280
 800366c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <MX_GPIO_Init+0x178>)
 800367e:	f001 f891 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8003682:	2303      	movs	r3, #3
 8003684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003686:	2301      	movs	r3, #1
 8003688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003692:	f107 031c 	add.w	r3, r7, #28
 8003696:	4619      	mov	r1, r3
 8003698:	4806      	ldr	r0, [pc, #24]	; (80036b4 <MX_GPIO_Init+0x180>)
 800369a:	f001 f883 	bl	80047a4 <HAL_GPIO_Init>

}
 800369e:	bf00      	nop
 80036a0:	3730      	adds	r7, #48	; 0x30
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000

080036b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <SaveChunk>:
	  if (bw!=44) return 1;
	  return 0;
}

int SaveChunk(char* file_path, int16_t data[])
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	FIL* f;
	uint32_t chunk_size = 256;
 80036d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d4:	617b      	str	r3, [r7, #20]
	f_open(f, file_path, FA_OPEN_APPEND | FA_WRITE);
 80036d6:	2232      	movs	r2, #50	; 0x32
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	6938      	ldr	r0, [r7, #16]
 80036dc:	f7ff f85e 	bl	800279c <f_open>
	uint16_t bw;
	f_write(f, data, chunk_size, &bw);
 80036e0:	f107 030e 	add.w	r3, r7, #14
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	6938      	ldr	r0, [r7, #16]
 80036ea:	f7ff f9da 	bl	8002aa2 <f_write>
	if (bw!=44) return 1;
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	2b2c      	cmp	r3, #44	; 0x2c
 80036f2:	d001      	beq.n	80036f8 <SaveChunk+0x32>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <SaveChunk+0x34>
	return 0;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_MspInit+0x4c>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_MspInit+0x4c>)
 8003714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_MspInit+0x4c>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_MspInit+0x4c>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_MspInit+0x4c>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_MspInit+0x4c>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_ADC_MspInit+0xb0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d141      	bne.n	80037fa <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6453      	str	r3, [r2, #68]	; 0x44
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_ADC_MspInit+0xb4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037ca:	2303      	movs	r3, #3
 80037cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ce:	2303      	movs	r3, #3
 80037d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	4619      	mov	r1, r3
 80037dc:	480b      	ldr	r0, [pc, #44]	; (800380c <HAL_ADC_MspInit+0xb8>)
 80037de:	f000 ffe1 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037e2:	2320      	movs	r3, #32
 80037e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e6:	2303      	movs	r3, #3
 80037e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	4619      	mov	r1, r3
 80037f4:	4806      	ldr	r0, [pc, #24]	; (8003810 <HAL_ADC_MspInit+0xbc>)
 80037f6:	f000 ffd5 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037fa:	bf00      	nop
 80037fc:	3728      	adds	r7, #40	; 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40012000 	.word	0x40012000
 8003808:	40023800 	.word	0x40023800
 800380c:	40020000 	.word	0x40020000
 8003810:	40020800 	.word	0x40020800

08003814 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a17      	ldr	r2, [pc, #92]	; (8003890 <HAL_DAC_MspInit+0x7c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d127      	bne.n	8003886 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <HAL_DAC_MspInit+0x80>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <HAL_DAC_MspInit+0x80>)
 8003840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003844:	6413      	str	r3, [r2, #64]	; 0x40
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_DAC_MspInit+0x80>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <HAL_DAC_MspInit+0x80>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_DAC_MspInit+0x80>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_DAC_MspInit+0x80>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800386e:	2310      	movs	r3, #16
 8003870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003872:	2303      	movs	r3, #3
 8003874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	4619      	mov	r1, r3
 8003880:	4805      	ldr	r0, [pc, #20]	; (8003898 <HAL_DAC_MspInit+0x84>)
 8003882:	f000 ff8f 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	; 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40007400 	.word	0x40007400
 8003894:	40023800 	.word	0x40023800
 8003898:	40020000 	.word	0x40020000

0800389c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_SPI_MspInit+0x84>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d12b      	bne.n	8003916 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_SPI_MspInit+0x88>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_SPI_MspInit+0x88>)
 80038c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038cc:	6453      	str	r3, [r2, #68]	; 0x44
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_SPI_MspInit+0x88>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_SPI_MspInit+0x88>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <HAL_SPI_MspInit+0x88>)
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_SPI_MspInit+0x88>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80038f6:	2338      	movs	r3, #56	; 0x38
 80038f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003902:	2303      	movs	r3, #3
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003906:	2305      	movs	r3, #5
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	4805      	ldr	r0, [pc, #20]	; (8003928 <HAL_SPI_MspInit+0x8c>)
 8003912:	f000 ff47 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003916:	bf00      	nop
 8003918:	3728      	adds	r7, #40	; 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40013000 	.word	0x40013000
 8003924:	40023800 	.word	0x40023800
 8003928:	40020400 	.word	0x40020400

0800392c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d116      	bne.n	800396c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_TIM_PWM_MspInit+0x80>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_TIM_PWM_MspInit+0x80>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_TIM_PWM_MspInit+0x80>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	2100      	movs	r1, #0
 800395e:	201c      	movs	r0, #28
 8003960:	f000 fe7b 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003964:	201c      	movs	r0, #28
 8003966:	f000 fe94 	bl	8004692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800396a:	e01a      	b.n	80039a2 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_TIM_PWM_MspInit+0x84>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d115      	bne.n	80039a2 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_TIM_PWM_MspInit+0x80>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <HAL_TIM_PWM_MspInit+0x80>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_TIM_PWM_MspInit+0x80>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	201d      	movs	r0, #29
 8003998:	f000 fe5f 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800399c:	201d      	movs	r0, #29
 800399e:	f000 fe78 	bl	8004692 <HAL_NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40000400 	.word	0x40000400

080039b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_TIM_Base_MspInit+0x70>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_TIM_Base_MspInit+0x74>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_TIM_Base_MspInit+0x74>)
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_TIM_Base_MspInit+0x74>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80039e2:	e01a      	b.n	8003a1a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_TIM_Base_MspInit+0x78>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d115      	bne.n	8003a1a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_TIM_Base_MspInit+0x74>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <HAL_TIM_Base_MspInit+0x74>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <HAL_TIM_Base_MspInit+0x74>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2032      	movs	r0, #50	; 0x32
 8003a10:	f000 fe23 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a14:	2032      	movs	r0, #50	; 0x32
 8003a16:	f000 fe3c 	bl	8004692 <HAL_NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40000c00 	.word	0x40000c00

08003a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d11f      	bne.n	8003a92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a30      	ldr	r2, [pc, #192]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a80:	2301      	movs	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4825      	ldr	r0, [pc, #148]	; (8003b20 <HAL_TIM_MspPostInit+0xf0>)
 8003a8c:	f000 fe8a 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a90:	e040      	b.n	8003b14 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a23      	ldr	r2, [pc, #140]	; (8003b24 <HAL_TIM_MspPostInit+0xf4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d13b      	bne.n	8003b14 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003aa6:	f043 0302 	orr.w	r3, r3, #2
 8003aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_TIM_MspPostInit+0xec>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4619      	mov	r1, r3
 8003aee:	480e      	ldr	r0, [pc, #56]	; (8003b28 <HAL_TIM_MspPostInit+0xf8>)
 8003af0:	f000 fe58 	bl	80047a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003af4:	23c0      	movs	r3, #192	; 0xc0
 8003af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b04:	2302      	movs	r3, #2
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4807      	ldr	r0, [pc, #28]	; (8003b2c <HAL_TIM_MspPostInit+0xfc>)
 8003b10:	f000 fe48 	bl	80047a4 <HAL_GPIO_Init>
}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40020000 	.word	0x40020000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	40020800 	.word	0x40020800

08003b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <HardFault_Handler+0x4>

08003b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <MemManage_Handler+0x4>

08003b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b4e:	e7fe      	b.n	8003b4e <BusFault_Handler+0x4>

08003b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b54:	e7fe      	b.n	8003b54 <UsageFault_Handler+0x4>

08003b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
sdcard_systick_timerproc();
 8003b84:	f7fd f9e6 	bl	8000f54 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b88:	f000 f8b2 	bl	8003cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <TIM2_IRQHandler+0x10>)
 8003b96:	f002 f893 	bl	8005cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000918 	.word	0x20000918

08003ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <TIM3_IRQHandler+0x10>)
 8003baa:	f002 f889 	bl	8005cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200002fc 	.word	0x200002fc

08003bb8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <TIM5_IRQHandler+0x10>)
 8003bbe:	f002 f87f 	bl	8005cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200002bc 	.word	0x200002bc

08003bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <SystemInit+0x28>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <SystemInit+0x28>)
 8003bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <SystemInit+0x28>)
 8003be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003be6:	609a      	str	r2, [r3, #8]
#endif
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <Reset_Handler>:
 8003bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c30 <LoopFillZerobss+0x14>
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	e003      	b.n	8003c08 <LoopCopyDataInit>

08003c00 <CopyDataInit>:
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <LoopFillZerobss+0x18>)
 8003c02:	585b      	ldr	r3, [r3, r1]
 8003c04:	5043      	str	r3, [r0, r1]
 8003c06:	3104      	adds	r1, #4

08003c08 <LoopCopyDataInit>:
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <LoopFillZerobss+0x1c>)
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <LoopFillZerobss+0x20>)
 8003c0c:	1842      	adds	r2, r0, r1
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3f6      	bcc.n	8003c00 <CopyDataInit>
 8003c12:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <LoopFillZerobss+0x24>)
 8003c14:	e002      	b.n	8003c1c <LoopFillZerobss>

08003c16 <FillZerobss>:
 8003c16:	2300      	movs	r3, #0
 8003c18:	f842 3b04 	str.w	r3, [r2], #4

08003c1c <LoopFillZerobss>:
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <LoopFillZerobss+0x28>)
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3f9      	bcc.n	8003c16 <FillZerobss>
 8003c22:	f7ff ffd3 	bl	8003bcc <SystemInit>
 8003c26:	f002 fe99 	bl	800695c <__libc_init_array>
 8003c2a:	f7ff f9d3 	bl	8002fd4 <main>
 8003c2e:	4770      	bx	lr
 8003c30:	20020000 	.word	0x20020000
 8003c34:	08006a80 	.word	0x08006a80
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	20000014 	.word	0x20000014
 8003c40:	20000014 	.word	0x20000014
 8003c44:	20000960 	.word	0x20000960

08003c48 <ADC_IRQHandler>:
 8003c48:	e7fe      	b.n	8003c48 <ADC_IRQHandler>
	...

08003c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <HAL_Init+0x40>)
 8003c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_Init+0x40>)
 8003c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_Init+0x40>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <HAL_Init+0x40>)
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c74:	2003      	movs	r0, #3
 8003c76:	f000 fce5 	bl	8004644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f000 f808 	bl	8003c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c80:	f7ff fd40 	bl	8003704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023c00 	.word	0x40023c00

08003c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_InitTick+0x54>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_InitTick+0x58>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fcfd 	bl	80046ae <HAL_SYSTICK_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e00e      	b.n	8003cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d80a      	bhi.n	8003cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f000 fcc5 	bl	800465a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cd0:	4a06      	ldr	r2, [pc, #24]	; (8003cec <HAL_InitTick+0x5c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000008 	.word	0x20000008
 8003ce8:	20000010 	.word	0x20000010
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_IncTick+0x20>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_IncTick+0x24>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_IncTick+0x24>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000010 	.word	0x20000010
 8003d14:	2000095c 	.word	0x2000095c

08003d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_GetTick+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	2000095c 	.word	0x2000095c

08003d30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e033      	b.n	8003dae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fd00 	bl	8003754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d76:	f023 0302 	bic.w	r3, r3, #2
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa92 	bl	80042ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d9e:	e001      	b.n	8003da4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_Start+0x1a>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0a5      	b.n	8003f1e <HAL_ADC_Start+0x166>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d018      	beq.n	8003e1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003df8:	4b4c      	ldr	r3, [pc, #304]	; (8003f2c <HAL_ADC_Start+0x174>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <HAL_ADC_Start+0x178>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0c9a      	lsrs	r2, r3, #18
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e0c:	e002      	b.n	8003e14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f9      	bne.n	8003e0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d179      	bne.n	8003f1c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d106      	bne.n	8003e76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f023 0206 	bic.w	r2, r3, #6
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
 8003e74:	e002      	b.n	8003e7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_ADC_Start+0x17c>)
 8003e86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d12a      	bne.n	8003ef4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <HAL_ADC_Start+0x180>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d015      	beq.n	8003ed4 <HAL_ADC_Start+0x11c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_ADC_Start+0x184>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d105      	bne.n	8003ebe <HAL_ADC_Start+0x106>
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_ADC_Start+0x17c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_ADC_Start+0x188>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d129      	bne.n	8003f1c <HAL_ADC_Start+0x164>
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_ADC_Start+0x17c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2b0f      	cmp	r3, #15
 8003ed2:	d823      	bhi.n	8003f1c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11c      	bne.n	8003f1c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	e013      	b.n	8003f1c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0f      	ldr	r2, [pc, #60]	; (8003f38 <HAL_ADC_Start+0x180>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10e      	bne.n	8003f1c <HAL_ADC_Start+0x164>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d107      	bne.n	8003f1c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f1a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000008 	.word	0x20000008
 8003f30:	431bde83 	.word	0x431bde83
 8003f34:	40012300 	.word	0x40012300
 8003f38:	40012000 	.word	0x40012000
 8003f3c:	40012100 	.word	0x40012100
 8003f40:	40012200 	.word	0x40012200

08003f44 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d113      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f70:	d10b      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0220 	orr.w	r2, r3, #32
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e05c      	b.n	8004044 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f8a:	f7ff fec5 	bl	8003d18 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f90:	e01a      	b.n	8003fc8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d016      	beq.n	8003fc8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_ADC_PollForConversion+0x6c>
 8003fa0:	f7ff feba 	bl	8003d18 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d20b      	bcs.n	8003fc8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e03d      	b.n	8004044 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d1dd      	bne.n	8003f92 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0212 	mvn.w	r2, #18
 8003fde:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d123      	bne.n	8004042 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11f      	bne.n	8004042 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800401a:	2b00      	cmp	r3, #0
 800401c:	d111      	bne.n	8004042 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e105      	b.n	8004290 <HAL_ADC_ConfigChannel+0x228>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b09      	cmp	r3, #9
 8004092:	d925      	bls.n	80040e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68d9      	ldr	r1, [r3, #12]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	3b1e      	subs	r3, #30
 80040aa:	2207      	movs	r2, #7
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43da      	mvns	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	400a      	ands	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4403      	add	r3, r0
 80040d2:	3b1e      	subs	r3, #30
 80040d4:	409a      	lsls	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	e022      	b.n	8004126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	2207      	movs	r2, #7
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	400a      	ands	r2, r1
 8004102:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6919      	ldr	r1, [r3, #16]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	4618      	mov	r0, r3
 8004116:	4603      	mov	r3, r0
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4403      	add	r3, r0
 800411c:	409a      	lsls	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d824      	bhi.n	8004178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	3b05      	subs	r3, #5
 8004140:	221f      	movs	r2, #31
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	400a      	ands	r2, r1
 800414e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4618      	mov	r0, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	3b05      	subs	r3, #5
 800416a:	fa00 f203 	lsl.w	r2, r0, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	635a      	str	r2, [r3, #52]	; 0x34
 8004176:	e04c      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d824      	bhi.n	80041ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	3b23      	subs	r3, #35	; 0x23
 8004192:	221f      	movs	r2, #31
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43da      	mvns	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	400a      	ands	r2, r1
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	3b23      	subs	r3, #35	; 0x23
 80041bc:	fa00 f203 	lsl.w	r2, r0, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
 80041c8:	e023      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b41      	subs	r3, #65	; 0x41
 80041dc:	221f      	movs	r2, #31
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	400a      	ands	r2, r1
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	3b41      	subs	r3, #65	; 0x41
 8004206:	fa00 f203 	lsl.w	r2, r0, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_ADC_ConfigChannel+0x234>)
 8004214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_ADC_ConfigChannel+0x238>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d109      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x1cc>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b12      	cmp	r3, #18
 8004226:	d105      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <HAL_ADC_ConfigChannel+0x238>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d123      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x21e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d003      	beq.n	800424e <HAL_ADC_ConfigChannel+0x1e6>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b11      	cmp	r3, #17
 800424c:	d11b      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d111      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <HAL_ADC_ConfigChannel+0x23c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <HAL_ADC_ConfigChannel+0x240>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0c9a      	lsrs	r2, r3, #18
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004278:	e002      	b.n	8004280 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3b01      	subs	r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f9      	bne.n	800427a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012300 	.word	0x40012300
 80042a0:	40012000 	.word	0x40012000
 80042a4:	20000008 	.word	0x20000008
 80042a8:	431bde83 	.word	0x431bde83

080042ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b4:	4b79      	ldr	r3, [pc, #484]	; (800449c <ADC_Init+0x1f0>)
 80042b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a58      	ldr	r2, [pc, #352]	; (80044a0 <ADC_Init+0x1f4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	e00f      	b.n	80043aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0202 	bic.w	r2, r2, #2
 80043b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7e1b      	ldrb	r3, [r3, #24]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	3b01      	subs	r3, #1
 8004404:	035a      	lsls	r2, r3, #13
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	e007      	b.n	8004420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	3b01      	subs	r3, #1
 800443c:	051a      	lsls	r2, r3, #20
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004462:	025a      	lsls	r2, r3, #9
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	029a      	lsls	r2, r3, #10
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012300 	.word	0x40012300
 80044a0:	0f000001 	.word	0x0f000001

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	60d3      	str	r3, [r2, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4907      	ldr	r1, [pc, #28]	; (8004540 <__NVIC_EnableIRQ+0x38>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db0a      	blt.n	800456e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	490c      	ldr	r1, [pc, #48]	; (8004590 <__NVIC_SetPriority+0x4c>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	0112      	lsls	r2, r2, #4
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	440b      	add	r3, r1
 8004568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800456c:	e00a      	b.n	8004584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4908      	ldr	r1, [pc, #32]	; (8004594 <__NVIC_SetPriority+0x50>)
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	3b04      	subs	r3, #4
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	440b      	add	r3, r1
 8004582:	761a      	strb	r2, [r3, #24]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000e100 	.word	0xe000e100
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f1c3 0307 	rsb	r3, r3, #7
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf28      	it	cs
 80045b6:	2304      	movcs	r3, #4
 80045b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3304      	adds	r3, #4
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d902      	bls.n	80045c8 <NVIC_EncodePriority+0x30>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3b03      	subs	r3, #3
 80045c6:	e000      	b.n	80045ca <NVIC_EncodePriority+0x32>
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	401a      	ands	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43d9      	mvns	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	4313      	orrs	r3, r2
         );
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004610:	d301      	bcc.n	8004616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004612:	2301      	movs	r3, #1
 8004614:	e00f      	b.n	8004636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <SysTick_Config+0x40>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461e:	210f      	movs	r1, #15
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	f7ff ff8e 	bl	8004544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <SysTick_Config+0x40>)
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <SysTick_Config+0x40>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010

08004644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff29 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	4603      	mov	r3, r0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800466c:	f7ff ff3e 	bl	80044ec <__NVIC_GetPriorityGrouping>
 8004670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	6978      	ldr	r0, [r7, #20]
 8004678:	f7ff ff8e 	bl	8004598 <NVIC_EncodePriority>
 800467c:	4602      	mov	r2, r0
 800467e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff5d 	bl	8004544 <__NVIC_SetPriority>
}
 800468a:	bf00      	nop
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800469c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff31 	bl	8004508 <__NVIC_EnableIRQ>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ffa2 	bl	8004600 <SysTick_Config>
 80046bc:	4603      	mov	r3, r0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e014      	b.n	8004702 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff f893 	bl	8003814 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	795b      	ldrb	r3, [r3, #5]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_DAC_ConfigChannel+0x20>
 8004726:	2302      	movs	r3, #2
 8004728:	e036      	b.n	8004798 <HAL_DAC_ConfigChannel+0x8e>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2202      	movs	r2, #2
 8004734:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800473e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4013      	ands	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6819      	ldr	r1, [r3, #0]
 8004778:	22c0      	movs	r2, #192	; 0xc0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43da      	mvns	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	400a      	ands	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e16b      	b.n	8004a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c0:	2201      	movs	r2, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	f040 815a 	bne.w	8004a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d00b      	beq.n	80047fe <HAL_GPIO_Init+0x5a>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d007      	beq.n	80047fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047f2:	2b11      	cmp	r3, #17
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b12      	cmp	r3, #18
 80047fc:	d130      	bne.n	8004860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004834:	2201      	movs	r2, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0201 	and.w	r2, r3, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	2203      	movs	r2, #3
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0xfc>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b12      	cmp	r3, #18
 800489e:	d123      	bne.n	80048e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	220f      	movs	r2, #15
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	08da      	lsrs	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3208      	adds	r2, #8
 80048e2:	69b9      	ldr	r1, [r7, #24]
 80048e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	2203      	movs	r2, #3
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0203 	and.w	r2, r3, #3
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80b4 	beq.w	8004a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <HAL_GPIO_Init+0x308>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a5e      	ldr	r2, [pc, #376]	; (8004aac <HAL_GPIO_Init+0x308>)
 8004934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b5c      	ldr	r3, [pc, #368]	; (8004aac <HAL_GPIO_Init+0x308>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004946:	4a5a      	ldr	r2, [pc, #360]	; (8004ab0 <HAL_GPIO_Init+0x30c>)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3302      	adds	r3, #2
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a51      	ldr	r2, [pc, #324]	; (8004ab4 <HAL_GPIO_Init+0x310>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d02b      	beq.n	80049ca <HAL_GPIO_Init+0x226>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a50      	ldr	r2, [pc, #320]	; (8004ab8 <HAL_GPIO_Init+0x314>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d025      	beq.n	80049c6 <HAL_GPIO_Init+0x222>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a4f      	ldr	r2, [pc, #316]	; (8004abc <HAL_GPIO_Init+0x318>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01f      	beq.n	80049c2 <HAL_GPIO_Init+0x21e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a4e      	ldr	r2, [pc, #312]	; (8004ac0 <HAL_GPIO_Init+0x31c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d019      	beq.n	80049be <HAL_GPIO_Init+0x21a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4d      	ldr	r2, [pc, #308]	; (8004ac4 <HAL_GPIO_Init+0x320>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_GPIO_Init+0x216>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4c      	ldr	r2, [pc, #304]	; (8004ac8 <HAL_GPIO_Init+0x324>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00d      	beq.n	80049b6 <HAL_GPIO_Init+0x212>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4b      	ldr	r2, [pc, #300]	; (8004acc <HAL_GPIO_Init+0x328>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <HAL_GPIO_Init+0x20e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4a      	ldr	r2, [pc, #296]	; (8004ad0 <HAL_GPIO_Init+0x32c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_GPIO_Init+0x20a>
 80049aa:	2307      	movs	r3, #7
 80049ac:	e00e      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049ae:	2308      	movs	r3, #8
 80049b0:	e00c      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049b2:	2306      	movs	r3, #6
 80049b4:	e00a      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049b6:	2305      	movs	r3, #5
 80049b8:	e008      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049ba:	2304      	movs	r3, #4
 80049bc:	e006      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049be:	2303      	movs	r3, #3
 80049c0:	e004      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e002      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_GPIO_Init+0x228>
 80049ca:	2300      	movs	r3, #0
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	f002 0203 	and.w	r2, r2, #3
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	4093      	lsls	r3, r2
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049dc:	4934      	ldr	r1, [pc, #208]	; (8004ab0 <HAL_GPIO_Init+0x30c>)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049ea:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a0e:	4a31      	ldr	r2, [pc, #196]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a14:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a38:	4a26      	ldr	r2, [pc, #152]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a3e:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a68:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a8c:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <HAL_GPIO_Init+0x330>)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	f67f ae90 	bls.w	80047c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3724      	adds	r7, #36	; 0x24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40013800 	.word	0x40013800
 8004ab4:	40020000 	.word	0x40020000
 8004ab8:	40020400 	.word	0x40020400
 8004abc:	40020800 	.word	0x40020800
 8004ac0:	40020c00 	.word	0x40020c00
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40021400 	.word	0x40021400
 8004acc:	40021800 	.word	0x40021800
 8004ad0:	40021c00 	.word	0x40021c00
 8004ad4:	40013c00 	.word	0x40013c00

08004ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae8:	787b      	ldrb	r3, [r7, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004af4:	e003      	b.n	8004afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	041a      	lsls	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	619a      	str	r2, [r3, #24]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e25b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d075      	beq.n	8004c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	4ba3      	ldr	r3, [pc, #652]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4ba0      	ldr	r3, [pc, #640]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b9d      	ldr	r3, [pc, #628]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b99      	ldr	r3, [pc, #612]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05b      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d157      	bne.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e236      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x74>
 8004b72:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a90      	ldr	r2, [pc, #576]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e01d      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x98>
 8004b8a:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a8a      	ldr	r2, [pc, #552]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a87      	ldr	r2, [pc, #540]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004ba4:	4b84      	ldr	r3, [pc, #528]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a83      	ldr	r2, [pc, #524]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b81      	ldr	r3, [pc, #516]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a80      	ldr	r2, [pc, #512]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7ff f8a8 	bl	8003d18 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7ff f8a4 	bl	8003d18 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1fb      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b76      	ldr	r3, [pc, #472]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0xc0>
 8004bea:	e014      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7ff f894 	bl	8003d18 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7ff f890 	bl	8003d18 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1e7      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	4b6c      	ldr	r3, [pc, #432]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xe8>
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d063      	beq.n	8004cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c22:	4b65      	ldr	r3, [pc, #404]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b62      	ldr	r3, [pc, #392]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d116      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1bb      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4952      	ldr	r1, [pc, #328]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	e03a      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7ff f849 	bl	8003d18 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7ff f845 	bl	8003d18 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e19c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	4b46      	ldr	r3, [pc, #280]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4940      	ldr	r1, [pc, #256]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7ff f828 	bl	8003d18 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7ff f824 	bl	8003d18 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e17b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d030      	beq.n	8004d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7ff f808 	bl	8003d18 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7ff f804 	bl	8003d18 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e15b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x200>
 8004d2a:	e015      	b.n	8004d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fe fff1 	bl	8003d18 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fe ffed 	bl	8003d18 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e144      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a0 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fe ffb3 	bl	8003d18 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e011      	b.n	8004dda <HAL_RCC_OscConfig+0x2ce>
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	42470000 	.word	0x42470000
 8004dc0:	42470e80 	.word	0x42470e80
 8004dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc8:	f7fe ffa6 	bl	8003d18 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0fd      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b81      	ldr	r3, [pc, #516]	; (8004fe0 <HAL_RCC_OscConfig+0x4d4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2f0>
 8004dee:	4b7d      	ldr	r3, [pc, #500]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a7c      	ldr	r2, [pc, #496]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfa:	e01c      	b.n	8004e36 <HAL_RCC_OscConfig+0x32a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x312>
 8004e04:	4b77      	ldr	r3, [pc, #476]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a76      	ldr	r2, [pc, #472]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	4b74      	ldr	r3, [pc, #464]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a73      	ldr	r2, [pc, #460]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	e00b      	b.n	8004e36 <HAL_RCC_OscConfig+0x32a>
 8004e1e:	4b71      	ldr	r3, [pc, #452]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a70      	ldr	r2, [pc, #448]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	4b6e      	ldr	r3, [pc, #440]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	4a6d      	ldr	r2, [pc, #436]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3e:	f7fe ff6b 	bl	8003d18 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fe ff67 	bl	8003d18 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0bc      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ee      	beq.n	8004e46 <HAL_RCC_OscConfig+0x33a>
 8004e68:	e014      	b.n	8004e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe ff55 	bl	8003d18 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fe ff51 	bl	8003d18 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0a6      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e88:	4b56      	ldr	r3, [pc, #344]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ee      	bne.n	8004e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9a:	4b52      	ldr	r3, [pc, #328]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a51      	ldr	r2, [pc, #324]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8092 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eb0:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d05c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d141      	bne.n	8004f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec4:	4b48      	ldr	r3, [pc, #288]	; (8004fe8 <HAL_RCC_OscConfig+0x4dc>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fe ff25 	bl	8003d18 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fe ff21 	bl	8003d18 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e078      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	061b      	lsls	r3, r3, #24
 8004f14:	4933      	ldr	r1, [pc, #204]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1a:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <HAL_RCC_OscConfig+0x4dc>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe fefa 	bl	8003d18 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fe fef6 	bl	8003d18 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e04d      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b2a      	ldr	r3, [pc, #168]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x41c>
 8004f46:	e045      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_RCC_OscConfig+0x4dc>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fe fee3 	bl	8003d18 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fe fedf 	bl	8003d18 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e036      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x44a>
 8004f74:	e02e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e029      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f82:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <HAL_RCC_OscConfig+0x4d8>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d11c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d115      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d106      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40007000 	.word	0x40007000
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	42470060 	.word	0x42470060

08004fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0cc      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b68      	ldr	r3, [pc, #416]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d90c      	bls.n	8005028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b63      	ldr	r3, [pc, #396]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0b8      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005040:	4b59      	ldr	r3, [pc, #356]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a58      	ldr	r2, [pc, #352]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005064:	4b50      	ldr	r3, [pc, #320]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	494d      	ldr	r1, [pc, #308]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d044      	beq.n	800510c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d119      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e06f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e067      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b37      	ldr	r3, [pc, #220]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4934      	ldr	r1, [pc, #208]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050dc:	f7fe fe1c 	bl	8003d18 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fe fe18 	bl	8003d18 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e04f      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d20c      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e032      	b.n	800519a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005140:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4916      	ldr	r1, [pc, #88]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	490e      	ldr	r1, [pc, #56]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005172:	f000 f821 	bl	80051b8 <HAL_RCC_GetSysClockFreq>
 8005176:	4601      	mov	r1, r0
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	5cd3      	ldrb	r3, [r2, r3]
 8005186:	fa21 f303 	lsr.w	r3, r1, r3
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fd7c 	bl	8003c90 <HAL_InitTick>

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023c00 	.word	0x40023c00
 80051a8:	40023800 	.word	0x40023800
 80051ac:	08006a60 	.word	0x08006a60
 80051b0:	20000008 	.word	0x20000008
 80051b4:	2000000c 	.word	0x2000000c

080051b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	2300      	movs	r3, #0
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ce:	4b63      	ldr	r3, [pc, #396]	; (800535c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d007      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0x32>
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d008      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x38>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 80b4 	bne.w	800534c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e4:	4b5e      	ldr	r3, [pc, #376]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051e6:	60bb      	str	r3, [r7, #8]
       break;
 80051e8:	e0b3      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ea:	4b5e      	ldr	r3, [pc, #376]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051ec:	60bb      	str	r3, [r7, #8]
      break;
 80051ee:	e0b0      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f0:	4b5a      	ldr	r3, [pc, #360]	; (800535c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fa:	4b58      	ldr	r3, [pc, #352]	; (800535c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d04a      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005206:	4b55      	ldr	r3, [pc, #340]	; (800535c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	ea03 0501 	and.w	r5, r3, r1
 800521c:	ea04 0602 	and.w	r6, r4, r2
 8005220:	4629      	mov	r1, r5
 8005222:	4632      	mov	r2, r6
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	0154      	lsls	r4, r2, #5
 800522e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005232:	014b      	lsls	r3, r1, #5
 8005234:	4619      	mov	r1, r3
 8005236:	4622      	mov	r2, r4
 8005238:	1b49      	subs	r1, r1, r5
 800523a:	eb62 0206 	sbc.w	r2, r2, r6
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	0194      	lsls	r4, r2, #6
 8005248:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800524c:	018b      	lsls	r3, r1, #6
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	eb64 0402 	sbc.w	r4, r4, r2
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	00e2      	lsls	r2, r4, #3
 800525e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005262:	00d9      	lsls	r1, r3, #3
 8005264:	460b      	mov	r3, r1
 8005266:	4614      	mov	r4, r2
 8005268:	195b      	adds	r3, r3, r5
 800526a:	eb44 0406 	adc.w	r4, r4, r6
 800526e:	f04f 0100 	mov.w	r1, #0
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	0262      	lsls	r2, r4, #9
 8005278:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800527c:	0259      	lsls	r1, r3, #9
 800527e:	460b      	mov	r3, r1
 8005280:	4614      	mov	r4, r2
 8005282:	4618      	mov	r0, r3
 8005284:	4621      	mov	r1, r4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	461a      	mov	r2, r3
 800528e:	4623      	mov	r3, r4
 8005290:	f7fa ff9a 	bl	80001c8 <__aeabi_uldivmod>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	e049      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529c:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	099b      	lsrs	r3, r3, #6
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	ea03 0501 	and.w	r5, r3, r1
 80052b2:	ea04 0602 	and.w	r6, r4, r2
 80052b6:	4629      	mov	r1, r5
 80052b8:	4632      	mov	r2, r6
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	f04f 0400 	mov.w	r4, #0
 80052c2:	0154      	lsls	r4, r2, #5
 80052c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052c8:	014b      	lsls	r3, r1, #5
 80052ca:	4619      	mov	r1, r3
 80052cc:	4622      	mov	r2, r4
 80052ce:	1b49      	subs	r1, r1, r5
 80052d0:	eb62 0206 	sbc.w	r2, r2, r6
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	f04f 0400 	mov.w	r4, #0
 80052dc:	0194      	lsls	r4, r2, #6
 80052de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052e2:	018b      	lsls	r3, r1, #6
 80052e4:	1a5b      	subs	r3, r3, r1
 80052e6:	eb64 0402 	sbc.w	r4, r4, r2
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	00e2      	lsls	r2, r4, #3
 80052f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052f8:	00d9      	lsls	r1, r3, #3
 80052fa:	460b      	mov	r3, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	195b      	adds	r3, r3, r5
 8005300:	eb44 0406 	adc.w	r4, r4, r6
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	02a2      	lsls	r2, r4, #10
 800530e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005312:	0299      	lsls	r1, r3, #10
 8005314:	460b      	mov	r3, r1
 8005316:	4614      	mov	r4, r2
 8005318:	4618      	mov	r0, r3
 800531a:	4621      	mov	r1, r4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f04f 0400 	mov.w	r4, #0
 8005322:	461a      	mov	r2, r3
 8005324:	4623      	mov	r3, r4
 8005326:	f7fa ff4f 	bl	80001c8 <__aeabi_uldivmod>
 800532a:	4603      	mov	r3, r0
 800532c:	460c      	mov	r4, r1
 800532e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	60bb      	str	r3, [r7, #8]
      break;
 800534a:	e002      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800534e:	60bb      	str	r3, [r7, #8]
      break;
 8005350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005352:	68bb      	ldr	r3, [r7, #8]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800535c:	40023800 	.word	0x40023800
 8005360:	00f42400 	.word	0x00f42400
 8005364:	007a1200 	.word	0x007a1200

08005368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e056      	b.n	8005428 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fe fa81 	bl	800389c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	ea42 0103 	orr.w	r1, r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	f003 0104 	and.w	r1, r3, #4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_SPI_Transmit+0x22>
 800544e:	2302      	movs	r3, #2
 8005450:	e11e      	b.n	8005690 <HAL_SPI_Transmit+0x260>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800545a:	f7fe fc5d 	bl	8003d18 <HAL_GetTick>
 800545e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d002      	beq.n	8005476 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005470:	2302      	movs	r3, #2
 8005472:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005474:	e103      	b.n	800567e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x52>
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005486:	e0fa      	b.n	800567e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2203      	movs	r2, #3
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ce:	d107      	bne.n	80054e0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d007      	beq.n	80054fe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005506:	d14b      	bne.n	80055a0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_SPI_Transmit+0xe6>
 8005510:	8afb      	ldrh	r3, [r7, #22]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d13e      	bne.n	8005594 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800553a:	e02b      	b.n	8005594 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d112      	bne.n	8005570 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	1c9a      	adds	r2, r3, #2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	86da      	strh	r2, [r3, #54]	; 0x36
 800556e:	e011      	b.n	8005594 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005570:	f7fe fbd2 	bl	8003d18 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d803      	bhi.n	8005588 <HAL_SPI_Transmit+0x158>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d102      	bne.n	800558e <HAL_SPI_Transmit+0x15e>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005592:	e074      	b.n	800567e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ce      	bne.n	800553c <HAL_SPI_Transmit+0x10c>
 800559e:	e04c      	b.n	800563a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_SPI_Transmit+0x17e>
 80055a8:	8afb      	ldrh	r3, [r7, #22]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d140      	bne.n	8005630 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055d4:	e02c      	b.n	8005630 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d113      	bne.n	800560c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	86da      	strh	r2, [r3, #54]	; 0x36
 800560a:	e011      	b.n	8005630 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560c:	f7fe fb84 	bl	8003d18 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d803      	bhi.n	8005624 <HAL_SPI_Transmit+0x1f4>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d102      	bne.n	800562a <HAL_SPI_Transmit+0x1fa>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d102      	bne.n	8005630 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800562e:	e026      	b.n	800567e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cd      	bne.n	80055d6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fa44 	bl	8005acc <SPI_EndRxTxTransaction>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e000      	b.n	800567e <HAL_SPI_Transmit+0x24e>
  }

error:
 800567c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800568e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08c      	sub	sp, #48	; 0x30
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056a6:	2301      	movs	r3, #1
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_SPI_TransmitReceive+0x26>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e18a      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x33c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c6:	f7fe fb27 	bl	8003d18 <HAL_GetTick>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056dc:	887b      	ldrh	r3, [r7, #2]
 80056de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d00f      	beq.n	8005708 <HAL_SPI_TransmitReceive+0x70>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ee:	d107      	bne.n	8005700 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <HAL_SPI_TransmitReceive+0x68>
 80056f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d003      	beq.n	8005708 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005700:	2302      	movs	r3, #2
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005706:	e15b      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_SPI_TransmitReceive+0x82>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_TransmitReceive+0x82>
 8005714:	887b      	ldrh	r3, [r7, #2]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005720:	e14e      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b04      	cmp	r3, #4
 800572c:	d003      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2205      	movs	r2, #5
 8005732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	887a      	ldrh	r2, [r7, #2]
 800574c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d007      	beq.n	800578a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d178      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x10a>
 800579c:	8b7b      	ldrh	r3, [r7, #26]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d166      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c6:	e053      	b.n	8005870 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d11b      	bne.n	800580e <HAL_SPI_TransmitReceive+0x176>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d016      	beq.n	800580e <HAL_SPI_TransmitReceive+0x176>
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d113      	bne.n	800580e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d119      	bne.n	8005850 <HAL_SPI_TransmitReceive+0x1b8>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d014      	beq.n	8005850 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	b292      	uxth	r2, r2
 8005832:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	1c9a      	adds	r2, r3, #2
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800584c:	2301      	movs	r3, #1
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005850:	f7fe fa62 	bl	8003d18 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800585c:	429a      	cmp	r2, r3
 800585e:	d807      	bhi.n	8005870 <HAL_SPI_TransmitReceive+0x1d8>
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d003      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800586e:	e0a7      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1a6      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x130>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1a1      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x130>
 8005884:	e07c      	b.n	8005980 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x1fc>
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d16b      	bne.n	800596c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ba:	e057      	b.n	800596c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d11c      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x26c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d017      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x26c>
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d114      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d119      	bne.n	8005946 <HAL_SPI_TransmitReceive+0x2ae>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d014      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005942:	2301      	movs	r3, #1
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005946:	f7fe f9e7 	bl	8003d18 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005952:	429a      	cmp	r2, r3
 8005954:	d803      	bhi.n	800595e <HAL_SPI_TransmitReceive+0x2c6>
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d102      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x2cc>
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d103      	bne.n	800596c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800596a:	e029      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1a2      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x224>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d19d      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f8a1 	bl	8005acc <SPI_EndRxTxTransaction>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d006      	beq.n	800599e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800599c:	e010      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	e000      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3730      	adds	r7, #48	; 0x30
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ea:	b2db      	uxtb	r3, r3
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a08:	e04c      	b.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d048      	beq.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a12:	f7fe f981 	bl	8003d18 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d902      	bls.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13d      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a40:	d111      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4a:	d004      	beq.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a54:	d107      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6e:	d10f      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e00f      	b.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d1a3      	bne.n	8005a0a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <SPI_EndRxTxTransaction+0x7c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <SPI_EndRxTxTransaction+0x80>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0d5b      	lsrs	r3, r3, #21
 8005ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af6:	d112      	bne.n	8005b1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff ff78 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e00f      	b.n	8005b3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b34:	2b80      	cmp	r3, #128	; 0x80
 8005b36:	d0f2      	beq.n	8005b1e <SPI_EndRxTxTransaction+0x52>
 8005b38:	e000      	b.n	8005b3c <SPI_EndRxTxTransaction+0x70>
        break;
 8005b3a:	bf00      	nop
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000008 	.word	0x20000008
 8005b4c:	165e9f81 	.word	0x165e9f81

08005b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e01d      	b.n	8005b9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fd ff1c 	bl	80039b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fb44 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d007      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e01d      	b.n	8005c3c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fd fe89 	bl	800392c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f000 faf5 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fdca 	bl	80067f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <HAL_TIM_PWM_Start+0x74>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_TIM_PWM_Start+0x2c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a14      	ldr	r2, [pc, #80]	; (8005cbc <HAL_TIM_PWM_Start+0x78>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIM_PWM_Start+0x30>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_TIM_PWM_Start+0x32>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d007      	beq.n	8005cac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400

08005cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d122      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d11b      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0202 	mvn.w	r2, #2
 8005cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa6b 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005d08:	e005      	b.n	8005d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa5d 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa6e 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d122      	bne.n	8005d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d11b      	bne.n	8005d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0204 	mvn.w	r2, #4
 8005d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa41 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005d5c:	e005      	b.n	8005d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa33 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa44 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d122      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d11b      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0208 	mvn.w	r2, #8
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa17 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa09 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa1a 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d122      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d11b      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0210 	mvn.w	r2, #16
 8005de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2208      	movs	r2, #8
 8005dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9ed 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f9df 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f9f0 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0201 	mvn.w	r2, #1
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fd f87c 	bl	8002f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5c:	2b80      	cmp	r3, #128	; 0x80
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fd6c 	bl	8006948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f9b5 	bl	8006206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d10e      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d107      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0220 	mvn.w	r2, #32
 8005ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fd36 	bl	8006934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e0b4      	b.n	8006054 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	f200 809f 	bhi.w	8006040 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	08006041 	.word	0x08006041
 8005f10:	08006041 	.word	0x08006041
 8005f14:	08006041 	.word	0x08006041
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	08006041 	.word	0x08006041
 8005f20:	08006041 	.word	0x08006041
 8005f24:	08006041 	.word	0x08006041
 8005f28:	08005fbf 	.word	0x08005fbf
 8005f2c:	08006041 	.word	0x08006041
 8005f30:	08006041 	.word	0x08006041
 8005f34:	08006041 	.word	0x08006041
 8005f38:	08005fff 	.word	0x08005fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fa0a 	bl	800635c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0208 	orr.w	r2, r2, #8
 8005f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0204 	bic.w	r2, r2, #4
 8005f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6999      	ldr	r1, [r3, #24]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	619a      	str	r2, [r3, #24]
      break;
 8005f7a:	e062      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fa5a 	bl	800643c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6999      	ldr	r1, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	619a      	str	r2, [r3, #24]
      break;
 8005fbc:	e041      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 faaf 	bl	8006528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0208 	orr.w	r2, r2, #8
 8005fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0204 	bic.w	r2, r2, #4
 8005fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69d9      	ldr	r1, [r3, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	61da      	str	r2, [r3, #28]
      break;
 8005ffc:	e021      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fb03 	bl	8006610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69d9      	ldr	r1, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	021a      	lsls	r2, r3, #8
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	61da      	str	r2, [r3, #28]
      break;
 800603e:	e000      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006040:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_TIM_ConfigClockSource+0x18>
 8006070:	2302      	movs	r3, #2
 8006072:	e0a6      	b.n	80061c2 <HAL_TIM_ConfigClockSource+0x166>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800609a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d067      	beq.n	800617c <HAL_TIM_ConfigClockSource+0x120>
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d80b      	bhi.n	80060c8 <HAL_TIM_ConfigClockSource+0x6c>
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d073      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x140>
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d802      	bhi.n	80060be <HAL_TIM_ConfigClockSource+0x62>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d06f      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060bc:	e078      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d06c      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x140>
 80060c2:	2b30      	cmp	r3, #48	; 0x30
 80060c4:	d06a      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060c6:	e073      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060c8:	2b70      	cmp	r3, #112	; 0x70
 80060ca:	d00d      	beq.n	80060e8 <HAL_TIM_ConfigClockSource+0x8c>
 80060cc:	2b70      	cmp	r3, #112	; 0x70
 80060ce:	d804      	bhi.n	80060da <HAL_TIM_ConfigClockSource+0x7e>
 80060d0:	2b50      	cmp	r3, #80	; 0x50
 80060d2:	d033      	beq.n	800613c <HAL_TIM_ConfigClockSource+0xe0>
 80060d4:	2b60      	cmp	r3, #96	; 0x60
 80060d6:	d041      	beq.n	800615c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060d8:	e06a      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060de:	d066      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x152>
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d017      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060e6:	e063      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6899      	ldr	r1, [r3, #8]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f000 fb5a 	bl	80067b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800610a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]
      break;
 8006114:	e04c      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6899      	ldr	r1, [r3, #8]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f000 fb43 	bl	80067b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006138:	609a      	str	r2, [r3, #8]
      break;
 800613a:	e039      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	461a      	mov	r2, r3
 800614a:	f000 fab7 	bl	80066bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2150      	movs	r1, #80	; 0x50
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fb10 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 800615a:	e029      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	461a      	mov	r2, r3
 800616a:	f000 fad6 	bl	800671a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2160      	movs	r1, #96	; 0x60
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fb00 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 800617a:	e019      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	461a      	mov	r2, r3
 800618a:	f000 fa97 	bl	80066bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2140      	movs	r1, #64	; 0x40
 8006194:	4618      	mov	r0, r3
 8006196:	f000 faf0 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 800619a:	e009      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f000 fae7 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 80061ac:	e000      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a40      	ldr	r2, [pc, #256]	; (8006330 <TIM_Base_SetConfig+0x114>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3d      	ldr	r2, [pc, #244]	; (8006334 <TIM_Base_SetConfig+0x118>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3c      	ldr	r2, [pc, #240]	; (8006338 <TIM_Base_SetConfig+0x11c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a3b      	ldr	r2, [pc, #236]	; (800633c <TIM_Base_SetConfig+0x120>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a3a      	ldr	r2, [pc, #232]	; (8006340 <TIM_Base_SetConfig+0x124>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2f      	ldr	r2, [pc, #188]	; (8006330 <TIM_Base_SetConfig+0x114>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d027      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2c      	ldr	r2, [pc, #176]	; (8006334 <TIM_Base_SetConfig+0x118>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d023      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2b      	ldr	r2, [pc, #172]	; (8006338 <TIM_Base_SetConfig+0x11c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2a      	ldr	r2, [pc, #168]	; (800633c <TIM_Base_SetConfig+0x120>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a29      	ldr	r2, [pc, #164]	; (8006340 <TIM_Base_SetConfig+0x124>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d017      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a28      	ldr	r2, [pc, #160]	; (8006344 <TIM_Base_SetConfig+0x128>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <TIM_Base_SetConfig+0x12c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a26      	ldr	r2, [pc, #152]	; (800634c <TIM_Base_SetConfig+0x130>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a25      	ldr	r2, [pc, #148]	; (8006350 <TIM_Base_SetConfig+0x134>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a24      	ldr	r2, [pc, #144]	; (8006354 <TIM_Base_SetConfig+0x138>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a23      	ldr	r2, [pc, #140]	; (8006358 <TIM_Base_SetConfig+0x13c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <TIM_Base_SetConfig+0x114>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0xf8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <TIM_Base_SetConfig+0x124>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800
 8006350:	40001800 	.word	0x40001800
 8006354:	40001c00 	.word	0x40001c00
 8006358:	40002000 	.word	0x40002000

0800635c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f023 0302 	bic.w	r3, r3, #2
 80063a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a20      	ldr	r2, [pc, #128]	; (8006434 <TIM_OC1_SetConfig+0xd8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC1_SetConfig+0x64>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a1f      	ldr	r2, [pc, #124]	; (8006438 <TIM_OC1_SetConfig+0xdc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10c      	bne.n	80063da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0308 	bic.w	r3, r3, #8
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <TIM_OC1_SetConfig+0xd8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC1_SetConfig+0x8e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <TIM_OC1_SetConfig+0xdc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d111      	bne.n	800640e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	621a      	str	r2, [r3, #32]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400

0800643c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0210 	bic.w	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0320 	bic.w	r3, r3, #32
 8006486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a22      	ldr	r2, [pc, #136]	; (8006520 <TIM_OC2_SetConfig+0xe4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC2_SetConfig+0x68>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <TIM_OC2_SetConfig+0xe8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d10d      	bne.n	80064c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a17      	ldr	r2, [pc, #92]	; (8006520 <TIM_OC2_SetConfig+0xe4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC2_SetConfig+0x94>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a16      	ldr	r2, [pc, #88]	; (8006524 <TIM_OC2_SetConfig+0xe8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d113      	bne.n	80064f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40010000 	.word	0x40010000
 8006524:	40010400 	.word	0x40010400

08006528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <TIM_OC3_SetConfig+0xe0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_OC3_SetConfig+0x66>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <TIM_OC3_SetConfig+0xe4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10d      	bne.n	80065aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a16      	ldr	r2, [pc, #88]	; (8006608 <TIM_OC3_SetConfig+0xe0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC3_SetConfig+0x92>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a15      	ldr	r2, [pc, #84]	; (800660c <TIM_OC3_SetConfig+0xe4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d113      	bne.n	80065e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40010000 	.word	0x40010000
 800660c:	40010400 	.word	0x40010400

08006610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800665a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	031b      	lsls	r3, r3, #12
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <TIM_OC4_SetConfig+0xa4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC4_SetConfig+0x68>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <TIM_OC4_SetConfig+0xa8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d109      	bne.n	800668c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800667e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400

080066bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0201 	bic.w	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 030a 	bic.w	r3, r3, #10
 80066f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0210 	bic.w	r2, r3, #16
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	f043 0307 	orr.w	r3, r3, #7
 800679c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2201      	movs	r2, #1
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	43db      	mvns	r3, r3
 8006812:	401a      	ands	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006850:	2302      	movs	r3, #2
 8006852:	e05a      	b.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d022      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a0:	d01d      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1d      	ldr	r2, [pc, #116]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1a      	ldr	r2, [pc, #104]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10c      	bne.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40010000 	.word	0x40010000
 800691c:	40000400 	.word	0x40000400
 8006920:	40000800 	.word	0x40000800
 8006924:	40000c00 	.word	0x40000c00
 8006928:	40010400 	.word	0x40010400
 800692c:	40014000 	.word	0x40014000
 8006930:	40001800 	.word	0x40001800

08006934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <__libc_init_array>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	4e0d      	ldr	r6, [pc, #52]	; (8006994 <__libc_init_array+0x38>)
 8006960:	4c0d      	ldr	r4, [pc, #52]	; (8006998 <__libc_init_array+0x3c>)
 8006962:	1ba4      	subs	r4, r4, r6
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	2500      	movs	r5, #0
 8006968:	42a5      	cmp	r5, r4
 800696a:	d109      	bne.n	8006980 <__libc_init_array+0x24>
 800696c:	4e0b      	ldr	r6, [pc, #44]	; (800699c <__libc_init_array+0x40>)
 800696e:	4c0c      	ldr	r4, [pc, #48]	; (80069a0 <__libc_init_array+0x44>)
 8006970:	f000 f820 	bl	80069b4 <_init>
 8006974:	1ba4      	subs	r4, r4, r6
 8006976:	10a4      	asrs	r4, r4, #2
 8006978:	2500      	movs	r5, #0
 800697a:	42a5      	cmp	r5, r4
 800697c:	d105      	bne.n	800698a <__libc_init_array+0x2e>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006984:	4798      	blx	r3
 8006986:	3501      	adds	r5, #1
 8006988:	e7ee      	b.n	8006968 <__libc_init_array+0xc>
 800698a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800698e:	4798      	blx	r3
 8006990:	3501      	adds	r5, #1
 8006992:	e7f2      	b.n	800697a <__libc_init_array+0x1e>
 8006994:	08006a78 	.word	0x08006a78
 8006998:	08006a78 	.word	0x08006a78
 800699c:	08006a78 	.word	0x08006a78
 80069a0:	08006a7c 	.word	0x08006a7c

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <_init>:
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	bf00      	nop
 80069b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ba:	bc08      	pop	{r3}
 80069bc:	469e      	mov	lr, r3
 80069be:	4770      	bx	lr

080069c0 <_fini>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	bf00      	nop
 80069c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c6:	bc08      	pop	{r3}
 80069c8:	469e      	mov	lr, r3
 80069ca:	4770      	bx	lr
