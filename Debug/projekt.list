
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007690  08007690  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000014  080076ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  080076ac  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaa3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001edb  00000000  00000000  0002eae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021627  00000000  00000000  000327f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b408  00000000  00000000  00053e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf198  00000000  00000000  0005f21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e3b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  0012e434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007618 	.word	0x08007618

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007618 	.word	0x08007618

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DESELECT>:

static
inline void DESELECT(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000cda:	bf00      	nop
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <xmit_spi+0x30>)
 8000cde:	f005 fcc9 	bl	8006674 <HAL_SPI_GetState>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d1f9      	bne.n	8000cdc <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8000ce8:	1df9      	adds	r1, r7, #7
 8000cea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <xmit_spi+0x30>)
 8000cf2:	f005 f9e9 	bl	80060c8 <HAL_SPI_Transmit>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000684 	.word	0x20000684

08000d04 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d12:	bf00      	nop
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <rcvr_spi+0x38>)
 8000d16:	f005 fcad 	bl	8006674 <HAL_SPI_GetState>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d1f9      	bne.n	8000d14 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000d20:	1dba      	adds	r2, r7, #6
 8000d22:	1df9      	adds	r1, r7, #7
 8000d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <rcvr_spi+0x38>)
 8000d2e:	f005 faff 	bl	8006330 <HAL_SPI_TransmitReceive>

	return Data;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000684 	.word	0x20000684

08000d40 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000d48:	f7ff ffdc 	bl	8000d04 <rcvr_spi>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <wait_ready+0x34>)
 8000d64:	2232      	movs	r2, #50	; 0x32
 8000d66:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000d68:	f7ff ffcc 	bl	8000d04 <rcvr_spi>
	do
		res = rcvr_spi();
 8000d6c:	f7ff ffca 	bl	8000d04 <rcvr_spi>
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d004      	beq.n	8000d84 <wait_ready+0x28>
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <wait_ready+0x34>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f3      	bne.n	8000d6c <wait_ready+0x10>

	return res;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000031 	.word	0x20000031

08000d94 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000d9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d9e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000da0:	f7ff ff8f 	bl	8000cc2 <DESELECT>

	for (i = 0; i < 10; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e005      	b.n	8000db6 <power_on+0x22>
		xmit_spi(0xFF);
 8000daa:	20ff      	movs	r0, #255	; 0xff
 8000dac:	f7ff ff90 	bl	8000cd0 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d9f6      	bls.n	8000daa <power_on+0x16>

	SELECT();
 8000dbc:	f7ff ff7a 	bl	8000cb4 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000dd4:	2395      	movs	r3, #149	; 0x95
 8000dd6:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00b      	b.n	8000df6 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	f107 0210 	add.w	r2, r7, #16
 8000de4:	4413      	add	r3, r2
 8000de6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff70 	bl	8000cd0 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3301      	adds	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d9f0      	bls.n	8000dde <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000dfc:	e002      	b.n	8000e04 <power_on+0x70>
		Count--;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000e04:	f7ff ff7e 	bl	8000d04 <rcvr_spi>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <power_on+0x80>
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f4      	bne.n	8000dfe <power_on+0x6a>

	DESELECT();
 8000e14:	f7ff ff55 	bl	8000cc2 <DESELECT>
	xmit_spi(0XFF);
 8000e18:	20ff      	movs	r0, #255	; 0xff
 8000e1a:	f7ff ff59 	bl	8000cd0 <xmit_spi>

	PowerFlag = 1;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <power_on+0x98>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000033 	.word	0x20000033

08000e30 <power_off>:

static
void power_off(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <power_off+0x14>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000033 	.word	0x20000033

08000e48 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <chk_power+0x14>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000033 	.word	0x20000033

08000e60 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <rcvr_datablock+0x68>)
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000e70:	f7ff ff48 	bl	8000d04 <rcvr_spi>
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d104      	bne.n	8000e88 <rcvr_datablock+0x28>
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <rcvr_datablock+0x68>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f3      	bne.n	8000e70 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e8c:	d001      	beq.n	8000e92 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e016      	b.n	8000ec0 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff51 	bl	8000d40 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff4b 	bl	8000d40 <rcvr_spi_m>
	} while (btr -= 2);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3b02      	subs	r3, #2
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1ed      	bne.n	8000e92 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000eb6:	f7ff ff25 	bl	8000d04 <rcvr_spi>
	rcvr_spi();
 8000eba:	f7ff ff23 	bl	8000d04 <rcvr_spi>

	return TRUE; /* Return with success */
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000030 	.word	0x20000030

08000ecc <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000edc:	f7ff ff3e 	bl	8000d5c <wait_ready>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2bff      	cmp	r3, #255	; 0xff
 8000ee4:	d001      	beq.n	8000eea <xmit_datablock+0x1e>
		return FALSE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e040      	b.n	8000f6c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff feef 	bl	8000cd0 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2bfd      	cmp	r3, #253	; 0xfd
 8000ef6:	d031      	beq.n	8000f5c <xmit_datablock+0x90>
		wc = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fee3 	bl	8000cd0 <xmit_spi>
			xmit_spi(*buff++);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fedc 	bl	8000cd0 <xmit_spi>
		} while (--wc);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1eb      	bne.n	8000efc <xmit_datablock+0x30>

		rcvr_spi();
 8000f24:	f7ff feee 	bl	8000d04 <rcvr_spi>
		rcvr_spi();
 8000f28:	f7ff feec 	bl	8000d04 <rcvr_spi>

		while (i <= 64) {
 8000f2c:	e00b      	b.n	8000f46 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000f2e:	f7ff fee9 	bl	8000d04 <rcvr_spi>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d006      	beq.n	8000f4e <xmit_datablock+0x82>
				break;
			i++;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b40      	cmp	r3, #64	; 0x40
 8000f4a:	d9f0      	bls.n	8000f2e <xmit_datablock+0x62>
 8000f4c:	e000      	b.n	8000f50 <xmit_datablock+0x84>
				break;
 8000f4e:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000f50:	bf00      	nop
 8000f52:	f7ff fed7 	bl	8000d04 <rcvr_spi>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0fa      	beq.n	8000f52 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d101      	bne.n	8000f6a <xmit_datablock+0x9e>
		return TRUE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <xmit_datablock+0xa0>
	else
		return FALSE;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000f80:	f7ff feec 	bl	8000d5c <wait_ready>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2bff      	cmp	r3, #255	; 0xff
 8000f88:	d001      	beq.n	8000f8e <send_cmd+0x1a>
		return 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	e040      	b.n	8001010 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe9d 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	0e1b      	lsrs	r3, r3, #24
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe97 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe91 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe8b 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe86 	bl	8000cd0 <xmit_spi>
	n = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d101      	bne.n	8000fd2 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000fce:	2395      	movs	r3, #149	; 0x95
 8000fd0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b48      	cmp	r3, #72	; 0x48
 8000fd6:	d101      	bne.n	8000fdc <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000fd8:	2387      	movs	r3, #135	; 0x87
 8000fda:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe76 	bl	8000cd0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b4c      	cmp	r3, #76	; 0x4c
 8000fe8:	d101      	bne.n	8000fee <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000fea:	f7ff fe8b 	bl	8000d04 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000fee:	230a      	movs	r3, #10
 8000ff0:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000ff2:	f7ff fe87 	bl	8000d04 <rcvr_spi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da05      	bge.n	800100e <send_cmd+0x9a>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	3b01      	subs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f1      	bne.n	8000ff2 <send_cmd+0x7e>

	return res; /* Return with the response value */
 800100e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001028:	2301      	movs	r3, #1
 800102a:	e0d5      	b.n	80011d8 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 800102c:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <disk_initialize+0x1c8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800103a:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <disk_initialize+0x1c8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	e0ca      	b.n	80011d8 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001042:	f7ff fea7 	bl	8000d94 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001046:	f7ff fe35 	bl	8000cb4 <SELECT>
	ty = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800104e:	2100      	movs	r1, #0
 8001050:	2040      	movs	r0, #64	; 0x40
 8001052:	f7ff ff8f 	bl	8000f74 <send_cmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 80a5 	bne.w	80011a8 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800105e:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <disk_initialize+0x1cc>)
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001068:	2048      	movs	r0, #72	; 0x48
 800106a:	f7ff ff83 	bl	8000f74 <send_cmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d158      	bne.n	8001126 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e00c      	b.n	8001094 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800107a:	7bfc      	ldrb	r4, [r7, #15]
 800107c:	f7ff fe42 	bl	8000d04 <rcvr_spi>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4423      	add	r3, r4
 800108a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d9ef      	bls.n	800107a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	2b01      	cmp	r3, #1
 800109e:	f040 8083 	bne.w	80011a8 <disk_initialize+0x190>
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	2baa      	cmp	r3, #170	; 0xaa
 80010a6:	d17f      	bne.n	80011a8 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80010a8:	2100      	movs	r1, #0
 80010aa:	2077      	movs	r0, #119	; 0x77
 80010ac:	f7ff ff62 	bl	8000f74 <send_cmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d807      	bhi.n	80010c6 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80010b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010ba:	2069      	movs	r0, #105	; 0x69
 80010bc:	f7ff ff5a 	bl	8000f74 <send_cmd>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <disk_initialize+0x1cc>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1eb      	bne.n	80010a8 <disk_initialize+0x90>
 80010d0:	e000      	b.n	80010d4 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80010d2:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <disk_initialize+0x1cc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d064      	beq.n	80011a8 <disk_initialize+0x190>
 80010de:	2100      	movs	r1, #0
 80010e0:	207a      	movs	r0, #122	; 0x7a
 80010e2:	f7ff ff47 	bl	8000f74 <send_cmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d15d      	bne.n	80011a8 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e00c      	b.n	800110c <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80010f2:	7bfc      	ldrb	r4, [r7, #15]
 80010f4:	f7ff fe06 	bl	8000d04 <rcvr_spi>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4423      	add	r3, r4
 8001102:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d9ef      	bls.n	80010f2 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001112:	7a3b      	ldrb	r3, [r7, #8]
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <disk_initialize+0x108>
 800111c:	2306      	movs	r3, #6
 800111e:	e000      	b.n	8001122 <disk_initialize+0x10a>
 8001120:	2302      	movs	r3, #2
 8001122:	73bb      	strb	r3, [r7, #14]
 8001124:	e040      	b.n	80011a8 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001126:	2100      	movs	r1, #0
 8001128:	2077      	movs	r0, #119	; 0x77
 800112a:	f7ff ff23 	bl	8000f74 <send_cmd>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d808      	bhi.n	8001146 <disk_initialize+0x12e>
 8001134:	2100      	movs	r1, #0
 8001136:	2069      	movs	r0, #105	; 0x69
 8001138:	f7ff ff1c 	bl	8000f74 <send_cmd>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d801      	bhi.n	8001146 <disk_initialize+0x12e>
 8001142:	2302      	movs	r3, #2
 8001144:	e000      	b.n	8001148 <disk_initialize+0x130>
 8001146:	2301      	movs	r3, #1
 8001148:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d10e      	bne.n	800116e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001150:	2100      	movs	r1, #0
 8001152:	2077      	movs	r0, #119	; 0x77
 8001154:	f7ff ff0e 	bl	8000f74 <send_cmd>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d80e      	bhi.n	800117c <disk_initialize+0x164>
 800115e:	2100      	movs	r1, #0
 8001160:	2069      	movs	r0, #105	; 0x69
 8001162:	f7ff ff07 	bl	8000f74 <send_cmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <disk_initialize+0x164>
						break; /* ACMD41 */
 800116c:	e00d      	b.n	800118a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800116e:	2100      	movs	r1, #0
 8001170:	2041      	movs	r0, #65	; 0x41
 8001172:	f7ff feff 	bl	8000f74 <send_cmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <disk_initialize+0x1cc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1e1      	bne.n	800114a <disk_initialize+0x132>
 8001186:	e000      	b.n	800118a <disk_initialize+0x172>
						break; /* CMD1 */
 8001188:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <disk_initialize+0x1cc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <disk_initialize+0x18c>
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	2050      	movs	r0, #80	; 0x50
 800119a:	f7ff feeb 	bl	8000f74 <send_cmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <disk_initialize+0x190>
				ty = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <disk_initialize+0x1d0>)
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80011ae:	f7ff fd88 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80011b2:	f7ff fda7 	bl	8000d04 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <disk_initialize+0x1c8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <disk_initialize+0x1c8>)
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e001      	b.n	80011d2 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80011ce:	f7ff fe2f 	bl	8000e30 <power_off>

	return Stat;
 80011d2:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <disk_initialize+0x1c8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000030 	.word	0x20000030
 80011e8:	20000032 	.word	0x20000032

080011ec <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011fc:	2301      	movs	r3, #1
 80011fe:	e002      	b.n	8001206 <disk_status+0x1a>
	return Stat;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <disk_status+0x28>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <disk_read+0x1c>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <disk_read+0x20>
		return RES_PARERR;
 8001234:	2304      	movs	r3, #4
 8001236:	e051      	b.n	80012dc <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <disk_read+0xcc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <disk_read+0x32>
		return RES_NOTRDY;
 8001246:	2303      	movs	r3, #3
 8001248:	e048      	b.n	80012dc <disk_read+0xc4>

	if (!(CardType & 4))
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <disk_read+0xd0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800125c:	f7ff fd2a 	bl	8000cb4 <SELECT>

	if (count == 1) { /* Single block read */
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d111      	bne.n	800128a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2051      	movs	r0, #81	; 0x51
 800126a:	f7ff fe83 	bl	8000f74 <send_cmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d129      	bne.n	80012c8 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff fdf1 	bl	8000e60 <rcvr_datablock>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <disk_read+0xb0>
			count = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	e01e      	b.n	80012c8 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2052      	movs	r0, #82	; 0x52
 800128e:	f7ff fe71 	bl	8000f74 <send_cmd>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f7ff fddf 	bl	8000e60 <rcvr_datablock>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <disk_read+0xa6>
					break;
				buff += 512;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ed      	bne.n	8001298 <disk_read+0x80>
 80012bc:	e000      	b.n	80012c0 <disk_read+0xa8>
					break;
 80012be:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80012c0:	2100      	movs	r1, #0
 80012c2:	204c      	movs	r0, #76	; 0x4c
 80012c4:	f7ff fe56 	bl	8000f74 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80012c8:	f7ff fcfb 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80012cc:	f7ff fd1a 	bl	8000d04 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000032 	.word	0x20000032

080012ec <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <disk_write+0x1c>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <disk_write+0x20>
		return RES_PARERR;
 8001308:	2304      	movs	r3, #4
 800130a:	e06b      	b.n	80013e4 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <disk_write+0x100>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <disk_write+0x32>
		return RES_NOTRDY;
 800131a:	2303      	movs	r3, #3
 800131c:	e062      	b.n	80013e4 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <disk_write+0x100>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <disk_write+0x44>
		return RES_WRPRT;
 800132c:	2302      	movs	r3, #2
 800132e:	e059      	b.n	80013e4 <disk_write+0xf8>

	if (!(CardType & 4))
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <disk_write+0x104>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001342:	f7ff fcb7 	bl	8000cb4 <SELECT>

	if (count == 1) { /* Single block write */
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d110      	bne.n	800136e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	2058      	movs	r0, #88	; 0x58
 8001350:	f7ff fe10 	bl	8000f74 <send_cmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d13a      	bne.n	80013d0 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800135a:	21fe      	movs	r1, #254	; 0xfe
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f7ff fdb5 	bl	8000ecc <xmit_datablock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d033      	beq.n	80013d0 <disk_write+0xe4>
			count = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	e030      	b.n	80013d0 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <disk_write+0x104>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800137a:	2100      	movs	r1, #0
 800137c:	2077      	movs	r0, #119	; 0x77
 800137e:	f7ff fdf9 	bl	8000f74 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	2057      	movs	r0, #87	; 0x57
 8001386:	f7ff fdf5 	bl	8000f74 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2059      	movs	r0, #89	; 0x59
 800138e:	f7ff fdf1 	bl	8000f74 <send_cmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11b      	bne.n	80013d0 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001398:	21fc      	movs	r1, #252	; 0xfc
 800139a:	68b8      	ldr	r0, [r7, #8]
 800139c:	f7ff fd96 	bl	8000ecc <xmit_datablock>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <disk_write+0xd0>
					break;
				buff += 512;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <disk_write+0xac>
 80013ba:	e000      	b.n	80013be <disk_write+0xd2>
					break;
 80013bc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80013be:	21fd      	movs	r1, #253	; 0xfd
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fd83 	bl	8000ecc <xmit_datablock>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <disk_write+0xe4>
				count = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80013d0:	f7ff fc77 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80013d4:	f7ff fc96 	bl	8000d04 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000032 	.word	0x20000032

080013f4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	603a      	str	r2, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	460b      	mov	r3, r1
 8001402:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <disk_ioctl+0x1e>
		return RES_PARERR;
 800140e:	2304      	movs	r3, #4
 8001410:	e16a      	b.n	80016e8 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d127      	bne.n	800146e <disk_ioctl+0x7a>
		switch (*ptr) {
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d00e      	beq.n	8001444 <disk_ioctl+0x50>
 8001426:	2b02      	cmp	r3, #2
 8001428:	d012      	beq.n	8001450 <disk_ioctl+0x5c>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11b      	bne.n	8001466 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800142e:	f7ff fd0b 	bl	8000e48 <chk_power>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001438:	f7ff fcfa 	bl	8000e30 <power_off>
			res = RES_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001442:	e14f      	b.n	80016e4 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001444:	f7ff fca6 	bl	8000d94 <power_on>
			res = RES_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800144e:	e149      	b.n	80016e4 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001450:	f7ff fcfa 	bl	8000e48 <chk_power>
 8001454:	4602      	mov	r2, r0
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	3301      	adds	r3, #1
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001464:	e13e      	b.n	80016e4 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001466:	2304      	movs	r3, #4
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146c:	e13a      	b.n	80016e4 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800146e:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <disk_ioctl+0x2fc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 800147c:	2303      	movs	r3, #3
 800147e:	e133      	b.n	80016e8 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001480:	f7ff fc18 	bl	8000cb4 <SELECT>

		switch (ctrl) {
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b35      	cmp	r3, #53	; 0x35
 8001488:	f200 811d 	bhi.w	80016c6 <disk_ioctl+0x2d2>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <disk_ioctl+0xa0>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	0800162f 	.word	0x0800162f
 8001498:	0800156d 	.word	0x0800156d
 800149c:	0800161f 	.word	0x0800161f
 80014a0:	080016c7 	.word	0x080016c7
 80014a4:	080016c7 	.word	0x080016c7
 80014a8:	080016c7 	.word	0x080016c7
 80014ac:	080016c7 	.word	0x080016c7
 80014b0:	080016c7 	.word	0x080016c7
 80014b4:	080016c7 	.word	0x080016c7
 80014b8:	080016c7 	.word	0x080016c7
 80014bc:	080016c7 	.word	0x080016c7
 80014c0:	080016c7 	.word	0x080016c7
 80014c4:	080016c7 	.word	0x080016c7
 80014c8:	080016c7 	.word	0x080016c7
 80014cc:	080016c7 	.word	0x080016c7
 80014d0:	080016c7 	.word	0x080016c7
 80014d4:	080016c7 	.word	0x080016c7
 80014d8:	080016c7 	.word	0x080016c7
 80014dc:	080016c7 	.word	0x080016c7
 80014e0:	080016c7 	.word	0x080016c7
 80014e4:	080016c7 	.word	0x080016c7
 80014e8:	080016c7 	.word	0x080016c7
 80014ec:	080016c7 	.word	0x080016c7
 80014f0:	080016c7 	.word	0x080016c7
 80014f4:	080016c7 	.word	0x080016c7
 80014f8:	080016c7 	.word	0x080016c7
 80014fc:	080016c7 	.word	0x080016c7
 8001500:	080016c7 	.word	0x080016c7
 8001504:	080016c7 	.word	0x080016c7
 8001508:	080016c7 	.word	0x080016c7
 800150c:	080016c7 	.word	0x080016c7
 8001510:	080016c7 	.word	0x080016c7
 8001514:	080016c7 	.word	0x080016c7
 8001518:	080016c7 	.word	0x080016c7
 800151c:	080016c7 	.word	0x080016c7
 8001520:	080016c7 	.word	0x080016c7
 8001524:	080016c7 	.word	0x080016c7
 8001528:	080016c7 	.word	0x080016c7
 800152c:	080016c7 	.word	0x080016c7
 8001530:	080016c7 	.word	0x080016c7
 8001534:	080016c7 	.word	0x080016c7
 8001538:	080016c7 	.word	0x080016c7
 800153c:	080016c7 	.word	0x080016c7
 8001540:	080016c7 	.word	0x080016c7
 8001544:	080016c7 	.word	0x080016c7
 8001548:	080016c7 	.word	0x080016c7
 800154c:	080016c7 	.word	0x080016c7
 8001550:	080016c7 	.word	0x080016c7
 8001554:	080016c7 	.word	0x080016c7
 8001558:	080016c7 	.word	0x080016c7
 800155c:	080016c7 	.word	0x080016c7
 8001560:	08001641 	.word	0x08001641
 8001564:	08001665 	.word	0x08001665
 8001568:	08001689 	.word	0x08001689
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800156c:	2100      	movs	r1, #0
 800156e:	2049      	movs	r0, #73	; 0x49
 8001570:	f7ff fd00 	bl	8000f74 <send_cmd>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80a9 	bne.w	80016ce <disk_ioctl+0x2da>
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2110      	movs	r1, #16
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fc6c 	bl	8000e60 <rcvr_datablock>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 809f 	beq.w	80016ce <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10e      	bne.n	80015b8 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800159a:	7d7b      	ldrb	r3, [r7, #21]
 800159c:	b29a      	uxth	r2, r3
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015ae:	8bfb      	ldrh	r3, [r7, #30]
 80015b0:	029a      	lsls	r2, r3, #10
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e02e      	b.n	8001616 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015b8:	7c7b      	ldrb	r3, [r7, #17]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7dbb      	ldrb	r3, [r7, #22]
 80015c2:	09db      	lsrs	r3, r3, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 0306 	and.w	r3, r3, #6
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015da:	3302      	adds	r3, #2
 80015dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80015e0:	7d3b      	ldrb	r3, [r7, #20]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80015f4:	7cbb      	ldrb	r3, [r7, #18]
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001604:	3301      	adds	r3, #1
 8001606:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001608:	8bfa      	ldrh	r2, [r7, #30]
 800160a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800160e:	3b09      	subs	r3, #9
 8001610:	409a      	lsls	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800161c:	e057      	b.n	80016ce <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800162c:	e056      	b.n	80016dc <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 800162e:	f7ff fb95 	bl	8000d5c <wait_ready>
 8001632:	4603      	mov	r3, r0
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d14c      	bne.n	80016d2 <disk_ioctl+0x2de>
				res = RES_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163e:	e048      	b.n	80016d2 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001640:	2100      	movs	r1, #0
 8001642:	2049      	movs	r0, #73	; 0x49
 8001644:	f7ff fc96 	bl	8000f74 <send_cmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d143      	bne.n	80016d6 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 800164e:	2110      	movs	r1, #16
 8001650:	6a38      	ldr	r0, [r7, #32]
 8001652:	f7ff fc05 	bl	8000e60 <rcvr_datablock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03c      	beq.n	80016d6 <disk_ioctl+0x2e2>
				res = RES_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e038      	b.n	80016d6 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001664:	2100      	movs	r1, #0
 8001666:	204a      	movs	r0, #74	; 0x4a
 8001668:	f7ff fc84 	bl	8000f74 <send_cmd>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d133      	bne.n	80016da <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001672:	2110      	movs	r1, #16
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f7ff fbf3 	bl	8000e60 <rcvr_datablock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d02c      	beq.n	80016da <disk_ioctl+0x2e6>
				res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e028      	b.n	80016da <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001688:	2100      	movs	r1, #0
 800168a:	207a      	movs	r0, #122	; 0x7a
 800168c:	f7ff fc72 	bl	8000f74 <send_cmd>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d117      	bne.n	80016c6 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800169c:	e00b      	b.n	80016b6 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800169e:	6a3c      	ldr	r4, [r7, #32]
 80016a0:	1c63      	adds	r3, r4, #1
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	f7ff fb2e 	bl	8000d04 <rcvr_spi>
 80016a8:	4603      	mov	r3, r0
 80016aa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d9ef      	bls.n	800169e <disk_ioctl+0x2aa>
				res = RES_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80016c4:	e00a      	b.n	80016dc <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80016c6:	2304      	movs	r3, #4
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016cc:	e006      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016ce:	bf00      	nop
 80016d0:	e004      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016d2:	bf00      	nop
 80016d4:	e002      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016da:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80016dc:	f7ff faf1 	bl	8000cc2 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80016e0:	f7ff fb10 	bl	8000d04 <rcvr_spi>
	}

	return res;
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	372c      	adds	r7, #44	; 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000000 	.word	0x20000000

080016f4 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <disk_timerproc+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <disk_timerproc+0x1e>
		Timer1 = --n;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3b01      	subs	r3, #1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <disk_timerproc+0x44>)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <disk_timerproc+0x48>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <disk_timerproc+0x36>
		Timer2 = --n;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b01      	subs	r3, #1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <disk_timerproc+0x48>)
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	7013      	strb	r3, [r2, #0]

}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000030 	.word	0x20000030
 800173c:	20000031 	.word	0x20000031

08001740 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001750:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b09      	cmp	r3, #9
 800175a:	d904      	bls.n	8001766 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <sdcard_systick_timerproc+0x2c>)
 800175e:	2200      	movs	r2, #0
 8001760:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001762:	f7ff ffc7 	bl	80016f4 <disk_timerproc>
	}
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000270 	.word	0x20000270

08001770 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	36c55cc0 	.word	0x36c55cc0

08001784 <ld_word>:
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	81fb      	strh	r3, [r7, #14]
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <ld_dword>:
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3303      	adds	r3, #3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	3202      	adds	r2, #2
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	3201      	adds	r2, #1
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <st_word>:
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <st_dword>:
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <mem_cpy>:
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <mem_cpy+0x36>
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	1c53      	adds	r3, r2, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	6179      	str	r1, [r7, #20]
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f1      	bne.n	80018a2 <mem_cpy+0x1a>
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <mem_set>:
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	617a      	str	r2, [r7, #20]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f3      	bne.n	80018da <mem_set+0x10>
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <mem_cmp>:
 80018fe:	b480      	push	{r7}
 8001900:	b089      	sub	sp, #36	; 0x24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	61fa      	str	r2, [r7, #28]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	61ba      	str	r2, [r7, #24]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	1acb      	subs	r3, r1, r3
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <mem_cmp+0x40>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0eb      	beq.n	8001916 <mem_cmp+0x18>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4618      	mov	r0, r3
 8001942:	3724      	adds	r7, #36	; 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <chk_chr>:
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	e002      	b.n	800195e <chk_chr+0x12>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <chk_chr+0x26>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4293      	cmp	r3, r2
 8001970:	d1f2      	bne.n	8001958 <chk_chr+0xc>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <dbc_1st>:
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	2281      	movs	r2, #129	; 0x81
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4293      	cmp	r3, r2
 8001992:	d30f      	bcc.n	80019b4 <dbc_1st+0x32>
 8001994:	229f      	movs	r2, #159	; 0x9f
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4293      	cmp	r3, r2
 800199a:	d801      	bhi.n	80019a0 <dbc_1st+0x1e>
 800199c:	2301      	movs	r3, #1
 800199e:	e00a      	b.n	80019b6 <dbc_1st+0x34>
 80019a0:	22e0      	movs	r2, #224	; 0xe0
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d305      	bcc.n	80019b4 <dbc_1st+0x32>
 80019a8:	22fc      	movs	r2, #252	; 0xfc
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d801      	bhi.n	80019b4 <dbc_1st+0x32>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <dbc_1st+0x34>
 80019b4:	2300      	movs	r3, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <dbc_2nd>:
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d319      	bcc.n	8001a08 <dbc_2nd+0x46>
 80019d4:	227e      	movs	r2, #126	; 0x7e
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d801      	bhi.n	80019e0 <dbc_2nd+0x1e>
 80019dc:	2301      	movs	r3, #1
 80019de:	e014      	b.n	8001a0a <dbc_2nd+0x48>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d305      	bcc.n	80019f4 <dbc_2nd+0x32>
 80019e8:	22fc      	movs	r2, #252	; 0xfc
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d801      	bhi.n	80019f4 <dbc_2nd+0x32>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e00a      	b.n	8001a0a <dbc_2nd+0x48>
 80019f4:	2200      	movs	r2, #0
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d305      	bcc.n	8001a08 <dbc_2nd+0x46>
 80019fc:	2200      	movs	r2, #0
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d801      	bhi.n	8001a08 <dbc_2nd+0x46>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <dbc_2nd+0x48>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <sync_window>:
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	78db      	ldrb	r3, [r3, #3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02c      	beq.n	8001a84 <sync_window+0x6e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7858      	ldrb	r0, [r3, #1]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f7ff fc57 	bl	80012ec <disk_write>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11d      	bne.n	8001a80 <sync_window+0x6a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	70da      	strb	r2, [r3, #3]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d213      	bcs.n	8001a84 <sync_window+0x6e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d10f      	bne.n	8001a84 <sync_window+0x6e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7858      	ldrb	r0, [r3, #1]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	441a      	add	r2, r3
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f7ff fc37 	bl	80012ec <disk_write>
 8001a7e:	e001      	b.n	8001a84 <sync_window+0x6e>
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <move_window>:
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d01b      	beq.n	8001ade <move_window+0x50>
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb5 	bl	8001a16 <sync_window>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <move_window+0x50>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7858      	ldrb	r0, [r3, #1]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	f7ff fba8 	bl	8001218 <disk_read>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <move_window+0x4a>
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <sync_fs>:
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff90 	bl	8001a16 <sync_window>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d158      	bne.n	8001bb2 <sync_fs+0xca>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d148      	bne.n	8001b9a <sync_fs+0xb2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d144      	bne.n	8001b9a <sync_fs+0xb2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3330      	adds	r3, #48	; 0x30
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fed5 	bl	80018ca <mem_set>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3330      	adds	r3, #48	; 0x30
 8001b24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001b28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe64 	bl	80017fa <st_word>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3330      	adds	r3, #48	; 0x30
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <sync_fs+0xd4>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe79 	bl	8001830 <st_dword>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3330      	adds	r3, #48	; 0x30
 8001b42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <sync_fs+0xd8>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe71 	bl	8001830 <st_dword>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3330      	adds	r3, #48	; 0x30
 8001b52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff fe67 	bl	8001830 <st_dword>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3330      	adds	r3, #48	; 0x30
 8001b66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff fe5d 	bl	8001830 <st_dword>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7858      	ldrb	r0, [r3, #1]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f7ff fbac 	bl	80012ec <disk_write>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fc26 	bl	80013f4 <disk_ioctl>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <sync_fs+0xca>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	41615252 	.word	0x41615252
 8001bc0:	61417272 	.word	0x61417272

08001bc4 <clst2sect>:
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3b02      	subs	r3, #2
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	3b02      	subs	r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d301      	bcc.n	8001be4 <clst2sect+0x20>
 8001be0:	2300      	movs	r3, #0
 8001be2:	e008      	b.n	8001bf6 <clst2sect+0x32>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	895b      	ldrh	r3, [r3, #10]
 8001bec:	4619      	mov	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	fb03 f301 	mul.w	r3, r3, r1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <get_fat>:
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d904      	bls.n	8001c22 <get_fat+0x20>
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <get_fat+0x26>
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e08c      	b.n	8001d42 <get_fat+0x140>
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d045      	beq.n	8001cc2 <get_fat+0xc0>
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d05d      	beq.n	8001cf6 <get_fat+0xf4>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d177      	bne.n	8001d2e <get_fat+0x12c>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	4413      	add	r3, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	6938      	ldr	r0, [r7, #16]
 8001c5a:	f7ff ff18 	bl	8001a8e <move_window>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d167      	bne.n	8001d34 <get_fat+0x132>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60fa      	str	r2, [r7, #12]
 8001c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	4413      	add	r3, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6938      	ldr	r0, [r7, #16]
 8001c86:	f7ff ff02 	bl	8001a8e <move_window>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d153      	bne.n	8001d38 <get_fat+0x136>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <get_fat+0xb6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	e002      	b.n	8001cbe <get_fat+0xbc>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e03f      	b.n	8001d42 <get_fat+0x140>
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	4413      	add	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6938      	ldr	r0, [r7, #16]
 8001cd0:	f7ff fedd 	bl	8001a8e <move_window>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d130      	bne.n	8001d3c <get_fat+0x13a>
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001ce8:	4413      	add	r3, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fd4a 	bl	8001784 <ld_word>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e025      	b.n	8001d42 <get_fat+0x140>
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	4413      	add	r3, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	6938      	ldr	r0, [r7, #16]
 8001d04:	f7ff fec3 	bl	8001a8e <move_window>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <get_fat+0x13e>
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd48 	bl	80017b4 <ld_dword>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e009      	b.n	8001d42 <get_fat+0x140>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e006      	b.n	8001d42 <get_fat+0x140>
 8001d34:	bf00      	nop
 8001d36:	e004      	b.n	8001d42 <get_fat+0x140>
 8001d38:	bf00      	nop
 8001d3a:	e002      	b.n	8001d42 <get_fat+0x140>
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <get_fat+0x140>
 8001d40:	bf00      	nop
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <put_fat>:
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	77fb      	strb	r3, [r7, #31]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f240 80d6 	bls.w	8001f10 <put_fat+0x1c4>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	f080 80d0 	bcs.w	8001f10 <put_fat+0x1c4>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d073      	beq.n	8001e60 <put_fat+0x114>
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	f000 8091 	beq.w	8001ea0 <put_fat+0x154>
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 80c6 	bne.w	8001f10 <put_fat+0x1c4>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	0a5b      	lsrs	r3, r3, #9
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fe75 	bl	8001a8e <move_window>
 8001da4:	4603      	mov	r3, r0
 8001da6:	77fb      	strb	r3, [r7, #31]
 8001da8:	7ffb      	ldrb	r3, [r7, #31]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 80a9 	bne.w	8001f02 <put_fat+0x1b6>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	61b9      	str	r1, [r7, #24]
 8001dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <put_fat+0x9e>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e001      	b.n	8001dee <put_fat+0xa2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	7013      	strb	r3, [r2, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	70da      	strb	r2, [r3, #3]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	4413      	add	r3, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fe42 	bl	8001a8e <move_window>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	77fb      	strb	r3, [r7, #31]
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d178      	bne.n	8001f06 <put_fat+0x1ba>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <put_fat+0xea>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e00e      	b.n	8001e54 <put_fat+0x108>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	f023 030f 	bic.w	r3, r3, #15
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	7013      	strb	r3, [r2, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	70da      	strb	r2, [r3, #3]
 8001e5e:	e057      	b.n	8001f10 <put_fat+0x1c4>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	4413      	add	r3, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fe0e 	bl	8001a8e <move_window>
 8001e72:	4603      	mov	r3, r0
 8001e74:	77fb      	strb	r3, [r7, #31]
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d146      	bne.n	8001f0a <put_fat+0x1be>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001e8a:	4413      	add	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fcb1 	bl	80017fa <st_word>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	70da      	strb	r2, [r3, #3]
 8001e9e:	e037      	b.n	8001f10 <put_fat+0x1c4>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	09db      	lsrs	r3, r3, #7
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fdee 	bl	8001a8e <move_window>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	77fb      	strb	r3, [r7, #31]
 8001eb6:	7ffb      	ldrb	r3, [r7, #31]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d128      	bne.n	8001f0e <put_fat+0x1c2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc6e 	bl	80017b4 <ld_dword>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ef0:	4413      	add	r3, r2
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fc9b 	bl	8001830 <st_dword>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	70da      	strb	r2, [r3, #3]
 8001f00:	e006      	b.n	8001f10 <put_fat+0x1c4>
 8001f02:	bf00      	nop
 8001f04:	e004      	b.n	8001f10 <put_fat+0x1c4>
 8001f06:	bf00      	nop
 8001f08:	e002      	b.n	8001f10 <put_fat+0x1c4>
 8001f0a:	bf00      	nop
 8001f0c:	e000      	b.n	8001f10 <put_fat+0x1c4>
 8001f0e:	bf00      	nop
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <remove_chain>:
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d904      	bls.n	8001f40 <remove_chain+0x26>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d301      	bcc.n	8001f44 <remove_chain+0x2a>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e04b      	b.n	8001fdc <remove_chain+0xc2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <remove_chain+0x4a>
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	69b8      	ldr	r0, [r7, #24]
 8001f52:	f7ff fefb 	bl	8001d4c <put_fat>
 8001f56:	4603      	mov	r3, r0
 8001f58:	77fb      	strb	r3, [r7, #31]
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <remove_chain+0x4a>
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	e03b      	b.n	8001fdc <remove_chain+0xc2>
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fe4b 	bl	8001c02 <get_fat>
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d031      	beq.n	8001fd8 <remove_chain+0xbe>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <remove_chain+0x64>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e02e      	b.n	8001fdc <remove_chain+0xc2>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d101      	bne.n	8001f8a <remove_chain+0x70>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e028      	b.n	8001fdc <remove_chain+0xc2>
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f7ff fedc 	bl	8001d4c <put_fat>
 8001f94:	4603      	mov	r3, r0
 8001f96:	77fb      	strb	r3, [r7, #31]
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <remove_chain+0x88>
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	e01c      	b.n	8001fdc <remove_chain+0xc2>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	3b02      	subs	r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d20b      	bcs.n	8001fc8 <remove_chain+0xae>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	711a      	strb	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3c6      	bcc.n	8001f64 <remove_chain+0x4a>
 8001fd6:	e000      	b.n	8001fda <remove_chain+0xc0>
 8001fd8:	bf00      	nop
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <create_chain>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <create_chain+0x32>
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <create_chain+0x2c>
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	429a      	cmp	r2, r3
 800200e:	d31b      	bcc.n	8002048 <create_chain+0x64>
 8002010:	2301      	movs	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e018      	b.n	8002048 <create_chain+0x64>
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fdf2 	bl	8001c02 <get_fat>
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d801      	bhi.n	800202a <create_chain+0x46>
 8002026:	2301      	movs	r3, #1
 8002028:	e0a9      	b.n	800217e <create_chain+0x19a>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d101      	bne.n	8002036 <create_chain+0x52>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	e0a3      	b.n	800217e <create_chain+0x19a>
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d201      	bcs.n	8002044 <create_chain+0x60>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	e09c      	b.n	800217e <create_chain+0x19a>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <create_chain+0x70>
 8002050:	2300      	movs	r3, #0
 8002052:	e094      	b.n	800217e <create_chain+0x19a>
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d129      	bne.n	80020b4 <create_chain+0xd0>
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d301      	bcc.n	8002074 <create_chain+0x90>
 8002070:	2302      	movs	r3, #2
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69f9      	ldr	r1, [r7, #28]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fdc3 	bl	8001c02 <get_fat>
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d003      	beq.n	800208c <create_chain+0xa8>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d101      	bne.n	8002090 <create_chain+0xac>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	e076      	b.n	800217e <create_chain+0x19a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <create_chain+0xd0>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d906      	bls.n	80020b0 <create_chain+0xcc>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d201      	bcs.n	80020b0 <create_chain+0xcc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d129      	bne.n	800210e <create_chain+0x12a>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d307      	bcc.n	80020de <create_chain+0xfa>
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d901      	bls.n	80020de <create_chain+0xfa>
 80020da:	2300      	movs	r3, #0
 80020dc:	e04f      	b.n	800217e <create_chain+0x19a>
 80020de:	69f9      	ldr	r1, [r7, #28]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fd8e 	bl	8001c02 <get_fat>
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00e      	beq.n	800210c <create_chain+0x128>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d003      	beq.n	80020fc <create_chain+0x118>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d101      	bne.n	8002100 <create_chain+0x11c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e03e      	b.n	800217e <create_chain+0x19a>
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1da      	bne.n	80020be <create_chain+0xda>
 8002108:	2300      	movs	r3, #0
 800210a:	e038      	b.n	800217e <create_chain+0x19a>
 800210c:	bf00      	nop
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	69f9      	ldr	r1, [r7, #28]
 8002114:	6938      	ldr	r0, [r7, #16]
 8002116:	f7ff fe19 	bl	8001d4c <put_fat>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <create_chain+0x154>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <create_chain+0x154>
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	6938      	ldr	r0, [r7, #16]
 8002130:	f7ff fe0c 	bl	8001d4c <put_fat>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <create_chain+0x188>
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	3b02      	subs	r3, #2
 800214e:	429a      	cmp	r2, r3
 8002150:	d804      	bhi.n	800215c <create_chain+0x178>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	711a      	strb	r2, [r3, #4]
 800216a:	e007      	b.n	800217c <create_chain+0x198>
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <create_chain+0x194>
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e000      	b.n	800217a <create_chain+0x196>
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <dir_clear>:
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fc40 	bl	8001a16 <sync_window>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <dir_clear+0x1a>
 800219c:	2301      	movs	r3, #1
 800219e:	e036      	b.n	800220e <dir_clear+0x88>
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fd0e 	bl	8001bc4 <clst2sect>
 80021a8:	6138      	str	r0, [r7, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3330      	adds	r3, #48	; 0x30
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fb85 	bl	80018ca <mem_set>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3330      	adds	r3, #48	; 0x30
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2301      	movs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e003      	b.n	80021d8 <dir_clear+0x52>
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	461a      	mov	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d20b      	bcs.n	80021fc <dir_clear+0x76>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7858      	ldrb	r0, [r3, #1]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	441a      	add	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	f7ff f87b 	bl	80012ec <disk_write>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0e9      	beq.n	80021d0 <dir_clear+0x4a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	895b      	ldrh	r3, [r3, #10]
 8002200:	461a      	mov	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4293      	cmp	r3, r2
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <dir_sdi>:
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800222c:	d204      	bcs.n	8002238 <dir_sdi+0x22>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <dir_sdi+0x26>
 8002238:	2302      	movs	r3, #2
 800223a:	e063      	b.n	8002304 <dir_sdi+0xee>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <dir_sdi+0x46>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <dir_sdi+0x46>
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <dir_sdi+0x66>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	8912      	ldrh	r2, [r2, #8]
 800226a:	4293      	cmp	r3, r2
 800226c:	d301      	bcc.n	8002272 <dir_sdi+0x5c>
 800226e:	2302      	movs	r3, #2
 8002270:	e048      	b.n	8002304 <dir_sdi+0xee>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e029      	b.n	80022d0 <dir_sdi+0xba>
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	895b      	ldrh	r3, [r3, #10]
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e019      	b.n	80022ba <dir_sdi+0xa4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6979      	ldr	r1, [r7, #20]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fcb9 	bl	8001c02 <get_fat>
 8002290:	6178      	str	r0, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d101      	bne.n	800229e <dir_sdi+0x88>
 800229a:	2301      	movs	r3, #1
 800229c:	e032      	b.n	8002304 <dir_sdi+0xee>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d904      	bls.n	80022ae <dir_sdi+0x98>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d301      	bcc.n	80022b2 <dir_sdi+0x9c>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e028      	b.n	8002304 <dir_sdi+0xee>
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d2e1      	bcs.n	8002286 <dir_sdi+0x70>
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	6938      	ldr	r0, [r7, #16]
 80022c6:	f7ff fc7d 	bl	8001bc4 <clst2sect>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <dir_sdi+0xcc>
 80022de:	2302      	movs	r3, #2
 80022e0:	e010      	b.n	8002304 <dir_sdi+0xee>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	0a5b      	lsrs	r3, r3, #9
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	61da      	str	r2, [r3, #28]
 8002302:	2300      	movs	r3, #0
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <dir_next>:
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	3320      	adds	r3, #32
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232a:	d302      	bcc.n	8002332 <dir_next+0x26>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <dir_next+0x32>
 800233a:	2304      	movs	r3, #4
 800233c:	e078      	b.n	8002430 <dir_next+0x124>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002344:	2b00      	cmp	r3, #0
 8002346:	d166      	bne.n	8002416 <dir_next+0x10a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <dir_next+0x64>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	8912      	ldrh	r2, [r2, #8]
 8002362:	4293      	cmp	r3, r2
 8002364:	d357      	bcc.n	8002416 <dir_next+0x10a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	2304      	movs	r3, #4
 800236e:	e05f      	b.n	8002430 <dir_next+0x124>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	8952      	ldrh	r2, [r2, #10]
 8002378:	3a01      	subs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d14a      	bne.n	8002416 <dir_next+0x10a>
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7ff fc3a 	bl	8001c02 <get_fat>
 800238e:	6178      	str	r0, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d801      	bhi.n	800239a <dir_next+0x8e>
 8002396:	2302      	movs	r3, #2
 8002398:	e04a      	b.n	8002430 <dir_next+0x124>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d101      	bne.n	80023a6 <dir_next+0x9a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e044      	b.n	8002430 <dir_next+0x124>
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d328      	bcc.n	8002402 <dir_next+0xf6>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <dir_next+0xb4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
 80023bc:	2304      	movs	r3, #4
 80023be:	e037      	b.n	8002430 <dir_next+0x124>
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7ff fe0b 	bl	8001fe4 <create_chain>
 80023ce:	6178      	str	r0, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <dir_next+0xce>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e02a      	b.n	8002430 <dir_next+0x124>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <dir_next+0xd8>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e025      	b.n	8002430 <dir_next+0x124>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d101      	bne.n	80023f0 <dir_next+0xe4>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e01f      	b.n	8002430 <dir_next+0x124>
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	6938      	ldr	r0, [r7, #16]
 80023f4:	f7ff fec7 	bl	8002186 <dir_clear>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <dir_next+0xf6>
 80023fe:	2301      	movs	r3, #1
 8002400:	e016      	b.n	8002430 <dir_next+0x124>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	615a      	str	r2, [r3, #20]
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f7ff fbda 	bl	8001bc4 <clst2sect>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	61da      	str	r2, [r3, #28]
 800242e:	2300      	movs	r3, #0
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <dir_alloc>:
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	2100      	movs	r1, #0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fee3 	bl	8002216 <dir_sdi>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12b      	bne.n	80024b2 <dir_alloc+0x7a>
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4619      	mov	r1, r3
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fb12 	bl	8001a8e <move_window>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11d      	bne.n	80024b0 <dir_alloc+0x78>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2be5      	cmp	r3, #229	; 0xe5
 800247c:	d004      	beq.n	8002488 <dir_alloc+0x50>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <dir_alloc+0x60>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	3301      	adds	r3, #1
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d102      	bne.n	800249c <dir_alloc+0x64>
 8002496:	e00c      	b.n	80024b2 <dir_alloc+0x7a>
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	2101      	movs	r1, #1
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff34 	bl	800230c <dir_next>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0d7      	beq.n	800245e <dir_alloc+0x26>
 80024ae:	e000      	b.n	80024b2 <dir_alloc+0x7a>
 80024b0:	bf00      	nop
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d101      	bne.n	80024bc <dir_alloc+0x84>
 80024b8:	2307      	movs	r3, #7
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ld_clust>:
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	331a      	adds	r3, #26
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f955 	bl	8001784 <ld_word>
 80024da:	4603      	mov	r3, r0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d109      	bne.n	80024fa <ld_clust+0x34>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3314      	adds	r3, #20
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f94a 	bl	8001784 <ld_word>
 80024f0:	4603      	mov	r3, r0
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <st_clust>:
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	331a      	adds	r3, #26
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	b292      	uxth	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f96d 	bl	80017fa <st_word>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d109      	bne.n	800253c <st_clust+0x38>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f103 0214 	add.w	r2, r3, #20
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f7ff f95f 	bl	80017fa <st_word>
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <dir_find>:
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	2100      	movs	r1, #0
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fe5e 	bl	8002216 <dir_sdi>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <dir_find+0x24>
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	e03e      	b.n	80025e6 <dir_find+0xa2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4619      	mov	r1, r3
 800256e:	6938      	ldr	r0, [r7, #16]
 8002570:	f7ff fa8d 	bl	8001a8e <move_window>
 8002574:	4603      	mov	r3, r0
 8002576:	75fb      	strb	r3, [r7, #23]
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d12f      	bne.n	80025de <dir_find+0x9a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <dir_find+0x4e>
 800258c:	2304      	movs	r3, #4
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	e028      	b.n	80025e4 <dir_find+0xa0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	330b      	adds	r3, #11
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	719a      	strb	r2, [r3, #6]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	330b      	adds	r3, #11
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <dir_find+0x86>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69d8      	ldr	r0, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3320      	adds	r3, #32
 80025bc:	220b      	movs	r2, #11
 80025be:	4619      	mov	r1, r3
 80025c0:	f7ff f99d 	bl	80018fe <mem_cmp>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <dir_find+0x9e>
 80025ca:	2100      	movs	r1, #0
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fe9d 	bl	800230c <dir_next>
 80025d2:	4603      	mov	r3, r0
 80025d4:	75fb      	strb	r3, [r7, #23]
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0c5      	beq.n	8002568 <dir_find+0x24>
 80025dc:	e002      	b.n	80025e4 <dir_find+0xa0>
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <dir_find+0xa0>
 80025e2:	bf00      	nop
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <dir_register>:
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	2101      	movs	r1, #1
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff1a 	bl	8002438 <dir_alloc>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11c      	bne.n	8002648 <dir_register+0x5a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4619      	mov	r1, r3
 8002614:	68b8      	ldr	r0, [r7, #8]
 8002616:	f7ff fa3a 	bl	8001a8e <move_window>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <dir_register+0x5a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2220      	movs	r2, #32
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f94c 	bl	80018ca <mem_set>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69d8      	ldr	r0, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3320      	adds	r3, #32
 800263a:	220b      	movs	r2, #11
 800263c:	4619      	mov	r1, r3
 800263e:	f7ff f923 	bl	8001888 <mem_cpy>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2201      	movs	r2, #1
 8002646:	70da      	strb	r2, [r3, #3]
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <create_name>:
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3320      	adds	r3, #32
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	220b      	movs	r2, #11
 800266c:	2120      	movs	r1, #32
 800266e:	6938      	ldr	r0, [r7, #16]
 8002670:	f7ff f92b 	bl	80018ca <mem_set>
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	2308      	movs	r3, #8
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	61fa      	str	r2, [r7, #28]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002694:	2b20      	cmp	r3, #32
 8002696:	d97c      	bls.n	8002792 <create_name+0x13e>
 8002698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800269c:	2b2f      	cmp	r3, #47	; 0x2f
 800269e:	d007      	beq.n	80026b0 <create_name+0x5c>
 80026a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a4:	2b5c      	cmp	r3, #92	; 0x5c
 80026a6:	d110      	bne.n	80026ca <create_name+0x76>
 80026a8:	e002      	b.n	80026b0 <create_name+0x5c>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b2f      	cmp	r3, #47	; 0x2f
 80026ba:	d0f6      	beq.n	80026aa <create_name+0x56>
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b5c      	cmp	r3, #92	; 0x5c
 80026c6:	d0f0      	beq.n	80026aa <create_name+0x56>
 80026c8:	e064      	b.n	8002794 <create_name+0x140>
 80026ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ce:	2b2e      	cmp	r3, #46	; 0x2e
 80026d0:	d003      	beq.n	80026da <create_name+0x86>
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d30d      	bcc.n	80026f6 <create_name+0xa2>
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b0b      	cmp	r3, #11
 80026de:	d003      	beq.n	80026e8 <create_name+0x94>
 80026e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026e4:	2b2e      	cmp	r3, #46	; 0x2e
 80026e6:	d001      	beq.n	80026ec <create_name+0x98>
 80026e8:	2306      	movs	r3, #6
 80026ea:	e06f      	b.n	80027cc <create_name+0x178>
 80026ec:	2308      	movs	r3, #8
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	230b      	movs	r3, #11
 80026f2:	623b      	str	r3, [r7, #32]
 80026f4:	e04c      	b.n	8002790 <create_name+0x13c>
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f941 	bl	8001982 <dbc_1st>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d024      	beq.n	8002750 <create_name+0xfc>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	61fa      	str	r2, [r7, #28]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f953 	bl	80019c2 <dbc_2nd>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <create_name+0xd8>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	3b01      	subs	r3, #1
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	429a      	cmp	r2, r3
 800272a:	d301      	bcc.n	8002730 <create_name+0xdc>
 800272c:	2306      	movs	r3, #6
 800272e:	e04d      	b.n	80027cc <create_name+0x178>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	61ba      	str	r2, [r7, #24]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	61ba      	str	r2, [r7, #24]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e797      	b.n	8002680 <create_name+0x2c>
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002754:	4619      	mov	r1, r3
 8002756:	481f      	ldr	r0, [pc, #124]	; (80027d4 <create_name+0x180>)
 8002758:	f7ff f8f8 	bl	800194c <chk_chr>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <create_name+0x112>
 8002762:	2306      	movs	r3, #6
 8002764:	e032      	b.n	80027cc <create_name+0x178>
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276a:	2b60      	cmp	r3, #96	; 0x60
 800276c:	d908      	bls.n	8002780 <create_name+0x12c>
 800276e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002772:	2b7a      	cmp	r3, #122	; 0x7a
 8002774:	d804      	bhi.n	8002780 <create_name+0x12c>
 8002776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800277a:	3b20      	subs	r3, #32
 800277c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	61ba      	str	r2, [r7, #24]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e776      	b.n	8002680 <create_name+0x2c>
 8002792:	bf00      	nop
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	441a      	add	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <create_name+0x154>
 80027a4:	2306      	movs	r3, #6
 80027a6:	e011      	b.n	80027cc <create_name+0x178>
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2be5      	cmp	r3, #229	; 0xe5
 80027ae:	d102      	bne.n	80027b6 <create_name+0x162>
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2205      	movs	r2, #5
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d801      	bhi.n	80027c2 <create_name+0x16e>
 80027be:	2204      	movs	r2, #4
 80027c0:	e000      	b.n	80027c4 <create_name+0x170>
 80027c2:	2200      	movs	r2, #0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	330b      	adds	r3, #11
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	2300      	movs	r3, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	08007630 	.word	0x08007630

080027d8 <follow_path>:
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e002      	b.n	80027f0 <follow_path+0x18>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b2f      	cmp	r3, #47	; 0x2f
 80027f6:	d0f8      	beq.n	80027ea <follow_path+0x12>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b5c      	cmp	r3, #92	; 0x5c
 80027fe:	d0f4      	beq.n	80027ea <follow_path+0x12>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b1f      	cmp	r3, #31
 800280c:	d80a      	bhi.n	8002824 <follow_path+0x4c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8002816:	2100      	movs	r1, #0
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fcfc 	bl	8002216 <dir_sdi>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]
 8002822:	e043      	b.n	80028ac <follow_path+0xd4>
 8002824:	463b      	mov	r3, r7
 8002826:	4619      	mov	r1, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff13 	bl	8002654 <create_name>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d134      	bne.n	80028a2 <follow_path+0xca>
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe83 	bl	8002544 <dir_find>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <follow_path+0x8e>
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d127      	bne.n	80028a6 <follow_path+0xce>
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d122      	bne.n	80028a6 <follow_path+0xce>
 8002860:	2305      	movs	r3, #5
 8002862:	75fb      	strb	r3, [r7, #23]
 8002864:	e01f      	b.n	80028a6 <follow_path+0xce>
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11c      	bne.n	80028aa <follow_path+0xd2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	799b      	ldrb	r3, [r3, #6]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <follow_path+0xaa>
 800287c:	2305      	movs	r3, #5
 800287e:	75fb      	strb	r3, [r7, #23]
 8002880:	e014      	b.n	80028ac <follow_path+0xd4>
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002890:	4413      	add	r3, r2
 8002892:	4619      	mov	r1, r3
 8002894:	6938      	ldr	r0, [r7, #16]
 8002896:	f7ff fe16 	bl	80024c6 <ld_clust>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e7c0      	b.n	8002824 <follow_path+0x4c>
 80028a2:	bf00      	nop
 80028a4:	e002      	b.n	80028ac <follow_path+0xd4>
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <follow_path+0xd4>
 80028aa:	bf00      	nop
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <get_ldnumber>:
 80028b6:	b480      	push	{r7}
 80028b8:	b089      	sub	sp, #36	; 0x24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <get_ldnumber+0x22>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	e02d      	b.n	8002934 <get_ldnumber+0x7e>
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	61fa      	str	r2, [r7, #28]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d902      	bls.n	80028ee <get_ldnumber+0x38>
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b3a      	cmp	r3, #58	; 0x3a
 80028ec:	d1f4      	bne.n	80028d8 <get_ldnumber+0x22>
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b3a      	cmp	r3, #58	; 0x3a
 80028f2:	d11c      	bne.n	800292e <get_ldnumber+0x78>
 80028f4:	2301      	movs	r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b2f      	cmp	r3, #47	; 0x2f
 80028fe:	d90c      	bls.n	800291a <get_ldnumber+0x64>
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b39      	cmp	r3, #57	; 0x39
 8002906:	d808      	bhi.n	800291a <get_ldnumber+0x64>
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3302      	adds	r3, #2
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <get_ldnumber+0x64>
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	3b30      	subs	r3, #48	; 0x30
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	dc04      	bgt.n	800292a <get_ldnumber+0x74>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	e002      	b.n	8002934 <get_ldnumber+0x7e>
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4618      	mov	r0, r3
 8002936:	3724      	adds	r7, #36	; 0x24
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <check_fs>:
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	70da      	strb	r2, [r3, #3]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
 8002958:	6839      	ldr	r1, [r7, #0]
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff f897 	bl	8001a8e <move_window>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <check_fs+0x2a>
 8002966:	2304      	movs	r3, #4
 8002968:	e038      	b.n	80029dc <check_fs+0x9c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3330      	adds	r3, #48	; 0x30
 800296e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe ff06 	bl	8001784 <ld_word>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <check_fs+0x48>
 8002984:	2303      	movs	r3, #3
 8002986:	e029      	b.n	80029dc <check_fs+0x9c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298e:	2be9      	cmp	r3, #233	; 0xe9
 8002990:	d009      	beq.n	80029a6 <check_fs+0x66>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002998:	2beb      	cmp	r3, #235	; 0xeb
 800299a:	d004      	beq.n	80029a6 <check_fs+0x66>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a2:	2be8      	cmp	r3, #232	; 0xe8
 80029a4:	d119      	bne.n	80029da <check_fs+0x9a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3330      	adds	r3, #48	; 0x30
 80029aa:	3336      	adds	r3, #54	; 0x36
 80029ac:	2203      	movs	r2, #3
 80029ae:	490d      	ldr	r1, [pc, #52]	; (80029e4 <check_fs+0xa4>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe ffa4 	bl	80018fe <mem_cmp>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <check_fs+0x80>
 80029bc:	2300      	movs	r3, #0
 80029be:	e00d      	b.n	80029dc <check_fs+0x9c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3330      	adds	r3, #48	; 0x30
 80029c4:	3352      	adds	r3, #82	; 0x52
 80029c6:	2205      	movs	r2, #5
 80029c8:	4907      	ldr	r1, [pc, #28]	; (80029e8 <check_fs+0xa8>)
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe ff97 	bl	80018fe <mem_cmp>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <check_fs+0x9a>
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <check_fs+0x9c>
 80029da:	2302      	movs	r3, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08007640 	.word	0x08007640
 80029e8:	08007644 	.word	0x08007644

080029ec <find_volume>:
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b096      	sub	sp, #88	; 0x58
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ff58 	bl	80028b6 <get_ldnumber>
 8002a06:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da01      	bge.n	8002a12 <find_volume+0x26>
 8002a0e:	230b      	movs	r3, #11
 8002a10:	e238      	b.n	8002e84 <find_volume+0x498>
 8002a12:	4aa8      	ldr	r2, [pc, #672]	; (8002cb4 <find_volume+0x2c8>)
 8002a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <find_volume+0x3a>
 8002a22:	230c      	movs	r3, #12
 8002a24:	e22e      	b.n	8002e84 <find_volume+0x498>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	71fb      	strb	r3, [r7, #7]
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01a      	beq.n	8002a72 <find_volume+0x86>
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fbd3 	bl	80011ec <disk_status>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10c      	bne.n	8002a72 <find_volume+0x86>
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <find_volume+0x82>
 8002a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <find_volume+0x82>
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	e20a      	b.n	8002e84 <find_volume+0x498>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e208      	b.n	8002e84 <find_volume+0x498>
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	705a      	strb	r2, [r3, #1]
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fac7 	bl	8001018 <disk_initialize>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <find_volume+0xb4>
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1f1      	b.n	8002e84 <find_volume+0x498>
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <find_volume+0xca>
 8002aa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <find_volume+0xca>
 8002ab2:	230a      	movs	r3, #10
 8002ab4:	e1e6      	b.n	8002e84 <find_volume+0x498>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8002aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002abe:	f7ff ff3f 	bl	8002940 <check_fs>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d14b      	bne.n	8002b68 <find_volume+0x17c>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad4:	e01f      	b.n	8002b16 <find_volume+0x12a>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002ae4:	4413      	add	r3, r2
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	3304      	adds	r3, #4
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <find_volume+0x114>
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	3308      	adds	r3, #8
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fe5c 	bl	80017b4 <ld_dword>
 8002afc:	4602      	mov	r2, r0
 8002afe:	e000      	b.n	8002b02 <find_volume+0x116>
 8002b00:	2200      	movs	r2, #0
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f843 2c44 	str.w	r2, [r3, #-68]
 8002b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b12:	3301      	adds	r3, #1
 8002b14:	643b      	str	r3, [r7, #64]	; 0x40
 8002b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d9dc      	bls.n	8002ad6 <find_volume+0xea>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <find_volume+0x140>
 8002b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002b34:	4413      	add	r3, r2
 8002b36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <find_volume+0x162>
 8002b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b46:	f7ff fefb 	bl	8002940 <check_fs>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e000      	b.n	8002b50 <find_volume+0x164>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d905      	bls.n	8002b68 <find_volume+0x17c>
 8002b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5e:	3301      	adds	r3, #1
 8002b60:	643b      	str	r3, [r7, #64]	; 0x40
 8002b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d9e1      	bls.n	8002b2c <find_volume+0x140>
 8002b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d101      	bne.n	8002b74 <find_volume+0x188>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e187      	b.n	8002e84 <find_volume+0x498>
 8002b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d901      	bls.n	8002b80 <find_volume+0x194>
 8002b7c:	230d      	movs	r3, #13
 8002b7e:	e181      	b.n	8002e84 <find_volume+0x498>
 8002b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b82:	3330      	adds	r3, #48	; 0x30
 8002b84:	330b      	adds	r3, #11
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fdfc 	bl	8001784 <ld_word>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	d001      	beq.n	8002b98 <find_volume+0x1ac>
 8002b94:	230d      	movs	r3, #13
 8002b96:	e175      	b.n	8002e84 <find_volume+0x498>
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	3330      	adds	r3, #48	; 0x30
 8002b9c:	3316      	adds	r3, #22
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fdf0 	bl	8001784 <ld_word>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <find_volume+0x1d0>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	3330      	adds	r3, #48	; 0x30
 8002bb2:	3324      	adds	r3, #36	; 0x24
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fdfd 	bl	80017b4 <ld_dword>
 8002bba:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc0:	619a      	str	r2, [r3, #24]
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	709a      	strb	r2, [r3, #2]
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	789b      	ldrb	r3, [r3, #2]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d005      	beq.n	8002be0 <find_volume+0x1f4>
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	789b      	ldrb	r3, [r3, #2]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d001      	beq.n	8002be0 <find_volume+0x1f4>
 8002bdc:	230d      	movs	r3, #13
 8002bde:	e151      	b.n	8002e84 <find_volume+0x498>
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	789b      	ldrb	r3, [r3, #2]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf8:	815a      	strh	r2, [r3, #10]
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	895b      	ldrh	r3, [r3, #10]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <find_volume+0x228>
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	895b      	ldrh	r3, [r3, #10]
 8002c06:	461a      	mov	r2, r3
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	895b      	ldrh	r3, [r3, #10]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <find_volume+0x22c>
 8002c14:	230d      	movs	r3, #13
 8002c16:	e135      	b.n	8002e84 <find_volume+0x498>
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	3330      	adds	r3, #48	; 0x30
 8002c1c:	3311      	adds	r3, #17
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fdb0 	bl	8001784 <ld_word>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	811a      	strh	r2, [r3, #8]
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	891b      	ldrh	r3, [r3, #8]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <find_volume+0x252>
 8002c3a:	230d      	movs	r3, #13
 8002c3c:	e122      	b.n	8002e84 <find_volume+0x498>
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	3330      	adds	r3, #48	; 0x30
 8002c42:	3313      	adds	r3, #19
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fd9d 	bl	8001784 <ld_word>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <find_volume+0x276>
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	3330      	adds	r3, #48	; 0x30
 8002c58:	3320      	adds	r3, #32
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fdaa 	bl	80017b4 <ld_dword>
 8002c60:	64b8      	str	r0, [r7, #72]	; 0x48
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	3330      	adds	r3, #48	; 0x30
 8002c66:	330e      	adds	r3, #14
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fd8b 	bl	8001784 <ld_word>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <find_volume+0x290>
 8002c78:	230d      	movs	r3, #13
 8002c7a:	e103      	b.n	8002e84 <find_volume+0x498>
 8002c7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	4413      	add	r3, r2
 8002c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c84:	8912      	ldrh	r2, [r2, #8]
 8002c86:	0912      	lsrs	r2, r2, #4
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d201      	bcs.n	8002c9a <find_volume+0x2ae>
 8002c96:	230d      	movs	r3, #13
 8002c98:	e0f4      	b.n	8002e84 <find_volume+0x498>
 8002c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca2:	8952      	ldrh	r2, [r2, #10]
 8002ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <find_volume+0x2cc>
 8002cb0:	230d      	movs	r3, #13
 8002cb2:	e0e7      	b.n	8002e84 <find_volume+0x498>
 8002cb4:	20000034 	.word	0x20000034
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <find_volume+0x4a0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <find_volume+0x2e0>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d802      	bhi.n	8002cdc <find_volume+0x2f0>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d802      	bhi.n	8002cec <find_volume+0x300>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <find_volume+0x30c>
 8002cf4:	230d      	movs	r3, #13
 8002cf6:	e0c5      	b.n	8002e84 <find_volume+0x498>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	1c9a      	adds	r2, r3, #2
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	615a      	str	r2, [r3, #20]
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d04:	61da      	str	r2, [r3, #28]
 8002d06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	621a      	str	r2, [r3, #32]
 8002d10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	441a      	add	r2, r3
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d11e      	bne.n	8002d60 <find_volume+0x374>
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	3330      	adds	r3, #48	; 0x30
 8002d26:	332a      	adds	r3, #42	; 0x2a
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fd2b 	bl	8001784 <ld_word>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <find_volume+0x34c>
 8002d34:	230d      	movs	r3, #13
 8002d36:	e0a5      	b.n	8002e84 <find_volume+0x498>
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	891b      	ldrh	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <find_volume+0x358>
 8002d40:	230d      	movs	r3, #13
 8002d42:	e09f      	b.n	8002e84 <find_volume+0x498>
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	3330      	adds	r3, #48	; 0x30
 8002d48:	332c      	adds	r3, #44	; 0x2c
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fd32 	bl	80017b4 <ld_dword>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5e:	e01f      	b.n	8002da0 <find_volume+0x3b4>
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	891b      	ldrh	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <find_volume+0x380>
 8002d68:	230d      	movs	r3, #13
 8002d6a:	e08b      	b.n	8002e84 <find_volume+0x498>
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d72:	441a      	add	r2, r3
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
 8002d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d103      	bne.n	8002d88 <find_volume+0x39c>
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	e00a      	b.n	8002d9e <find_volume+0x3b2>
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	085a      	lsrs	r2, r3, #1
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d201      	bcs.n	8002db4 <find_volume+0x3c8>
 8002db0:	230d      	movs	r3, #13
 8002db2:	e067      	b.n	8002e84 <find_volume+0x498>
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	711a      	strb	r2, [r3, #4]
 8002dca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d149      	bne.n	8002e66 <find_volume+0x47a>
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	3330      	adds	r3, #48	; 0x30
 8002dd6:	3330      	adds	r3, #48	; 0x30
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fcd3 	bl	8001784 <ld_word>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d140      	bne.n	8002e66 <find_volume+0x47a>
 8002de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de6:	3301      	adds	r3, #1
 8002de8:	4619      	mov	r1, r3
 8002dea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dec:	f7fe fe4f 	bl	8001a8e <move_window>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d137      	bne.n	8002e66 <find_volume+0x47a>
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	711a      	strb	r2, [r3, #4]
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	3330      	adds	r3, #48	; 0x30
 8002e00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fcbd 	bl	8001784 <ld_word>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d127      	bne.n	8002e66 <find_volume+0x47a>
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	3330      	adds	r3, #48	; 0x30
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fcca 	bl	80017b4 <ld_dword>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <find_volume+0x4a4>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d11e      	bne.n	8002e66 <find_volume+0x47a>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	3330      	adds	r3, #48	; 0x30
 8002e2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fcbf 	bl	80017b4 <ld_dword>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <find_volume+0x4a8>)
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d113      	bne.n	8002e66 <find_volume+0x47a>
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	3330      	adds	r3, #48	; 0x30
 8002e42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fcb4 	bl	80017b4 <ld_dword>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	3330      	adds	r3, #48	; 0x30
 8002e56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fcaa 	bl	80017b4 <ld_dword>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <find_volume+0x4ac>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <find_volume+0x4ac>)
 8002e78:	801a      	strh	r2, [r3, #0]
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <find_volume+0x4ac>)
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	80da      	strh	r2, [r3, #6]
 8002e82:	2300      	movs	r3, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	3758      	adds	r7, #88	; 0x58
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	0ffffff5 	.word	0x0ffffff5
 8002e90:	41615252 	.word	0x41615252
 8002e94:	61417272 	.word	0x61417272
 8002e98:	20000038 	.word	0x20000038

08002e9c <validate>:
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	2309      	movs	r3, #9
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01c      	beq.n	8002eea <validate+0x4e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <validate+0x4e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d013      	beq.n	8002eea <validate+0x4e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	889a      	ldrh	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	88db      	ldrh	r3, [r3, #6]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d10c      	bne.n	8002eea <validate+0x4e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f988 	bl	80011ec <disk_status>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <validate+0x4e>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <validate+0x5a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e000      	b.n	8002ef8 <validate+0x5c>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <f_mount>:
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fcc9 	bl	80028b6 <get_ldnumber>
 8002f24:	61f8      	str	r0, [r7, #28]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da01      	bge.n	8002f30 <f_mount+0x28>
 8002f2c:	230b      	movs	r3, #11
 8002f2e:	e025      	b.n	8002f7c <f_mount+0x74>
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <f_mount+0x7c>)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <f_mount+0x3e>
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <f_mount+0x4a>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	490b      	ldr	r1, [pc, #44]	; (8002f84 <f_mount+0x7c>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <f_mount+0x5e>
 8002f62:	2300      	movs	r3, #0
 8002f64:	e00a      	b.n	8002f7c <f_mount+0x74>
 8002f66:	f107 010c 	add.w	r1, r7, #12
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fd3b 	bl	80029ec <find_volume>
 8002f76:	4603      	mov	r3, r0
 8002f78:	75fb      	strb	r3, [r7, #23]
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000034 	.word	0x20000034

08002f88 <f_open>:
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b099      	sub	sp, #100	; 0x64
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	71fb      	strb	r3, [r7, #7]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <f_open+0x18>
 8002f9c:	2309      	movs	r3, #9
 8002f9e:	e172      	b.n	8003286 <f_open+0x2fe>
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa6:	71fb      	strb	r3, [r7, #7]
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	f107 0114 	add.w	r1, r7, #20
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd1a 	bl	80029ec <find_volume>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 8156 	bne.w	8003274 <f_open+0x2ec>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	f107 0318 	add.w	r3, r7, #24
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fbff 	bl	80027d8 <follow_path>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <f_open+0x70>
 8002fe8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da02      	bge.n	8002ff8 <f_open+0x70>
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 031c 	and.w	r3, r3, #28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d073      	beq.n	80030ea <f_open+0x162>
 8003002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <f_open+0xa4>
 800300a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800300e:	2b04      	cmp	r3, #4
 8003010:	d107      	bne.n	8003022 <f_open+0x9a>
 8003012:	f107 0318 	add.w	r3, r7, #24
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fae9 	bl	80025ee <dir_register>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	71fb      	strb	r3, [r7, #7]
 800302a:	e010      	b.n	800304e <f_open+0xc6>
 800302c:	7fbb      	ldrb	r3, [r7, #30]
 800302e:	f003 0311 	and.w	r3, r3, #17
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <f_open+0xb6>
 8003036:	2307      	movs	r3, #7
 8003038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800303c:	e007      	b.n	800304e <f_open+0xc6>
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <f_open+0xc6>
 8003048:	2308      	movs	r3, #8
 800304a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800304e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003052:	2b00      	cmp	r3, #0
 8003054:	d163      	bne.n	800311e <f_open+0x196>
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05e      	beq.n	800311e <f_open+0x196>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fa2d 	bl	80024c6 <ld_clust>
 800306c:	6538      	str	r0, [r7, #80]	; 0x50
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	f103 040e 	add.w	r4, r3, #14
 8003074:	f7fe fb7c 	bl	8001770 <get_fattime>
 8003078:	4603      	mov	r3, r0
 800307a:	4619      	mov	r1, r3
 800307c:	4620      	mov	r0, r4
 800307e:	f7fe fbd7 	bl	8001830 <st_dword>
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	330b      	adds	r3, #11
 8003086:	2220      	movs	r2, #32
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800308e:	2200      	movs	r2, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fa37 	bl	8002504 <st_clust>
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	331c      	adds	r3, #28
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fbc7 	bl	8001830 <st_dword>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2201      	movs	r2, #1
 80030a6:	70da      	strb	r2, [r3, #3]
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d037      	beq.n	800311e <f_open+0x196>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	f107 0318 	add.w	r3, r7, #24
 80030b8:	2200      	movs	r2, #0
 80030ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe ff2c 	bl	8001f1a <remove_chain>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d126      	bne.n	800311e <f_open+0x196>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fcda 	bl	8001a8e <move_window>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030e4:	3a01      	subs	r2, #1
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e019      	b.n	800311e <f_open+0x196>
 80030ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d115      	bne.n	800311e <f_open+0x196>
 80030f2:	7fbb      	ldrb	r3, [r7, #30]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <f_open+0x17c>
 80030fc:	2304      	movs	r3, #4
 80030fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003102:	e00c      	b.n	800311e <f_open+0x196>
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <f_open+0x196>
 800310e:	7fbb      	ldrb	r3, [r7, #30]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <f_open+0x196>
 8003118:	2307      	movs	r3, #7
 800311a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800311e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <f_open+0x1be>
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <f_open+0x1b0>
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003136:	71fb      	strb	r3, [r7, #7]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]
 8003140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24
 8003146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 8092 	bne.w	8003274 <f_open+0x2ec>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f9b5 	bl	80024c6 <ld_clust>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	331c      	adds	r3, #28
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fb24 	bl	80017b4 <ld_dword>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	88da      	ldrh	r2, [r3, #6]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	809a      	strh	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	79fa      	ldrb	r2, [r7, #7]
 8003184:	741a      	strb	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	745a      	strb	r2, [r3, #17]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3328      	adds	r3, #40	; 0x28
 800319c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fb91 	bl	80018ca <mem_set>
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d060      	beq.n	8003274 <f_open+0x2ec>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d05c      	beq.n	8003274 <f_open+0x2ec>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	615a      	str	r2, [r3, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	895b      	ldrh	r3, [r3, #10]
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
 80031d6:	e016      	b.n	8003206 <f_open+0x27e>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fd10 	bl	8001c02 <get_fat>
 80031e2:	65b8      	str	r0, [r7, #88]	; 0x58
 80031e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d802      	bhi.n	80031f0 <f_open+0x268>
 80031ea:	2302      	movs	r3, #2
 80031ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d102      	bne.n	80031fe <f_open+0x276>
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	657b      	str	r3, [r7, #84]	; 0x54
 8003206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <f_open+0x28e>
 800320e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003212:	429a      	cmp	r2, r3
 8003214:	d8e0      	bhi.n	80031d8 <f_open+0x250>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321a:	619a      	str	r2, [r3, #24]
 800321c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003220:	2b00      	cmp	r3, #0
 8003222:	d127      	bne.n	8003274 <f_open+0x2ec>
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322a:	2b00      	cmp	r3, #0
 800322c:	d022      	beq.n	8003274 <f_open+0x2ec>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fcc6 	bl	8001bc4 <clst2sect>
 8003238:	6478      	str	r0, [r7, #68]	; 0x44
 800323a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <f_open+0x2c0>
 8003240:	2302      	movs	r3, #2
 8003242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003246:	e015      	b.n	8003274 <f_open+0x2ec>
 8003248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324a:	0a5a      	lsrs	r2, r3, #9
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	441a      	add	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	61da      	str	r2, [r3, #28]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	7858      	ldrb	r0, [r3, #1]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	2301      	movs	r3, #1
 8003264:	f7fd ffd8 	bl	8001218 <disk_read>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <f_open+0x2ec>
 800326e:	2301      	movs	r3, #1
 8003270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <f_open+0x2fa>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003286:	4618      	mov	r0, r3
 8003288:	3764      	adds	r7, #100	; 0x64
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}

0800328e <f_read>:
 800328e:	b580      	push	{r7, lr}
 8003290:	b08e      	sub	sp, #56	; 0x38
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f107 0214 	add.w	r2, r7, #20
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fdf4 	bl	8002e9c <validate>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80032ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <f_read+0x44>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	7c5b      	ldrb	r3, [r3, #17]
 80032c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80032ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <f_read+0x4a>
 80032d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032d6:	e109      	b.n	80034ec <f_read+0x25e>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	7c1b      	ldrb	r3, [r3, #16]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <f_read+0x5a>
 80032e4:	2307      	movs	r3, #7
 80032e6:	e101      	b.n	80034ec <f_read+0x25e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	623b      	str	r3, [r7, #32]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f240 80f2 	bls.w	80034e2 <f_read+0x254>
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	e0ee      	b.n	80034e2 <f_read+0x254>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 80ba 	bne.w	8003486 <f_read+0x1f8>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	0a5b      	lsrs	r3, r3, #9
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	8952      	ldrh	r2, [r2, #10]
 800331c:	3a01      	subs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d123      	bne.n	8003370 <f_read+0xe2>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <f_read+0xaa>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
 8003336:	e007      	b.n	8003348 <f_read+0xba>
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe fc5e 	bl	8001c02 <get_fat>
 8003346:	6338      	str	r0, [r7, #48]	; 0x30
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	2b01      	cmp	r3, #1
 800334c:	d804      	bhi.n	8003358 <f_read+0xca>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2202      	movs	r2, #2
 8003352:	745a      	strb	r2, [r3, #17]
 8003354:	2302      	movs	r3, #2
 8003356:	e0c9      	b.n	80034ec <f_read+0x25e>
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d104      	bne.n	800336a <f_read+0xdc>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	745a      	strb	r2, [r3, #17]
 8003366:	2301      	movs	r3, #1
 8003368:	e0c0      	b.n	80034ec <f_read+0x25e>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336e:	619a      	str	r2, [r3, #24]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7fe fc23 	bl	8001bc4 <clst2sect>
 800337e:	61b8      	str	r0, [r7, #24]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <f_read+0x102>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2202      	movs	r2, #2
 800338a:	745a      	strb	r2, [r3, #17]
 800338c:	2302      	movs	r3, #2
 800338e:	e0ad      	b.n	80034ec <f_read+0x25e>
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	0a5b      	lsrs	r3, r3, #9
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d039      	beq.n	8003418 <f_read+0x18a>
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	4413      	add	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	8952      	ldrh	r2, [r2, #10]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d905      	bls.n	80033be <f_read+0x130>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	895b      	ldrh	r3, [r3, #10]
 80033b6:	461a      	mov	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	7858      	ldrb	r0, [r3, #1]
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c8:	f7fd ff26 	bl	8001218 <disk_read>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <f_read+0x14e>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	745a      	strb	r2, [r3, #17]
 80033d8:	2301      	movs	r3, #1
 80033da:	e087      	b.n	80034ec <f_read+0x25e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	7c1b      	ldrb	r3, [r3, #16]
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da14      	bge.n	8003410 <f_read+0x182>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d90d      	bls.n	8003410 <f_read+0x182>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	025b      	lsls	r3, r3, #9
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	18d0      	adds	r0, r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3328      	adds	r3, #40	; 0x28
 8003406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340a:	4619      	mov	r1, r3
 800340c:	f7fe fa3c 	bl	8001888 <mem_cpy>
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	025b      	lsls	r3, r3, #9
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003416:	e050      	b.n	80034ba <f_read+0x22c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	429a      	cmp	r2, r3
 8003420:	d02e      	beq.n	8003480 <f_read+0x1f2>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	7c1b      	ldrb	r3, [r3, #16]
 8003426:	b25b      	sxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	da18      	bge.n	800345e <f_read+0x1d0>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	7858      	ldrb	r0, [r3, #1]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	2301      	movs	r3, #1
 800343c:	f7fd ff56 	bl	80012ec <disk_write>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <f_read+0x1c2>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	745a      	strb	r2, [r3, #17]
 800344c:	2301      	movs	r3, #1
 800344e:	e04d      	b.n	80034ec <f_read+0x25e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	7c1b      	ldrb	r3, [r3, #16]
 8003454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	741a      	strb	r2, [r3, #16]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	7858      	ldrb	r0, [r3, #1]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003468:	2301      	movs	r3, #1
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	f7fd fed4 	bl	8001218 <disk_read>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <f_read+0x1f2>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	745a      	strb	r2, [r3, #17]
 800347c:	2301      	movs	r3, #1
 800347e:	e035      	b.n	80034ec <f_read+0x25e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d901      	bls.n	80034a0 <f_read+0x212>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	4413      	add	r3, r2
 80034b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b2:	4619      	mov	r1, r3
 80034b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034b6:	f7fe f9e7 	bl	8001888 <mem_cpy>
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	441a      	add	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	4413      	add	r3, r2
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	441a      	add	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	615a      	str	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f47f af0d 	bne.w	8003304 <f_read+0x76>
 80034ea:	2300      	movs	r3, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	3738      	adds	r7, #56	; 0x38
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <f_write>:
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08c      	sub	sp, #48	; 0x30
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f107 0210 	add.w	r2, r7, #16
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fcc1 	bl	8002e9c <validate>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <f_write+0x44>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	7c5b      	ldrb	r3, [r3, #17]
 800352c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <f_write+0x4a>
 8003538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800353c:	e13f      	b.n	80037be <f_write+0x2ca>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	7c1b      	ldrb	r3, [r3, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <f_write+0x5a>
 800354a:	2307      	movs	r3, #7
 800354c:	e137      	b.n	80037be <f_write+0x2ca>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	441a      	add	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	f080 8121 	bcs.w	80037a2 <f_write+0x2ae>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	43db      	mvns	r3, r3
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e11b      	b.n	80037a2 <f_write+0x2ae>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 80d7 	bne.w	8003726 <f_write+0x232>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	0a5b      	lsrs	r3, r3, #9
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	8952      	ldrh	r2, [r2, #10]
 8003582:	3a01      	subs	r2, #1
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d137      	bne.n	80035fe <f_write+0x10a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <f_write+0xbc>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10e      	bne.n	80035c0 <f_write+0xcc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fd1c 	bl	8001fe4 <create_chain>
 80035ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80035ae:	e007      	b.n	80035c0 <f_write+0xcc>
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fe fd13 	bl	8001fe4 <create_chain>
 80035be:	62b8      	str	r0, [r7, #40]	; 0x28
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80f2 	beq.w	80037ac <f_write+0x2b8>
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d104      	bne.n	80035d8 <f_write+0xe4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2202      	movs	r2, #2
 80035d2:	745a      	strb	r2, [r3, #17]
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0f2      	b.n	80037be <f_write+0x2ca>
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d104      	bne.n	80035ea <f_write+0xf6>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	745a      	strb	r2, [r3, #17]
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0e9      	b.n	80037be <f_write+0x2ca>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ee:	619a      	str	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <f_write+0x10a>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	7c1b      	ldrb	r3, [r3, #16]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	da18      	bge.n	800363a <f_write+0x146>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	7858      	ldrb	r0, [r3, #1]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	2301      	movs	r3, #1
 8003618:	f7fd fe68 	bl	80012ec <disk_write>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <f_write+0x138>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	745a      	strb	r2, [r3, #17]
 8003628:	2301      	movs	r3, #1
 800362a:	e0c8      	b.n	80037be <f_write+0x2ca>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	7c1b      	ldrb	r3, [r3, #16]
 8003630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	741a      	strb	r2, [r3, #16]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7fe fabe 	bl	8001bc4 <clst2sect>
 8003648:	6178      	str	r0, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <f_write+0x166>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2202      	movs	r2, #2
 8003654:	745a      	strb	r2, [r3, #17]
 8003656:	2302      	movs	r3, #2
 8003658:	e0b1      	b.n	80037be <f_write+0x2ca>
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	4413      	add	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0a5b      	lsrs	r3, r3, #9
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03c      	beq.n	80036e8 <f_write+0x1f4>
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	4413      	add	r3, r2
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	8952      	ldrh	r2, [r2, #10]
 8003678:	4293      	cmp	r3, r2
 800367a:	d905      	bls.n	8003688 <f_write+0x194>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	895b      	ldrh	r3, [r3, #10]
 8003680:	461a      	mov	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	7858      	ldrb	r0, [r3, #1]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	f7fd fe2b 	bl	80012ec <disk_write>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <f_write+0x1b2>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	745a      	strb	r2, [r3, #17]
 80036a2:	2301      	movs	r3, #1
 80036a4:	e08b      	b.n	80037be <f_write+0x2ca>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	6a3a      	ldr	r2, [r7, #32]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d915      	bls.n	80036e0 <f_write+0x1ec>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	025b      	lsls	r3, r3, #9
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036cc:	4619      	mov	r1, r3
 80036ce:	f7fe f8db 	bl	8001888 <mem_cpy>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	7c1b      	ldrb	r3, [r3, #16]
 80036d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	741a      	strb	r2, [r3, #16]
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	025b      	lsls	r3, r3, #9
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	e03f      	b.n	8003768 <f_write+0x274>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d016      	beq.n	8003720 <f_write+0x22c>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d210      	bcs.n	8003720 <f_write+0x22c>
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	7858      	ldrb	r0, [r3, #1]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003708:	2301      	movs	r3, #1
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	f7fd fd84 	bl	8001218 <disk_read>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <f_write+0x22c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	745a      	strb	r2, [r3, #17]
 800371c:	2301      	movs	r3, #1
 800371e:	e04e      	b.n	80037be <f_write+0x2ca>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	61da      	str	r2, [r3, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d901      	bls.n	8003740 <f_write+0x24c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374e:	4413      	add	r3, r2
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	69f9      	ldr	r1, [r7, #28]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe f897 	bl	8001888 <mem_cpy>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	7c1b      	ldrb	r3, [r3, #16]
 800375e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	741a      	strb	r2, [r3, #16]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	441a      	add	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	4413      	add	r3, r2
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	615a      	str	r2, [r3, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	bf38      	it	cc
 800379c:	461a      	movcc	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f aee0 	bne.w	800356a <f_write+0x76>
 80037aa:	e000      	b.n	80037ae <f_write+0x2ba>
 80037ac:	bf00      	nop
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	7c1b      	ldrb	r3, [r3, #16]
 80037b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	741a      	strb	r2, [r3, #16]
 80037bc:	2300      	movs	r3, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	3730      	adds	r7, #48	; 0x30
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <f_sync>:
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f107 0208 	add.w	r2, r7, #8
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fb60 	bl	8002e9c <validate>
 80037dc:	4603      	mov	r3, r0
 80037de:	75fb      	strb	r3, [r7, #23]
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d168      	bne.n	80038b8 <f_sync+0xf2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7c1b      	ldrb	r3, [r3, #16]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d062      	beq.n	80038b8 <f_sync+0xf2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7c1b      	ldrb	r3, [r3, #16]
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	da15      	bge.n	8003828 <f_sync+0x62>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	7858      	ldrb	r0, [r3, #1]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	2301      	movs	r3, #1
 800380c:	f7fd fd6e 	bl	80012ec <disk_write>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <f_sync+0x54>
 8003816:	2301      	movs	r3, #1
 8003818:	e04f      	b.n	80038ba <f_sync+0xf4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7c1b      	ldrb	r3, [r3, #16]
 800381e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	741a      	strb	r2, [r3, #16]
 8003828:	f7fd ffa2 	bl	8001770 <get_fattime>
 800382c:	6138      	str	r0, [r7, #16]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7fe f929 	bl	8001a8e <move_window>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d138      	bne.n	80038b8 <f_sync+0xf2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	330b      	adds	r3, #11
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	330b      	adds	r3, #11
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	461a      	mov	r2, r3
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	f7fe fe4b 	bl	8002504 <st_clust>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f103 021c 	add.w	r2, r3, #28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f7fd ffd8 	bl	8001830 <st_dword>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3316      	adds	r3, #22
 8003884:	6939      	ldr	r1, [r7, #16]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd ffd2 	bl	8001830 <st_dword>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3312      	adds	r3, #18
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd ffb1 	bl	80017fa <st_word>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2201      	movs	r2, #1
 800389c:	70da      	strb	r2, [r3, #3]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe f921 	bl	8001ae8 <sync_fs>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	7c1b      	ldrb	r3, [r3, #16]
 80038ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	741a      	strb	r2, [r3, #16]
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <f_close>:
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff7b 	bl	80037c6 <f_sync>
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10e      	bne.n	80038f8 <f_close+0x36>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f107 0208 	add.w	r2, r7, #8
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fada 	bl	8002e9c <validate>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <f_close+0x36>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <writeSD>:
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
/*---------------------Zapis na karte SD-----------------------*/
void writeSD()
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
	fresult = f_mount(&FatFs, "", 0);
 800390a:	2200      	movs	r2, #0
 800390c:	4918      	ldr	r1, [pc, #96]	; (8003970 <writeSD+0x6c>)
 800390e:	4819      	ldr	r0, [pc, #100]	; (8003974 <writeSD+0x70>)
 8003910:	f7ff fafa 	bl	8002f08 <f_mount>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <writeSD+0x74>)
 800391a:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&file, "write.txt", FA_OPEN_ALWAYS | FA_WRITE);
 800391c:	2212      	movs	r2, #18
 800391e:	4917      	ldr	r1, [pc, #92]	; (800397c <writeSD+0x78>)
 8003920:	4817      	ldr	r0, [pc, #92]	; (8003980 <writeSD+0x7c>)
 8003922:	f7ff fb31 	bl	8002f88 <f_open>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <writeSD+0x74>)
 800392c:	701a      	strb	r2, [r3, #0]
	int len = sprintf( buffer, "Hello PTM!\r\n");
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <writeSD+0x80>)
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <writeSD+0x84>)
 8003932:	4614      	mov	r4, r2
 8003934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003936:	6020      	str	r0, [r4, #0]
 8003938:	6061      	str	r1, [r4, #4]
 800393a:	60a2      	str	r2, [r4, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	7323      	strb	r3, [r4, #12]
 8003940:	230c      	movs	r3, #12
 8003942:	607b      	str	r3, [r7, #4]
	fresult = f_write(&file, buffer, len, &bytes_written);
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <writeSD+0x88>)
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <writeSD+0x80>)
 800394a:	480d      	ldr	r0, [pc, #52]	; (8003980 <writeSD+0x7c>)
 800394c:	f7ff fdd2 	bl	80034f4 <f_write>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <writeSD+0x74>)
 8003956:	701a      	strb	r2, [r3, #0]
	fresult = f_close (&file);
 8003958:	4809      	ldr	r0, [pc, #36]	; (8003980 <writeSD+0x7c>)
 800395a:	f7ff ffb2 	bl	80038c2 <f_close>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <writeSD+0x74>)
 8003964:	701a      	strb	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	bf00      	nop
 8003970:	0800764c 	.word	0x0800764c
 8003974:	20000040 	.word	0x20000040
 8003978:	20000680 	.word	0x20000680
 800397c:	08007650 	.word	0x08007650
 8003980:	200002f8 	.word	0x200002f8
 8003984:	20000580 	.word	0x20000580
 8003988:	0800765c 	.word	0x0800765c
 800398c:	2000071c 	.word	0x2000071c

08003990 <readSD>:

/*---------------------Odczyt na karcie SD-----------------------*/
void readSD()
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
	fresult = f_mount(&FatFs, "", 0);
 8003994:	2200      	movs	r2, #0
 8003996:	4912      	ldr	r1, [pc, #72]	; (80039e0 <readSD+0x50>)
 8003998:	4812      	ldr	r0, [pc, #72]	; (80039e4 <readSD+0x54>)
 800399a:	f7ff fab5 	bl	8002f08 <f_mount>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <readSD+0x58>)
 80039a4:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&file, "read.txt", FA_READ);
 80039a6:	2201      	movs	r2, #1
 80039a8:	4910      	ldr	r1, [pc, #64]	; (80039ec <readSD+0x5c>)
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <readSD+0x60>)
 80039ac:	f7ff faec 	bl	8002f88 <f_open>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <readSD+0x58>)
 80039b6:	701a      	strb	r2, [r3, #0]
	fresult = f_read(&file, buffer, 16, &bytes_read);
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <readSD+0x64>)
 80039ba:	2210      	movs	r2, #16
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <readSD+0x68>)
 80039be:	480c      	ldr	r0, [pc, #48]	; (80039f0 <readSD+0x60>)
 80039c0:	f7ff fc65 	bl	800328e <f_read>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <readSD+0x58>)
 80039ca:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&file);
 80039cc:	4808      	ldr	r0, [pc, #32]	; (80039f0 <readSD+0x60>)
 80039ce:	f7ff ff78 	bl	80038c2 <f_close>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <readSD+0x58>)
 80039d8:	701a      	strb	r2, [r3, #0]

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	0800764c 	.word	0x0800764c
 80039e4:	20000040 	.word	0x20000040
 80039e8:	20000680 	.word	0x20000680
 80039ec:	0800766c 	.word	0x0800766c
 80039f0:	200002f8 	.word	0x200002f8
 80039f4:	20000568 	.word	0x20000568
 80039f8:	20000580 	.word	0x20000580
 80039fc:	00000000 	.word	0x00000000

08003a00 <HAL_TIM_PeriodElapsedCallback>:


/*--------------------Odczyt z mikrofonu------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM4)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d123      	bne.n	8003a5a <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		HAL_ADC_Start(&hadc1);
 8003a12:	4818      	ldr	r0, [pc, #96]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003a14:	f000 ffea 	bl	80049ec <HAL_ADC_Start>
			  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8003a18:	210a      	movs	r1, #10
 8003a1a:	4816      	ldr	r0, [pc, #88]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003a1c:	f001 f8ac 	bl	8004b78 <HAL_ADC_PollForConversion>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d119      	bne.n	8003a5a <HAL_TIM_PeriodElapsedCallback+0x5a>
			  {
				  adc_value = HAL_ADC_GetValue(&hadc1);
 8003a26:	4813      	ldr	r0, [pc, #76]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003a28:	f001 f92a 	bl	8004c80 <HAL_ADC_GetValue>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003a32:	801a      	strh	r2, [r3, #0]
				  x = (2.95/(double)4096) * adc_value;
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fd17 	bl	800046c <__aeabi_i2d>
 8003a3e:	a30a      	add	r3, pc, #40	; (adr r3, 8003a68 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fd7c 	bl	8000540 <__aeabi_dmul>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f7fc ff88 	bl	8000964 <__aeabi_d2iz>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003a58:	601a      	str	r2, [r3, #0]
			  }
	}
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd90      	pop	{r4, r7, pc}
 8003a62:	bf00      	nop
 8003a64:	f3af 8000 	nop.w
 8003a68:	9999999a 	.word	0x9999999a
 8003a6c:	3f479999 	.word	0x3f479999
 8003a70:	40000800 	.word	0x40000800
 8003a74:	20000520 	.word	0x20000520
 8003a78:	200002f4 	.word	0x200002f4
 8003a7c:	2000003c 	.word	0x2000003c

08003a80 <rgb1_set>:



/*-------------------Konfiguracja diody RGB1----------------------------*/
void rgb1_set(uint8_t red, uint8_t blue, uint8_t green)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	71bb      	strb	r3, [r7, #6]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	717b      	strb	r3, [r7, #5]
	htim3.Instance->CCR1=red*2000;
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a98:	fb02 f203 	mul.w	r2, r2, r3
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <rgb1_set+0x50>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2=blue*2000;
 8003aa2:	79bb      	ldrb	r3, [r7, #6]
 8003aa4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003aa8:	fb02 f203 	mul.w	r2, r2, r3
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <rgb1_set+0x50>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3=green*2000;
 8003ab2:	797b      	ldrb	r3, [r7, #5]
 8003ab4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ab8:	fb02 f203 	mul.w	r2, r2, r3
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <rgb1_set+0x50>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200002b4 	.word	0x200002b4

08003ad4 <rgb1_set_color>:

/*-------------------Ustalenie koloru diody RGB1 zaleznie od przypadku----------------------------*/
void rgb1_set_color()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
	/*do zrobienia:
	 dac przypadki i oznaczyc kolor*/
	rgb1_set(255,0,0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2100      	movs	r1, #0
 8003adc:	20ff      	movs	r0, #255	; 0xff
 8003ade:	f7ff ffcf 	bl	8003a80 <rgb1_set>
	HAL_Delay(100); //wykorzystywane bylo podczas sprawdzania, czy dobrze swieci dioda
 8003ae2:	2064      	movs	r0, #100	; 0x64
 8003ae4:	f000 ff1c 	bl	8004920 <HAL_Delay>
	rgb1_set(0,255,0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	21ff      	movs	r1, #255	; 0xff
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7ff ffc7 	bl	8003a80 <rgb1_set>
	HAL_Delay(100);
 8003af2:	2064      	movs	r0, #100	; 0x64
 8003af4:	f000 ff14 	bl	8004920 <HAL_Delay>
	rgb1_set(0,0,255);
 8003af8:	22ff      	movs	r2, #255	; 0xff
 8003afa:	2100      	movs	r1, #0
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7ff ffbf 	bl	8003a80 <rgb1_set>
	HAL_Delay(100);
 8003b02:	2064      	movs	r0, #100	; 0x64
 8003b04:	f000 ff0c 	bl	8004920 <HAL_Delay>
	rgb1_set(255,0,255);
 8003b08:	22ff      	movs	r2, #255	; 0xff
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	20ff      	movs	r0, #255	; 0xff
 8003b0e:	f7ff ffb7 	bl	8003a80 <rgb1_set>
	HAL_Delay(100);
 8003b12:	2064      	movs	r0, #100	; 0x64
 8003b14:	f000 ff04 	bl	8004920 <HAL_Delay>
	rgb1_set(0,255,255);
 8003b18:	22ff      	movs	r2, #255	; 0xff
 8003b1a:	21ff      	movs	r1, #255	; 0xff
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7ff ffaf 	bl	8003a80 <rgb1_set>
	HAL_Delay(100);
 8003b22:	2064      	movs	r0, #100	; 0x64
 8003b24:	f000 fefc 	bl	8004920 <HAL_Delay>
	rgb1_set(255,255,0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	21ff      	movs	r1, #255	; 0xff
 8003b2c:	20ff      	movs	r0, #255	; 0xff
 8003b2e:	f7ff ffa7 	bl	8003a80 <rgb1_set>
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b3c:	f000 fe7e 	bl	800483c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b40:	f000 f8ea 	bl	8003d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b44:	f000 fb56 	bl	80041f4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8003b48:	f000 fb06 	bl	8004158 <MX_TIM4_Init>
  MX_TIM3_Init();
 8003b4c:	f000 fa76 	bl	800403c <MX_TIM3_Init>
  MX_TIM2_Init();
 8003b50:	f000 f9fe 	bl	8003f50 <MX_TIM2_Init>
  MX_DAC_Init();
 8003b54:	f000 f99c 	bl	8003e90 <MX_DAC_Init>
  MX_ADC1_Init();
 8003b58:	f000 f948 	bl	8003dec <MX_ADC1_Init>
  MX_SPI1_Init();
 8003b5c:	f000 f9c2 	bl	8003ee4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003b60:	2100      	movs	r1, #0
 8003b62:	4867      	ldr	r0, [pc, #412]	; (8003d00 <main+0x1c8>)
 8003b64:	f002 fea0 	bl	80068a8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003b68:	2104      	movs	r1, #4
 8003b6a:	4865      	ldr	r0, [pc, #404]	; (8003d00 <main+0x1c8>)
 8003b6c:	f002 fe9c 	bl	80068a8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003b70:	2108      	movs	r1, #8
 8003b72:	4863      	ldr	r0, [pc, #396]	; (8003d00 <main+0x1c8>)
 8003b74:	f002 fe98 	bl	80068a8 <HAL_TIM_PWM_Start>

HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4862      	ldr	r0, [pc, #392]	; (8003d04 <main+0x1cc>)
 8003b7c:	f002 fe94 	bl	80068a8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  writeSD();
 8003b80:	f7ff fec0 	bl	8003904 <writeSD>
	  readSD();
 8003b84:	f7ff ff04 	bl	8003990 <readSD>

	  rgb1_set_color();
 8003b88:	f7ff ffa4 	bl	8003ad4 <rgb1_set_color>


	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==GPIO_PIN_RESET)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	485e      	ldr	r0, [pc, #376]	; (8003d08 <main+0x1d0>)
 8003b90:	f001 fdbc 	bl	800570c <HAL_GPIO_ReadPin>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <main+0x68>
	  	  	 	  	 			  	  	{wybor=0;}
 8003b9a:	4b5c      	ldr	r3, [pc, #368]	; (8003d0c <main+0x1d4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1)==GPIO_PIN_RESET)
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	4859      	ldr	r0, [pc, #356]	; (8003d08 <main+0x1d0>)
 8003ba4:	f001 fdb2 	bl	800570c <HAL_GPIO_ReadPin>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <main+0x7c>
	  	  	 	  	  	 			  	{wybor=1;}
 8003bae:	4b57      	ldr	r3, [pc, #348]	; (8003d0c <main+0x1d4>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2)==GPIO_PIN_RESET)
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	4854      	ldr	r0, [pc, #336]	; (8003d08 <main+0x1d0>)
 8003bb8:	f001 fda8 	bl	800570c <HAL_GPIO_ReadPin>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <main+0x90>
	  	  		  	  	  	  	 		{wybor=2;}
 8003bc2:	4b52      	ldr	r3, [pc, #328]	; (8003d0c <main+0x1d4>)
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)==GPIO_PIN_RESET)
 8003bc8:	2108      	movs	r1, #8
 8003bca:	484f      	ldr	r0, [pc, #316]	; (8003d08 <main+0x1d0>)
 8003bcc:	f001 fd9e 	bl	800570c <HAL_GPIO_ReadPin>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <main+0xa4>
	  	  		  	  	 	  	  	 	{wybor=3;}
 8003bd6:	4b4d      	ldr	r3, [pc, #308]	; (8003d0c <main+0x1d4>)
 8003bd8:	2203      	movs	r2, #3
 8003bda:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)==GPIO_PIN_RESET)
 8003bdc:	2110      	movs	r1, #16
 8003bde:	484a      	ldr	r0, [pc, #296]	; (8003d08 <main+0x1d0>)
 8003be0:	f001 fd94 	bl	800570c <HAL_GPIO_ReadPin>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <main+0xb8>
	  	  	  	  	  	  	 			{wybor=4;}
 8003bea:	4b48      	ldr	r3, [pc, #288]	; (8003d0c <main+0x1d4>)
 8003bec:	2204      	movs	r2, #4
 8003bee:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)==GPIO_PIN_RESET)
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	4845      	ldr	r0, [pc, #276]	; (8003d08 <main+0x1d0>)
 8003bf4:	f001 fd8a 	bl	800570c <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <main+0xcc>
	  	  	  	  	 	  	  	 		{wybor=5;}
 8003bfe:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <main+0x1d4>)
 8003c00:	2205      	movs	r2, #5
 8003c02:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==GPIO_PIN_RESET)
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	4840      	ldr	r0, [pc, #256]	; (8003d08 <main+0x1d0>)
 8003c08:	f001 fd80 	bl	800570c <HAL_GPIO_ReadPin>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <main+0xe0>
	  	  	  	  		  	  	  	  	 {wybor=6;}
 8003c12:	4b3e      	ldr	r3, [pc, #248]	; (8003d0c <main+0x1d4>)
 8003c14:	2206      	movs	r2, #6
 8003c16:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)==GPIO_PIN_RESET)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	483b      	ldr	r0, [pc, #236]	; (8003d08 <main+0x1d0>)
 8003c1c:	f001 fd76 	bl	800570c <HAL_GPIO_ReadPin>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <main+0xf4>
	  	  	  	  		  	  	 	  	 {wybor=7;}
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <main+0x1d4>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]

	  	  switch(wybor)
 8003c2c:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <main+0x1d4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b07      	cmp	r3, #7
 8003c32:	d84b      	bhi.n	8003ccc <main+0x194>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <main+0x104>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c5d 	.word	0x08003c5d
 8003c40:	08003c6b 	.word	0x08003c6b
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c95 	.word	0x08003c95
 8003c50:	08003ca3 	.word	0x08003ca3
 8003c54:	08003cb1 	.word	0x08003cb1
 8003c58:	08003cbf 	.word	0x08003cbf
	  	  	  {				case 0: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET); break;}
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c62:	482b      	ldr	r0, [pc, #172]	; (8003d10 <main+0x1d8>)
 8003c64:	f001 fd6a 	bl	800573c <HAL_GPIO_WritePin>
 8003c68:	e037      	b.n	8003cda <main+0x1a2>
	  	  	  				case 1: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET); break;}
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c70:	4827      	ldr	r0, [pc, #156]	; (8003d10 <main+0x1d8>)
 8003c72:	f001 fd63 	bl	800573c <HAL_GPIO_WritePin>
 8003c76:	e030      	b.n	8003cda <main+0x1a2>
	  	  	  				case 2: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET); break;}
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c7e:	4824      	ldr	r0, [pc, #144]	; (8003d10 <main+0x1d8>)
 8003c80:	f001 fd5c 	bl	800573c <HAL_GPIO_WritePin>
 8003c84:	e029      	b.n	8003cda <main+0x1a2>
	  	  	  				case 3: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET); break;}
 8003c86:	2200      	movs	r2, #0
 8003c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c8c:	4820      	ldr	r0, [pc, #128]	; (8003d10 <main+0x1d8>)
 8003c8e:	f001 fd55 	bl	800573c <HAL_GPIO_WritePin>
 8003c92:	e022      	b.n	8003cda <main+0x1a2>
	  	  	  	  	  	  	case 4: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET); break;}
 8003c94:	2201      	movs	r2, #1
 8003c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c9a:	481d      	ldr	r0, [pc, #116]	; (8003d10 <main+0x1d8>)
 8003c9c:	f001 fd4e 	bl	800573c <HAL_GPIO_WritePin>
 8003ca0:	e01b      	b.n	8003cda <main+0x1a2>
				  	  	  	case 5: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET); break;}
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ca8:	4819      	ldr	r0, [pc, #100]	; (8003d10 <main+0x1d8>)
 8003caa:	f001 fd47 	bl	800573c <HAL_GPIO_WritePin>
 8003cae:	e014      	b.n	8003cda <main+0x1a2>
	  	  					case 6: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET); break;}
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cb6:	4816      	ldr	r0, [pc, #88]	; (8003d10 <main+0x1d8>)
 8003cb8:	f001 fd40 	bl	800573c <HAL_GPIO_WritePin>
 8003cbc:	e00d      	b.n	8003cda <main+0x1a2>
	  	  					case 7: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET); break;}
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cc4:	4812      	ldr	r0, [pc, #72]	; (8003d10 <main+0x1d8>)
 8003cc6:	f001 fd39 	bl	800573c <HAL_GPIO_WritePin>
 8003cca:	e006      	b.n	8003cda <main+0x1a2>
	  	  					default: {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, RESET);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003cd2:	480f      	ldr	r0, [pc, #60]	; (8003d10 <main+0x1d8>)
 8003cd4:	f001 fd32 	bl	800573c <HAL_GPIO_WritePin>
	  	  					break;}
 8003cd8:	bf00      	nop

	  	  	  }


	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8003cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <main+0x1dc>)
 8003ce0:	f001 fd45 	bl	800576e <HAL_GPIO_TogglePin>
	  		  			HAL_Delay(1000);
 8003ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce8:	f000 fe1a 	bl	8004920 <HAL_Delay>
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8003cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cf0:	4808      	ldr	r0, [pc, #32]	; (8003d14 <main+0x1dc>)
 8003cf2:	f001 fd3c 	bl	800576e <HAL_GPIO_TogglePin>
	  		  			HAL_Delay(1000);
 8003cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cfa:	f000 fe11 	bl	8004920 <HAL_Delay>
	  writeSD();
 8003cfe:	e73f      	b.n	8003b80 <main+0x48>
 8003d00:	200002b4 	.word	0x200002b4
 8003d04:	200006dc 	.word	0x200006dc
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	40020c00 	.word	0x40020c00
 8003d14:	40020000 	.word	0x40020000

08003d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b094      	sub	sp, #80	; 0x50
 8003d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d1e:	f107 0320 	add.w	r3, r7, #32
 8003d22:	2230      	movs	r2, #48	; 0x30
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fc6e 	bl	8007608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <SystemClock_Config+0xcc>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a27      	ldr	r2, [pc, #156]	; (8003de4 <SystemClock_Config+0xcc>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <SystemClock_Config+0xcc>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <SystemClock_Config+0xd0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <SystemClock_Config+0xd0>)
 8003d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <SystemClock_Config+0xd0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003d88:	2304      	movs	r3, #4
 8003d8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d8c:	23a8      	movs	r3, #168	; 0xa8
 8003d8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d90:	2302      	movs	r3, #2
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d94:	2304      	movs	r3, #4
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d98:	f107 0320 	add.w	r3, r7, #32
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fd01 	bl	80057a4 <HAL_RCC_OscConfig>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003da8:	f000 fadc 	bl	8004364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dac:	230f      	movs	r3, #15
 8003dae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db0:	2302      	movs	r3, #2
 8003db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003db8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	2105      	movs	r1, #5
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 ff5a 	bl	8005c84 <HAL_RCC_ClockConfig>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003dd6:	f000 fac5 	bl	8004364 <Error_Handler>
  }
}
 8003dda:	bf00      	nop
 8003ddc:	3750      	adds	r7, #80	; 0x50
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000

08003dec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003df2:	463b      	mov	r3, r7
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e00:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <MX_ADC1_Init+0x9c>)
 8003e02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e26:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <MX_ADC1_Init+0xa0>)
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e4c:	480d      	ldr	r0, [pc, #52]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e4e:	f000 fd89 	bl	8004964 <HAL_ADC_Init>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003e58:	f000 fa84 	bl	8004364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e60:	2301      	movs	r3, #1
 8003e62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e68:	463b      	mov	r3, r7
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4805      	ldr	r0, [pc, #20]	; (8003e84 <MX_ADC1_Init+0x98>)
 8003e6e:	f000 ff15 	bl	8004c9c <HAL_ADC_ConfigChannel>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e78:	f000 fa74 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000520 	.word	0x20000520
 8003e88:	40012000 	.word	0x40012000
 8003e8c:	0f000001 	.word	0x0f000001

08003e90 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003e96:	463b      	mov	r3, r7
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <MX_DAC_Init+0x4c>)
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <MX_DAC_Init+0x50>)
 8003ea2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <MX_DAC_Init+0x4c>)
 8003ea6:	f001 fa28 	bl	80052fa <HAL_DAC_Init>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003eb0:	f000 fa58 	bl	8004364 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4806      	ldr	r0, [pc, #24]	; (8003edc <MX_DAC_Init+0x4c>)
 8003ec4:	f001 fa3b 	bl	800533e <HAL_DAC_ConfigChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003ece:	f000 fa49 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2000056c 	.word	0x2000056c
 8003ee0:	40007400 	.word	0x40007400

08003ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <MX_SPI1_Init+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f18:	2218      	movs	r2, #24
 8003f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f30:	220a      	movs	r2, #10
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f34:	4804      	ldr	r0, [pc, #16]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f36:	f002 f863 	bl	8006000 <HAL_SPI_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f40:	f000 fa10 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000684 	.word	0x20000684
 8003f4c:	40013000 	.word	0x40013000

08003f50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f64:	f107 0320 	add.w	r3, r7, #32
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
 8003f7c:	615a      	str	r2, [r3, #20]
 8003f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f80:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8003f88:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003f8a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003f8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f90:	4b29      	ldr	r3, [pc, #164]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20999;
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003f98:	f245 2207 	movw	r2, #20999	; 0x5207
 8003f9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003faa:	4823      	ldr	r0, [pc, #140]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003fac:	f002 fc1c 	bl	80067e8 <HAL_TIM_Base_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003fb6:	f000 f9d5 	bl	8004364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	481c      	ldr	r0, [pc, #112]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003fc8:	f002 fe7a 	bl	8006cc0 <HAL_TIM_ConfigClockSource>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003fd2:	f000 f9c7 	bl	8004364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fd6:	4818      	ldr	r0, [pc, #96]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003fd8:	f002 fc31 	bl	800683e <HAL_TIM_PWM_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003fe2:	f000 f9bf 	bl	8004364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fee:	f107 0320 	add.w	r3, r7, #32
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4810      	ldr	r0, [pc, #64]	; (8004038 <MX_TIM2_Init+0xe8>)
 8003ff6:	f003 fa53 	bl	80074a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004000:	f000 f9b0 	bl	8004364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004004:	2360      	movs	r3, #96	; 0x60
 8004006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2200      	movs	r2, #0
 8004018:	4619      	mov	r1, r3
 800401a:	4807      	ldr	r0, [pc, #28]	; (8004038 <MX_TIM2_Init+0xe8>)
 800401c:	f002 fd8a 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004026:	f000 f99d 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800402a:	4803      	ldr	r0, [pc, #12]	; (8004038 <MX_TIM2_Init+0xe8>)
 800402c:	f000 fafa 	bl	8004624 <HAL_TIM_MspPostInit>

}
 8004030:	bf00      	nop
 8004032:	3738      	adds	r7, #56	; 0x38
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	200006dc 	.word	0x200006dc

0800403c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08e      	sub	sp, #56	; 0x38
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004050:	f107 0320 	add.w	r3, r7, #32
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
 8004068:	615a      	str	r2, [r3, #20]
 800406a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800406c:	4b38      	ldr	r3, [pc, #224]	; (8004150 <MX_TIM3_Init+0x114>)
 800406e:	4a39      	ldr	r2, [pc, #228]	; (8004154 <MX_TIM3_Init+0x118>)
 8004070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <MX_TIM3_Init+0x114>)
 8004074:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407a:	4b35      	ldr	r3, [pc, #212]	; (8004150 <MX_TIM3_Init+0x114>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8004080:	4b33      	ldr	r3, [pc, #204]	; (8004150 <MX_TIM3_Init+0x114>)
 8004082:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004088:	4b31      	ldr	r3, [pc, #196]	; (8004150 <MX_TIM3_Init+0x114>)
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800408e:	4b30      	ldr	r3, [pc, #192]	; (8004150 <MX_TIM3_Init+0x114>)
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004094:	482e      	ldr	r0, [pc, #184]	; (8004150 <MX_TIM3_Init+0x114>)
 8004096:	f002 fba7 	bl	80067e8 <HAL_TIM_Base_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040a0:	f000 f960 	bl	8004364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ae:	4619      	mov	r1, r3
 80040b0:	4827      	ldr	r0, [pc, #156]	; (8004150 <MX_TIM3_Init+0x114>)
 80040b2:	f002 fe05 	bl	8006cc0 <HAL_TIM_ConfigClockSource>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80040bc:	f000 f952 	bl	8004364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040c0:	4823      	ldr	r0, [pc, #140]	; (8004150 <MX_TIM3_Init+0x114>)
 80040c2:	f002 fbbc 	bl	800683e <HAL_TIM_PWM_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80040cc:	f000 f94a 	bl	8004364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040d8:	f107 0320 	add.w	r3, r7, #32
 80040dc:	4619      	mov	r1, r3
 80040de:	481c      	ldr	r0, [pc, #112]	; (8004150 <MX_TIM3_Init+0x114>)
 80040e0:	f003 f9de 	bl	80074a0 <HAL_TIMEx_MasterConfigSynchronization>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80040ea:	f000 f93b 	bl	8004364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ee:	2360      	movs	r3, #96	; 0x60
 80040f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	2200      	movs	r2, #0
 8004102:	4619      	mov	r1, r3
 8004104:	4812      	ldr	r0, [pc, #72]	; (8004150 <MX_TIM3_Init+0x114>)
 8004106:	f002 fd15 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004110:	f000 f928 	bl	8004364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	2204      	movs	r2, #4
 8004118:	4619      	mov	r1, r3
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <MX_TIM3_Init+0x114>)
 800411c:	f002 fd0a 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004126:	f000 f91d 	bl	8004364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	2208      	movs	r2, #8
 800412e:	4619      	mov	r1, r3
 8004130:	4807      	ldr	r0, [pc, #28]	; (8004150 <MX_TIM3_Init+0x114>)
 8004132:	f002 fcff 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800413c:	f000 f912 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004140:	4803      	ldr	r0, [pc, #12]	; (8004150 <MX_TIM3_Init+0x114>)
 8004142:	f000 fa6f 	bl	8004624 <HAL_TIM_MspPostInit>

}
 8004146:	bf00      	nop
 8004148:	3738      	adds	r7, #56	; 0x38
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200002b4 	.word	0x200002b4
 8004154:	40000400 	.word	0x40000400

08004158 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416c:	463b      	mov	r3, r7
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <MX_TIM4_Init+0x94>)
 8004176:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <MX_TIM4_Init+0x98>)
 8004178:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 800417a:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <MX_TIM4_Init+0x94>)
 800417c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8004180:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <MX_TIM4_Init+0x94>)
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8004188:	4b18      	ldr	r3, [pc, #96]	; (80041ec <MX_TIM4_Init+0x94>)
 800418a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800418e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <MX_TIM4_Init+0x94>)
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <MX_TIM4_Init+0x94>)
 8004198:	2200      	movs	r2, #0
 800419a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800419c:	4813      	ldr	r0, [pc, #76]	; (80041ec <MX_TIM4_Init+0x94>)
 800419e:	f002 fb23 	bl	80067e8 <HAL_TIM_Base_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80041a8:	f000 f8dc 	bl	8004364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	4619      	mov	r1, r3
 80041b8:	480c      	ldr	r0, [pc, #48]	; (80041ec <MX_TIM4_Init+0x94>)
 80041ba:	f002 fd81 	bl	8006cc0 <HAL_TIM_ConfigClockSource>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80041c4:	f000 f8ce 	bl	8004364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041d0:	463b      	mov	r3, r7
 80041d2:	4619      	mov	r1, r3
 80041d4:	4805      	ldr	r0, [pc, #20]	; (80041ec <MX_TIM4_Init+0x94>)
 80041d6:	f003 f963 	bl	80074a0 <HAL_TIMEx_MasterConfigSynchronization>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80041e0:	f000 f8c0 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80041e4:	bf00      	nop
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000274 	.word	0x20000274
 80041f0:	40000800 	.word	0x40000800

080041f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fa:	f107 031c 	add.w	r3, r7, #28
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
 8004208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	4b50      	ldr	r3, [pc, #320]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a4f      	ldr	r2, [pc, #316]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004214:	f043 0310 	orr.w	r3, r3, #16
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b4d      	ldr	r3, [pc, #308]	; (8004350 <MX_GPIO_Init+0x15c>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	4b49      	ldr	r3, [pc, #292]	; (8004350 <MX_GPIO_Init+0x15c>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a48      	ldr	r2, [pc, #288]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
 8004236:	4b46      	ldr	r3, [pc, #280]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	4b42      	ldr	r3, [pc, #264]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a41      	ldr	r2, [pc, #260]	; (8004350 <MX_GPIO_Init+0x15c>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a3a      	ldr	r2, [pc, #232]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b38      	ldr	r3, [pc, #224]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a33      	ldr	r2, [pc, #204]	; (8004350 <MX_GPIO_Init+0x15c>)
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <MX_GPIO_Init+0x15c>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <MX_GPIO_Init+0x15c>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <MX_GPIO_Init+0x15c>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <MX_GPIO_Init+0x15c>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80042b2:	2200      	movs	r2, #0
 80042b4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80042b8:	4826      	ldr	r0, [pc, #152]	; (8004354 <MX_GPIO_Init+0x160>)
 80042ba:	f001 fa3f 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80042be:	2200      	movs	r2, #0
 80042c0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80042c4:	4824      	ldr	r0, [pc, #144]	; (8004358 <MX_GPIO_Init+0x164>)
 80042c6:	f001 fa39 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80042ca:	2200      	movs	r2, #0
 80042cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80042d0:	4822      	ldr	r0, [pc, #136]	; (800435c <MX_GPIO_Init+0x168>)
 80042d2:	f001 fa33 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80042d6:	23ff      	movs	r3, #255	; 0xff
 80042d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042da:	2300      	movs	r3, #0
 80042dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042de:	2301      	movs	r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042e2:	f107 031c 	add.w	r3, r7, #28
 80042e6:	4619      	mov	r1, r3
 80042e8:	481d      	ldr	r0, [pc, #116]	; (8004360 <MX_GPIO_Init+0x16c>)
 80042ea:	f001 f875 	bl	80053d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80042ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80042f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f4:	2301      	movs	r3, #1
 80042f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4813      	ldr	r0, [pc, #76]	; (8004354 <MX_GPIO_Init+0x160>)
 8004308:	f001 f866 	bl	80053d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800430c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004312:	2301      	movs	r3, #1
 8004314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	4619      	mov	r1, r3
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <MX_GPIO_Init+0x164>)
 8004326:	f001 f857 	bl	80053d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800432a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800432e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004330:	2301      	movs	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004338:	2300      	movs	r3, #0
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433c:	f107 031c 	add.w	r3, r7, #28
 8004340:	4619      	mov	r1, r3
 8004342:	4806      	ldr	r0, [pc, #24]	; (800435c <MX_GPIO_Init+0x168>)
 8004344:	f001 f848 	bl	80053d8 <HAL_GPIO_Init>

}
 8004348:	bf00      	nop
 800434a:	3730      	adds	r7, #48	; 0x30
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	40020400 	.word	0x40020400
 8004358:	40020c00 	.word	0x40020c00
 800435c:	40020000 	.word	0x40020000
 8004360:	40021000 	.word	0x40021000

08004364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_MspInit+0x58>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <HAL_MspInit+0x58>)
 8004384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004388:	6453      	str	r3, [r2, #68]	; 0x44
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_MspInit+0x58>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <HAL_MspInit+0x58>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <HAL_MspInit+0x58>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_MspInit+0x58>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	2005      	movs	r0, #5
 80043b8:	f000 ff69 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043bc:	2005      	movs	r0, #5
 80043be:	f000 ff82 	bl	80052c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_ADC_MspInit+0x7c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d127      	bne.n	8004442 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_ADC_MspInit+0x80>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_ADC_MspInit+0x80>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6453      	str	r3, [r2, #68]	; 0x44
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
 800441e:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800442e:	2303      	movs	r3, #3
 8004430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	4619      	mov	r1, r3
 800443c:	4805      	ldr	r0, [pc, #20]	; (8004454 <HAL_ADC_MspInit+0x84>)
 800443e:	f000 ffcb 	bl	80053d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40012000 	.word	0x40012000
 8004450:	40023800 	.word	0x40023800
 8004454:	40020000 	.word	0x40020000

08004458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <HAL_DAC_MspInit+0x7c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d127      	bne.n	80044ca <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_DAC_MspInit+0x80>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_DAC_MspInit+0x80>)
 8004484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_DAC_MspInit+0x80>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_DAC_MspInit+0x80>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_DAC_MspInit+0x80>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_DAC_MspInit+0x80>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80044b2:	2310      	movs	r3, #16
 80044b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044b6:	2303      	movs	r3, #3
 80044b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	4619      	mov	r1, r3
 80044c4:	4805      	ldr	r0, [pc, #20]	; (80044dc <HAL_DAC_MspInit+0x84>)
 80044c6:	f000 ff87 	bl	80053d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80044ca:	bf00      	nop
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40007400 	.word	0x40007400
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40020000 	.word	0x40020000

080044e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_SPI_MspInit+0x84>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d12b      	bne.n	800455a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_SPI_MspInit+0x88>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <HAL_SPI_MspInit+0x88>)
 800450c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004510:	6453      	str	r3, [r2, #68]	; 0x44
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_SPI_MspInit+0x88>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_SPI_MspInit+0x88>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a10      	ldr	r2, [pc, #64]	; (8004568 <HAL_SPI_MspInit+0x88>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <HAL_SPI_MspInit+0x88>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800453a:	2338      	movs	r3, #56	; 0x38
 800453c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004546:	2303      	movs	r3, #3
 8004548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800454a:	2305      	movs	r3, #5
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4619      	mov	r1, r3
 8004554:	4805      	ldr	r0, [pc, #20]	; (800456c <HAL_SPI_MspInit+0x8c>)
 8004556:	f000 ff3f 	bl	80053d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800455a:	bf00      	nop
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40013000 	.word	0x40013000
 8004568:	40023800 	.word	0x40023800
 800456c:	40020400 	.word	0x40020400

08004570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a23      	ldr	r2, [pc, #140]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800459e:	e036      	b.n	800460e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_TIM_Base_MspInit+0xac>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d116      	bne.n	80045d8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ba:	4b17      	ldr	r3, [pc, #92]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	201d      	movs	r0, #29
 80045cc:	f000 fe5f 	bl	800528e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80045d0:	201d      	movs	r0, #29
 80045d2:	f000 fe78 	bl	80052c6 <HAL_NVIC_EnableIRQ>
}
 80045d6:	e01a      	b.n	800460e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_TIM_Base_MspInit+0xb0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d115      	bne.n	800460e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_TIM_Base_MspInit+0xa8>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2100      	movs	r1, #0
 8004602:	201e      	movs	r0, #30
 8004604:	f000 fe43 	bl	800528e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004608:	201e      	movs	r0, #30
 800460a:	f000 fe5c 	bl	80052c6 <HAL_NVIC_EnableIRQ>
}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800

08004624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0314 	add.w	r3, r7, #20
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004644:	d11f      	bne.n	8004686 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a30      	ldr	r2, [pc, #192]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004668:	2302      	movs	r3, #2
 800466a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004670:	2300      	movs	r3, #0
 8004672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004674:	2301      	movs	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	4619      	mov	r1, r3
 800467e:	4825      	ldr	r0, [pc, #148]	; (8004714 <HAL_TIM_MspPostInit+0xf0>)
 8004680:	f000 feaa 	bl	80053d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004684:	e040      	b.n	8004708 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a23      	ldr	r2, [pc, #140]	; (8004718 <HAL_TIM_MspPostInit+0xf4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d13b      	bne.n	8004708 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	6313      	str	r3, [r2, #48]	; 0x30
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ac:	2300      	movs	r3, #0
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6313      	str	r3, [r2, #48]	; 0x30
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <HAL_TIM_MspPostInit+0xec>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046cc:	2302      	movs	r3, #2
 80046ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046d8:	2302      	movs	r3, #2
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	4619      	mov	r1, r3
 80046e2:	480e      	ldr	r0, [pc, #56]	; (800471c <HAL_TIM_MspPostInit+0xf8>)
 80046e4:	f000 fe78 	bl	80053d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046e8:	23c0      	movs	r3, #192	; 0xc0
 80046ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f4:	2300      	movs	r3, #0
 80046f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046f8:	2302      	movs	r3, #2
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4619      	mov	r1, r3
 8004702:	4807      	ldr	r0, [pc, #28]	; (8004720 <HAL_TIM_MspPostInit+0xfc>)
 8004704:	f000 fe68 	bl	80053d8 <HAL_GPIO_Init>
}
 8004708:	bf00      	nop
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	40020000 	.word	0x40020000
 8004718:	40000400 	.word	0x40000400
 800471c:	40020400 	.word	0x40020400
 8004720:	40020800 	.word	0x40020800

08004724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004736:	e7fe      	b.n	8004736 <HardFault_Handler+0x4>

08004738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800473c:	e7fe      	b.n	800473c <MemManage_Handler+0x4>

0800473e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004742:	e7fe      	b.n	8004742 <BusFault_Handler+0x4>

08004744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004748:	e7fe      	b.n	8004748 <UsageFault_Handler+0x4>

0800474a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800474a:	b480      	push	{r7}
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8004778:	f7fc ffe2 	bl	8001740 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800477c:	f000 f8b0 	bl	80048e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}

08004784 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004798:	4802      	ldr	r0, [pc, #8]	; (80047a4 <TIM3_IRQHandler+0x10>)
 800479a:	f002 f8c3 	bl	8006924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200002b4 	.word	0x200002b4

080047a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80047ac:	4802      	ldr	r0, [pc, #8]	; (80047b8 <TIM4_IRQHandler+0x10>)
 80047ae:	f002 f8b9 	bl	8006924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000274 	.word	0x20000274

080047bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047c0:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <SystemInit+0x28>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	4a07      	ldr	r2, [pc, #28]	; (80047e4 <SystemInit+0x28>)
 80047c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <SystemInit+0x28>)
 80047d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047d6:	609a      	str	r2, [r3, #8]
#endif
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <Reset_Handler>:
 80047e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004820 <LoopFillZerobss+0x14>
 80047ec:	2100      	movs	r1, #0
 80047ee:	e003      	b.n	80047f8 <LoopCopyDataInit>

080047f0 <CopyDataInit>:
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <LoopFillZerobss+0x18>)
 80047f2:	585b      	ldr	r3, [r3, r1]
 80047f4:	5043      	str	r3, [r0, r1]
 80047f6:	3104      	adds	r1, #4

080047f8 <LoopCopyDataInit>:
 80047f8:	480b      	ldr	r0, [pc, #44]	; (8004828 <LoopFillZerobss+0x1c>)
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <LoopFillZerobss+0x20>)
 80047fc:	1842      	adds	r2, r0, r1
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3f6      	bcc.n	80047f0 <CopyDataInit>
 8004802:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <LoopFillZerobss+0x24>)
 8004804:	e002      	b.n	800480c <LoopFillZerobss>

08004806 <FillZerobss>:
 8004806:	2300      	movs	r3, #0
 8004808:	f842 3b04 	str.w	r3, [r2], #4

0800480c <LoopFillZerobss>:
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <LoopFillZerobss+0x28>)
 800480e:	429a      	cmp	r2, r3
 8004810:	d3f9      	bcc.n	8004806 <FillZerobss>
 8004812:	f7ff ffd3 	bl	80047bc <SystemInit>
 8004816:	f002 fed3 	bl	80075c0 <__libc_init_array>
 800481a:	f7ff f98d 	bl	8003b38 <main>
 800481e:	4770      	bx	lr
 8004820:	20020000 	.word	0x20020000
 8004824:	08007698 	.word	0x08007698
 8004828:	20000000 	.word	0x20000000
 800482c:	20000014 	.word	0x20000014
 8004830:	20000014 	.word	0x20000014
 8004834:	20000724 	.word	0x20000724

08004838 <ADC_IRQHandler>:
 8004838:	e7fe      	b.n	8004838 <ADC_IRQHandler>
	...

0800483c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004840:	4b0e      	ldr	r3, [pc, #56]	; (800487c <HAL_Init+0x40>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0d      	ldr	r2, [pc, #52]	; (800487c <HAL_Init+0x40>)
 8004846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800484a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_Init+0x40>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <HAL_Init+0x40>)
 8004852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_Init+0x40>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_Init+0x40>)
 800485e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004864:	2003      	movs	r0, #3
 8004866:	f000 fd07 	bl	8005278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800486a:	2000      	movs	r0, #0
 800486c:	f000 f808 	bl	8004880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004870:	f7ff fd80 	bl	8004374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023c00 	.word	0x40023c00

08004880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_InitTick+0x54>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_InitTick+0x58>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	4619      	mov	r1, r3
 8004892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004896:	fbb3 f3f1 	udiv	r3, r3, r1
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fd1f 	bl	80052e2 <HAL_SYSTICK_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00e      	b.n	80048cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0f      	cmp	r3, #15
 80048b2:	d80a      	bhi.n	80048ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048b4:	2200      	movs	r2, #0
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f000 fce7 	bl	800528e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <HAL_InitTick+0x5c>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000008 	.word	0x20000008
 80048d8:	20000010 	.word	0x20000010
 80048dc:	2000000c 	.word	0x2000000c

080048e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_IncTick+0x20>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_IncTick+0x24>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4413      	add	r3, r2
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_IncTick+0x24>)
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000010 	.word	0x20000010
 8004904:	20000720 	.word	0x20000720

08004908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return uwTick;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_GetTick+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000720 	.word	0x20000720

08004920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004928:	f7ff ffee 	bl	8004908 <HAL_GetTick>
 800492c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d005      	beq.n	8004946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_Delay+0x40>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004946:	bf00      	nop
 8004948:	f7ff ffde 	bl	8004908 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d8f7      	bhi.n	8004948 <HAL_Delay+0x28>
  {
  }
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000010 	.word	0x20000010

08004964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e033      	b.n	80049e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fd24 	bl	80043d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049aa:	f023 0302 	bic.w	r3, r3, #2
 80049ae:	f043 0202 	orr.w	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa92 	bl	8004ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	f043 0201 	orr.w	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
 80049d2:	e001      	b.n	80049d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_Start+0x1a>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0a5      	b.n	8004b52 <HAL_ADC_Start+0x166>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d018      	beq.n	8004a4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a2c:	4b4c      	ldr	r3, [pc, #304]	; (8004b60 <HAL_ADC_Start+0x174>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a4c      	ldr	r2, [pc, #304]	; (8004b64 <HAL_ADC_Start+0x178>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0c9a      	lsrs	r2, r3, #18
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004a40:	e002      	b.n	8004a48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f9      	bne.n	8004a42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d179      	bne.n	8004b50 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d106      	bne.n	8004aaa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	f023 0206 	bic.w	r2, r3, #6
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44
 8004aa8:	e002      	b.n	8004ab0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_ADC_Start+0x17c>)
 8004aba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004ac4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d12a      	bne.n	8004b28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <HAL_ADC_Start+0x180>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d015      	beq.n	8004b08 <HAL_ADC_Start+0x11c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a23      	ldr	r2, [pc, #140]	; (8004b70 <HAL_ADC_Start+0x184>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d105      	bne.n	8004af2 <HAL_ADC_Start+0x106>
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_ADC_Start+0x17c>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <HAL_ADC_Start+0x188>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d129      	bne.n	8004b50 <HAL_ADC_Start+0x164>
 8004afc:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <HAL_ADC_Start+0x17c>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	2b0f      	cmp	r3, #15
 8004b06:	d823      	bhi.n	8004b50 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11c      	bne.n	8004b50 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b24:	609a      	str	r2, [r3, #8]
 8004b26:	e013      	b.n	8004b50 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0f      	ldr	r2, [pc, #60]	; (8004b6c <HAL_ADC_Start+0x180>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d10e      	bne.n	8004b50 <HAL_ADC_Start+0x164>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d107      	bne.n	8004b50 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b4e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000008 	.word	0x20000008
 8004b64:	431bde83 	.word	0x431bde83
 8004b68:	40012300 	.word	0x40012300
 8004b6c:	40012000 	.word	0x40012000
 8004b70:	40012100 	.word	0x40012100
 8004b74:	40012200 	.word	0x40012200

08004b78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b94:	d113      	bne.n	8004bbe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba4:	d10b      	bne.n	8004bbe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e05c      	b.n	8004c78 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004bbe:	f7ff fea3 	bl	8004908 <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bc4:	e01a      	b.n	8004bfc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d016      	beq.n	8004bfc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <HAL_ADC_PollForConversion+0x6c>
 8004bd4:	f7ff fe98 	bl	8004908 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d20b      	bcs.n	8004bfc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f043 0204 	orr.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e03d      	b.n	8004c78 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d1dd      	bne.n	8004bc6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0212 	mvn.w	r2, #18
 8004c12:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d123      	bne.n	8004c76 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d11f      	bne.n	8004c76 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d006      	beq.n	8004c52 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d111      	bne.n	8004c76 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x1c>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e105      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x228>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	d925      	bls.n	8004d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	3b1e      	subs	r3, #30
 8004cde:	2207      	movs	r2, #7
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	400a      	ands	r2, r1
 8004cec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68d9      	ldr	r1, [r3, #12]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	4618      	mov	r0, r3
 8004d00:	4603      	mov	r3, r0
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4403      	add	r3, r0
 8004d06:	3b1e      	subs	r3, #30
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e022      	b.n	8004d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6919      	ldr	r1, [r3, #16]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	4613      	mov	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	2207      	movs	r2, #7
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	400a      	ands	r2, r1
 8004d36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6919      	ldr	r1, [r3, #16]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4618      	mov	r0, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4403      	add	r3, r0
 8004d50:	409a      	lsls	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d824      	bhi.n	8004dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	3b05      	subs	r3, #5
 8004d74:	221f      	movs	r2, #31
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	400a      	ands	r2, r1
 8004d82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4618      	mov	r0, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3b05      	subs	r3, #5
 8004d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	635a      	str	r2, [r3, #52]	; 0x34
 8004daa:	e04c      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d824      	bhi.n	8004dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3b23      	subs	r3, #35	; 0x23
 8004dc6:	221f      	movs	r2, #31
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4618      	mov	r0, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	3b23      	subs	r3, #35	; 0x23
 8004df0:	fa00 f203 	lsl.w	r2, r0, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8004dfc:	e023      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3b41      	subs	r3, #65	; 0x41
 8004e10:	221f      	movs	r2, #31
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	3b41      	subs	r3, #65	; 0x41
 8004e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e46:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <HAL_ADC_ConfigChannel+0x234>)
 8004e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <HAL_ADC_ConfigChannel+0x238>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d109      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x1cc>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b12      	cmp	r3, #18
 8004e5a:	d105      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <HAL_ADC_ConfigChannel+0x238>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d123      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x21e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d003      	beq.n	8004e82 <HAL_ADC_ConfigChannel+0x1e6>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b11      	cmp	r3, #17
 8004e80:	d11b      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d111      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_ADC_ConfigChannel+0x23c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_ADC_ConfigChannel+0x240>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	0c9a      	lsrs	r2, r3, #18
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004eac:	e002      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f9      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40012300 	.word	0x40012300
 8004ed4:	40012000 	.word	0x40012000
 8004ed8:	20000008 	.word	0x20000008
 8004edc:	431bde83 	.word	0x431bde83

08004ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ee8:	4b79      	ldr	r3, [pc, #484]	; (80050d0 <ADC_Init+0x1f0>)
 8004eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	021a      	lsls	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6859      	ldr	r1, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	4a58      	ldr	r2, [pc, #352]	; (80050d4 <ADC_Init+0x1f4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6899      	ldr	r1, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	e00f      	b.n	8004fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0202 	bic.w	r2, r2, #2
 8004fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	7e1b      	ldrb	r3, [r3, #24]
 8004ff8:	005a      	lsls	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800502a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	3b01      	subs	r3, #1
 8005038:	035a      	lsls	r2, r3, #13
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	e007      	b.n	8005054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	3b01      	subs	r3, #1
 8005070:	051a      	lsls	r2, r3, #20
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005096:	025a      	lsls	r2, r3, #9
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6899      	ldr	r1, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	029a      	lsls	r2, r3, #10
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40012300 	.word	0x40012300
 80050d4:	0f000001 	.word	0x0f000001

080050d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <__NVIC_SetPriorityGrouping+0x44>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050f4:	4013      	ands	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800510a:	4a04      	ldr	r2, [pc, #16]	; (800511c <__NVIC_SetPriorityGrouping+0x44>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	60d3      	str	r3, [r2, #12]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000ed00 	.word	0xe000ed00

08005120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <__NVIC_GetPriorityGrouping+0x18>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	f003 0307 	and.w	r3, r3, #7
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	db0b      	blt.n	8005166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	f003 021f 	and.w	r2, r3, #31
 8005154:	4907      	ldr	r1, [pc, #28]	; (8005174 <__NVIC_EnableIRQ+0x38>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2001      	movs	r0, #1
 800515e:	fa00 f202 	lsl.w	r2, r0, r2
 8005162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e100 	.word	0xe000e100

08005178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005188:	2b00      	cmp	r3, #0
 800518a:	db0a      	blt.n	80051a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	490c      	ldr	r1, [pc, #48]	; (80051c4 <__NVIC_SetPriority+0x4c>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	0112      	lsls	r2, r2, #4
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	440b      	add	r3, r1
 800519c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051a0:	e00a      	b.n	80051b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4908      	ldr	r1, [pc, #32]	; (80051c8 <__NVIC_SetPriority+0x50>)
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3b04      	subs	r3, #4
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	440b      	add	r3, r1
 80051b6:	761a      	strb	r2, [r3, #24]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000e100 	.word	0xe000e100
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f1c3 0307 	rsb	r3, r3, #7
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	bf28      	it	cs
 80051ea:	2304      	movcs	r3, #4
 80051ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d902      	bls.n	80051fc <NVIC_EncodePriority+0x30>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3b03      	subs	r3, #3
 80051fa:	e000      	b.n	80051fe <NVIC_EncodePriority+0x32>
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005200:	f04f 32ff 	mov.w	r2, #4294967295
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	401a      	ands	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005214:	f04f 31ff 	mov.w	r1, #4294967295
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	43d9      	mvns	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005224:	4313      	orrs	r3, r2
         );
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005244:	d301      	bcc.n	800524a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005246:	2301      	movs	r3, #1
 8005248:	e00f      	b.n	800526a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <SysTick_Config+0x40>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005252:	210f      	movs	r1, #15
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	f7ff ff8e 	bl	8005178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <SysTick_Config+0x40>)
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <SysTick_Config+0x40>)
 8005264:	2207      	movs	r2, #7
 8005266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	e000e010 	.word	0xe000e010

08005278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff29 	bl	80050d8 <__NVIC_SetPriorityGrouping>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	4603      	mov	r3, r0
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052a0:	f7ff ff3e 	bl	8005120 <__NVIC_GetPriorityGrouping>
 80052a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff ff8e 	bl	80051cc <NVIC_EncodePriority>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff ff5d 	bl	8005178 <__NVIC_SetPriority>
}
 80052be:	bf00      	nop
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff31 	bl	800513c <__NVIC_EnableIRQ>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ffa2 	bl	8005234 <SysTick_Config>
 80052f0:	4603      	mov	r3, r0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e014      	b.n	8005336 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	791b      	ldrb	r3, [r3, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff f89b 	bl	8004458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800533e:	b480      	push	{r7}
 8005340:	b087      	sub	sp, #28
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	795b      	ldrb	r3, [r3, #5]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_DAC_ConfigChannel+0x20>
 800535a:	2302      	movs	r3, #2
 800535c:	e036      	b.n	80053cc <HAL_DAC_ConfigChannel+0x8e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2202      	movs	r2, #2
 8005368:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005372:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4013      	ands	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	22c0      	movs	r2, #192	; 0xc0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43da      	mvns	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	400a      	ands	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_GPIO_Init>:
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	; 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e16b      	b.n	80056cc <HAL_GPIO_Init+0x2f4>
 80053f4:	2201      	movs	r2, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	429a      	cmp	r2, r3
 800540e:	f040 815a 	bne.w	80056c6 <HAL_GPIO_Init+0x2ee>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d00b      	beq.n	8005432 <HAL_GPIO_Init+0x5a>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d007      	beq.n	8005432 <HAL_GPIO_Init+0x5a>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b11      	cmp	r3, #17
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_Init+0x5a>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b12      	cmp	r3, #18
 8005430:	d130      	bne.n	8005494 <HAL_GPIO_Init+0xbc>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2203      	movs	r2, #3
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	2201      	movs	r2, #1
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f003 0201 	and.w	r2, r3, #1
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4313      	orrs	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	2203      	movs	r2, #3
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	43db      	mvns	r3, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4013      	ands	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0xfc>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b12      	cmp	r3, #18
 80054d2:	d123      	bne.n	800551c <HAL_GPIO_Init+0x144>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	08da      	lsrs	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3208      	adds	r2, #8
 80054dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	220f      	movs	r2, #15
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	08da      	lsrs	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3208      	adds	r2, #8
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	2203      	movs	r2, #3
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0203 	and.w	r2, r3, #3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4313      	orrs	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80b4 	beq.w	80056c6 <HAL_GPIO_Init+0x2ee>
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <HAL_GPIO_Init+0x308>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	4a5e      	ldr	r2, [pc, #376]	; (80056e0 <HAL_GPIO_Init+0x308>)
 8005568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800556c:	6453      	str	r3, [r2, #68]	; 0x44
 800556e:	4b5c      	ldr	r3, [pc, #368]	; (80056e0 <HAL_GPIO_Init+0x308>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a5a      	ldr	r2, [pc, #360]	; (80056e4 <HAL_GPIO_Init+0x30c>)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	3302      	adds	r3, #2
 8005582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	220f      	movs	r2, #15
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a51      	ldr	r2, [pc, #324]	; (80056e8 <HAL_GPIO_Init+0x310>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d02b      	beq.n	80055fe <HAL_GPIO_Init+0x226>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a50      	ldr	r2, [pc, #320]	; (80056ec <HAL_GPIO_Init+0x314>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d025      	beq.n	80055fa <HAL_GPIO_Init+0x222>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a4f      	ldr	r2, [pc, #316]	; (80056f0 <HAL_GPIO_Init+0x318>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01f      	beq.n	80055f6 <HAL_GPIO_Init+0x21e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a4e      	ldr	r2, [pc, #312]	; (80056f4 <HAL_GPIO_Init+0x31c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d019      	beq.n	80055f2 <HAL_GPIO_Init+0x21a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a4d      	ldr	r2, [pc, #308]	; (80056f8 <HAL_GPIO_Init+0x320>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_GPIO_Init+0x216>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a4c      	ldr	r2, [pc, #304]	; (80056fc <HAL_GPIO_Init+0x324>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00d      	beq.n	80055ea <HAL_GPIO_Init+0x212>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a4b      	ldr	r2, [pc, #300]	; (8005700 <HAL_GPIO_Init+0x328>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <HAL_GPIO_Init+0x20e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a4a      	ldr	r2, [pc, #296]	; (8005704 <HAL_GPIO_Init+0x32c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <HAL_GPIO_Init+0x20a>
 80055de:	2307      	movs	r3, #7
 80055e0:	e00e      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055e2:	2308      	movs	r3, #8
 80055e4:	e00c      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055e6:	2306      	movs	r3, #6
 80055e8:	e00a      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055ea:	2305      	movs	r3, #5
 80055ec:	e008      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055ee:	2304      	movs	r3, #4
 80055f0:	e006      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055f2:	2303      	movs	r3, #3
 80055f4:	e004      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e002      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_GPIO_Init+0x228>
 80055fe:	2300      	movs	r3, #0
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	f002 0203 	and.w	r2, r2, #3
 8005606:	0092      	lsls	r2, r2, #2
 8005608:	4093      	lsls	r3, r2
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	4934      	ldr	r1, [pc, #208]	; (80056e4 <HAL_GPIO_Init+0x30c>)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	089b      	lsrs	r3, r3, #2
 8005616:	3302      	adds	r3, #2
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800561e:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_GPIO_Init+0x330>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_GPIO_Init+0x26a>
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	4a31      	ldr	r2, [pc, #196]	; (8005708 <HAL_GPIO_Init+0x330>)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <HAL_GPIO_Init+0x330>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x294>
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <HAL_GPIO_Init+0x330>)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	6053      	str	r3, [r2, #4]
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <HAL_GPIO_Init+0x330>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0x2be>
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <HAL_GPIO_Init+0x330>)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6093      	str	r3, [r2, #8]
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <HAL_GPIO_Init+0x330>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_GPIO_Init+0x2e8>
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	4a11      	ldr	r2, [pc, #68]	; (8005708 <HAL_GPIO_Init+0x330>)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	60d3      	str	r3, [r2, #12]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3301      	adds	r3, #1
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b0f      	cmp	r3, #15
 80056d0:	f67f ae90 	bls.w	80053f4 <HAL_GPIO_Init+0x1c>
 80056d4:	bf00      	nop
 80056d6:	3724      	adds	r7, #36	; 0x24
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40013800 	.word	0x40013800
 80056e8:	40020000 	.word	0x40020000
 80056ec:	40020400 	.word	0x40020400
 80056f0:	40020800 	.word	0x40020800
 80056f4:	40020c00 	.word	0x40020c00
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40021400 	.word	0x40021400
 8005700:	40021800 	.word	0x40021800
 8005704:	40021c00 	.word	0x40021c00
 8005708:	40013c00 	.word	0x40013c00

0800570c <HAL_GPIO_ReadPin>:
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	887b      	ldrh	r3, [r7, #2]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_GPIO_ReadPin+0x1e>
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e001      	b.n	800572e <HAL_GPIO_ReadPin+0x22>
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_GPIO_WritePin>:
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
 8005748:	4613      	mov	r3, r2
 800574a:	707b      	strb	r3, [r7, #1]
 800574c:	787b      	ldrb	r3, [r7, #1]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_WritePin+0x1e>
 8005752:	887a      	ldrh	r2, [r7, #2]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	619a      	str	r2, [r3, #24]
 8005758:	e003      	b.n	8005762 <HAL_GPIO_WritePin+0x26>
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	041a      	lsls	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	619a      	str	r2, [r3, #24]
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_GPIO_TogglePin>:
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	807b      	strh	r3, [r7, #2]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	887b      	ldrh	r3, [r7, #2]
 8005780:	401a      	ands	r2, r3
 8005782:	887b      	ldrh	r3, [r7, #2]
 8005784:	429a      	cmp	r2, r3
 8005786:	d104      	bne.n	8005792 <HAL_GPIO_TogglePin+0x24>
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	041a      	lsls	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	619a      	str	r2, [r3, #24]
 8005790:	e002      	b.n	8005798 <HAL_GPIO_TogglePin+0x2a>
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_RCC_OscConfig>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_OscConfig+0x12>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e25b      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d075      	beq.n	80058ae <HAL_RCC_OscConfig+0x10a>
 80057c2:	4ba3      	ldr	r3, [pc, #652]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d00c      	beq.n	80057e8 <HAL_RCC_OscConfig+0x44>
 80057ce:	4ba0      	ldr	r3, [pc, #640]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d112      	bne.n	8005800 <HAL_RCC_OscConfig+0x5c>
 80057da:	4b9d      	ldr	r3, [pc, #628]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e6:	d10b      	bne.n	8005800 <HAL_RCC_OscConfig+0x5c>
 80057e8:	4b99      	ldr	r3, [pc, #612]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d05b      	beq.n	80058ac <HAL_RCC_OscConfig+0x108>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d157      	bne.n	80058ac <HAL_RCC_OscConfig+0x108>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e236      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005808:	d106      	bne.n	8005818 <HAL_RCC_OscConfig+0x74>
 800580a:	4b91      	ldr	r3, [pc, #580]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a90      	ldr	r2, [pc, #576]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e01d      	b.n	8005854 <HAL_RCC_OscConfig+0xb0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x98>
 8005822:	4b8b      	ldr	r3, [pc, #556]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a8a      	ldr	r2, [pc, #552]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b88      	ldr	r3, [pc, #544]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a87      	ldr	r2, [pc, #540]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e00b      	b.n	8005854 <HAL_RCC_OscConfig+0xb0>
 800583c:	4b84      	ldr	r3, [pc, #528]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a83      	ldr	r2, [pc, #524]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	4b81      	ldr	r3, [pc, #516]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a80      	ldr	r2, [pc, #512]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 800584e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d013      	beq.n	8005884 <HAL_RCC_OscConfig+0xe0>
 800585c:	f7ff f854 	bl	8004908 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0xd2>
 8005864:	f7ff f850 	bl	8004908 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0xd2>
 8005872:	2303      	movs	r3, #3
 8005874:	e1fb      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005876:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0xc0>
 8005882:	e014      	b.n	80058ae <HAL_RCC_OscConfig+0x10a>
 8005884:	f7ff f840 	bl	8004908 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0xfa>
 800588c:	f7ff f83c 	bl	8004908 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0xfa>
 800589a:	2303      	movs	r3, #3
 800589c:	e1e7      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 800589e:	4b6c      	ldr	r3, [pc, #432]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0xe8>
 80058aa:	e000      	b.n	80058ae <HAL_RCC_OscConfig+0x10a>
 80058ac:	bf00      	nop
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d063      	beq.n	8005982 <HAL_RCC_OscConfig+0x1de>
 80058ba:	4b65      	ldr	r3, [pc, #404]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <HAL_RCC_OscConfig+0x13a>
 80058c6:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d11c      	bne.n	800590c <HAL_RCC_OscConfig+0x168>
 80058d2:	4b5f      	ldr	r3, [pc, #380]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d116      	bne.n	800590c <HAL_RCC_OscConfig+0x168>
 80058de:	4b5c      	ldr	r3, [pc, #368]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_RCC_OscConfig+0x152>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d001      	beq.n	80058f6 <HAL_RCC_OscConfig+0x152>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e1bb      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 80058f6:	4b56      	ldr	r3, [pc, #344]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4952      	ldr	r1, [pc, #328]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005906:	4313      	orrs	r3, r2
 8005908:	600b      	str	r3, [r1, #0]
 800590a:	e03a      	b.n	8005982 <HAL_RCC_OscConfig+0x1de>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d020      	beq.n	8005956 <HAL_RCC_OscConfig+0x1b2>
 8005914:	4b4f      	ldr	r3, [pc, #316]	; (8005a54 <HAL_RCC_OscConfig+0x2b0>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f7fe fff5 	bl	8004908 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x190>
 8005922:	f7fe fff1 	bl	8004908 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x190>
 8005930:	2303      	movs	r3, #3
 8005932:	e19c      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005934:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCC_OscConfig+0x17e>
 8005940:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4940      	ldr	r1, [pc, #256]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]
 8005954:	e015      	b.n	8005982 <HAL_RCC_OscConfig+0x1de>
 8005956:	4b3f      	ldr	r3, [pc, #252]	; (8005a54 <HAL_RCC_OscConfig+0x2b0>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f7fe ffd4 	bl	8004908 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x1d2>
 8005964:	f7fe ffd0 	bl	8004908 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x1d2>
 8005972:	2303      	movs	r3, #3
 8005974:	e17b      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x1c0>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d030      	beq.n	80059f0 <HAL_RCC_OscConfig+0x24c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_RCC_OscConfig+0x220>
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <HAL_RCC_OscConfig+0x2b4>)
 8005998:	2201      	movs	r2, #1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f7fe ffb4 	bl	8004908 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x212>
 80059a4:	f7fe ffb0 	bl	8004908 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x212>
 80059b2:	2303      	movs	r3, #3
 80059b4:	e15b      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 80059b6:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80059b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x200>
 80059c2:	e015      	b.n	80059f0 <HAL_RCC_OscConfig+0x24c>
 80059c4:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <HAL_RCC_OscConfig+0x2b4>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f7fe ff9d 	bl	8004908 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x240>
 80059d2:	f7fe ff99 	bl	8004908 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x240>
 80059e0:	2303      	movs	r3, #3
 80059e2:	e144      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f0      	bne.n	80059d2 <HAL_RCC_OscConfig+0x22e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80a0 	beq.w	8005b3e <HAL_RCC_OscConfig+0x39a>
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <HAL_RCC_OscConfig+0x28a>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_RCC_OscConfig+0x2b8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d121      	bne.n	8005a7e <HAL_RCC_OscConfig+0x2da>
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_RCC_OscConfig+0x2b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <HAL_RCC_OscConfig+0x2b8>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	f7fe ff5f 	bl	8004908 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]
 8005a4c:	e011      	b.n	8005a72 <HAL_RCC_OscConfig+0x2ce>
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800
 8005a54:	42470000 	.word	0x42470000
 8005a58:	42470e80 	.word	0x42470e80
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	f7fe ff52 	bl	8004908 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x2ce>
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0fd      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005a72:	4b81      	ldr	r3, [pc, #516]	; (8005c78 <HAL_RCC_OscConfig+0x4d4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x2bc>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_OscConfig+0x2f0>
 8005a86:	4b7d      	ldr	r3, [pc, #500]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a7c      	ldr	r2, [pc, #496]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	e01c      	b.n	8005ace <HAL_RCC_OscConfig+0x32a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b05      	cmp	r3, #5
 8005a9a:	d10c      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x312>
 8005a9c:	4b77      	ldr	r3, [pc, #476]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a76      	ldr	r2, [pc, #472]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005aa2:	f043 0304 	orr.w	r3, r3, #4
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa8:	4b74      	ldr	r3, [pc, #464]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a73      	ldr	r2, [pc, #460]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab4:	e00b      	b.n	8005ace <HAL_RCC_OscConfig+0x32a>
 8005ab6:	4b71      	ldr	r3, [pc, #452]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	4a70      	ldr	r2, [pc, #448]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac2:	4b6e      	ldr	r3, [pc, #440]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a6d      	ldr	r2, [pc, #436]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005ac8:	f023 0304 	bic.w	r3, r3, #4
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d015      	beq.n	8005b02 <HAL_RCC_OscConfig+0x35e>
 8005ad6:	f7fe ff17 	bl	8004908 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]
 8005adc:	e00a      	b.n	8005af4 <HAL_RCC_OscConfig+0x350>
 8005ade:	f7fe ff13 	bl	8004908 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x350>
 8005af0:	2303      	movs	r3, #3
 8005af2:	e0bc      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005af4:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ee      	beq.n	8005ade <HAL_RCC_OscConfig+0x33a>
 8005b00:	e014      	b.n	8005b2c <HAL_RCC_OscConfig+0x388>
 8005b02:	f7fe ff01 	bl	8004908 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]
 8005b08:	e00a      	b.n	8005b20 <HAL_RCC_OscConfig+0x37c>
 8005b0a:	f7fe fefd 	bl	8004908 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x37c>
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0a6      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005b20:	4b56      	ldr	r3, [pc, #344]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ee      	bne.n	8005b0a <HAL_RCC_OscConfig+0x366>
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <HAL_RCC_OscConfig+0x39a>
 8005b32:	4b52      	ldr	r3, [pc, #328]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	4a51      	ldr	r2, [pc, #324]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8092 	beq.w	8005c6c <HAL_RCC_OscConfig+0x4c8>
 8005b48:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d05c      	beq.n	8005c0e <HAL_RCC_OscConfig+0x46a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d141      	bne.n	8005be0 <HAL_RCC_OscConfig+0x43c>
 8005b5c:	4b48      	ldr	r3, [pc, #288]	; (8005c80 <HAL_RCC_OscConfig+0x4dc>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f7fe fed1 	bl	8004908 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x3d8>
 8005b6a:	f7fe fecd 	bl	8004908 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x3d8>
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e078      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005b7c:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f0      	bne.n	8005b6a <HAL_RCC_OscConfig+0x3c6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	019b      	lsls	r3, r3, #6
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	061b      	lsls	r3, r3, #24
 8005bac:	4933      	ldr	r1, [pc, #204]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	604b      	str	r3, [r1, #4]
 8005bb2:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <HAL_RCC_OscConfig+0x4dc>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f7fe fea6 	bl	8004908 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x42e>
 8005bc0:	f7fe fea2 	bl	8004908 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x42e>
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e04d      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x41c>
 8005bde:	e045      	b.n	8005c6c <HAL_RCC_OscConfig+0x4c8>
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x4dc>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f7fe fe8f 	bl	8004908 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x45c>
 8005bee:	f7fe fe8b 	bl	8004908 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x45c>
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e036      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x44a>
 8005c0c:	e02e      	b.n	8005c6c <HAL_RCC_OscConfig+0x4c8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_RCC_OscConfig+0x476>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e029      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <HAL_RCC_OscConfig+0x4d8>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d11c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x4c4>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d115      	bne.n	8005c68 <HAL_RCC_OscConfig+0x4c4>
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c42:	4013      	ands	r3, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d10d      	bne.n	8005c68 <HAL_RCC_OscConfig+0x4c4>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d106      	bne.n	8005c68 <HAL_RCC_OscConfig+0x4c4>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_OscConfig+0x4c8>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ca>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	42470060 	.word	0x42470060

08005c84 <HAL_RCC_ClockConfig>:
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x14>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0cc      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005c98:	4b68      	ldr	r3, [pc, #416]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d90c      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x3c>
 8005ca6:	4b65      	ldr	r3, [pc, #404]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	4b63      	ldr	r3, [pc, #396]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x3c>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0b8      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d020      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x8a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x60>
 8005cd8:	4b59      	ldr	r3, [pc, #356]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4a58      	ldr	r2, [pc, #352]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ce2:	6093      	str	r3, [r2, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x78>
 8005cf0:	4b53      	ldr	r3, [pc, #332]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4a52      	ldr	r2, [pc, #328]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cfa:	6093      	str	r3, [r2, #8]
 8005cfc:	4b50      	ldr	r3, [pc, #320]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	494d      	ldr	r1, [pc, #308]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	608b      	str	r3, [r1, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d044      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x120>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d107      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xae>
 8005d22:	4b47      	ldr	r3, [pc, #284]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d119      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e07f      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d003      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xbe>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d107      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xce>
 8005d42:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e06f      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005d52:	4b3b      	ldr	r3, [pc, #236]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e067      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005d62:	4b37      	ldr	r3, [pc, #220]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f023 0203 	bic.w	r2, r3, #3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4934      	ldr	r1, [pc, #208]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	608b      	str	r3, [r1, #8]
 8005d74:	f7fe fdc8 	bl	8004908 <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_ClockConfig+0x10e>
 8005d7c:	f7fe fdc4 	bl	8004908 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_ClockConfig+0x10e>
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e04f      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005d92:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 020c 	and.w	r2, r3, #12
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d1eb      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xf8>
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d20c      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x148>
 8005db2:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x148>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e032      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_RCC_ClockConfig+0x166>
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4916      	ldr	r1, [pc, #88]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x186>
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	490e      	ldr	r1, [pc, #56]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
 8005e0a:	f000 f821 	bl	8005e50 <HAL_RCC_GetSysClockFreq>
 8005e0e:	4601      	mov	r1, r0
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	5cd3      	ldrb	r3, [r2, r3]
 8005e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e22:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fd28 	bl	8004880 <HAL_InitTick>
 8005e30:	2300      	movs	r3, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40023c00 	.word	0x40023c00
 8005e40:	40023800 	.word	0x40023800
 8005e44:	08007678 	.word	0x08007678
 8005e48:	20000008 	.word	0x20000008
 8005e4c:	2000000c 	.word	0x2000000c

08005e50 <HAL_RCC_GetSysClockFreq>:
 8005e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	4b63      	ldr	r3, [pc, #396]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d007      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0x32>
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d008      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x38>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 80b4 	bne.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x194>
 8005e7c:	4b5e      	ldr	r3, [pc, #376]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	e0b3      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x19a>
 8005e82:	4b5e      	ldr	r3, [pc, #376]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	e0b0      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x19a>
 8005e88:	4b5a      	ldr	r3, [pc, #360]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	4b58      	ldr	r3, [pc, #352]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d04a      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e9e:	4b55      	ldr	r3, [pc, #340]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	099b      	lsrs	r3, r3, #6
 8005ea4:	f04f 0400 	mov.w	r4, #0
 8005ea8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	ea03 0501 	and.w	r5, r3, r1
 8005eb4:	ea04 0602 	and.w	r6, r4, r2
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4632      	mov	r2, r6
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	f04f 0400 	mov.w	r4, #0
 8005ec4:	0154      	lsls	r4, r2, #5
 8005ec6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005eca:	014b      	lsls	r3, r1, #5
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4622      	mov	r2, r4
 8005ed0:	1b49      	subs	r1, r1, r5
 8005ed2:	eb62 0206 	sbc.w	r2, r2, r6
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	f04f 0400 	mov.w	r4, #0
 8005ede:	0194      	lsls	r4, r2, #6
 8005ee0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ee4:	018b      	lsls	r3, r1, #6
 8005ee6:	1a5b      	subs	r3, r3, r1
 8005ee8:	eb64 0402 	sbc.w	r4, r4, r2
 8005eec:	f04f 0100 	mov.w	r1, #0
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	00e2      	lsls	r2, r4, #3
 8005ef6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005efa:	00d9      	lsls	r1, r3, #3
 8005efc:	460b      	mov	r3, r1
 8005efe:	4614      	mov	r4, r2
 8005f00:	195b      	adds	r3, r3, r5
 8005f02:	eb44 0406 	adc.w	r4, r4, r6
 8005f06:	f04f 0100 	mov.w	r1, #0
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	0262      	lsls	r2, r4, #9
 8005f10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f14:	0259      	lsls	r1, r3, #9
 8005f16:	460b      	mov	r3, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	f7fa fd44 	bl	80009b4 <__aeabi_uldivmod>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e049      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x178>
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	099b      	lsrs	r3, r3, #6
 8005f3a:	f04f 0400 	mov.w	r4, #0
 8005f3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	ea03 0501 	and.w	r5, r3, r1
 8005f4a:	ea04 0602 	and.w	r6, r4, r2
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4632      	mov	r2, r6
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	f04f 0400 	mov.w	r4, #0
 8005f5a:	0154      	lsls	r4, r2, #5
 8005f5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f60:	014b      	lsls	r3, r1, #5
 8005f62:	4619      	mov	r1, r3
 8005f64:	4622      	mov	r2, r4
 8005f66:	1b49      	subs	r1, r1, r5
 8005f68:	eb62 0206 	sbc.w	r2, r2, r6
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	f04f 0400 	mov.w	r4, #0
 8005f74:	0194      	lsls	r4, r2, #6
 8005f76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f7a:	018b      	lsls	r3, r1, #6
 8005f7c:	1a5b      	subs	r3, r3, r1
 8005f7e:	eb64 0402 	sbc.w	r4, r4, r2
 8005f82:	f04f 0100 	mov.w	r1, #0
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	00e2      	lsls	r2, r4, #3
 8005f8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f90:	00d9      	lsls	r1, r3, #3
 8005f92:	460b      	mov	r3, r1
 8005f94:	4614      	mov	r4, r2
 8005f96:	195b      	adds	r3, r3, r5
 8005f98:	eb44 0406 	adc.w	r4, r4, r6
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	02a2      	lsls	r2, r4, #10
 8005fa6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005faa:	0299      	lsls	r1, r3, #10
 8005fac:	460b      	mov	r3, r1
 8005fae:	4614      	mov	r4, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f04f 0400 	mov.w	r4, #0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	f7fa fcf9 	bl	80009b4 <__aeabi_uldivmod>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x19a>
 8005fe4:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	bf00      	nop
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	00f42400 	.word	0x00f42400
 8005ffc:	007a1200 	.word	0x007a1200

08006000 <HAL_SPI_Init>:
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_SPI_Init+0x12>
 800600e:	2301      	movs	r3, #1
 8006010:	e056      	b.n	80060c0 <HAL_SPI_Init+0xc0>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <HAL_SPI_Init+0x32>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fe fa57 	bl	80044e0 <HAL_SPI_MspInit>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	ea42 0103 	orr.w	r1, r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	f003 0104 	and.w	r1, r3, #4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69da      	ldr	r2, [r3, #28]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ae:	61da      	str	r2, [r3, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	655a      	str	r2, [r3, #84]	; 0x54
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80060be:	2300      	movs	r3, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_SPI_Transmit>:
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
 80060d8:	2300      	movs	r3, #0
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_SPI_Transmit+0x22>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e11e      	b.n	8006328 <HAL_SPI_Transmit+0x260>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80060f2:	f7fe fc09 	bl	8004908 <HAL_GetTick>
 80060f6:	61b8      	str	r0, [r7, #24]
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	82fb      	strh	r3, [r7, #22]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d002      	beq.n	800610e <HAL_SPI_Transmit+0x46>
 8006108:	2302      	movs	r3, #2
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e103      	b.n	8006316 <HAL_SPI_Transmit+0x24e>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit+0x52>
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_SPI_Transmit+0x58>
 800611a:	2301      	movs	r3, #1
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e0fa      	b.n	8006316 <HAL_SPI_Transmit+0x24e>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2203      	movs	r2, #3
 8006124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	655a      	str	r2, [r3, #84]	; 0x54
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	869a      	strh	r2, [r3, #52]	; 0x34
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	645a      	str	r2, [r3, #68]	; 0x44
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006166:	d107      	bne.n	8006178 <HAL_SPI_Transmit+0xb0>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d007      	beq.n	8006196 <HAL_SPI_Transmit+0xce>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619e:	d14b      	bne.n	8006238 <HAL_SPI_Transmit+0x170>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_Transmit+0xe6>
 80061a8:	8afb      	ldrh	r3, [r7, #22]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d13e      	bne.n	800622c <HAL_SPI_Transmit+0x164>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	881a      	ldrh	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80061d2:	e02b      	b.n	800622c <HAL_SPI_Transmit+0x164>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d112      	bne.n	8006208 <HAL_SPI_Transmit+0x140>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	881a      	ldrh	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	1c9a      	adds	r2, r3, #2
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	86da      	strh	r2, [r3, #54]	; 0x36
 8006206:	e011      	b.n	800622c <HAL_SPI_Transmit+0x164>
 8006208:	f7fe fb7e 	bl	8004908 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d803      	bhi.n	8006220 <HAL_SPI_Transmit+0x158>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d102      	bne.n	8006226 <HAL_SPI_Transmit+0x15e>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <HAL_SPI_Transmit+0x164>
 8006226:	2303      	movs	r3, #3
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e074      	b.n	8006316 <HAL_SPI_Transmit+0x24e>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1ce      	bne.n	80061d4 <HAL_SPI_Transmit+0x10c>
 8006236:	e04c      	b.n	80062d2 <HAL_SPI_Transmit+0x20a>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Transmit+0x17e>
 8006240:	8afb      	ldrh	r3, [r7, #22]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d140      	bne.n	80062c8 <HAL_SPI_Transmit+0x200>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	86da      	strh	r2, [r3, #54]	; 0x36
 800626c:	e02c      	b.n	80062c8 <HAL_SPI_Transmit+0x200>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d113      	bne.n	80062a4 <HAL_SPI_Transmit+0x1dc>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	7812      	ldrb	r2, [r2, #0]
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80062a2:	e011      	b.n	80062c8 <HAL_SPI_Transmit+0x200>
 80062a4:	f7fe fb30 	bl	8004908 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d803      	bhi.n	80062bc <HAL_SPI_Transmit+0x1f4>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Transmit+0x1fa>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <HAL_SPI_Transmit+0x200>
 80062c2:	2303      	movs	r3, #3
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e026      	b.n	8006316 <HAL_SPI_Transmit+0x24e>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1cd      	bne.n	800626e <HAL_SPI_Transmit+0x1a6>
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fa44 	bl	8006764 <SPI_EndRxTxTransaction>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_SPI_Transmit+0x220>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <HAL_SPI_Transmit+0x23e>
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Transmit+0x24c>
 800630e:	2301      	movs	r3, #1
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e000      	b.n	8006316 <HAL_SPI_Transmit+0x24e>
 8006314:	bf00      	nop
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_SPI_TransmitReceive>:
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	; 0x30
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	807b      	strh	r3, [r7, #2]
 800633e:	2301      	movs	r3, #1
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006342:	2300      	movs	r3, #0
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x26>
 8006352:	2302      	movs	r3, #2
 8006354:	e18a      	b.n	800666c <HAL_SPI_TransmitReceive+0x33c>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800635e:	f7fe fad3 	bl	8004908 <HAL_GetTick>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	837b      	strh	r3, [r7, #26]
 8006378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800637c:	2b01      	cmp	r3, #1
 800637e:	d00f      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x70>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006386:	d107      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x68>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x68>
 8006390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006394:	2b04      	cmp	r3, #4
 8006396:	d003      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x70>
 8006398:	2302      	movs	r3, #2
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e15b      	b.n	8006658 <HAL_SPI_TransmitReceive+0x328>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_SPI_TransmitReceive+0x82>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_TransmitReceive+0x82>
 80063ac:	887b      	ldrh	r3, [r7, #2]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x8a>
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b8:	e14e      	b.n	8006658 <HAL_SPI_TransmitReceive+0x328>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d003      	beq.n	80063ce <HAL_SPI_TransmitReceive+0x9e>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2205      	movs	r2, #5
 80063ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	887a      	ldrh	r2, [r7, #2]
 80063de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	887a      	ldrh	r2, [r7, #2]
 80063f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	887a      	ldrh	r2, [r7, #2]
 80063f6:	869a      	strh	r2, [r3, #52]	; 0x34
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	645a      	str	r2, [r3, #68]	; 0x44
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d007      	beq.n	8006422 <HAL_SPI_TransmitReceive+0xf2>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642a:	d178      	bne.n	800651e <HAL_SPI_TransmitReceive+0x1ee>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <HAL_SPI_TransmitReceive+0x10a>
 8006434:	8b7b      	ldrh	r3, [r7, #26]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d166      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x1d8>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	881a      	ldrh	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	1c9a      	adds	r2, r3, #2
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	86da      	strh	r2, [r3, #54]	; 0x36
 800645e:	e053      	b.n	8006508 <HAL_SPI_TransmitReceive+0x1d8>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d11b      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x176>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d016      	beq.n	80064a6 <HAL_SPI_TransmitReceive+0x176>
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d113      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x176>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	1c9a      	adds	r2, r3, #2
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80064a2:	2300      	movs	r3, #0
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d119      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x1b8>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d014      	beq.n	80064e8 <HAL_SPI_TransmitReceive+0x1b8>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	b292      	uxth	r2, r2
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064e4:	2301      	movs	r3, #1
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e8:	f7fe fa0e 	bl	8004908 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d807      	bhi.n	8006508 <HAL_SPI_TransmitReceive+0x1d8>
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d003      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x1d8>
 8006500:	2303      	movs	r3, #3
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006506:	e0a7      	b.n	8006658 <HAL_SPI_TransmitReceive+0x328>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1a6      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x130>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1a1      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x130>
 800651c:	e07c      	b.n	8006618 <HAL_SPI_TransmitReceive+0x2e8>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_SPI_TransmitReceive+0x1fc>
 8006526:	8b7b      	ldrh	r3, [r7, #26]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d16b      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x2d4>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	86da      	strh	r2, [r3, #54]	; 0x36
 8006552:	e057      	b.n	8006604 <HAL_SPI_TransmitReceive+0x2d4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d11c      	bne.n	800659c <HAL_SPI_TransmitReceive+0x26c>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d017      	beq.n	800659c <HAL_SPI_TransmitReceive+0x26c>
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d114      	bne.n	800659c <HAL_SPI_TransmitReceive+0x26c>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	330c      	adds	r3, #12
 800657c:	7812      	ldrb	r2, [r2, #0]
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	86da      	strh	r2, [r3, #54]	; 0x36
 8006598:	2300      	movs	r3, #0
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d119      	bne.n	80065de <HAL_SPI_TransmitReceive+0x2ae>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d014      	beq.n	80065de <HAL_SPI_TransmitReceive+0x2ae>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065da:	2301      	movs	r3, #1
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065de:	f7fe f993 	bl	8004908 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d803      	bhi.n	80065f6 <HAL_SPI_TransmitReceive+0x2c6>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d102      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x2cc>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x2d4>
 80065fc:	2303      	movs	r3, #3
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006602:	e029      	b.n	8006658 <HAL_SPI_TransmitReceive+0x328>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1a2      	bne.n	8006554 <HAL_SPI_TransmitReceive+0x224>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d19d      	bne.n	8006554 <HAL_SPI_TransmitReceive+0x224>
 8006618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f8a1 	bl	8006764 <SPI_EndRxTxTransaction>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d006      	beq.n	8006636 <HAL_SPI_TransmitReceive+0x306>
 8006628:	2301      	movs	r3, #1
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	655a      	str	r2, [r3, #84]	; 0x54
 8006634:	e010      	b.n	8006658 <HAL_SPI_TransmitReceive+0x328>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x326>
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	e000      	b.n	8006658 <HAL_SPI_TransmitReceive+0x328>
 8006656:	bf00      	nop
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006668:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800666c:	4618      	mov	r0, r3
 800666e:	3730      	adds	r7, #48	; 0x30
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_SPI_GetState>:
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006682:	b2db      	uxtb	r3, r3
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <SPI_WaitFlagStateUntilTimeout>:
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	71fb      	strb	r3, [r7, #7]
 80066a0:	e04c      	b.n	800673c <SPI_WaitFlagStateUntilTimeout+0xac>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d048      	beq.n	800673c <SPI_WaitFlagStateUntilTimeout+0xac>
 80066aa:	f7fe f92d 	bl	8004908 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d902      	bls.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d13d      	bne.n	800673c <SPI_WaitFlagStateUntilTimeout+0xac>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d111      	bne.n	80066fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d004      	beq.n	80066ee <SPI_WaitFlagStateUntilTimeout+0x5e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d107      	bne.n	80066fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	d10f      	bne.n	8006728 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006738:	2303      	movs	r3, #3
 800673a:	e00f      	b.n	800675c <SPI_WaitFlagStateUntilTimeout+0xcc>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4013      	ands	r3, r2
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	429a      	cmp	r2, r3
 8006758:	d1a3      	bne.n	80066a2 <SPI_WaitFlagStateUntilTimeout+0x12>
 800675a:	2300      	movs	r3, #0
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <SPI_EndRxTxTransaction>:
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <SPI_EndRxTxTransaction+0x7c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <SPI_EndRxTxTransaction+0x80>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	0d5b      	lsrs	r3, r3, #21
 800677c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006780:	fb02 f303 	mul.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678e:	d112      	bne.n	80067b6 <SPI_EndRxTxTransaction+0x52>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff ff78 	bl	8006690 <SPI_WaitFlagStateUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <SPI_EndRxTxTransaction+0x70>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	f043 0220 	orr.w	r2, r3, #32
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54
 80067b2:	2303      	movs	r3, #3
 80067b4:	e00f      	b.n	80067d6 <SPI_EndRxTxTransaction+0x72>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <SPI_EndRxTxTransaction+0x6e>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3b01      	subs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	2b80      	cmp	r3, #128	; 0x80
 80067ce:	d0f2      	beq.n	80067b6 <SPI_EndRxTxTransaction+0x52>
 80067d0:	e000      	b.n	80067d4 <SPI_EndRxTxTransaction+0x70>
 80067d2:	bf00      	nop
 80067d4:	2300      	movs	r3, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000008 	.word	0x20000008
 80067e4:	165e9f81 	.word	0x165e9f81

080067e8 <HAL_TIM_Base_Init>:
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_Base_Init+0x12>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e01d      	b.n	8006836 <HAL_TIM_Base_Init+0x4e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_TIM_Base_Init+0x2c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fd feae 	bl	8004570 <HAL_TIM_Base_MspInit>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f000 fb2a 	bl	8006e80 <TIM_Base_SetConfig>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006834:	2300      	movs	r3, #0
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_TIM_PWM_Init>:
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_TIM_PWM_Init+0x12>
 800684c:	2301      	movs	r3, #1
 800684e:	e01d      	b.n	800688c <HAL_TIM_PWM_Init+0x4e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_TIM_PWM_Init+0x2c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f815 	bl	8006894 <HAL_TIM_PWM_MspInit>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f000 faff 	bl	8006e80 <TIM_Base_SetConfig>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800688a:	2300      	movs	r3, #0
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_TIM_PWM_MspInit>:
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIM_PWM_Start>:
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2201      	movs	r2, #1
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fdca 	bl	8007454 <TIM_CCxChannelCmd>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a15      	ldr	r2, [pc, #84]	; (800691c <HAL_TIM_PWM_Start+0x74>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <HAL_TIM_PWM_Start+0x2c>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIM_PWM_Start+0x78>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d101      	bne.n	80068d8 <HAL_TIM_PWM_Start+0x30>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <HAL_TIM_PWM_Start+0x32>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <HAL_TIM_PWM_Start+0x46>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ec:	645a      	str	r2, [r3, #68]	; 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d007      	beq.n	8006910 <HAL_TIM_PWM_Start+0x68>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <HAL_TIM_IRQHandler>:
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d122      	bne.n	8006980 <HAL_TIM_IRQHandler+0x5c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b02      	cmp	r3, #2
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IRQHandler+0x5c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0202 	mvn.w	r2, #2
 8006950:	611a      	str	r2, [r3, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	771a      	strb	r2, [r3, #28]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x4a>
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa6b 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0x56>
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa5d 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa6e 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b04      	cmp	r3, #4
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0xb0>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b04      	cmp	r3, #4
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0xb0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0204 	mvn.w	r2, #4
 80069a4:	611a      	str	r2, [r3, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	771a      	strb	r2, [r3, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x9e>
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa41 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0xaa>
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa33 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fa44 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x104>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x104>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0208 	mvn.w	r2, #8
 80069f8:	611a      	str	r2, [r3, #16]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2204      	movs	r2, #4
 80069fe:	771a      	strb	r2, [r3, #28]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0xf2>
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa17 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0xfe>
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa09 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa1a 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d122      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x158>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d11b      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x158>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0210 	mvn.w	r2, #16
 8006a4c:	611a      	str	r2, [r3, #16]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2208      	movs	r2, #8
 8006a52:	771a      	strb	r2, [r3, #28]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x146>
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9ed 	bl	8006e42 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x152>
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9df 	bl	8006e2e <HAL_TIM_OC_DelayElapsedCallback>
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9f0 	bl	8006e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d10e      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x184>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d107      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x184>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0201 	mvn.w	r2, #1
 8006aa0:	611a      	str	r2, [r3, #16]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fc ffac 	bl	8003a00 <HAL_TIM_PeriodElapsedCallback>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x1b0>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d107      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x1b0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006acc:	611a      	str	r2, [r3, #16]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fd6c 	bl	80075ac <HAL_TIMEx_BreakCallback>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d10e      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1dc>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1dc>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af8:	611a      	str	r2, [r3, #16]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9b5 	bl	8006e6a <HAL_TIM_TriggerCallback>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d10e      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x208>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d107      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x208>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0220 	mvn.w	r2, #32
 8006b24:	611a      	str	r2, [r3, #16]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fd36 	bl	8007598 <HAL_TIMEx_CommutCallback>
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_PWM_ConfigChannel>:
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e0b4      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b0c      	cmp	r3, #12
 8006b62:	f200 809f 	bhi.w	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006ca5 	.word	0x08006ca5
 8006b74:	08006ca5 	.word	0x08006ca5
 8006b78:	08006ca5 	.word	0x08006ca5
 8006b7c:	08006be1 	.word	0x08006be1
 8006b80:	08006ca5 	.word	0x08006ca5
 8006b84:	08006ca5 	.word	0x08006ca5
 8006b88:	08006ca5 	.word	0x08006ca5
 8006b8c:	08006c23 	.word	0x08006c23
 8006b90:	08006ca5 	.word	0x08006ca5
 8006b94:	08006ca5 	.word	0x08006ca5
 8006b98:	08006ca5 	.word	0x08006ca5
 8006b9c:	08006c63 	.word	0x08006c63
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fa0a 	bl	8006fc0 <TIM_OC1_SetConfig>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0208 	orr.w	r2, r2, #8
 8006bba:	619a      	str	r2, [r3, #24]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0204 	bic.w	r2, r2, #4
 8006bca:	619a      	str	r2, [r3, #24]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6999      	ldr	r1, [r3, #24]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	619a      	str	r2, [r3, #24]
 8006bde:	e062      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fa5a 	bl	80070a0 <TIM_OC2_SetConfig>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfa:	619a      	str	r2, [r3, #24]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	619a      	str	r2, [r3, #24]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6999      	ldr	r1, [r3, #24]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	619a      	str	r2, [r3, #24]
 8006c20:	e041      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 faaf 	bl	800718c <TIM_OC3_SetConfig>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0208 	orr.w	r2, r2, #8
 8006c3c:	61da      	str	r2, [r3, #28]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0204 	bic.w	r2, r2, #4
 8006c4c:	61da      	str	r2, [r3, #28]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69d9      	ldr	r1, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	61da      	str	r2, [r3, #28]
 8006c60:	e021      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fb03 	bl	8007274 <TIM_OC4_SetConfig>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7c:	61da      	str	r2, [r3, #28]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	61da      	str	r2, [r3, #28]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69d9      	ldr	r1, [r3, #28]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	021a      	lsls	r2, r3, #8
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	61da      	str	r2, [r3, #28]
 8006ca2:	e000      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8006ca4:	bf00      	nop
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_TIM_ConfigClockSource>:
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_TIM_ConfigClockSource+0x18>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e0a6      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x166>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d067      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0x120>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d80b      	bhi.n	8006d2c <HAL_TIM_ConfigClockSource+0x6c>
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d073      	beq.n	8006e00 <HAL_TIM_ConfigClockSource+0x140>
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d802      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x62>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d06f      	beq.n	8006e00 <HAL_TIM_ConfigClockSource+0x140>
 8006d20:	e078      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d06c      	beq.n	8006e00 <HAL_TIM_ConfigClockSource+0x140>
 8006d26:	2b30      	cmp	r3, #48	; 0x30
 8006d28:	d06a      	beq.n	8006e00 <HAL_TIM_ConfigClockSource+0x140>
 8006d2a:	e073      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006d2c:	2b70      	cmp	r3, #112	; 0x70
 8006d2e:	d00d      	beq.n	8006d4c <HAL_TIM_ConfigClockSource+0x8c>
 8006d30:	2b70      	cmp	r3, #112	; 0x70
 8006d32:	d804      	bhi.n	8006d3e <HAL_TIM_ConfigClockSource+0x7e>
 8006d34:	2b50      	cmp	r3, #80	; 0x50
 8006d36:	d033      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0xe0>
 8006d38:	2b60      	cmp	r3, #96	; 0x60
 8006d3a:	d041      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x100>
 8006d3c:	e06a      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d42:	d066      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0x152>
 8006d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d48:	d017      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xba>
 8006d4a:	e063      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6899      	ldr	r1, [r3, #8]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f000 fb5a 	bl	8007414 <TIM_ETR_SetConfig>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	609a      	str	r2, [r3, #8]
 8006d78:	e04c      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f000 fb43 	bl	8007414 <TIM_ETR_SetConfig>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	e039      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f000 fab7 	bl	8007320 <TIM_TI1_ConfigInputStage>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2150      	movs	r1, #80	; 0x50
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fb10 	bl	80073de <TIM_ITRx_SetConfig>
 8006dbe:	e029      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f000 fad6 	bl	800737e <TIM_TI2_ConfigInputStage>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2160      	movs	r1, #96	; 0x60
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fb00 	bl	80073de <TIM_ITRx_SetConfig>
 8006dde:	e019      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6859      	ldr	r1, [r3, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	461a      	mov	r2, r3
 8006dee:	f000 fa97 	bl	8007320 <TIM_TI1_ConfigInputStage>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2140      	movs	r1, #64	; 0x40
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 faf0 	bl	80073de <TIM_ITRx_SetConfig>
 8006dfe:	e009      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	f000 fae7 	bl	80073de <TIM_ITRx_SetConfig>
 8006e10:	e000      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x154>
 8006e12:	bf00      	nop
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e24:	2300      	movs	r3, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_TIM_OC_DelayElapsedCallback>:
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIM_IC_CaptureCallback>:
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_TriggerCallback>:
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <TIM_Base_SetConfig>:
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a40      	ldr	r2, [pc, #256]	; (8006f94 <TIM_Base_SetConfig+0x114>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3d      	ldr	r2, [pc, #244]	; (8006f98 <TIM_Base_SetConfig+0x118>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a3c      	ldr	r2, [pc, #240]	; (8006f9c <TIM_Base_SetConfig+0x11c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a3b      	ldr	r2, [pc, #236]	; (8006fa0 <TIM_Base_SetConfig+0x120>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3a      	ldr	r2, [pc, #232]	; (8006fa4 <TIM_Base_SetConfig+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d108      	bne.n	8006ed2 <TIM_Base_SetConfig+0x52>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2f      	ldr	r2, [pc, #188]	; (8006f94 <TIM_Base_SetConfig+0x114>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d02b      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d027      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <TIM_Base_SetConfig+0x118>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d023      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <TIM_Base_SetConfig+0x11c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01f      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <TIM_Base_SetConfig+0x120>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01b      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a29      	ldr	r2, [pc, #164]	; (8006fa4 <TIM_Base_SetConfig+0x124>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d017      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <TIM_Base_SetConfig+0x128>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a27      	ldr	r2, [pc, #156]	; (8006fac <TIM_Base_SetConfig+0x12c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00f      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <TIM_Base_SetConfig+0x130>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a25      	ldr	r2, [pc, #148]	; (8006fb4 <TIM_Base_SetConfig+0x134>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <TIM_Base_SetConfig+0x138>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <TIM_Base_SetConfig+0x13c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0xc4>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <TIM_Base_SetConfig+0x114>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_Base_SetConfig+0xf8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <TIM_Base_SetConfig+0x124>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d103      	bne.n	8006f80 <TIM_Base_SetConfig+0x100>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	615a      	str	r2, [r3, #20]
 8006f86:	bf00      	nop
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000800 	.word	0x40000800
 8006fa0:	40000c00 	.word	0x40000c00
 8006fa4:	40010400 	.word	0x40010400
 8006fa8:	40014000 	.word	0x40014000
 8006fac:	40014400 	.word	0x40014400
 8006fb0:	40014800 	.word	0x40014800
 8006fb4:	40001800 	.word	0x40001800
 8006fb8:	40001c00 	.word	0x40001c00
 8006fbc:	40002000 	.word	0x40002000

08006fc0 <TIM_OC1_SetConfig>:
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	621a      	str	r2, [r3, #32]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f023 0302 	bic.w	r3, r3, #2
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a20      	ldr	r2, [pc, #128]	; (8007098 <TIM_OC1_SetConfig+0xd8>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_OC1_SetConfig+0x64>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a1f      	ldr	r2, [pc, #124]	; (800709c <TIM_OC1_SetConfig+0xdc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d10c      	bne.n	800703e <TIM_OC1_SetConfig+0x7e>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f023 0308 	bic.w	r3, r3, #8
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f023 0304 	bic.w	r3, r3, #4
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a15      	ldr	r2, [pc, #84]	; (8007098 <TIM_OC1_SetConfig+0xd8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d003      	beq.n	800704e <TIM_OC1_SetConfig+0x8e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a14      	ldr	r2, [pc, #80]	; (800709c <TIM_OC1_SetConfig+0xdc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d111      	bne.n	8007072 <TIM_OC1_SetConfig+0xb2>
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	605a      	str	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	619a      	str	r2, [r3, #24]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	635a      	str	r2, [r3, #52]	; 0x34
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	621a      	str	r2, [r3, #32]
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	40010000 	.word	0x40010000
 800709c:	40010400 	.word	0x40010400

080070a0 <TIM_OC2_SetConfig>:
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0210 	bic.w	r2, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	621a      	str	r2, [r3, #32]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0320 	bic.w	r3, r3, #32
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a22      	ldr	r2, [pc, #136]	; (8007184 <TIM_OC2_SetConfig+0xe4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_OC2_SetConfig+0x68>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a21      	ldr	r2, [pc, #132]	; (8007188 <TIM_OC2_SetConfig+0xe8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10d      	bne.n	8007124 <TIM_OC2_SetConfig+0x84>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a17      	ldr	r2, [pc, #92]	; (8007184 <TIM_OC2_SetConfig+0xe4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_OC2_SetConfig+0x94>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a16      	ldr	r2, [pc, #88]	; (8007188 <TIM_OC2_SetConfig+0xe8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d113      	bne.n	800715c <TIM_OC2_SetConfig+0xbc>
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	619a      	str	r2, [r3, #24]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	639a      	str	r2, [r3, #56]	; 0x38
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	621a      	str	r2, [r3, #32]
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40010400 	.word	0x40010400

0800718c <TIM_OC3_SetConfig>:
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <TIM_OC3_SetConfig+0xe0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC3_SetConfig+0x66>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a20      	ldr	r2, [pc, #128]	; (8007270 <TIM_OC3_SetConfig+0xe4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10d      	bne.n	800720e <TIM_OC3_SetConfig+0x82>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a16      	ldr	r2, [pc, #88]	; (800726c <TIM_OC3_SetConfig+0xe0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC3_SetConfig+0x92>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a15      	ldr	r2, [pc, #84]	; (8007270 <TIM_OC3_SetConfig+0xe4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d113      	bne.n	8007246 <TIM_OC3_SetConfig+0xba>
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	61da      	str	r2, [r3, #28]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	63da      	str	r2, [r3, #60]	; 0x3c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40010000 	.word	0x40010000
 8007270:	40010400 	.word	0x40010400

08007274 <TIM_OC4_SetConfig>:
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	621a      	str	r2, [r3, #32]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	031b      	lsls	r3, r3, #12
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a12      	ldr	r2, [pc, #72]	; (8007318 <TIM_OC4_SetConfig+0xa4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC4_SetConfig+0x68>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a11      	ldr	r2, [pc, #68]	; (800731c <TIM_OC4_SetConfig+0xa8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d109      	bne.n	80072f0 <TIM_OC4_SetConfig+0x7c>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	019b      	lsls	r3, r3, #6
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	61da      	str	r2, [r3, #28]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	621a      	str	r2, [r3, #32]
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	40010000 	.word	0x40010000
 800731c:	40010400 	.word	0x40010400

08007320 <TIM_TI1_ConfigInputStage>:
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0201 	bic.w	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	621a      	str	r2, [r3, #32]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 030a 	bic.w	r3, r3, #10
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	619a      	str	r2, [r3, #24]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <TIM_TI2_ConfigInputStage>:
 800737e:	b480      	push	{r7}
 8007380:	b087      	sub	sp, #28
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0210 	bic.w	r2, r3, #16
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	031b      	lsls	r3, r3, #12
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	619a      	str	r2, [r3, #24]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	621a      	str	r2, [r3, #32]
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <TIM_ITRx_SetConfig>:
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f043 0307 	orr.w	r3, r3, #7
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <TIM_ETR_SetConfig>:
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	431a      	orrs	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4313      	orrs	r3, r2
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <TIM_CCxChannelCmd>:
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	2201      	movs	r2, #1
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a1a      	ldr	r2, [r3, #32]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	43db      	mvns	r3, r3
 8007476:	401a      	ands	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	621a      	str	r2, [r3, #32]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1a      	ldr	r2, [r3, #32]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 031f 	and.w	r3, r3, #31
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	fa01 f303 	lsl.w	r3, r1, r3
 800748c:	431a      	orrs	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	621a      	str	r2, [r3, #32]
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <HAL_TIMEx_MasterConfigSynchronization>:
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e05a      	b.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a21      	ldr	r2, [pc, #132]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007504:	d01d      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a18      	ldr	r2, [pc, #96]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a17      	ldr	r2, [pc, #92]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a15      	ldr	r2, [pc, #84]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10c      	bne.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4313      	orrs	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800756c:	2300      	movs	r3, #0
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40010400 	.word	0x40010400
 8007590:	40014000 	.word	0x40014000
 8007594:	40001800 	.word	0x40001800

08007598 <HAL_TIMEx_CommutCallback>:
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_BreakCallback>:
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <__libc_init_array>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4e0d      	ldr	r6, [pc, #52]	; (80075f8 <__libc_init_array+0x38>)
 80075c4:	4c0d      	ldr	r4, [pc, #52]	; (80075fc <__libc_init_array+0x3c>)
 80075c6:	1ba4      	subs	r4, r4, r6
 80075c8:	10a4      	asrs	r4, r4, #2
 80075ca:	2500      	movs	r5, #0
 80075cc:	42a5      	cmp	r5, r4
 80075ce:	d109      	bne.n	80075e4 <__libc_init_array+0x24>
 80075d0:	4e0b      	ldr	r6, [pc, #44]	; (8007600 <__libc_init_array+0x40>)
 80075d2:	4c0c      	ldr	r4, [pc, #48]	; (8007604 <__libc_init_array+0x44>)
 80075d4:	f000 f820 	bl	8007618 <_init>
 80075d8:	1ba4      	subs	r4, r4, r6
 80075da:	10a4      	asrs	r4, r4, #2
 80075dc:	2500      	movs	r5, #0
 80075de:	42a5      	cmp	r5, r4
 80075e0:	d105      	bne.n	80075ee <__libc_init_array+0x2e>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075e8:	4798      	blx	r3
 80075ea:	3501      	adds	r5, #1
 80075ec:	e7ee      	b.n	80075cc <__libc_init_array+0xc>
 80075ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075f2:	4798      	blx	r3
 80075f4:	3501      	adds	r5, #1
 80075f6:	e7f2      	b.n	80075de <__libc_init_array+0x1e>
 80075f8:	08007690 	.word	0x08007690
 80075fc:	08007690 	.word	0x08007690
 8007600:	08007690 	.word	0x08007690
 8007604:	08007694 	.word	0x08007694

08007608 <memset>:
 8007608:	4402      	add	r2, r0
 800760a:	4603      	mov	r3, r0
 800760c:	4293      	cmp	r3, r2
 800760e:	d100      	bne.n	8007612 <memset+0xa>
 8007610:	4770      	bx	lr
 8007612:	f803 1b01 	strb.w	r1, [r3], #1
 8007616:	e7f9      	b.n	800760c <memset+0x4>

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
