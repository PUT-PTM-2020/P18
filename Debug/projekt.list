
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  08004024  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004024  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a64a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ce  00000000  00000000  0002a68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  0002c988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205e7  00000000  00000000  0002d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000861f  00000000  00000000  0004d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8f33  00000000  00000000  00055ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ef29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  0011efa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fdc 	.word	0x08003fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003fdc 	.word	0x08003fdc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	0000      	movs	r0, r0
	...

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */


/*--------------------Odczyt z mikrofonu------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM4)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d123      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		HAL_ADC_Start(&hadc1);
 8000cca:	4818      	ldr	r0, [pc, #96]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ccc:	f000 ff64 	bl	8001b98 <HAL_ADC_Start>
			  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000cd0:	210a      	movs	r1, #10
 8000cd2:	4816      	ldr	r0, [pc, #88]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cd4:	f001 f826 	bl	8001d24 <HAL_ADC_PollForConversion>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d119      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x5a>
			  {
				  adc_value = HAL_ADC_GetValue(&hadc1);
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ce0:	f001 f8a4 	bl	8001e2c <HAL_ADC_GetValue>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cea:	801a      	strh	r2, [r3, #0]
				  x = (2.95/(double)4096) * adc_value;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbbb 	bl	800046c <__aeabi_i2d>
 8000cf6:	a30a      	add	r3, pc, #40	; (adr r3, 8000d20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfc:	f7ff fc20 	bl	8000540 <__aeabi_dmul>
 8000d00:	4603      	mov	r3, r0
 8000d02:	460c      	mov	r4, r1
 8000d04:	4618      	mov	r0, r3
 8000d06:	4621      	mov	r1, r4
 8000d08:	f7ff fe2c 	bl	8000964 <__aeabi_d2iz>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d10:	601a      	str	r2, [r3, #0]
			  }
	}
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	f3af 8000 	nop.w
 8000d20:	9999999a 	.word	0x9999999a
 8000d24:	3f479999 	.word	0x3f479999
 8000d28:	40000800 	.word	0x40000800
 8000d2c:	200000b4 	.word	0x200000b4
 8000d30:	200000b0 	.word	0x200000b0
 8000d34:	2000002c 	.word	0x2000002c

08000d38 <rgb1_set>:



/*-------------------Konfiguracja diody RGB1----------------------------*/
void rgb1_set(uint8_t red, uint8_t blue, uint8_t green)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	460b      	mov	r3, r1
 8000d44:	71bb      	strb	r3, [r7, #6]
 8000d46:	4613      	mov	r3, r2
 8000d48:	717b      	strb	r3, [r7, #5]
	htim3.Instance->CCR1=red*2000;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d50:	fb02 f203 	mul.w	r2, r2, r3
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <rgb1_set+0x50>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2=blue*2000;
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d60:	fb02 f203 	mul.w	r2, r2, r3
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <rgb1_set+0x50>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3=green*2000;
 8000d6a:	797b      	ldrb	r3, [r7, #5]
 8000d6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d70:	fb02 f203 	mul.w	r2, r2, r3
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <rgb1_set+0x50>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000070 	.word	0x20000070

08000d8c <rgb1_set_color>:

/*-------------------Ustalenie koloru diody RGB1 zaleznie od przypadku----------------------------*/
void rgb1_set_color()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	/*do zrobienia:
	 dac przypadki i oznaczyc kolor*/
	rgb1_set(255,0,0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	20ff      	movs	r0, #255	; 0xff
 8000d96:	f7ff ffcf 	bl	8000d38 <rgb1_set>
	HAL_Delay(100); //wykorzystywane bylo podczas sprawdzania, czy dobrze swieci dioda
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f000 fe96 	bl	8001acc <HAL_Delay>
	rgb1_set(0,255,0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	21ff      	movs	r1, #255	; 0xff
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ffc7 	bl	8000d38 <rgb1_set>
	HAL_Delay(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fe8e 	bl	8001acc <HAL_Delay>
	rgb1_set(0,0,255);
 8000db0:	22ff      	movs	r2, #255	; 0xff
 8000db2:	2100      	movs	r1, #0
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ffbf 	bl	8000d38 <rgb1_set>
	HAL_Delay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f000 fe86 	bl	8001acc <HAL_Delay>
	rgb1_set(255,0,255);
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	20ff      	movs	r0, #255	; 0xff
 8000dc6:	f7ff ffb7 	bl	8000d38 <rgb1_set>
	HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f000 fe7e 	bl	8001acc <HAL_Delay>
	rgb1_set(0,255,255);
 8000dd0:	22ff      	movs	r2, #255	; 0xff
 8000dd2:	21ff      	movs	r1, #255	; 0xff
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ffaf 	bl	8000d38 <rgb1_set>
	HAL_Delay(100);
 8000dda:	2064      	movs	r0, #100	; 0x64
 8000ddc:	f000 fe76 	bl	8001acc <HAL_Delay>
	rgb1_set(255,255,0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	20ff      	movs	r0, #255	; 0xff
 8000de6:	f7ff ffa7 	bl	8000d38 <rgb1_set>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fdf8 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f8e4 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 fb1a 	bl	8001434 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e00:	f000 faca 	bl	8001398 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000e04:	f000 fa3a 	bl	800127c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e08:	f000 f9c2 	bl	8001190 <MX_TIM2_Init>
  MX_DAC_Init();
 8000e0c:	f000 f996 	bl	800113c <MX_DAC_Init>
  MX_ADC1_Init();
 8000e10:	f000 f942 	bl	8001098 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4865      	ldr	r0, [pc, #404]	; (8000fac <main+0x1bc>)
 8000e18:	f002 fa28 	bl	800326c <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4863      	ldr	r0, [pc, #396]	; (8000fac <main+0x1bc>)
 8000e20:	f002 fa24 	bl	800326c <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e24:	2108      	movs	r1, #8
 8000e26:	4861      	ldr	r0, [pc, #388]	; (8000fac <main+0x1bc>)
 8000e28:	f002 fa20 	bl	800326c <HAL_TIM_PWM_Start>

HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4860      	ldr	r0, [pc, #384]	; (8000fb0 <main+0x1c0>)
 8000e30:	f002 fa1c 	bl	800326c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
rgb1_set_color();
 8000e34:	f7ff ffaa 	bl	8000d8c <rgb1_set_color>


	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==GPIO_PIN_RESET)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	485e      	ldr	r0, [pc, #376]	; (8000fb4 <main+0x1c4>)
 8000e3c:	f001 fd3c 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <main+0x5c>
	  	  	 	  	 			  	  	{wybor=0;}
 8000e46:	4b5c      	ldr	r3, [pc, #368]	; (8000fb8 <main+0x1c8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1)==GPIO_PIN_RESET)
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4859      	ldr	r0, [pc, #356]	; (8000fb4 <main+0x1c4>)
 8000e50:	f001 fd32 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <main+0x70>
	  	  	 	  	  	 			  	{wybor=1;}
 8000e5a:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <main+0x1c8>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2)==GPIO_PIN_RESET)
 8000e60:	2104      	movs	r1, #4
 8000e62:	4854      	ldr	r0, [pc, #336]	; (8000fb4 <main+0x1c4>)
 8000e64:	f001 fd28 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <main+0x84>
	  	  		  	  	  	  	 		{wybor=2;}
 8000e6e:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <main+0x1c8>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)==GPIO_PIN_RESET)
 8000e74:	2108      	movs	r1, #8
 8000e76:	484f      	ldr	r0, [pc, #316]	; (8000fb4 <main+0x1c4>)
 8000e78:	f001 fd1e 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <main+0x98>
	  	  		  	  	 	  	  	 	{wybor=3;}
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <main+0x1c8>)
 8000e84:	2203      	movs	r2, #3
 8000e86:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)==GPIO_PIN_RESET)
 8000e88:	2110      	movs	r1, #16
 8000e8a:	484a      	ldr	r0, [pc, #296]	; (8000fb4 <main+0x1c4>)
 8000e8c:	f001 fd14 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <main+0xac>
	  	  	  	  	  	  	 			{wybor=4;}
 8000e96:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <main+0x1c8>)
 8000e98:	2204      	movs	r2, #4
 8000e9a:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)==GPIO_PIN_RESET)
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4845      	ldr	r0, [pc, #276]	; (8000fb4 <main+0x1c4>)
 8000ea0:	f001 fd0a 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <main+0xc0>
	  	  	  	  	 	  	  	 		{wybor=5;}
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <main+0x1c8>)
 8000eac:	2205      	movs	r2, #5
 8000eae:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==GPIO_PIN_RESET)
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	4840      	ldr	r0, [pc, #256]	; (8000fb4 <main+0x1c4>)
 8000eb4:	f001 fd00 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <main+0xd4>
	  	  	  	  		  	  	  	  	 {wybor=6;}
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <main+0x1c8>)
 8000ec0:	2206      	movs	r2, #6
 8000ec2:	601a      	str	r2, [r3, #0]
	  	  	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)==GPIO_PIN_RESET)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	483b      	ldr	r0, [pc, #236]	; (8000fb4 <main+0x1c4>)
 8000ec8:	f001 fcf6 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <main+0xe8>
	  	  	  	  		  	  	 	  	 {wybor=7;}
 8000ed2:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <main+0x1c8>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]

	  	  switch(wybor)
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <main+0x1c8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d84b      	bhi.n	8000f78 <main+0x188>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <main+0xf8>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000f09 	.word	0x08000f09
 8000eec:	08000f17 	.word	0x08000f17
 8000ef0:	08000f25 	.word	0x08000f25
 8000ef4:	08000f33 	.word	0x08000f33
 8000ef8:	08000f41 	.word	0x08000f41
 8000efc:	08000f4f 	.word	0x08000f4f
 8000f00:	08000f5d 	.word	0x08000f5d
 8000f04:	08000f6b 	.word	0x08000f6b
	  	  	  {				case 0: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET); break;}
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	482b      	ldr	r0, [pc, #172]	; (8000fbc <main+0x1cc>)
 8000f10:	f001 fcea 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f14:	e037      	b.n	8000f86 <main+0x196>
	  	  	  				case 1: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET); break;}
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1c:	4827      	ldr	r0, [pc, #156]	; (8000fbc <main+0x1cc>)
 8000f1e:	f001 fce3 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f22:	e030      	b.n	8000f86 <main+0x196>
	  	  	  				case 2: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET); break;}
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4824      	ldr	r0, [pc, #144]	; (8000fbc <main+0x1cc>)
 8000f2c:	f001 fcdc 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f30:	e029      	b.n	8000f86 <main+0x196>
	  	  	  				case 3: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET); break;}
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	4820      	ldr	r0, [pc, #128]	; (8000fbc <main+0x1cc>)
 8000f3a:	f001 fcd5 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f3e:	e022      	b.n	8000f86 <main+0x196>
	  	  	  	  	  	  	case 4: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET); break;}
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f46:	481d      	ldr	r0, [pc, #116]	; (8000fbc <main+0x1cc>)
 8000f48:	f001 fcce 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f4c:	e01b      	b.n	8000f86 <main+0x196>
				  	  	  	case 5: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET); break;}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <main+0x1cc>)
 8000f56:	f001 fcc7 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f5a:	e014      	b.n	8000f86 <main+0x196>
	  	  					case 6: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET); break;}
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <main+0x1cc>)
 8000f64:	f001 fcc0 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f68:	e00d      	b.n	8000f86 <main+0x196>
	  	  					case 7: { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET); break;}
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <main+0x1cc>)
 8000f72:	f001 fcb9 	bl	80028e8 <HAL_GPIO_WritePin>
 8000f76:	e006      	b.n	8000f86 <main+0x196>
	  	  					default: {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <main+0x1cc>)
 8000f80:	f001 fcb2 	bl	80028e8 <HAL_GPIO_WritePin>
	  	  					break;}
 8000f84:	bf00      	nop

	  	  	  }


	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <main+0x1d0>)
 8000f8c:	f001 fcc5 	bl	800291a <HAL_GPIO_TogglePin>
	  		  			HAL_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f000 fd9a 	bl	8001acc <HAL_Delay>
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <main+0x1d0>)
 8000f9e:	f001 fcbc 	bl	800291a <HAL_GPIO_TogglePin>
	  		  			HAL_Delay(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f000 fd91 	bl	8001acc <HAL_Delay>
rgb1_set_color();
 8000faa:	e743      	b.n	8000e34 <main+0x44>
 8000fac:	20000070 	.word	0x20000070
 8000fb0:	20000110 	.word	0x20000110
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fffa 	bl	8003fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <SystemClock_Config+0xcc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <SystemClock_Config+0xd0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001038:	23a8      	movs	r3, #168	; 0xa8
 800103a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fc81 	bl	8002950 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001054:	f000 faa6 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001064:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2105      	movs	r1, #5
 8001076:	4618      	mov	r0, r3
 8001078:	f001 feda 	bl	8002e30 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001082:	f000 fa8f 	bl	80015a4 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x98>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_ADC1_Init+0xa0>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC1_Init+0x98>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC1_Init+0x98>)
 80010fa:	f000 fd09 	bl	8001b10 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 fa4e 	bl	80015a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x98>)
 800111a:	f000 fe95 	bl	8001e48 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 fa3e 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000b4 	.word	0x200000b4
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_DAC_Init+0x4c>)
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_DAC_Init+0x50>)
 800114e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_DAC_Init+0x4c>)
 8001152:	f001 f9a8 	bl	80024a6 <HAL_DAC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800115c:	f000 fa22 	bl	80015a4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_DAC_Init+0x4c>)
 8001170:	f001 f9bb 	bl	80024ea <HAL_DAC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800117a:	f000 fa13 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000fc 	.word	0x200000fc
 800118c:	40007400 	.word	0x40007400

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011ca:	f640 729f 	movw	r2, #3999	; 0xf9f
 80011ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20999;
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011d8:	f245 2207 	movw	r2, #20999	; 0x5207
 80011dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ea:	4823      	ldr	r0, [pc, #140]	; (8001278 <MX_TIM2_Init+0xe8>)
 80011ec:	f001 ffde 	bl	80031ac <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011f6:	f000 f9d5 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001204:	4619      	mov	r1, r3
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <MX_TIM2_Init+0xe8>)
 8001208:	f002 fa3c 	bl	8003684 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001212:	f000 f9c7 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_TIM2_Init+0xe8>)
 8001218:	f001 fff3 	bl	8003202 <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001222:	f000 f9bf 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	4619      	mov	r1, r3
 8001234:	4810      	ldr	r0, [pc, #64]	; (8001278 <MX_TIM2_Init+0xe8>)
 8001236:	f002 fe15 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001240:	f000 f9b0 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001244:	2360      	movs	r3, #96	; 0x60
 8001246:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM2_Init+0xe8>)
 800125c:	f002 f94c 	bl	80034f8 <HAL_TIM_PWM_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001266:	f000 f99d 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM2_Init+0xe8>)
 800126c:	f000 fab2 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001270:	bf00      	nop
 8001272:	3738      	adds	r7, #56	; 0x38
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000110 	.word	0x20000110

0800127c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ac:	4b38      	ldr	r3, [pc, #224]	; (8001390 <MX_TIM3_Init+0x114>)
 80012ae:	4a39      	ldr	r2, [pc, #228]	; (8001394 <MX_TIM3_Init+0x118>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <MX_TIM3_Init+0x114>)
 80012b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80012b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_TIM3_Init+0x114>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <MX_TIM3_Init+0x114>)
 80012c2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <MX_TIM3_Init+0x114>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_TIM3_Init+0x114>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d4:	482e      	ldr	r0, [pc, #184]	; (8001390 <MX_TIM3_Init+0x114>)
 80012d6:	f001 ff69 	bl	80031ac <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e0:	f000 f960 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4827      	ldr	r0, [pc, #156]	; (8001390 <MX_TIM3_Init+0x114>)
 80012f2:	f002 f9c7 	bl	8003684 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012fc:	f000 f952 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001300:	4823      	ldr	r0, [pc, #140]	; (8001390 <MX_TIM3_Init+0x114>)
 8001302:	f001 ff7e 	bl	8003202 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 f94a 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4619      	mov	r1, r3
 800131e:	481c      	ldr	r0, [pc, #112]	; (8001390 <MX_TIM3_Init+0x114>)
 8001320:	f002 fda0 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800132a:	f000 f93b 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	; 0x60
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4812      	ldr	r0, [pc, #72]	; (8001390 <MX_TIM3_Init+0x114>)
 8001346:	f002 f8d7 	bl	80034f8 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001350:	f000 f928 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2204      	movs	r2, #4
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_TIM3_Init+0x114>)
 800135c:	f002 f8cc 	bl	80034f8 <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001366:	f000 f91d 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2208      	movs	r2, #8
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM3_Init+0x114>)
 8001372:	f002 f8c1 	bl	80034f8 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800137c:	f000 f912 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM3_Init+0x114>)
 8001382:	f000 fa27 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3738      	adds	r7, #56	; 0x38
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000070 	.word	0x20000070
 8001394:	40000400 	.word	0x40000400

08001398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM4_Init+0x94>)
 80013b6:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <MX_TIM4_Init+0x98>)
 80013b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM4_Init+0x94>)
 80013bc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80013c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM4_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM4_Init+0x94>)
 80013ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80013ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM4_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM4_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_TIM4_Init+0x94>)
 80013de:	f001 fee5 	bl	80031ac <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80013e8:	f000 f8dc 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM4_Init+0x94>)
 80013fa:	f002 f943 	bl	8003684 <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 f8ce 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM4_Init+0x94>)
 8001416:	f002 fd25 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 f8c0 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000030 	.word	0x20000030
 8001430:	40000800 	.word	0x40000800

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	4b50      	ldr	r3, [pc, #320]	; (8001590 <MX_GPIO_Init+0x15c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a4f      	ldr	r2, [pc, #316]	; (8001590 <MX_GPIO_Init+0x15c>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <MX_GPIO_Init+0x15c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	4b49      	ldr	r3, [pc, #292]	; (8001590 <MX_GPIO_Init+0x15c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a48      	ldr	r2, [pc, #288]	; (8001590 <MX_GPIO_Init+0x15c>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <MX_GPIO_Init+0x15c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b42      	ldr	r3, [pc, #264]	; (8001590 <MX_GPIO_Init+0x15c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a41      	ldr	r2, [pc, #260]	; (8001590 <MX_GPIO_Init+0x15c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <MX_GPIO_Init+0x15c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a33      	ldr	r2, [pc, #204]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <MX_GPIO_Init+0x15c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014f8:	4826      	ldr	r0, [pc, #152]	; (8001594 <MX_GPIO_Init+0x160>)
 80014fa:	f001 f9f5 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001504:	4824      	ldr	r0, [pc, #144]	; (8001598 <MX_GPIO_Init+0x164>)
 8001506:	f001 f9ef 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <MX_GPIO_Init+0x168>)
 8001512:	f001 f9e9 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001516:	23ff      	movs	r3, #255	; 0xff
 8001518:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	481d      	ldr	r0, [pc, #116]	; (80015a0 <MX_GPIO_Init+0x16c>)
 800152a:	f001 f82b 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800152e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_GPIO_Init+0x160>)
 8001548:	f001 f81c 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800154c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_GPIO_Init+0x164>)
 8001566:	f001 f80d 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800156a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_GPIO_Init+0x168>)
 8001584:	f000 fffe 	bl	8002584 <HAL_GPIO_Init>

}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40020000 	.word	0x40020000
 80015a0:	40021000 	.word	0x40021000

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_MspInit+0x58>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_MspInit+0x58>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x58>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x58>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_MspInit+0x58>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x58>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2005      	movs	r0, #5
 80015f8:	f000 ff1f 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80015fc:	2005      	movs	r0, #5
 80015fe:	f000 ff38 	bl	8002472 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_ADC_MspInit+0x7c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d127      	bne.n	8001682 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_ADC_MspInit+0x80>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166e:	2303      	movs	r3, #3
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <HAL_ADC_MspInit+0x84>)
 800167e:	f000 ff81 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40012000 	.word	0x40012000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_DAC_MspInit+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d127      	bne.n	800170a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_DAC_MspInit+0x80>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_DAC_MspInit+0x80>)
 80016c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_DAC_MspInit+0x80>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_DAC_MspInit+0x80>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_DAC_MspInit+0x80>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_DAC_MspInit+0x80>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f2:	2310      	movs	r3, #16
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_DAC_MspInit+0x84>)
 8001706:	f000 ff3d 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40007400 	.word	0x40007400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800174e:	e036      	b.n	80017be <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_TIM_Base_MspInit+0xac>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d116      	bne.n	8001788 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	201d      	movs	r0, #29
 800177c:	f000 fe5d 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001780:	201d      	movs	r0, #29
 8001782:	f000 fe76 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 8001786:	e01a      	b.n	80017be <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_TIM_Base_MspInit+0xb0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d115      	bne.n	80017be <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_TIM_Base_MspInit+0xa8>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	201e      	movs	r0, #30
 80017b4:	f000 fe41 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017b8:	201e      	movs	r0, #30
 80017ba:	f000 fe5a 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40000800 	.word	0x40000800

080017d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f4:	d11f      	bne.n	8001836 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001824:	2301      	movs	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4825      	ldr	r0, [pc, #148]	; (80018c4 <HAL_TIM_MspPostInit+0xf0>)
 8001830:	f000 fea8 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001834:	e040      	b.n	80018b8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_TIM_MspPostInit+0xf4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d13b      	bne.n	80018b8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6313      	str	r3, [r2, #48]	; 0x30
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_TIM_MspPostInit+0xec>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001878:	2301      	movs	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001888:	2302      	movs	r3, #2
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_TIM_MspPostInit+0xf8>)
 8001894:	f000 fe76 	bl	8002584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001898:	23c0      	movs	r3, #192	; 0xc0
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018a8:	2302      	movs	r3, #2
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <HAL_TIM_MspPostInit+0xfc>)
 80018b4:	f000 fe66 	bl	8002584 <HAL_GPIO_Init>
}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f8b0 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM3_IRQHandler+0x10>)
 8001946:	f001 fccf 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000070 	.word	0x20000070

08001954 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM4_IRQHandler+0x10>)
 800195a:	f001 fcc5 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000030 	.word	0x20000030

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <SystemInit+0x28>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <SystemInit+0x28>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SystemInit+0x28>)
 800197e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001982:	609a      	str	r2, [r3, #8]
#endif
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001998:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800199a:	e003      	b.n	80019a4 <LoopCopyDataInit>

0800199c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800199e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019a2:	3104      	adds	r1, #4

080019a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019ac:	d3f6      	bcc.n	800199c <CopyDataInit>
  ldr  r2, =_sbss
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019b0:	e002      	b.n	80019b8 <LoopFillZerobss>

080019b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019b4:	f842 3b04 	str.w	r3, [r2], #4

080019b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019bc:	d3f9      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019be:	f7ff ffd3 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f002 fadf 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fa13 	bl	8000df0 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019d0:	08004014 	.word	0x08004014
  ldr  r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80019dc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80019e0:	20000154 	.word	0x20000154

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 fd07 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fdca 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fd1f 	bl	800248e <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 fce7 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000004 	.word	0x20000004
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000150 	.word	0x20000150

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000150 	.word	0x20000150

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_Delay+0x40>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	bf00      	nop
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e033      	b.n	8001b8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fd6e 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa92 	bl	800208c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7e:	e001      	b.n	8001b84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Start+0x1a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0a5      	b.n	8001cfe <HAL_ADC_Start+0x166>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d018      	beq.n	8001bfa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_ADC_Start+0x174>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_ADC_Start+0x178>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9a      	lsrs	r2, r3, #18
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d179      	bne.n	8001cfc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f023 0206 	bic.w	r2, r3, #6
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
 8001c54:	e002      	b.n	8001c5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_ADC_Start+0x17c>)
 8001c66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12a      	bne.n	8001cd4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <HAL_ADC_Start+0x180>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d015      	beq.n	8001cb4 <HAL_ADC_Start+0x11c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_ADC_Start+0x184>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_Start+0x106>
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_ADC_Start+0x17c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_ADC_Start+0x188>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d129      	bne.n	8001cfc <HAL_ADC_Start+0x164>
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_ADC_Start+0x17c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d823      	bhi.n	8001cfc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11c      	bne.n	8001cfc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	e013      	b.n	8001cfc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_ADC_Start+0x180>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10e      	bne.n	8001cfc <HAL_ADC_Start+0x164>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cfa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000004 	.word	0x20000004
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	40012300 	.word	0x40012300
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	40012100 	.word	0x40012100
 8001d20:	40012200 	.word	0x40012200

08001d24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d40:	d113      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d50:	d10b      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e05c      	b.n	8001e24 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d6a:	f7ff fea3 	bl	8001ab4 <HAL_GetTick>
 8001d6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d70:	e01a      	b.n	8001da8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d016      	beq.n	8001da8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_ADC_PollForConversion+0x6c>
 8001d80:	f7ff fe98 	bl	8001ab4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d20b      	bcs.n	8001da8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0204 	orr.w	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e03d      	b.n	8001e24 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d1dd      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 0212 	mvn.w	r2, #18
 8001dbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d123      	bne.n	8001e22 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d11f      	bne.n	8001e22 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d111      	bne.n	8001e22 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1c>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e105      	b.n	8002070 <HAL_ADC_ConfigChannel+0x228>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d925      	bls.n	8001ec0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1e      	subs	r3, #30
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43da      	mvns	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	400a      	ands	r2, r1
 8001e98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68d9      	ldr	r1, [r3, #12]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4403      	add	r3, r0
 8001eb2:	3b1e      	subs	r3, #30
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	e022      	b.n	8001f06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6919      	ldr	r1, [r3, #16]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4403      	add	r3, r0
 8001efc:	409a      	lsls	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d824      	bhi.n	8001f58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3b05      	subs	r3, #5
 8001f20:	221f      	movs	r2, #31
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	3b05      	subs	r3, #5
 8001f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34
 8001f56:	e04c      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d824      	bhi.n	8001faa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b23      	subs	r3, #35	; 0x23
 8001f72:	221f      	movs	r2, #31
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b23      	subs	r3, #35	; 0x23
 8001f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa8:	e023      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b41      	subs	r3, #65	; 0x41
 8001fbc:	221f      	movs	r2, #31
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b41      	subs	r3, #65	; 0x41
 8001fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_ADC_ConfigChannel+0x234>)
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_ADC_ConfigChannel+0x238>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d109      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1cc>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b12      	cmp	r3, #18
 8002006:	d105      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_ADC_ConfigChannel+0x238>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d123      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x21e>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d003      	beq.n	800202e <HAL_ADC_ConfigChannel+0x1e6>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b11      	cmp	r3, #17
 800202c:	d11b      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d111      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_ADC_ConfigChannel+0x23c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_ADC_ConfigChannel+0x240>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9a      	lsrs	r2, r3, #18
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000
 8002084:	20000004 	.word	0x20000004
 8002088:	431bde83 	.word	0x431bde83

0800208c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002094:	4b79      	ldr	r3, [pc, #484]	; (800227c <ADC_Init+0x1f0>)
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	021a      	lsls	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <ADC_Init+0x1f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e00f      	b.n	800218a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0202 	bic.w	r2, r2, #2
 8002198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e1b      	ldrb	r3, [r3, #24]
 80021a4:	005a      	lsls	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	035a      	lsls	r2, r3, #13
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	e007      	b.n	8002200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	3b01      	subs	r3, #1
 800221c:	051a      	lsls	r2, r3, #20
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002242:	025a      	lsls	r2, r3, #9
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	029a      	lsls	r2, r3, #10
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40012300 	.word	0x40012300
 8002280:	0f000001 	.word	0x0f000001

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e014      	b.n	80024e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff f8e5 	bl	8001698 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	795b      	ldrb	r3, [r3, #5]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_DAC_ConfigChannel+0x20>
 8002506:	2302      	movs	r3, #2
 8002508:	e036      	b.n	8002578 <HAL_DAC_ConfigChannel+0x8e>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2202      	movs	r2, #2
 8002514:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800251e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	22c0      	movs	r2, #192	; 0xc0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43da      	mvns	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	400a      	ands	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e16b      	b.n	8002878 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 815a 	bne.w	8002872 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d00b      	beq.n	80025de <HAL_GPIO_Init+0x5a>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d2:	2b11      	cmp	r3, #17
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0xfc>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b12      	cmp	r3, #18
 800267e:	d123      	bne.n	80026c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80b4 	beq.w	8002872 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_GPIO_Init+0x308>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a5e      	ldr	r2, [pc, #376]	; (800288c <HAL_GPIO_Init+0x308>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_GPIO_Init+0x308>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002726:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <HAL_GPIO_Init+0x30c>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a51      	ldr	r2, [pc, #324]	; (8002894 <HAL_GPIO_Init+0x310>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <HAL_GPIO_Init+0x226>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <HAL_GPIO_Init+0x314>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	; (800289c <HAL_GPIO_Init+0x318>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x31c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x21a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4d      	ldr	r2, [pc, #308]	; (80028a4 <HAL_GPIO_Init+0x320>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x216>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_GPIO_Init+0x324>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x212>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_GPIO_Init+0x328>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x32c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x20a>
 800278a:	2307      	movs	r3, #7
 800278c:	e00e      	b.n	80027ac <HAL_GPIO_Init+0x228>
 800278e:	2308      	movs	r3, #8
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_Init+0x228>
 8002792:	2306      	movs	r3, #6
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_Init+0x228>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_Init+0x228>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x228>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_Init+0x228>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_Init+0x228>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x228>
 80027aa:	2300      	movs	r3, #0
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027bc:	4934      	ldr	r1, [pc, #208]	; (8002890 <HAL_GPIO_Init+0x30c>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ca:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_GPIO_Init+0x330>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ee:	4a31      	ldr	r2, [pc, #196]	; (80028b4 <HAL_GPIO_Init+0x330>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f4:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_GPIO_Init+0x330>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002818:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <HAL_GPIO_Init+0x330>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_GPIO_Init+0x330>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_GPIO_Init+0x330>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_GPIO_Init+0x330>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_GPIO_Init+0x330>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	f67f ae90 	bls.w	80025a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3724      	adds	r7, #36	; 0x24
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40023800 	.word	0x40023800
 8002890:	40013800 	.word	0x40013800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021800 	.word	0x40021800
 80028b0:	40021c00 	.word	0x40021c00
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e001      	b.n	80028da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	401a      	ands	r2, r3
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	429a      	cmp	r2, r3
 8002932:	d104      	bne.n	800293e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	041a      	lsls	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800293c:	e002      	b.n	8002944 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e25b      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d075      	beq.n	8002a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296e:	4ba3      	ldr	r3, [pc, #652]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00c      	beq.n	8002994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297a:	4ba0      	ldr	r3, [pc, #640]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002982:	2b08      	cmp	r3, #8
 8002984:	d112      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b9d      	ldr	r3, [pc, #628]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002992:	d10b      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	4b99      	ldr	r3, [pc, #612]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05b      	beq.n	8002a58 <HAL_RCC_OscConfig+0x108>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d157      	bne.n	8002a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e236      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_OscConfig+0x74>
 80029b6:	4b91      	ldr	r3, [pc, #580]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a90      	ldr	r2, [pc, #576]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xb0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x98>
 80029ce:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xb0>
 80029e8:	4b84      	ldr	r3, [pc, #528]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a83      	ldr	r2, [pc, #524]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a80      	ldr	r2, [pc, #512]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff f854 	bl	8001ab4 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff f850 	bl	8001ab4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1fb      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xc0>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff f840 	bl	8001ab4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff f83c 	bl	8001ab4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1e7      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0xe8>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b62      	ldr	r3, [pc, #392]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x152>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1bb      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4952      	ldr	r1, [pc, #328]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCC_OscConfig+0x2b0>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fff5 	bl	8001ab4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe fff1 	bl	8001ab4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e19c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4940      	ldr	r1, [pc, #256]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_OscConfig+0x2b0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe ffd4 	bl	8001ab4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b10:	f7fe ffd0 	bl	8001ab4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e17b      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d030      	beq.n	8002b9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_RCC_OscConfig+0x2b4>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fe ffb4 	bl	8001ab4 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe ffb0 	bl	8001ab4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e15b      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x200>
 8002b6e:	e015      	b.n	8002b9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_OscConfig+0x2b4>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ff9d 	bl	8001ab4 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7fe ff99 	bl	8001ab4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e144      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a0 	beq.w	8002cea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x2b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d121      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCC_OscConfig+0x2b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_RCC_OscConfig+0x2b8>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe ff5f 	bl	8001ab4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e011      	b.n	8002c1e <HAL_RCC_OscConfig+0x2ce>
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
 8002c08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe ff52 	bl	8001ab4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0fd      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b81      	ldr	r3, [pc, #516]	; (8002e24 <HAL_RCC_OscConfig+0x4d4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
 8002c32:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a7c      	ldr	r2, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCC_OscConfig+0x32a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x312>
 8002c48:	4b77      	ldr	r3, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a76      	ldr	r2, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a73      	ldr	r2, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x32a>
 8002c62:	4b71      	ldr	r3, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a70      	ldr	r2, [pc, #448]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	4b6e      	ldr	r3, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a6d      	ldr	r2, [pc, #436]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe ff17 	bl	8001ab4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe ff13 	bl	8001ab4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0bc      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <HAL_RCC_OscConfig+0x33a>
 8002cac:	e014      	b.n	8002cd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fe ff01 	bl	8001ab4 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fefd 	bl	8001ab4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0a6      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4b52      	ldr	r3, [pc, #328]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a51      	ldr	r2, [pc, #324]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8092 	beq.w	8002e18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d05c      	beq.n	8002dba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d141      	bne.n	8002d8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <HAL_RCC_OscConfig+0x4dc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fed1 	bl	8001ab4 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe fecd 	bl	8001ab4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e078      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d28:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	019b      	lsls	r3, r3, #6
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	4933      	ldr	r1, [pc, #204]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5e:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCC_OscConfig+0x4dc>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fea6 	bl	8001ab4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fea2 	bl	8001ab4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04d      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x41c>
 8002d8a:	e045      	b.n	8002e18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCC_OscConfig+0x4dc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fe8f 	bl	8001ab4 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fe8b 	bl	8001ab4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e036      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x44a>
 8002db8:	e02e      	b.n	8002e18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e029      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_RCC_OscConfig+0x4d8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d115      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d10d      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40007000 	.word	0x40007000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470060 	.word	0x42470060

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fdc8 	bl	8001ab4 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fdc4 	bl	8001ab4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	fa21 f303 	lsr.w	r3, r1, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fd28 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08003ff4 	.word	0x08003ff4
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	20000008 	.word	0x20000008

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d007      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x32>
 800301e:	2b08      	cmp	r3, #8
 8003020:	d008      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x38>
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 80b4 	bne.w	8003190 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800302a:	60bb      	str	r3, [r7, #8]
       break;
 800302c:	e0b3      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003030:	60bb      	str	r3, [r7, #8]
      break;
 8003032:	e0b0      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b5a      	ldr	r3, [pc, #360]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303e:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d04a      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	f04f 0400 	mov.w	r4, #0
 8003054:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	ea03 0501 	and.w	r5, r3, r1
 8003060:	ea04 0602 	and.w	r6, r4, r2
 8003064:	4629      	mov	r1, r5
 8003066:	4632      	mov	r2, r6
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	0154      	lsls	r4, r2, #5
 8003072:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003076:	014b      	lsls	r3, r1, #5
 8003078:	4619      	mov	r1, r3
 800307a:	4622      	mov	r2, r4
 800307c:	1b49      	subs	r1, r1, r5
 800307e:	eb62 0206 	sbc.w	r2, r2, r6
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f04f 0400 	mov.w	r4, #0
 800308a:	0194      	lsls	r4, r2, #6
 800308c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003090:	018b      	lsls	r3, r1, #6
 8003092:	1a5b      	subs	r3, r3, r1
 8003094:	eb64 0402 	sbc.w	r4, r4, r2
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	00e2      	lsls	r2, r4, #3
 80030a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030a6:	00d9      	lsls	r1, r3, #3
 80030a8:	460b      	mov	r3, r1
 80030aa:	4614      	mov	r4, r2
 80030ac:	195b      	adds	r3, r3, r5
 80030ae:	eb44 0406 	adc.w	r4, r4, r6
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	0262      	lsls	r2, r4, #9
 80030bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030c0:	0259      	lsls	r1, r3, #9
 80030c2:	460b      	mov	r3, r1
 80030c4:	4614      	mov	r4, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	4621      	mov	r1, r4
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f04f 0400 	mov.w	r4, #0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	f7fd fc6e 	bl	80009b4 <__aeabi_uldivmod>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e049      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	f04f 0400 	mov.w	r4, #0
 80030ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	ea03 0501 	and.w	r5, r3, r1
 80030f6:	ea04 0602 	and.w	r6, r4, r2
 80030fa:	4629      	mov	r1, r5
 80030fc:	4632      	mov	r2, r6
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f04f 0400 	mov.w	r4, #0
 8003106:	0154      	lsls	r4, r2, #5
 8003108:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800310c:	014b      	lsls	r3, r1, #5
 800310e:	4619      	mov	r1, r3
 8003110:	4622      	mov	r2, r4
 8003112:	1b49      	subs	r1, r1, r5
 8003114:	eb62 0206 	sbc.w	r2, r2, r6
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	f04f 0400 	mov.w	r4, #0
 8003120:	0194      	lsls	r4, r2, #6
 8003122:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003126:	018b      	lsls	r3, r1, #6
 8003128:	1a5b      	subs	r3, r3, r1
 800312a:	eb64 0402 	sbc.w	r4, r4, r2
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800313c:	00d9      	lsls	r1, r3, #3
 800313e:	460b      	mov	r3, r1
 8003140:	4614      	mov	r4, r2
 8003142:	195b      	adds	r3, r3, r5
 8003144:	eb44 0406 	adc.w	r4, r4, r6
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	02a2      	lsls	r2, r4, #10
 8003152:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003156:	0299      	lsls	r1, r3, #10
 8003158:	460b      	mov	r3, r1
 800315a:	4614      	mov	r4, r2
 800315c:	4618      	mov	r0, r3
 800315e:	4621      	mov	r1, r4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	461a      	mov	r2, r3
 8003168:	4623      	mov	r3, r4
 800316a:	f7fd fc23 	bl	80009b4 <__aeabi_uldivmod>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	3301      	adds	r3, #1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	60bb      	str	r3, [r7, #8]
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003192:	60bb      	str	r3, [r7, #8]
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	68bb      	ldr	r3, [r7, #8]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e01d      	b.n	80031fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe faa4 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fb2a 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e01d      	b.n	8003250 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f815 	bl	8003258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 faff 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2201      	movs	r2, #1
 800327c:	6839      	ldr	r1, [r7, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fdca 	bl	8003e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <HAL_TIM_PWM_Start+0x74>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIM_PWM_Start+0x2c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_TIM_PWM_Start+0x78>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_TIM_PWM_Start+0x30>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_TIM_PWM_Start+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d007      	beq.n	80032d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d122      	bne.n	8003344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d11b      	bne.n	8003344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0202 	mvn.w	r2, #2
 8003314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fa6b 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa5d 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fa6e 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0204 	mvn.w	r2, #4
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa41 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fa33 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa44 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0208 	mvn.w	r2, #8
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa17 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fa09 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fa1a 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0210 	mvn.w	r2, #16
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2208      	movs	r2, #8
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f9ed 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f9df 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f9f0 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0201 	mvn.w	r2, #1
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fc26 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fd6c 	bl	8003f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9b5 	bl	800382e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0220 	mvn.w	r2, #32
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fd36 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800350e:	2302      	movs	r3, #2
 8003510:	e0b4      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	f200 809f 	bhi.w	8003668 <HAL_TIM_PWM_ConfigChannel+0x170>
 800352a:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003565 	.word	0x08003565
 8003534:	08003669 	.word	0x08003669
 8003538:	08003669 	.word	0x08003669
 800353c:	08003669 	.word	0x08003669
 8003540:	080035a5 	.word	0x080035a5
 8003544:	08003669 	.word	0x08003669
 8003548:	08003669 	.word	0x08003669
 800354c:	08003669 	.word	0x08003669
 8003550:	080035e7 	.word	0x080035e7
 8003554:	08003669 	.word	0x08003669
 8003558:	08003669 	.word	0x08003669
 800355c:	08003669 	.word	0x08003669
 8003560:	08003627 	.word	0x08003627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fa0a 	bl	8003984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0208 	orr.w	r2, r2, #8
 800357e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0204 	bic.w	r2, r2, #4
 800358e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	619a      	str	r2, [r3, #24]
      break;
 80035a2:	e062      	b.n	800366a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa5a 	bl	8003a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6999      	ldr	r1, [r3, #24]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	021a      	lsls	r2, r3, #8
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	619a      	str	r2, [r3, #24]
      break;
 80035e4:	e041      	b.n	800366a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 faaf 	bl	8003b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0208 	orr.w	r2, r2, #8
 8003600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0204 	bic.w	r2, r2, #4
 8003610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69d9      	ldr	r1, [r3, #28]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	61da      	str	r2, [r3, #28]
      break;
 8003624:	e021      	b.n	800366a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fb03 	bl	8003c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69d9      	ldr	r1, [r3, #28]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	021a      	lsls	r2, r3, #8
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	61da      	str	r2, [r3, #28]
      break;
 8003666:	e000      	b.n	800366a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003668:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIM_ConfigClockSource+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e0a6      	b.n	80037ea <HAL_TIM_ConfigClockSource+0x166>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d067      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0x120>
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d80b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x6c>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d073      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0x140>
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d802      	bhi.n	80036e6 <HAL_TIM_ConfigClockSource+0x62>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d06f      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036e4:	e078      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d06c      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0x140>
 80036ea:	2b30      	cmp	r3, #48	; 0x30
 80036ec:	d06a      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036ee:	e073      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d00d      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x8c>
 80036f4:	2b70      	cmp	r3, #112	; 0x70
 80036f6:	d804      	bhi.n	8003702 <HAL_TIM_ConfigClockSource+0x7e>
 80036f8:	2b50      	cmp	r3, #80	; 0x50
 80036fa:	d033      	beq.n	8003764 <HAL_TIM_ConfigClockSource+0xe0>
 80036fc:	2b60      	cmp	r3, #96	; 0x60
 80036fe:	d041      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003700:	e06a      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	d066      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x152>
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d017      	beq.n	800373e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800370e:	e063      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f000 fb5a 	bl	8003dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003732:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]
      break;
 800373c:	e04c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6899      	ldr	r1, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f000 fb43 	bl	8003dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003760:	609a      	str	r2, [r3, #8]
      break;
 8003762:	e039      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	461a      	mov	r2, r3
 8003772:	f000 fab7 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2150      	movs	r1, #80	; 0x50
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fb10 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003782:	e029      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	461a      	mov	r2, r3
 8003792:	f000 fad6 	bl	8003d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2160      	movs	r1, #96	; 0x60
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fb00 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 80037a2:	e019      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f000 fa97 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 faf0 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 80037c2:	e009      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fae7 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80037d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <TIM_Base_SetConfig+0x118>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <TIM_Base_SetConfig+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <TIM_Base_SetConfig+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_Base_SetConfig+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <TIM_Base_SetConfig+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0x130>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0x134>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM_Base_SetConfig+0x138>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <TIM_Base_SetConfig+0x13c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40001800 	.word	0x40001800
 800397c:	40001c00 	.word	0x40001c00
 8003980:	40002000 	.word	0x40002000

08003984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 0302 	bic.w	r3, r3, #2
 80039cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <TIM_OC1_SetConfig+0xd8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_OC1_SetConfig+0x64>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <TIM_OC1_SetConfig+0xdc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0308 	bic.w	r3, r3, #8
 80039ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <TIM_OC1_SetConfig+0xd8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC1_SetConfig+0x8e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <TIM_OC1_SetConfig+0xdc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d111      	bne.n	8003a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0210 	bic.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0320 	bic.w	r3, r3, #32
 8003aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <TIM_OC2_SetConfig+0xe4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_OC2_SetConfig+0x68>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10d      	bne.n	8003ae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <TIM_OC2_SetConfig+0xe4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC2_SetConfig+0x94>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d113      	bne.n	8003b20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010400 	.word	0x40010400

08003b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <TIM_OC3_SetConfig+0xe0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_OC3_SetConfig+0x66>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <TIM_OC3_SetConfig+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10d      	bne.n	8003bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <TIM_OC3_SetConfig+0xe0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC3_SetConfig+0x92>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <TIM_OC3_SetConfig+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d113      	bne.n	8003c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	621a      	str	r2, [r3, #32]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400

08003c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <TIM_OC4_SetConfig+0xa4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC4_SetConfig+0x68>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a11      	ldr	r2, [pc, #68]	; (8003ce0 <TIM_OC4_SetConfig+0xa8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d109      	bne.n	8003cb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 030a 	bic.w	r3, r3, #10
 8003d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b087      	sub	sp, #28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f043 0307 	orr.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e05a      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d01d      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	4e0d      	ldr	r6, [pc, #52]	; (8003fbc <__libc_init_array+0x38>)
 8003f88:	4c0d      	ldr	r4, [pc, #52]	; (8003fc0 <__libc_init_array+0x3c>)
 8003f8a:	1ba4      	subs	r4, r4, r6
 8003f8c:	10a4      	asrs	r4, r4, #2
 8003f8e:	2500      	movs	r5, #0
 8003f90:	42a5      	cmp	r5, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	4e0b      	ldr	r6, [pc, #44]	; (8003fc4 <__libc_init_array+0x40>)
 8003f96:	4c0c      	ldr	r4, [pc, #48]	; (8003fc8 <__libc_init_array+0x44>)
 8003f98:	f000 f820 	bl	8003fdc <_init>
 8003f9c:	1ba4      	subs	r4, r4, r6
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	42a5      	cmp	r5, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fac:	4798      	blx	r3
 8003fae:	3501      	adds	r5, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb6:	4798      	blx	r3
 8003fb8:	3501      	adds	r5, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	0800400c 	.word	0x0800400c
 8003fc0:	0800400c 	.word	0x0800400c
 8003fc4:	0800400c 	.word	0x0800400c
 8003fc8:	08004010 	.word	0x08004010

08003fcc <memset>:
 8003fcc:	4402      	add	r2, r0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <memset+0xa>
 8003fd4:	4770      	bx	lr
 8003fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fda:	e7f9      	b.n	8003fd0 <memset+0x4>

08003fdc <_init>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr

08003fe8 <_fini>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr
